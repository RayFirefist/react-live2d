!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("react")):"function"==typeof define&&define.amd?define(["react"],e):"object"==typeof exports?exports.live2d=e(require("react")):t.live2d=e(t.React)}(window,(function(t){return function(t){var e={};function i(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,i),o.l=!0,o.exports}return i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(r,o,function(e){return t[e]}.bind(null,o));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=19)}([function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(4),o=i(21),n=i(14),s=i(2),a=r.Live2DCubismFramework.Value,u=o.Live2DCubismFramework.CubismIdManager,l=n.Live2DCubismFramework.CubismRenderer;e.strtod=function(t,e){for(var i=0,r=1;;r++){var o=t.slice(r-1,r);if("e"!=o&&"-"!=o&&"E"!=o){var n=t.substring(0,r),s=Number(n);if(isNaN(s))break;i=r}}var a=parseFloat(t);return isNaN(a)&&(a=NaN),e[0]=t.slice(i),a},function(t){var e=!1,i=!1,r=null,o=null;!function(t){t.vertexOffset=0,t.vertexStep=2}(t.Constant||(t.Constant={})),t.csmDelete=function(t){t&&(t=void 0)};var n=function(){function t(){}return t.startUp=function(t){if(void 0===t&&(t=null),e)return s.CubismLogInfo("CubismFramework.startUp() is already done."),e;if(null!=(r=t)&&Live2DCubismCore.Logging.csmSetLogFunction(r.logFunction),e=!0){var i=Live2DCubismCore.Version.csmGetVersion(),o=(4278190080&i)>>24,n=(16711680&i)>>16,a=65535&i,u=i;s.CubismLogInfo("Live2D Cubism Core version: {0}.{1}.{2} ({3})",("00"+o).slice(-2),("00"+n).slice(-2),("0000"+a).slice(-4),u)}return s.CubismLogInfo("CubismFramework.startUp() is complete."),e},t.cleanUp=function(){e=!1,i=!1,r=null,o=null},t.initialize=function(){s.CSM_ASSERT(e),e?i?s.CubismLogWarning("CubismFramework.initialize() skipped, already initialized."):(a.staticInitializeNotForClientCall(),o=new u,i=!0,s.CubismLogInfo("CubismFramework.initialize() is complete.")):s.CubismLogWarning("CubismFramework is not started.")},t.dispose=function(){s.CSM_ASSERT(e),e?i?(a.staticReleaseNotForClientCall(),o.release(),o=null,l.staticRelease(),i=!1,s.CubismLogInfo("CubismFramework.dispose() is complete.")):s.CubismLogWarning("CubismFramework.dispose() skipped, not initialized."):s.CubismLogWarning("CubismFramework is not started.")},t.isStarted=function(){return e},t.isInitialized=function(){return i},t.coreLogFunction=function(t){Live2DCubismCore.Logging.csmGetLogFunction()&&Live2DCubismCore.Logging.csmGetLogFunction()(t)},t.getLoggingLevel=function(){return null!=r?r.loggingLevel:h.LogLevel_Off},t.getIdManager=function(){return o},t}();t.CubismFramework=n}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}));var h,p=function(){};e.Option=p,function(t){t[t.LogLevel_Verbose=0]="LogLevel_Verbose",t[t.LogLevel_Debug=1]="LogLevel_Debug",t[t.LogLevel_Info=2]="LogLevel_Info",t[t.LogLevel_Warning=3]="LogLevel_Warning",t[t.LogLevel_Error=4]="LogLevel_Error",t[t.LogLevel_Off=5]="LogLevel_Off"}(h=e.LogLevel||(e.LogLevel={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){var e=function(){function t(t){void 0===t&&(t=0),t<1?(this._ptr=[],this._capacity=0,this._size=0):(this._ptr=new Array(t),this._capacity=t,this._size=0)}return t.prototype.at=function(t){return this._ptr[t]},t.prototype.set=function(t,e){this._ptr[t]=e},t.prototype.get=function(t){void 0===t&&(t=0);for(var e=new Array,i=t;i<this._size;i++)e.push(this._ptr[i]);return e},t.prototype.pushBack=function(e){this._size>=this._capacity&&this.prepareCapacity(0==this._capacity?t.s_defaultSize:2*this._capacity),this._ptr[this._size++]=e},t.prototype.clear=function(){this._ptr.length=0,this._size=0},t.prototype.getSize=function(){return this._size},t.prototype.assign=function(t,e){this._size<t&&this.prepareCapacity(t);for(var i=0;i<t;i++)this._ptr[i]=e;this._size=t},t.prototype.resize=function(t,e){void 0===e&&(e=null),this.updateSize(t,e,!0)},t.prototype.updateSize=function(t,e,i){if(void 0===e&&(e=null),void 0===i&&(i=!0),this._size<t)if(this.prepareCapacity(t),i)for(var r=this._size;r<t;r++)this._ptr[r]="function"==typeof e?JSON.parse(JSON.stringify(new e)):e;else for(r=this._size;r<t;r++)this._ptr[r]=e;else{var o=this._size-t;this._ptr.splice(this._size-o,o)}this._size=t},t.prototype.insert=function(t,e,i){var r=t._index,o=e._index,n=i._index,s=n-o;this.prepareCapacity(this._size+s);var a=this._size-r;if(a>0)for(var u=0;u<a;u++)this._ptr.splice(r+u,0,null);for(u=o;u<n;u++,r++)this._ptr[r]=e._vector._ptr[u];this._size=this._size+s},t.prototype.remove=function(t){return!(t<0||this._size<=t)&&(this._ptr.splice(t,1),--this._size,!0)},t.prototype.erase=function(t){var e=t._index;return e<0||this._size<=e?t:(this._ptr.splice(e,1),--this._size,new i(this,e))},t.prototype.prepareCapacity=function(t){t>this._capacity&&(0==this._capacity?(this._ptr=new Array(t),this._capacity=t):(this._ptr.length=t,this._capacity=t))},t.prototype.begin=function(){return 0==this._size?this.end():new i(this,0)},t.prototype.end=function(){return new i(this,this._size)},t.prototype.getOffset=function(e){var i=new t;return i._ptr=this.get(e),i._size=this.get(e).length,i._capacity=this.get(e).length,i},t.s_defaultSize=10,t}();t.csmVector=e;var i=function(){function t(t,e){this._vector=null!=t?t:null,this._index=null!=e?e:0}return t.prototype.set=function(t){return this._index=t._index,this._vector=t._vector,this},t.prototype.preIncrement=function(){return++this._index,this},t.prototype.preDecrement=function(){return--this._index,this},t.prototype.increment=function(){var e=new t(this._vector,this._index++);return this._vector=e._vector,this._index=e._index,this},t.prototype.decrement=function(){var e=new t(this._vector,this._index--);return this._vector=e._vector,this._index=e._index,this},t.prototype.ptr=function(){return this._vector._ptr[this._index]},t.prototype.substitution=function(t){return this._index=t._index,this._vector=t._vector,this},t.prototype.notEqual=function(t){return this._index!=t._index||this._vector!=t._vector},t}();t.iterator=i}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=i(0),n=i(20);e.CubismLogPrint=function(t,e,i){r.CubismDebug.print(t,"[CSM]"+e,i)},e.CubismLogPrintIn=function(t,i,r){e.CubismLogPrint(t,i+"\n",r)},e.CSM_ASSERT=function(t){console.assert(t)},n.CSM_LOG_LEVEL<=n.CSM_LOG_LEVEL_VERBOSE?(e.CubismLogVerbose=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];e.CubismLogPrintIn(o.LogLevel.LogLevel_Verbose,"[V]"+t,i)},e.CubismLogDebug=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];e.CubismLogPrintIn(o.LogLevel.LogLevel_Debug,"[D]"+t,i)},e.CubismLogInfo=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];e.CubismLogPrintIn(o.LogLevel.LogLevel_Info,"[I]"+t,i)},e.CubismLogWarning=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];e.CubismLogPrintIn(o.LogLevel.LogLevel_Warning,"[W]"+t,i)},e.CubismLogError=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];e.CubismLogPrintIn(o.LogLevel.LogLevel_Error,"[E]"+t,i)}):n.CSM_LOG_LEVEL==n.CSM_LOG_LEVEL_DEBUG?(e.CubismLogDebug=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];e.CubismLogPrintIn(o.LogLevel.LogLevel_Debug,"[D]"+t,i)},e.CubismLogInfo=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];e.CubismLogPrintIn(o.LogLevel.LogLevel_Info,"[I]"+t,i)},e.CubismLogWarning=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];e.CubismLogPrintIn(o.LogLevel.LogLevel_Warning,"[W]"+t,i)},e.CubismLogError=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];e.CubismLogPrintIn(o.LogLevel.LogLevel_Error,"[E]"+t,i)}):n.CSM_LOG_LEVEL==n.CSM_LOG_LEVEL_INFO?(e.CubismLogInfo=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];e.CubismLogPrintIn(o.LogLevel.LogLevel_Info,"[I]"+t,i)},e.CubismLogWarning=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];e.CubismLogPrintIn(o.LogLevel.LogLevel_Warning,"[W]"+t,i)},e.CubismLogError=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];e.CubismLogPrintIn(o.LogLevel.LogLevel_Error,"[E]"+t,i)}):n.CSM_LOG_LEVEL==n.CSM_LOG_LEVEL_WARNING?(e.CubismLogWarning=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];e.CubismLogPrintIn(o.LogLevel.LogLevel_Warning,"[W]"+t,i)},e.CubismLogError=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];e.CubismLogPrintIn(o.LogLevel.LogLevel_Error,"[E]"+t,i)}):n.CSM_LOG_LEVEL==n.CSM_LOG_LEVEL_ERROR&&(e.CubismLogError=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];e.CubismLogPrintIn(o.LogLevel.LogLevel_Error,"[E]"+t,i)}),function(t){var e=function(){function t(){}return t.print=function(t,e,i){if(!(t<o.Live2DCubismFramework.CubismFramework.getLoggingLevel())){var r=o.Live2DCubismFramework.CubismFramework.coreLogFunction;if(r)r(e.replace(/\{(\d+)\}/g,(function(t,e){return i[e]})))}},t.dumpBytes=function(t,e,i){for(var r=0;r<i;r++)r%16==0&&r>0?this.print(t,"\n"):r%8==0&&r>0&&this.print(t,"  "),this.print(t,"{0} ",[255&e[r]]);this.print(t,"\n")},t}();t.CubismDebug=e}(r=e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";var r=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});var o=i(0),n=o.Live2DCubismFramework.CubismFramework,s=i(23),a=i(12),u=i(50),l=i(15),h=r(i(5));e.canvas=null,e.s_instance=null,e.gl=null,e.frameBuffer=null;var p=function(){function t(){this._captured=!1,this._mouseX=0,this._mouseY=0,this._isEnd=!1,this._cubismOption=new o.Option,this._view=new s.LAppView,this._textureManager=new u.LAppTextureManager}return t.getInstance=function(){return null==e.s_instance&&(e.s_instance=new t),e.s_instance},t.releaseInstance=function(){console.log("releaseInstance"),null!=e.s_instance&&e.s_instance.release(),e.s_instance=null},t.prototype.initialize=function(){return e.canvas=document.getElementById("live2d"),document.addEventListener("mousemove",(function(e){if(t.getInstance()._view){var i=document.getElementById("live2d").getBoundingClientRect(),r=e.clientX-i.left,o=e.clientY-i.top;t.getInstance()._view.onTouchesMoved(r,o)}else a.LAppPal.printMessage("view notfound")}),!1),document.addEventListener("mouseout",(function(t){l.LAppLive2DManager.getInstance().onDrag(0,0)}),!1),e.canvas.addEventListener("click",(function(i){if(t.getInstance()._view){var r=e.canvas.getBoundingClientRect(),o=i.clientX-r.left,n=i.clientY-r.top;t.getInstance()._view.onTouchesBegan(o,n),t.getInstance()._view.onTouchesEnded(o,n)}else a.LAppPal.printMessage("view notfound")}),!1),e.gl=e.canvas.getContext("webgl")||e.canvas.getContext("experimental-webgl"),e.gl?(e.frameBuffer||(e.frameBuffer=e.gl.getParameter(e.gl.FRAMEBUFFER_BINDING)),e.gl.enable(e.gl.BLEND),e.gl.blendFunc(e.gl.SRC_ALPHA,e.gl.ONE_MINUS_SRC_ALPHA),"ontouchend"in e.canvas&&(e.canvas.ontouchstart=g,e.canvas.ontouchmove=c,e.canvas.ontouchend=d,e.canvas.ontouchcancel=_),this._view.initialize(),this.initializeCubism(),!0):(alert("Cannot initialize WebGL. This browser does not support."),e.gl=null,document.body.innerHTML="This browser does not support the <code>&lt;canvas&gt;</code> element.",!1)},t.prototype.release=function(){this._textureManager.release(),this._textureManager=null,this._view.release(),this._view=null,l.LAppLive2DManager.releaseInstance(),n.dispose()},t.prototype.run=function(){var t=this;console.log("run");var i=function(){null!=e.s_instance&&(a.LAppPal.updateTime(),e.gl.clearColor(0,0,0,0),e.gl.enable(e.gl.DEPTH_TEST),e.gl.depthFunc(e.gl.LEQUAL),e.gl.clear(e.gl.COLOR_BUFFER_BIT|e.gl.DEPTH_BUFFER_BIT),e.gl.clearDepth(1),e.gl.enable(e.gl.BLEND),e.gl.blendFunc(e.gl.SRC_ALPHA,e.gl.ONE_MINUS_SRC_ALPHA),t._view.render(),requestAnimationFrame(i))};i()},t.prototype.createShader=function(){var t=e.gl.createShader(e.gl.VERTEX_SHADER);if(null==t)return a.LAppPal.printMessage("failed to create vertexShader"),null;e.gl.shaderSource(t,"precision mediump float;attribute vec3 position;attribute vec2 uv;varying vec2 vuv;void main(void){   gl_Position = vec4(position, 1.0);   vuv = uv;}"),e.gl.compileShader(t);var i=e.gl.createShader(e.gl.FRAGMENT_SHADER);if(null==i)return a.LAppPal.printMessage("failed to create fragmentShader"),null;e.gl.shaderSource(i,"precision mediump float;varying vec2 vuv;uniform sampler2D texture;void main(void){   gl_FragColor = texture2D(texture, vuv);}"),e.gl.compileShader(i);var r=e.gl.createProgram();return e.gl.attachShader(r,t),e.gl.attachShader(r,i),e.gl.deleteShader(t),e.gl.deleteShader(i),e.gl.linkProgram(r),e.gl.useProgram(r),r},t.prototype.getView=function(){return this._view},t.prototype.getTextureManager=function(){return this._textureManager},t.prototype.initializeCubism=function(){this._cubismOption.logFunction=a.LAppPal.printMessage,this._cubismOption.loggingLevel=h.CubismLoggingLevel,n.startUp(this._cubismOption),n.initialize(),l.LAppLive2DManager.getInstance(),a.LAppPal.updateTime(),this._view.initializeSprite()},t}();function g(t){if(p.getInstance()._view){p.getInstance()._captured=!0;var e=t.changedTouches[0].pageX,i=t.changedTouches[0].pageY;p.getInstance()._view.onTouchesBegan(e,i)}else a.LAppPal.printMessage("view notfound")}function c(t){if(p.getInstance()._captured)if(p.getInstance()._view){var e=t.target.getBoundingClientRect(),i=t.changedTouches[0].clientX-e.left,r=t.changedTouches[0].clientY-e.top;p.getInstance()._view.onTouchesMoved(i,r)}else a.LAppPal.printMessage("view notfound")}function d(t){if(p.getInstance()._captured=!1,p.getInstance()._view){var e=t.target.getBoundingClientRect(),i=t.changedTouches[0].clientX-e.left,r=t.changedTouches[0].clientY-e.top;p.getInstance()._view.onTouchesEnded(i,r)}else a.LAppPal.printMessage("view notfound")}function _(t){if(p.getInstance()._captured=!1,p.getInstance()._view){var e=t.target.getBoundingClientRect(),i=t.changedTouches[0].clientX-e.left,r=t.changedTouches[0].clientY-e.top;p.getInstance()._view.onTouchesEnded(i,r)}else a.LAppPal.printMessage("view notfound")}e.LAppDelegate=p},function(t,e,i){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var n=i(7),s=i(8),a=i(1),u=i(2),l=i(0),h=a.Live2DCubismFramework.csmVector,p=s.Live2DCubismFramework.csmMap,g=n.Live2DCubismFramework.csmString;!function(t){var e=function(){function t(){}return t.prototype.getRawString=function(t,e){return this.getString(t,e)},t.prototype.toInt=function(t){return void 0===t&&(t=0),t},t.prototype.toFloat=function(t){return void 0===t&&(t=0),t},t.prototype.toBoolean=function(t){return void 0===t&&(t=!1),t},t.prototype.getSize=function(){return 0},t.prototype.getArray=function(t){return void 0===t&&(t=null),t},t.prototype.getVector=function(t){return t},t.prototype.getMap=function(t){return t},t.prototype.getValueByIndex=function(e){return t.errorValue.setErrorNotForClientCall("Error: type mismatch")},t.prototype.getValueByString=function(e){return t.nullValue.setErrorNotForClientCall("Error: type mismatch")},t.prototype.getKeys=function(){return t.s_dummyKeys},t.prototype.isError=function(){return!1},t.prototype.isNull=function(){return!1},t.prototype.isBool=function(){return!1},t.prototype.isFloat=function(){return!1},t.prototype.isString=function(){return!1},t.prototype.isArray=function(){return!1},t.prototype.isMap=function(){return!1},t.prototype.equals=function(t){return!1},t.prototype.isStatic=function(){return!1},t.prototype.setErrorNotForClientCall=function(t){return a.errorValue},t.staticInitializeNotForClientCall=function(){n.trueValue=new n(!0),n.falseValue=new n(!1),a.errorValue=new a("ERROR",!0),this.nullValue=new c,t.s_dummyKeys=new h},t.staticReleaseNotForClientCall=function(){n.trueValue=null,n.falseValue=null,a.errorValue=null,t.nullValue=null,t.s_dummyKeys=null,n.trueValue=null,n.falseValue=null,a.errorValue=null,t.nullValue=null,t.s_dummyKeys=null},t}();t.Value=e;var i=function(){function t(t,e){this._error=null,this._lineCount=0,this._root=null,null!=t&&this.parseBytes(t,e)}return t.create=function(e,i){var r=new t;return r.parseBytes(e,i)?r:(t.delete(r),null)},t.delete=function(t){null},t.prototype.getRoot=function(){return this._root},t.prototype.arrayBufferToString=function(t){for(var e=new Uint8Array(t),i="",r=0,o=e.length;r<o;++r)i+="%"+this.pad(e[r].toString(16));return i=decodeURIComponent(i)},t.prototype.pad=function(t){return t.length<2?"0"+t:t},t.prototype.parseBytes=function(t,e){var i=new Array(1),r=this.arrayBufferToString(t);if(this._root=this.parseValue(r,e,0,i),this._error){var o;return o="Json parse error : @line "+(this._lineCount+1)+"\n",this._root=new s(o),u.CubismLogInfo("{0}",this._root.getRawString()),!1}return null!=this._root||(this._root=new a(new g(this._error),!1),!1)},t.prototype.getParseError=function(){return this._error},t.prototype.checkEndOfFile=function(){return this._root.getArray()[1].equals("EOF")},t.prototype.parseValue=function(t,e,i,o){if(this._error)return null;for(var a,u=null,h=i;h<e;h++){switch(t[h]){case"-":case".":case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":var p=new Array(1);return a=l.strtod(t.slice(h),p),o[0]=t.indexOf(p[0]),new r(a);case'"':return new s(this.parseString(t,e,h+1,o));case"[":return u=this.parseArray(t,e,h+1,o);case"{":return u=this.parseObject(t,e,h+1,o);case"n":return h+3<e?(u=new c,o[0]=h+4):this._error="parse null",u;case"t":return h+3<e?(u=n.trueValue,o[0]=h+4):this._error="parse true",u;case"f":return h+4<e?(u=n.falseValue,o[0]=h+5):this._error="illegal ',' position",u;case",":return this._error="illegal ',' position",null;case"]":return o[0]=h,null;case"\n":this._lineCount++}}return this._error="illegal end of value",null},t.prototype.parseString=function(t,e,i,r){if(this._error)return null;for(var o=i,n=new g(""),s=i;o<e;o++)switch(t[o]){case'"':return r[0]=o+1,n.append(t.slice(s),o-s),n.s;case"//":if(++o-1>s&&n.append(t.slice(s),o-s),s=o+1,o<e)switch(t[o]){case"\\":n.expansion(1,"\\");break;case'"':n.expansion(1,'"');break;case"/":n.expansion(1,"/");break;case"b":n.expansion(1,"\b");break;case"f":n.expansion(1,"\f");break;case"n":n.expansion(1,"\n");break;case"r":n.expansion(1,"\r");break;case"t":n.expansion(1,"\t");break;case"u":this._error="parse string/unicord escape not supported"}else this._error="parse string/escape error"}return this._error="parse string/illegal end",null},t.prototype.parseObject=function(t,e,i,r){if(this._error)return null;for(var o=new _,n="",s=i,a=Array(1),u=!1;s<e;s++){t:for(;s<e;s++)switch(t[s]){case'"':if(n=this.parseString(t,e,s+1,a),this._error)return null;s=a[0],u=!0;break t;case"}":return r[0]=s+1,o;case":":this._error="illegal ':' position";break;case"\n":this._lineCount++}if(!u)return this._error="key not found",null;u=!1;t:for(;s<e;s++)switch(t[s]){case":":u=!0,s++;break t;case"}":this._error="illegal '}' position";break;case"\n":this._lineCount++}if(!u)return this._error="':' not found",null;var l=this.parseValue(t,e,s,a);if(this._error)return null;s=a[0],o.put(n,l);t:for(;s<e;s++)switch(t[s]){case",":break t;case"}":return r[0]=s+1,o;case"\n":this._lineCount++}}return this._error="illegal end of perseObject",null},t.prototype.parseArray=function(t,e,i,r){if(this._error)return null;for(var o=new d,n=i,s=new Array(1);n<e;n++){var a=this.parseValue(t,e,n,s);if(this._error)return null;n=s[0],a&&o.add(a);t:for(;n<e;n++)switch(t[n]){case",":break t;case"]":return r[0]=n+1,o;case"\n":++this._lineCount}}return o=void 0,this._error="illegal end of parseObject",null},t}();t.CubismJson=i;var r=function(t){function e(e){var i=t.call(this)||this;return i._value=e,i}return o(e,t),e.prototype.isFloat=function(){return!0},e.prototype.getString=function(t,e){return this._value=parseFloat("\0"),this._stringBuffer="\0",this._stringBuffer},e.prototype.toInt=function(t){return void 0===t&&(t=0),parseInt(this._value.toString())},e.prototype.toFloat=function(t){return void 0===t&&(t=0),this._value},e.prototype.equals=function(t){return"number"==typeof t&&(!Math.round(t)&&t==this._value)},e}(e);t.JsonFloat=r;var n=function(t){function e(e){var i=t.call(this)||this;return i._boolValue=e,i}return o(e,t),e.prototype.isBool=function(){return!0},e.prototype.toBoolean=function(t){return void 0===t&&(t=!1),this._boolValue},e.prototype.getString=function(t,e){return this._stringBuffer=this._boolValue?"true":"false",this._stringBuffer},e.prototype.equals=function(t){return"boolean"==typeof t&&t==this._boolValue},e.prototype.isStatic=function(){return!0},e}(e);t.JsonBoolean=n;var s=function(t){function e(e){var i=t.call(this)||this;return"string"==typeof e&&(i._stringBuffer=e),e instanceof g&&(i._stringBuffer=e.s),i}return o(e,t),e.prototype.isString=function(){return!0},e.prototype.getString=function(t,e){return this._stringBuffer},e.prototype.equals=function(t){return"string"==typeof t?this._stringBuffer==t:t instanceof g&&this._stringBuffer==t.s},e}(e);t.JsonString=s;var a=function(t){function e(e,i){var r=this;return(r=t.call(this,e)||this)._isStatic=i,r}return o(e,t),e.prototype.isStatic=function(){return this._isStatic},e.prototype.setErrorNotForClientCall=function(t){return this._stringBuffer=t,this},e.prototype.isError=function(){return!0},e}(s);t.JsonError=a;var c=function(t){function e(){var e=t.call(this)||this;return e._stringBuffer="NullValue",e}return o(e,t),e.prototype.isNull=function(){return!0},e.prototype.getString=function(t,e){return this._stringBuffer},e.prototype.isStatic=function(){return!0},e}(e);t.JsonNullvalue=c;var d=function(t){function i(){var e=t.call(this)||this;return e._array=new h,e}return o(i,t),i.prototype.release=function(){for(var t=this._array.begin();t.notEqual(this._array.end());t.preIncrement()){var e=t.ptr();e&&!e.isStatic()&&(e=void 0,e=null)}},i.prototype.isArray=function(){return!0},i.prototype.getValueByIndex=function(t){if(t<0||this._array.getSize()<=t)return e.errorValue.setErrorNotForClientCall("Error: index out of bounds");var i=this._array.at(t);return null==i?e.nullValue:i},i.prototype.getValueByString=function(t){return e.errorValue.setErrorNotForClientCall("Error: type mismatch")},i.prototype.getString=function(t,e){for(var i=e+"[\n",r=this._array.begin();r.notEqual(this._array.end());r.increment()){var o=r.ptr();this._stringBuffer+=e+""+o.getString(e+" ")+"\n"}return this._stringBuffer=i+e+"]\n",this._stringBuffer},i.prototype.add=function(t){this._array.pushBack(t)},i.prototype.getVector=function(t){return void 0===t&&(t=null),this._array},i.prototype.getSize=function(){return this._array.getSize()},i}(e);t.JsonArray=d;var _=function(t){function i(){var e=t.call(this)||this;return e._map=new p,e}return o(i,t),i.prototype.release=function(){for(var t=this._map.begin();t.notEqual(this._map.end());){var e=t.ptr().second;e&&!e.isStatic()&&(e=void 0,e=null),t.preIncrement()}},i.prototype.isMap=function(){return!0},i.prototype.getValueByString=function(t){if(t instanceof g){var i=this._map.getValue(t.s);return null==i?e.nullValue:i}for(var r=this._map.begin();r.notEqual(this._map.end());r.preIncrement())if(r.ptr().first==t)return null==r.ptr().second?e.nullValue:r.ptr().second;return e.nullValue},i.prototype.getValueByIndex=function(t){return e.errorValue.setErrorNotForClientCall("Error: type mismatch")},i.prototype.getString=function(t,e){this._stringBuffer=e+"{\n";for(var i=this._map.begin();i.notEqual(this._map.end());){var r=i.ptr().first,o=i.ptr().second;this._stringBuffer+=e+" "+r+" : "+o.getString(e+"   ")+" \n",i.preIncrement()}return this._stringBuffer+=e+"}\n",this._stringBuffer},i.prototype.getMap=function(t){return this._map},i.prototype.put=function(t,e){this._map.setValue(t,e)},i.prototype.getKeys=function(){if(!this._keys){this._keys=new h;for(var t=this._map.begin();t.notEqual(this._map.end());){var e=t.ptr().first;this._keys.pushBack(e),t.preIncrement()}}return this._keys},i.prototype.getSize=function(){return this._keys.getSize()},i}(e);t.JsonMap=_}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(0);e.ViewMaxScale=2,e.ViewMinScale=.8,e.ViewLogicalLeft=-1,e.ViewLogicalRight=1,e.ViewLogicalMaxLeft=-2,e.ViewLogicalMaxRight=2,e.ViewLogicalMaxBottom=-2,e.ViewLogicalMaxTop=2,e.ResourcesPath="./Resources/",e.BackImageName="back_class_normal.png",e.GearImageName="icon_gear.png",e.PowerImageName="CloseNormal.png",e.ModelDir=["Hiyori","Haru","Rice"],e.ModelDirSize=e.ModelDir.length,e.MotionGroupIdle="Idle",e.MotionGroupTapBody="TapBody",e.HitAreaNameHead="Head",e.HitAreaNameBody="Body",e.PriorityNone=0,e.PriorityIdle=1,e.PriorityNormal=2,e.PriorityForce=3,e.DebugLogEnable=!0,e.DebugTouchLogEnable=!1,e.CubismLoggingLevel=r.LogLevel.LogLevel_Verbose,e.RenderTargetWidth=1900,e.RenderTargetHeight=1e3;var o=function(){function t(){}return t.setModelDir=function(t){e.ModelDir=t.length>0?t:e.ModelDir},t}();e.lappdefineSet=o},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){var e=function(){function t(){this._tr=new Float32Array(16),this.loadIdentity()}return t.multiply=function(t,e,i){for(var r=new Float32Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),o=0;o<4;++o)for(var n=0;n<4;++n)for(var s=0;s<4;++s)r[n+4*o]+=t[s+4*o]*e[n+4*s];for(o=0;o<16;++o)i[o]=r[o]},t.prototype.loadIdentity=function(){var t=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);this.setMatrix(t)},t.prototype.setMatrix=function(t){for(var e=0;e<16;++e)this._tr[e]=t[e]},t.prototype.getArray=function(){return this._tr},t.prototype.getScaleX=function(){return this._tr[0]},t.prototype.getScaleY=function(){return this._tr[5]},t.prototype.getTranslateX=function(){return this._tr[12]},t.prototype.getTranslateY=function(){return this._tr[13]},t.prototype.transformX=function(t){return this._tr[0]*t+this._tr[12]},t.prototype.transformY=function(t){return this._tr[5]*t+this._tr[13]},t.prototype.invertTransformX=function(t){return(t-this._tr[12])/this._tr[0]},t.prototype.invertTransformY=function(t){return(t-this._tr[13])/this._tr[5]},t.prototype.translateRelative=function(e,i){var r=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,e,i,0,1]);t.multiply(r,this._tr,this._tr)},t.prototype.translate=function(t,e){this._tr[12]=t,this._tr[13]=e},t.prototype.translateX=function(t){this._tr[12]=t},t.prototype.translateY=function(t){this._tr[13]=t},t.prototype.scaleRelative=function(e,i){var r=new Float32Array([e,0,0,0,0,i,0,0,0,0,1,0,0,0,0,1]);t.multiply(r,this._tr,this._tr)},t.prototype.scale=function(t,e){this._tr[0]=t,this._tr[5]=e},t.prototype.multiplyByMatrix=function(e){t.multiply(e.getArray(),this._tr,this._tr)},t.prototype.clone=function(){for(var e=new t,i=0;i<this._tr.length;i++)e._tr[i]=this._tr[i];return e},t}();t.CubismMatrix44=e}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){var e=function(){function t(t){this.s=t}return t.prototype.append=function(t,e){return this.s+=void 0!==e?t.substr(0,e):t,this},t.prototype.expansion=function(t,e){for(var i=0;i<t;i++)this.append(e);return this},t.prototype.getBytes=function(){return encodeURIComponent(this.s).replace(/%../g,"x").length},t.prototype.getLength=function(){return this.s.length},t.prototype.isLess=function(t){return this.s<t.s},t.prototype.isGreat=function(t){return this.s>t.s},t.prototype.isEqual=function(t){return this.s==t},t.prototype.isEmpty=function(){return 0==this.s.length},t}();t.csmString=e}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(2);!function(t){var e=function(t,e){this.first=null==t?null:t,this.second=null==e?null:e};t.csmPair=e;var i=function(){function t(t){null!=t?t<1?(this._keyValues=[],this._dummyValue=null,this._size=0):(this._keyValues=new Array(t),this._size=t):(this._keyValues=[],this._dummyValue=null,this._size=0)}return t.prototype.release=function(){this.clear()},t.prototype.appendKey=function(t){this.prepareCapacity(this._size+1,!1),this._keyValues[this._size]=new e(t),this._size+=1},t.prototype.getValue=function(t){for(var e=-1,i=0;i<this._size;i++)if(this._keyValues[i].first==t){e=i;break}return e>=0?this._keyValues[e].second:(this.appendKey(t),this._keyValues[this._size-1].second)},t.prototype.setValue=function(t,e){for(var i=-1,r=0;r<this._size;r++)if(this._keyValues[r].first==t){i=r;break}i>=0?this._keyValues[i].second=e:(this.appendKey(t),this._keyValues[this._size-1].second=e)},t.prototype.isExist=function(t){for(var e=0;e<this._size;e++)if(this._keyValues[e].first==t)return!0;return!1},t.prototype.clear=function(){this._keyValues=void 0,this._keyValues=null,this._keyValues=[],this._size=0},t.prototype.getSize=function(){return this._size},t.prototype.prepareCapacity=function(e,i){e>this._keyValues.length&&(0==this._keyValues.length?(!i&&e<t.DefaultSize&&(e=t.DefaultSize),this._keyValues.length=e):(!i&&e<2*this._keyValues.length&&(e=2*this._keyValues.length),this._keyValues.length=e))},t.prototype.begin=function(){return new o(this,0)},t.prototype.end=function(){return new o(this,this._size)},t.prototype.erase=function(t){var e=t._index;return e<0||this._size<=e?t:(this._keyValues.splice(e,1),--this._size,new o(this,e))},t.prototype.dumpAsInt=function(){for(var t=0;t<this._size;t++)r.CubismLogDebug("{0} ,",this._keyValues[t]),r.CubismLogDebug("\n")},t.DefaultSize=10,t}();t.csmMap=i;var o=function(){function t(t,e){this._map=null!=t?t:new i,this._index=null!=e?e:0}return t.prototype.set=function(t){return this._index=t._index,this._map=t._map,this},t.prototype.preIncrement=function(){return++this._index,this},t.prototype.preDecrement=function(){return--this._index,this},t.prototype.increment=function(){var e=new t(this._map,this._index++);return this._map=e._map,this._index=e._index,this},t.prototype.decrement=function(){var e=new t(this._map,this._index);return this._map=e._map,this._index=e._index,this},t.prototype.ptr=function(){return this._map._keyValues[this._index]},t.prototype.notEqual=function(t){return this._index!=t._index||this._map!=t._map},t}();t.iterator=o}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(10),o=i(1),n=i(2),s=o.Live2DCubismFramework.csmVector,a=r.Live2DCubismFramework.CubismMath;!function(t){var e=function(){function t(){var t=this;this.setFinishedMotionHandler=function(e){return t._onFinishedMotion=e},this.getFinishedMotionHandler=function(){return t._onFinishedMotion},this._fadeInSeconds=-1,this._fadeOutSeconds=-1,this._weight=1,this._offsetSeconds=0,this._firedEventValues=new s}return t.delete=function(t){t.release(),t=void 0,t=null},t.prototype.release=function(){this._weight=0},t.prototype.updateParameters=function(t,e,i){if(e.isAvailable()&&!e.isFinished()){if(!e.isStarted()){e.setIsStarted(!0),e.setStartTime(i-this._offsetSeconds),e.setFadeInStartTime(i);var r=this.getDuration();e.getEndTime()<0&&e.setEndTime(r<=0?-1:e.getStartTime()+r)}var o=this._weight;o=o*(0==this._fadeInSeconds?1:a.getEasingSine((i-e.getFadeInStartTime())/this._fadeInSeconds))*(0==this._fadeOutSeconds||e.getEndTime()<0?1:a.getEasingSine((e.getEndTime()-i)/this._fadeOutSeconds)),e.setState(i,o),n.CSM_ASSERT(0<=o&&o<=1),this.doUpdateParameters(t,i,o,e),e.getEndTime()>0&&e.getEndTime()<i&&e.setIsFinished(!0)}},t.prototype.setFadeInTime=function(t){this._fadeInSeconds=t},t.prototype.setFadeOutTime=function(t){this._fadeOutSeconds=t},t.prototype.getFadeOutTime=function(){return this._fadeOutSeconds},t.prototype.getFadeInTime=function(){return this._fadeInSeconds},t.prototype.setWeight=function(t){this._weight=t},t.prototype.getWeight=function(){return this._weight},t.prototype.getDuration=function(){return-1},t.prototype.getLoopDuration=function(){return-1},t.prototype.setOffsetTime=function(t){this._offsetSeconds=t},t.prototype.getFiredEvent=function(t,e){return this._firedEventValues},t}();t.ACubismMotion=e}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(11).Live2DCubismFramework.CubismVector2;!function(t){var e=function(){function t(){}return t.range=function(t,e,i){return t<e?t=e:t>i&&(t=i),t},t.sin=function(t){return Math.sin(t)},t.cos=function(t){return Math.cos(t)},t.abs=function(t){return Math.abs(t)},t.sqrt=function(t){return Math.sqrt(t)},t.getEasingSine=function(t){return t<0?0:t>1?1:.5-.5*this.cos(t*Math.PI)},t.max=function(t,e){return t>e?t:e},t.min=function(t,e){return t>e?e:t},t.degreesToRadian=function(t){return t/180*Math.PI},t.radianToDegrees=function(t){return 180*t/Math.PI},t.directionToRadian=function(t,e){for(var i=Math.atan2(e.y,e.x)-Math.atan2(t.y,t.x);i<-Math.PI;)i+=2*Math.PI;for(;i>Math.PI;)i-=2*Math.PI;return i},t.directionToDegrees=function(t,e){var i=this.directionToRadian(t,e),r=this.radianToDegrees(i);return e.x-t.x>0&&(r=-r),r},t.radianToDirection=function(t){var e=new r;return e.x=this.sin(t),e.y=this.cos(t),e},t}();t.CubismMath=e}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){var e=function(){function t(t,e){this.x=t,this.y=e,this.x=null==t?0:t,this.y=null==e?0:e}return t.prototype.add=function(e){var i=new t(0,0);return i.x=this.x+e.x,i.y=this.y+e.y,i},t.prototype.substract=function(e){var i=new t(0,0);return i.x=this.x-e.x,i.y=this.y-e.y,i},t.prototype.multiply=function(e){var i=new t(0,0);return i.x=this.x*e.x,i.y=this.y*e.y,i},t.prototype.multiplyByScaler=function(e){return this.multiply(new t(e,e))},t.prototype.division=function(e){var i=new t(0,0);return i.x=this.x/e.x,i.y=this.y/e.y,i},t.prototype.divisionByScalar=function(e){return this.division(new t(e,e))},t.prototype.getLength=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},t.prototype.getDistanceWith=function(t){return Math.sqrt((this.x-t.x)*(this.x-t.x)+(this.y-t.y)*(this.y-t.y))},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.normalize=function(){var t=Math.pow(this.x*this.x+this.y*this.y,.5);this.x=this.x/t,this.y=this.y/t},t.prototype.isEqual=function(t){return this.x==t.x&&this.y==t.y},t.prototype.isNotEqual=function(t){return!this.isEqual(t)},t}();t.CubismVector2=e}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){}return t.loadFileAsBytes=function(t,e){fetch(t).then((function(t){return t.arrayBuffer()})).then((function(t){return e(t,t.byteLength)}))},t.getDeltaTime=function(){return this.s_deltaTime},t.updateTime=function(){this.s_currentFrame=Date.now(),this.s_deltaTime=(this.s_currentFrame-this.s_lastFrame)/1e3,this.s_lastFrame=this.s_currentFrame},t.printMessage=function(t){console.log(t)},t.lastUpdate=Date.now(),t.s_currentFrame=0,t.s_lastFrame=0,t.s_deltaTime=0,t}();e.LAppPal=r},function(e,i){e.exports=t},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(6).Live2DCubismFramework.CubismMatrix44;!function(t){var e=function(){function t(){this._isCulling=!1,this._isPremultipliedAlpha=!1,this._anisortopy=0,this._model=null,this._modelColor=new i,this._mvpMatrix4x4=new r,this._mvpMatrix4x4.loadIdentity()}return t.create=function(){return null},t.delete=function(t){null},t.prototype.initialize=function(t){this._model=t},t.prototype.drawModel=function(){null!=this.getModel()&&this.doDrawModel()},t.prototype.setMvpMatrix=function(t){this._mvpMatrix4x4.setMatrix(t.getArray())},t.prototype.getMvpMatrix=function(){return this._mvpMatrix4x4},t.prototype.setModelColor=function(t,e,i,r){t<0?t=0:t>1&&(t=1),e<0?e=0:e>1&&(e=1),i<0?i=0:i>1&&(i=1),r<0?r=0:r>1&&(r=1),this._modelColor.R=t,this._modelColor.G=e,this._modelColor.B=i,this._modelColor.A=r},t.prototype.getModelColor=function(){return JSON.parse(JSON.stringify(this._modelColor))},t.prototype.setIsPremultipliedAlpha=function(t){this._isPremultipliedAlpha=t},t.prototype.isPremultipliedAlpha=function(){return this._isPremultipliedAlpha},t.prototype.setIsCulling=function(t){this._isCulling=t},t.prototype.isCulling=function(){return this._isCulling},t.prototype.setAnisotropy=function(t){this._anisortopy=t},t.prototype.getAnisotropy=function(){return this._anisortopy},t.prototype.getModel=function(){return this._model},t}();t.CubismRenderer=e,function(t){t[t.CubismBlendMode_Normal=0]="CubismBlendMode_Normal",t[t.CubismBlendMode_Additive=1]="CubismBlendMode_Additive",t[t.CubismBlendMode_Multiplicative=2]="CubismBlendMode_Multiplicative"}(t.CubismBlendMode||(t.CubismBlendMode={}));var i=function(){this.R=1,this.G=1,this.B=1,this.A=1};t.CubismTextureColor=i}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";var r=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});var o=i(6),n=i(1).Live2DCubismFramework.csmVector,s=o.Live2DCubismFramework.CubismMatrix44,a=i(26),u=i(12),l=i(3),h=r(i(5));e.s_instance=null;var p=function(){function t(){this._finishedMotion=function(t){u.LAppPal.printMessage("Motion Finished:"),console.log(t)},this._viewMatrix=new s,this._models=new n,this._sceneIndex=0,this.changeScene(this._sceneIndex)}return t.getInstance=function(){return null==e.s_instance&&(e.s_instance=new t),e.s_instance},t.releaseInstance=function(){null!=e.s_instance&&(e.s_instance=void 0),e.s_instance=null},t.prototype.getModel=function(t){return t<this._models.getSize()?this._models.at(t):null},t.prototype.releaseAllModel=function(){for(var t=0;t<this._models.getSize();t++)this._models.at(t).release(),this._models.set(t,null);this._models.clear()},t.prototype.onDrag=function(t,e){for(var i=0;i<this._models.getSize();i++){var r=this.getModel(i);r&&r.setDragging(t,e)}},t.prototype.onTap=function(t,e){h.DebugLogEnable&&u.LAppPal.printMessage("[APP]tap point: {x: "+t.toFixed(2)+" y: "+e.toFixed(2)+"}");for(var i=0;i<this._models.getSize();i++)this._models.at(i).hitTest(h.HitAreaNameHead,t,e)?(h.DebugLogEnable&&u.LAppPal.printMessage("[APP]hit area: ["+h.HitAreaNameHead+"]"),this._models.at(i).setRandomExpression()):this._models.at(i).hitTest(h.HitAreaNameBody,t,e)&&(h.DebugLogEnable&&u.LAppPal.printMessage("[APP]hit area: ["+h.HitAreaNameBody+"]"),this._models.at(i).startRandomMotion(h.MotionGroupTapBody,h.PriorityNormal,this._finishedMotion))},t.prototype.onUpdate=function(){var t=new s,e=l.canvas.width,i=l.canvas.height;t.scale(1,e/i),null!=this._viewMatrix&&t.multiplyByMatrix(this._viewMatrix);for(var r=t.clone(),o=this._models.getSize(),n=0;n<o;++n){var a=this.getModel(n);t=r.clone(),a.update(),a.draw(t)}},t.prototype.nextScene=function(){var t=(this._sceneIndex+1)%h.ModelDirSize;this.changeScene(t)},t.prototype.changeScene=function(t){this._sceneIndex=t,h.DebugLogEnable&&u.LAppPal.printMessage("[APP]model index: "+this._sceneIndex);var e=h.ModelDir[t],i=h.ResourcesPath+e+"/";console.log("LAppDefine.ResourcesPath",h.ResourcesPath),console.log("model",e);var r=h.ModelDir[t];r+=".model3.json",this.releaseAllModel(),this._models.pushBack(new a.LAppModel),this._models.at(0).loadAssets(i,r)},t}();e.LAppLive2DManager=p},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(29),o=i(1).Live2DCubismFramework.csmVector,n=r.Live2DCubismFramework.CubismMotionQueueEntry;!function(t){var e=function(){function e(){this._userTimeSeconds=0,this._eventCallBack=null,this._eventCustomData=null,this._motions=new o}return e.prototype.release=function(){for(var t=0;t<this._motions.getSize();++t)this._motions.at(t)&&(this._motions.at(t).release(),this._motions.set(t,void 0),this._motions.set(t,null));this._motions=null},e.prototype.startMotion=function(e,i,r){if(null==e)return t.InvalidMotionQueueEntryHandleValue;for(var o=null,s=0;s<this._motions.getSize();++s)null!=(o=this._motions.at(s))&&o.startFadeout(o._motion.getFadeOutTime(),r);return(o=new n)._autoDelete=i,o._motion=e,this._motions.pushBack(o),o._motionQueueEntryHandle},e.prototype.isFinished=function(){for(var t=this._motions.begin();t.notEqual(this._motions.end());){var e=t.ptr();if(null!=e)if(null!=e._motion){if(!e.isFinished())return!1;t.preIncrement()}else e.release(),e=void 0,e=null,t=this._motions.erase(t);else t=this._motions.erase(t)}return!0},e.prototype.isFinishedByHandle=function(t){for(var e=this._motions.begin();e.notEqual(this._motions.end());e.increment()){var i=e.ptr();if(null!=i&&(i._motionQueueEntryHandle==t&&!i.isFinished()))return!1}return!0},e.prototype.stopAllMotions=function(){for(var t=this._motions.begin();t.notEqual(this._motions.end());){var e=t.ptr();null!=e?(e.release(),e=void 0,e=null,t=this._motions.erase(t)):t=this._motions.erase(t)}},e.prototype.getCubismMotionQueueEntry=function(t){for(var e=this._motions.begin();e.notEqual(this._motions.end());e.preIncrement()){var i=e.ptr();if(null!=i&&i._motionQueueEntryHandle==t)return i}return null},e.prototype.setEventCallback=function(t,e){void 0===e&&(e=null),this._eventCallBack=t,this._eventCustomData=e},e.prototype.doUpdateMotion=function(t,e){for(var i=!1,r=this._motions.begin();r.notEqual(this._motions.end());){var o=r.ptr();if(null!=o){var n=o._motion;if(null!=n){n.updateParameters(t,o,e),i=!0;for(var s=n.getFiredEvent(o.getLastCheckEventTime()-o.getStartTime(),e-o.getStartTime()),a=0;a<s.getSize();++a)this._eventCallBack(this,s.at(a),this._eventCustomData);o.setLastCheckEventTime(e),o.isFinished()?(o.release(),o=void 0,o=null,r=this._motions.erase(r)):r.preIncrement()}else o.release(),o=void 0,o=null,r=this._motions.erase(r)}else r=this._motions.erase(r)}return i},e}();t.CubismMotionQueueManager=e,t.InvalidMotionQueueEntryHandleValue=-1}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){var e=function(){function t(){this._currentTime=0}return t.create=function(){return new t},t.delete=function(t){null!=t&&(t=null)},t.prototype.setParameters=function(t){this._breathParameters=t},t.prototype.getParameters=function(){return this._breathParameters},t.prototype.updateParameters=function(t,e){this._currentTime+=e;for(var i=2*this._currentTime*3.14159,r=0;r<this._breathParameters.getSize();++r){var o=this._breathParameters.at(r);t.addParameterValueById(o.parameterId,o.offset+o.peak*Math.sin(i/o.cycle),o.weight)}},t}();t.CubismBreath=e;var i=function(t,e,i,r,o){this.parameterId=null==t?null:t,this.offset=null==e?0:e,this.peak=null==i?0:i,this.cycle=null==r?0:r,this.weight=null==o?0:o};t.BreathParameterData=i}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(1).Live2DCubismFramework.csmVector;!function(t){var e,i=function(){function t(t){if(this._blinkingState=e.EyeState_First,this._nextBlinkingTime=0,this._stateStartTimeSeconds=0,this._blinkingIntervalSeconds=4,this._closingSeconds=.1,this._closedSeconds=.05,this._openingSeconds=.15,this._userTimeSeconds=0,this._parameterIds=new r,null!=t)for(var i=0;i<t.getEyeBlinkParameterCount();++i)this._parameterIds.pushBack(t.getEyeBlinkParameterId(i))}return t.create=function(e){return void 0===e&&(e=null),new t(e)},t.delete=function(t){null!=t&&(t=null)},t.prototype.setBlinkingInterval=function(t){this._blinkingIntervalSeconds=t},t.prototype.setBlinkingSetting=function(t,e,i){this._closingSeconds=t,this._closedSeconds=e,this._openingSeconds=i},t.prototype.setParameterIds=function(t){this._parameterIds=t},t.prototype.getParameterIds=function(){return this._parameterIds},t.prototype.updateParameters=function(i,r){var o;this._userTimeSeconds+=r;var n=0;switch(this._blinkingState){case e.EyeState_Closing:(n=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._closingSeconds)>=1&&(n=1,this._blinkingState=e.EyeState_Closed,this._stateStartTimeSeconds=this._userTimeSeconds),o=1-n;break;case e.EyeState_Closed:(n=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._closedSeconds)>=1&&(this._blinkingState=e.EyeState_Opening,this._stateStartTimeSeconds=this._userTimeSeconds),o=0;break;case e.EyeState_Opening:(n=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._openingSeconds)>=1&&(n=1,this._blinkingState=e.EyeState_Interval,this._nextBlinkingTime=this.determinNextBlinkingTiming()),o=n;break;case e.EyeState_Interval:this._nextBlinkingTime<this._userTimeSeconds&&(this._blinkingState=e.EyeState_Closing,this._stateStartTimeSeconds=this._userTimeSeconds),o=1;break;case e.EyeState_First:default:this._blinkingState=e.EyeState_Interval,this._nextBlinkingTime=this.determinNextBlinkingTiming(),o=1}t.CloseIfZero||(o=-o);for(var s=0;s<this._parameterIds.getSize();++s)i.setParameterValueById(this._parameterIds.at(s),o)},t.prototype.determinNextBlinkingTiming=function(){var t=Math.random();return this._userTimeSeconds+t*(2*this._blinkingIntervalSeconds-1)},t.CloseIfZero=!0,t}();t.CubismEyeBlink=i,function(t){t[t.EyeState_First=0]="EyeState_First",t[t.EyeState_Interval=1]="EyeState_Interval",t[t.EyeState_Closing=2]="EyeState_Closing",t[t.EyeState_Closed=3]="EyeState_Closed",t[t.EyeState_Opening=4]="EyeState_Opening"}(e=t.EyeState||(t.EyeState={}))}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";i.r(e);var r=i(3),o=i(5),n=i(13),s=i.n(n);e.default=function(t){var e={position:"relative",top:t.top?t.top:"",right:t.right?t.right:"0",bottom:t.bottom?t.bottom:"0",left:t.left?t.left:""};return Object(n.useEffect)((function(){console.log("props",t),t.ModelList?o.lappdefineSet.setModelDir(t.ModelList):o.lappdefineSet.setModelDir([]),0!=r.LAppDelegate.getInstance().initialize()&&(r.LAppDelegate.getInstance().run(),window.onbeforeunload=function(){return r.LAppDelegate.releaseInstance()})}),[]),s.a.createElement("div",null,s.a.createElement("canvas",{id:"live2d",style:e,width:t.width?t.width:"300",height:t.height?t.height:"400",className:"live2d"}))}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CSM_LOG_LEVEL_VERBOSE=0,e.CSM_LOG_LEVEL_DEBUG=1,e.CSM_LOG_LEVEL_INFO=2,e.CSM_LOG_LEVEL_WARNING=3,e.CSM_LOG_LEVEL_ERROR=4,e.CSM_LOG_LEVEL_OFF=5,e.CSM_LOG_LEVEL=e.CSM_LOG_LEVEL_VERBOSE},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(1),o=i(22).Live2DCubismFramework.CubismId,n=r.Live2DCubismFramework.csmVector;!function(t){var e=function(){function t(){this._ids=new n}return t.prototype.release=function(){for(var t=0;t<this._ids.getSize();++t)this._ids.set(t,void 0);this._ids=null},t.prototype.registerIds=function(t){for(var e=0;e<t.length;e++)this.registerId(t[e])},t.prototype.registerId=function(t){var e=null;return"string"!=typeof t?this.registerId(t.s):null!=(e=this.findId(t))?e:(e=new o(t),this._ids.pushBack(e),e)},t.prototype.getId=function(t){return this.registerId(t)},t.prototype.isExist=function(t){return"string"==typeof t?null!=this.findId(t):this.isExist(t.s)},t.prototype.findId=function(t){for(var e=0;e<this._ids.getSize();++e)if(this._ids.at(e).getString().isEqual(t))return this._ids.at(e);return null},t}();t.CubismIdManager=e}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(7).Live2DCubismFramework.csmString;!function(t){var e=function(){function t(t){this._id="string"!=typeof t?t:new r(t)}return t.prototype.getString=function(){return this._id},t.prototype.isEqual=function(e){return"string"==typeof e?this._id.isEqual(e):e instanceof r?this._id.isEqual(e.s):e instanceof t&&this._id.isEqual(e._id.s)},t.prototype.isNotEqual=function(e){return"string"==typeof e?!this._id.isEqual(e):e instanceof r?!this._id.isEqual(e.s):e instanceof t&&!this._id.isEqual(e._id.s)},t}();t.CubismId=e}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";var r=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});var o=i(6),n=i(24).Live2DCubismFramework.CubismViewMatrix,s=o.Live2DCubismFramework.CubismMatrix44,a=i(25),u=i(15),l=i(3),h=i(12),p=r(i(5)),g=function(){function t(){this._programId=null,this._back=null,this._gear=null,this._touchManager=new a.TouchManager,this._deviceToScreen=new s,this._viewMatrix=new n}return t.prototype.initialize=function(){var t=l.canvas.width,e=l.canvas.height,i=e/t,r=p.ViewLogicalLeft,o=p.ViewLogicalRight,n=-i,s=i;this._viewMatrix.setScreenRect(r,o,n,s);var a=Math.abs(r-o);this._deviceToScreen.scaleRelative(a/t,-a/t),this._deviceToScreen.translateRelative(.5*-t,.5*-e),this._viewMatrix.setMaxScale(p.ViewMaxScale),this._viewMatrix.setMinScale(p.ViewMinScale),this._viewMatrix.setMaxScreenRect(p.ViewLogicalMaxLeft,p.ViewLogicalMaxRight,p.ViewLogicalMaxBottom,p.ViewLogicalMaxTop)},t.prototype.release=function(){this._viewMatrix=null,this._touchManager=null,this._deviceToScreen=null,this._gear.release(),this._gear=null,this._back.release(),this._back=null,l.gl.deleteProgram(this._programId),this._programId=null},t.prototype.render=function(){l.gl.useProgram(this._programId),this._back&&this._back.render(this._programId),this._gear&&this._gear.render(this._programId),l.gl.flush(),u.LAppLive2DManager.getInstance().onUpdate()},t.prototype.initializeSprite=function(){l.canvas.width,l.canvas.height,l.LAppDelegate.getInstance().getTextureManager(),p.ResourcesPath},t.prototype.onTouchesBegan=function(t,e){this._touchManager.touchesBegan(t,e)},t.prototype.onTouchesMoved=function(t,e){var i=this.transformViewX(this._touchManager.getX()),r=this.transformViewY(this._touchManager.getY());this._touchManager.touchesMoved(t,e),u.LAppLive2DManager.getInstance().onDrag(i,r)},t.prototype.onTouchesEnded=function(t,e){var i=u.LAppLive2DManager.getInstance();i.onDrag(0,0);var r=this._deviceToScreen.transformX(this._touchManager.getX()),o=this._deviceToScreen.transformY(this._touchManager.getY());p.DebugTouchLogEnable&&h.LAppPal.printMessage("[APP]touchesEnded x: "+r+" y: "+o),i.onTap(r,o)},t.prototype.transformViewX=function(t){var e=this._deviceToScreen.transformX(t);return this._viewMatrix.invertTransformX(e)},t.prototype.transformViewY=function(t){var e=this._deviceToScreen.transformY(t);return this._viewMatrix.invertTransformY(e)},t.prototype.transformScreenX=function(t){return this._deviceToScreen.transformX(t)},t.prototype.transformScreenY=function(t){return this._deviceToScreen.transformY(t)},t}();e.LAppView=g},function(t,e,i){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var n=i(6).Live2DCubismFramework.CubismMatrix44;!function(t){var e=function(t){function e(){var e=t.call(this)||this;return e._screenLeft=0,e._screenRight=0,e._screenTop=0,e._screenBottom=0,e._maxLeft=0,e._maxRight=0,e._maxTop=0,e._maxBottom=0,e._maxScale=0,e._minScale=0,e}return o(e,t),e.prototype.adjustTranslate=function(t,e){this._tr[0]*this._maxLeft+(this._tr[12]+t)>this._screenLeft&&(t=this._screenLeft-this._tr[0]*this._maxLeft-this._tr[12]),this._tr[0]*this._maxRight+(this._tr[12]+t)<this._screenRight&&(t=this._screenRight-this._tr[0]*this._maxRight-this._tr[12]),this._tr[5]*this._maxTop+(this._tr[13]+e)<this._screenTop&&(e=this._screenTop-this._tr[5]*this._maxTop-this._tr[13]),this._tr[5]*this._maxBottom+(this._tr[13]+e)>this._screenBottom&&(e=this._screenBottom-this._tr[5]*this._maxBottom-this._tr[13]);var i=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,t,e,0,1]);n.multiply(i,this._tr,this._tr)},e.prototype.adjustScale=function(t,e,i){var r=this.getMaxScale(),o=this.getMinScale(),s=i*this._tr[0];s<o?this._tr[0]>0&&(i=o/this._tr[0]):s>r&&this._tr[0]>0&&(i=r/this._tr[0]);var a=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,t,e,0,1]),u=new Float32Array([i,0,0,0,0,i,0,0,0,0,1,0,0,0,0,1]),l=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,-t,-e,0,1]);n.multiply(l,this._tr,this._tr),n.multiply(u,this._tr,this._tr),n.multiply(a,this._tr,this._tr)},e.prototype.setScreenRect=function(t,e,i,r){this._screenLeft=t,this._screenRight=e,this._screenBottom=i,this._screenTop=r},e.prototype.setMaxScreenRect=function(t,e,i,r){this._maxLeft=t,this._maxRight=e,this._maxTop=r,this._maxBottom=i},e.prototype.setMaxScale=function(t){this._maxScale=t},e.prototype.setMinScale=function(t){this._minScale=t},e.prototype.getMaxScale=function(){return this._maxScale},e.prototype.getMinScale=function(){return this._minScale},e.prototype.isMaxScale=function(){return this.getScaleX()>=this._maxScale},e.prototype.isMinScale=function(){return this.getScaleX()<=this._minScale},e.prototype.getScreenLeft=function(){return this._screenLeft},e.prototype.getScreenRight=function(){return this._screenRight},e.prototype.getScreenBottom=function(){return this._screenBottom},e.prototype.getScreenTop=function(){return this._screenTop},e.prototype.getMaxLeft=function(){return this._maxLeft},e.prototype.getMaxRight=function(){return this._maxRight},e.prototype.getMaxBottom=function(){return this._maxBottom},e.prototype.getMaxTop=function(){return this._maxTop},e}(n);t.CubismViewMatrix=e}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){this._startX=0,this._startY=0,this._lastX=0,this._lastY=0,this._lastX1=0,this._lastY1=0,this._lastX2=0,this._lastY2=0,this._lastTouchDistance=0,this._deltaX=0,this._deltaY=0,this._scale=1,this._touchSingle=!1,this._flipAvailable=!1}return t.prototype.getCenterX=function(){return this._lastX},t.prototype.getCenterY=function(){return this._lastY},t.prototype.getDeltaX=function(){return this._deltaX},t.prototype.getDeltaY=function(){return this._deltaY},t.prototype.getStartX=function(){return this._startX},t.prototype.getStartY=function(){return this._startY},t.prototype.getScale=function(){return this._scale},t.prototype.getX=function(){return this._lastX},t.prototype.getY=function(){return this._lastY},t.prototype.getX1=function(){return this._lastX1},t.prototype.getY1=function(){return this._lastY1},t.prototype.getX2=function(){return this._lastX2},t.prototype.getY2=function(){return this._lastY2},t.prototype.isSingleTouch=function(){return this._touchSingle},t.prototype.isFlickAvailable=function(){return this._flipAvailable},t.prototype.disableFlick=function(){this._flipAvailable=!1},t.prototype.touchesBegan=function(t,e){this._lastX=t,this._lastY=e,this._startX=t,this._startY=e,this._lastTouchDistance=-1,this._flipAvailable=!0,this._touchSingle=!0},t.prototype.touchesMoved=function(t,e){this._lastX=t,this._lastY=e,this._lastTouchDistance=-1,this._touchSingle=!0},t.prototype.getFlickDistance=function(){return this.calculateDistance(this._startX,this._startY,this._lastX,this._lastY)},t.prototype.calculateDistance=function(t,e,i,r){return Math.sqrt((t-i)*(t-i)+(e-r)*(e-r))},t.prototype.calculateMovingAmount=function(t,e){if(t>0!=e>0)return 0;var i=t>0?1:-1,r=Math.abs(t),o=Math.abs(e);return i*(r<o?r:o)},t}();e.TouchManager=r},function(t,e,i){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});var s,a=i(0),u=i(27),l=i(46),h=i(48),p=i(9),g=i(18),c=i(17),d=i(1),_=i(8),m=i(16),f=i(2),y=m.Live2DCubismFramework.InvalidMotionQueueEntryHandleValue,v=_.Live2DCubismFramework.csmMap,S=d.Live2DCubismFramework.csmVector,b=c.Live2DCubismFramework.CubismBreath,C=c.Live2DCubismFramework.BreathParameterData,x=g.Live2DCubismFramework.CubismEyeBlink,M=p.Live2DCubismFramework.ACubismMotion,L=a.Live2DCubismFramework.CubismFramework,P=u.Live2DCubismFramework.CubismUserModel,B=l.Live2DCubismFramework.CubismModelSettingJson,w=h.Live2DCubismFramework,I=i(12),F=i(3),V=n(i(5));i(49),function(t){t[t.LoadAssets=0]="LoadAssets",t[t.LoadModel=1]="LoadModel",t[t.WaitLoadModel=2]="WaitLoadModel",t[t.LoadExpression=3]="LoadExpression",t[t.WaitLoadExpression=4]="WaitLoadExpression",t[t.LoadPhysics=5]="LoadPhysics",t[t.WaitLoadPhysics=6]="WaitLoadPhysics",t[t.LoadPose=7]="LoadPose",t[t.WaitLoadPose=8]="WaitLoadPose",t[t.SetupEyeBlink=9]="SetupEyeBlink",t[t.SetupBreath=10]="SetupBreath",t[t.LoadUserData=11]="LoadUserData",t[t.WaitLoadUserData=12]="WaitLoadUserData",t[t.SetupEyeBlinkIds=13]="SetupEyeBlinkIds",t[t.SetupLipSyncIds=14]="SetupLipSyncIds",t[t.SetupLayout=15]="SetupLayout",t[t.LoadMotion=16]="LoadMotion",t[t.WaitLoadMotion=17]="WaitLoadMotion",t[t.CompleteInitialize=18]="CompleteInitialize",t[t.CompleteSetupModel=19]="CompleteSetupModel",t[t.LoadTexture=20]="LoadTexture",t[t.WaitLoadTexture=21]="WaitLoadTexture",t[t.CompleteSetup=22]="CompleteSetup"}(s||(s={}));var D=function(t){function e(){var e=t.call(this)||this;return e._modelSetting=null,e._modelHomeDir=null,e._userTimeSeconds=0,e._eyeBlinkIds=new S,e._lipSyncIds=new S,e._motions=new v,e._expressions=new v,e._hitArea=new S,e._userArea=new S,e._idParamAngleX=L.getIdManager().getId(w.ParamAngleX),e._idParamAngleY=L.getIdManager().getId(w.ParamAngleY),e._idParamAngleZ=L.getIdManager().getId(w.ParamAngleZ),e._idParamEyeBallX=L.getIdManager().getId(w.ParamEyeBallX),e._idParamEyeBallY=L.getIdManager().getId(w.ParamEyeBallY),e._idParamBodyAngleX=L.getIdManager().getId(w.ParamBodyAngleX),e._state=s.LoadAssets,e._expressionCount=0,e._textureCount=0,e._motionCount=0,e._allMotionCount=0,e}return o(e,t),e.prototype.loadAssets=function(t,e){var i=this;console.log("dir",t),this._modelHomeDir=t,fetch(this._modelHomeDir+"/"+e).then((function(t){return t.arrayBuffer()})).then((function(t){var e=new B(t,t.byteLength);i._state=s.LoadModel,i.setupModel(e)}))},e.prototype.setupModel=function(t){var e=this;if(this._updating=!0,this._initialized=!1,this._modelSetting=t,""!=this._modelSetting.getModelFileName()){var i=this._modelSetting.getModelFileName();fetch(this._modelHomeDir+"/"+i).then((function(t){return t.arrayBuffer()})).then((function(t){e.loadModel(t),e._state=s.LoadExpression,r()})),this._state=s.WaitLoadModel}else I.LAppPal.printMessage("Model data does not exist.");var r=function(){if(e._modelSetting.getExpressionCount()>0){for(var t=e._modelSetting.getExpressionCount(),i=function(i){var r=e._modelSetting.getExpressionName(i),n=e._modelSetting.getExpressionFileName(i);fetch(e._modelHomeDir+"/"+n).then((function(t){return t.arrayBuffer()})).then((function(i){var n=e.loadExpression(i,i.byteLength,r);null!=e._expressions.getValue(r)&&(M.delete(e._expressions.getValue(r)),e._expressions.setValue(r,null)),e._expressions.setValue(r,n),e._expressionCount++,e._expressionCount>=t&&(e._state=s.LoadPhysics,o())}))},r=0;r<t;r++)i(r);e._state=s.WaitLoadExpression}else e._state=s.LoadPhysics,o()},o=function(){if(""!=e._modelSetting.getPhysicsFileName()){var t=e._modelSetting.getPhysicsFileName();fetch(e._modelHomeDir+"/"+t).then((function(t){return t.arrayBuffer()})).then((function(t){e.loadPhysics(t,t.byteLength),e._state=s.LoadPose,n()})),e._state=s.WaitLoadPhysics}else e._state=s.LoadPose,n()},n=function(){if(""!=e._modelSetting.getPoseFileName()){var t=e._modelSetting.getPoseFileName();fetch(e._modelHomeDir+"/"+t).then((function(t){return t.arrayBuffer()})).then((function(t){e.loadPose(t,t.byteLength),e._state=s.SetupEyeBlink,a()})),e._state=s.WaitLoadPose}else e._state=s.SetupEyeBlink,a()},a=function(){e._modelSetting.getEyeBlinkParameterCount()>0&&(e._eyeBlink=x.create(e._modelSetting),e._state=s.SetupBreath),u()},u=function(){e._breath=b.create();var t=new S;t.pushBack(new C(e._idParamAngleX,0,15,6.5345,.5)),t.pushBack(new C(e._idParamAngleY,0,8,3.5345,.5)),t.pushBack(new C(e._idParamAngleZ,0,10,5.5345,.5)),t.pushBack(new C(e._idParamBodyAngleX,0,4,15.5345,.5)),t.pushBack(new C(L.getIdManager().getId(w.ParamBreath),0,.5,3.2345,.5)),e._breath.setParameters(t),e._state=s.LoadUserData,l()},l=function(){if(""!=e._modelSetting.getUserDataFile()){var t=e._modelSetting.getUserDataFile();fetch(e._modelHomeDir+"/"+t).then((function(t){return t.arrayBuffer()})).then((function(t){e.loadUserData(t,t.byteLength),e._state=s.SetupEyeBlinkIds,h()})),e._state=s.WaitLoadUserData}else e._state=s.SetupEyeBlinkIds,h()},h=function(){for(var t=e._modelSetting.getEyeBlinkParameterCount(),i=0;i<t;++i)e._eyeBlinkIds.pushBack(e._modelSetting.getEyeBlinkParameterId(i));e._state=s.SetupLipSyncIds,p()},p=function(){for(var t=e._modelSetting.getLipSyncParameterCount(),i=0;i<t;++i)e._lipSyncIds.pushBack(e._modelSetting.getLipSyncParameterId(i));e._state=s.SetupLayout,g()},g=function(){var t=new v;e._modelSetting.getLayoutMap(t),e._modelMatrix.setupFromLayout(t),e._state=s.LoadMotion,c()},c=function(){e._state=s.WaitLoadMotion,e._model.saveParameters(),e._allMotionCount=0,e._motionCount=0;for(var t=[],i=e._modelSetting.getMotionGroupCount(),r=0;r<i;r++)t[r]=e._modelSetting.getMotionGroupName(r),e._allMotionCount+=e._modelSetting.getMotionCount(t[r]);for(r=0;r<i;r++)e.preLoadMotionGroup(t[r]);0==i&&(e._state=s.LoadTexture,e._motionManager.stopAllMotions(),e._updating=!1,e._initialized=!0,e.createRenderer(),e.setupTextures(),e.getRenderer().startUp(F.gl))}},e.prototype.setupTextures=function(){var t=this;if(this._state==s.LoadTexture){for(var e=this._modelSetting.getTextureCount(),i=function(i){if(""==r._modelSetting.getTextureFileName(i))return console.log("getTextureFileName null"),"continue";var o=r._modelSetting.getTextureFileName(i);o=r._modelHomeDir+o;F.LAppDelegate.getInstance().getTextureManager().createTextureFromPngFile(o,!0,(function(r){t.getRenderer().bindTexture(i,r.id),t._textureCount++,t._textureCount>=e&&(t._state=s.CompleteSetup)})),r.getRenderer().setIsPremultipliedAlpha(!0)},r=this,o=0;o<e;o++)i(o);this._state=s.WaitLoadTexture}},e.prototype.reloadRenderer=function(){this.deleteRenderer(),this.createRenderer(),this.setupTextures()},e.prototype.update=function(){if(this._state==s.CompleteSetup){var t=I.LAppPal.getDeltaTime();this._userTimeSeconds+=t,this._dragManager.update(t),this._dragX=this._dragManager.getX(),this._dragY=this._dragManager.getY();var e=!1;if(this._model.loadParameters(),this._motionManager.isFinished()?this.startRandomMotion(V.MotionGroupIdle,V.PriorityIdle):e=this._motionManager.updateMotion(this._model,t),this._model.saveParameters(),e||null!=this._eyeBlink&&this._eyeBlink.updateParameters(this._model,t),null!=this._expressionManager&&this._expressionManager.updateMotion(this._model,t),this._model.addParameterValueById(this._idParamAngleX,30*this._dragX),this._model.addParameterValueById(this._idParamAngleY,30*this._dragY),this._model.addParameterValueById(this._idParamAngleZ,this._dragX*this._dragY*-30),this._model.addParameterValueById(this._idParamBodyAngleX,10*this._dragX),this._model.addParameterValueById(this._idParamEyeBallX,this._dragX),this._model.addParameterValueById(this._idParamEyeBallY,this._dragY),null!=this._breath&&this._breath.updateParameters(this._model,t),null!=this._physics&&this._physics.evaluate(this._model,t),this._lipsync)for(var i=0;i<this._lipSyncIds.getSize();++i)this._model.addParameterValueById(this._lipSyncIds.at(i),0,.8);null!=this._pose&&this._pose.updateParameters(this._model,t),this._model.update()}},e.prototype.startMotion=function(t,e,i,r){var o=this;if(i==V.PriorityForce)this._motionManager.setReservePriority(i);else if(!this._motionManager.reserveMotion(i))return this._debugMode&&I.LAppPal.printMessage("[APP]can't start motion."),y;var n=this._modelSetting.getMotionFileName(t,e),s=t+"_"+e,a=this._motions.getValue(s),u=!1;return null==a?fetch(this._modelHomeDir+"/"+n).then((function(t){return t.arrayBuffer()})).then((function(i){a=o.loadMotion(i,i.byteLength,null,r);var n=o._modelSetting.getMotionFadeInTimeValue(t,e);n>=0&&a.setFadeInTime(n),(n=o._modelSetting.getMotionFadeOutTimeValue(t,e))>=0&&a.setFadeOutTime(n),a.setEffectIds(o._eyeBlinkIds,o._lipSyncIds),u=!0})):a.setFinishedMotionHandler(r),this._debugMode&&I.LAppPal.printMessage("[APP]start motion: ["+t+"_"+e),this._motionManager.startMotionPriority(a,u,i)},e.prototype.startRandomMotion=function(t,e,i){if(0==this._modelSetting.getMotionCount(t))return y;var r=Math.floor(Math.random()*this._modelSetting.getMotionCount(t));return this.startMotion(t,r,e,i)},e.prototype.setExpression=function(t){var e=this._expressions.getValue(t);this._debugMode&&I.LAppPal.printMessage("[APP]expression: ["+t+"]"),null!=e?this._expressionManager.startMotionPriority(e,!1,V.PriorityForce):this._debugMode&&I.LAppPal.printMessage("[APP]expression["+t+"] is null")},e.prototype.setRandomExpression=function(){if(0!=this._expressions.getSize())for(var t=Math.floor(Math.random()*this._expressions.getSize()),e=0;e<this._expressions.getSize();e++)if(e==t){var i=this._expressions._keyValues[e].first;return void this.setExpression(i)}},e.prototype.motionEventFired=function(t){f.CubismLogInfo("{0} is fired on LAppModel!!",t.s)},e.prototype.hitTest=function(t,e,i){if(this._opacity<1)return!1;for(var r=this._modelSetting.getHitAreasCount(),o=0;o<r;o++)if(this._modelSetting.getHitAreaName(o)==t){var n=this._modelSetting.getHitAreaId(o);return this.isHit(n,e,i)}return!1},e.prototype.preLoadMotionGroup=function(t){for(var e=this,i=function(i){var o=r._modelSetting.getMotionFileName(t,i),n=t+"_"+i;r._debugMode&&I.LAppPal.printMessage("[APP]load motion: "+o+" => ["+n+"]"),fetch(r._modelHomeDir+"/"+o).then((function(t){return t.arrayBuffer()})).then((function(r){var o=e.loadMotion(r,r.byteLength,n),a=e._modelSetting.getMotionFadeInTimeValue(t,i);a>=0&&o.setFadeInTime(a),(a=e._modelSetting.getMotionFadeOutTimeValue(t,i))>=0&&o.setFadeOutTime(a),o.setEffectIds(e._eyeBlinkIds,e._lipSyncIds),null!=e._motions.getValue(n)&&M.delete(e._motions.getValue(n)),e._motions.setValue(n,o),e._motionCount++,e._motionCount>=e._allMotionCount&&(e._state=s.LoadTexture,e._motionManager.stopAllMotions(),e._updating=!1,e._initialized=!0,e.createRenderer(),e.setupTextures(),e.getRenderer().startUp(F.gl))}))},r=this,o=0;o<this._modelSetting.getMotionCount(t);o++)i(o)},e.prototype.releaseMotions=function(){this._motions.clear()},e.prototype.releaseExpressions=function(){this._expressions.clear()},e.prototype.doDraw=function(){if(null!=this._model){var t=[0,0,F.canvas.width,F.canvas.height];this.getRenderer().setRenderState(F.frameBuffer,t),this.getRenderer().drawModel()}},e.prototype.draw=function(t){null!=this._model&&this._state==s.CompleteSetup&&(t.multiplyByMatrix(this._modelMatrix),this.getRenderer().setMvpMatrix(t),this.doDraw())},e}(P);e.LAppModel=D},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(0),o=i(28),n=i(30),s=i(31),a=i(32),u=i(34),l=i(37),h=i(38),p=i(39),g=i(41),c=i(17),d=i(18),_=i(44),m=i(2),f=_.Live2DCubismFramework.CubismRenderer_WebGL,y=d.Live2DCubismFramework.CubismEyeBlink,v=c.Live2DCubismFramework.CubismBreath,S=r.Live2DCubismFramework.Constant,b=g.Live2DCubismFramework.CubismPhysics,C=p.Live2DCubismFramework.CubismModelUserData,x=h.Live2DCubismFramework.CubismPose,M=l.Live2DCubismFramework.CubismExpressionMotion,L=u.Live2DCubismFramework.CubismMotion,P=a.Live2DCubismFramework.CubismMoc,B=s.Live2DCubismFramework.CubismModelMatrix,w=n.Live2DCubismFramework.CubismTargetPoint,I=o.Live2DCubismFramework.CubismMotionManager;!function(t){var e=function(){function t(){this.loadMotion=function(t,e,i,r){return L.create(t,e,r)},this._moc=null,this._model=null,this._motionManager=null,this._expressionManager=null,this._eyeBlink=null,this._breath=null,this._modelMatrix=null,this._pose=null,this._dragManager=null,this._physics=null,this._modelUserData=null,this._initialized=!1,this._updating=!1,this._opacity=1,this._lipsync=!0,this._lastLipSyncValue=0,this._dragX=0,this._dragY=0,this._accelerationX=0,this._accelerationY=0,this._accelerationZ=0,this._debugMode=!1,this._renderer=null,this._motionManager=new I,this._motionManager.setEventCallback(t.cubismDefaultMotionEventCallback,this),this._expressionManager=new I,this._dragManager=new w}return t.prototype.isInitialized=function(){return this._initialized},t.prototype.setInitialized=function(t){this._initialized=t},t.prototype.isUpdating=function(){return this._updating},t.prototype.setUpdating=function(t){this._updating=t},t.prototype.setDragging=function(t,e){this._dragManager.set(t,e)},t.prototype.setAcceleration=function(t,e,i){this._accelerationX=t,this._accelerationY=e,this._accelerationZ=i},t.prototype.getModelMatrix=function(){return this._modelMatrix},t.prototype.setOpacity=function(t){this._opacity=t},t.prototype.getOpacity=function(){return this._opacity},t.prototype.loadModel=function(t){this._moc=P.create(t),this._model=this._moc.createModel(),this._model.saveParameters(),null!=this._moc&&null!=this._model?this._modelMatrix=new B(this._model.getCanvasWidth(),this._model.getCanvasHeight()):m.CubismLogError("Failed to CreateModel().")},t.prototype.loadExpression=function(t,e,i){return M.create(t,e)},t.prototype.loadPose=function(t,e){this._pose=x.create(t,e)},t.prototype.loadUserData=function(t,e){this._modelUserData=C.create(t,e)},t.prototype.loadPhysics=function(t,e){this._physics=b.create(t,e)},t.prototype.isHit=function(t,e,i){var r=this._model.getDrawableIndex(t);if(r<0)return!1;for(var o=this._model.getDrawableVertexCount(r),n=this._model.getDrawableVertices(r),s=n[0],a=n[0],u=n[1],l=n[1],h=1;h<o;++h){var p=n[S.vertexOffset+h*S.vertexStep],g=n[S.vertexOffset+h*S.vertexStep+1];p<s&&(s=p),p>a&&(a=p),g<u&&(u=g),g>l&&(l=g)}var c=this._modelMatrix.invertTransformX(e),d=this._modelMatrix.invertTransformY(i);return s<=c&&c<=a&&u<=d&&d<=l},t.prototype.getModel=function(){return this._model},t.prototype.getRenderer=function(){return this._renderer},t.prototype.createRenderer=function(){this._renderer&&this.deleteRenderer(),this._renderer=new f,this._renderer.initialize(this._model)},t.prototype.deleteRenderer=function(){null!=this._renderer&&(this._renderer.release(),this._renderer=null)},t.prototype.motionEventFired=function(t){m.CubismLogInfo("{0}",t.s)},t.cubismDefaultMotionEventCallback=function(t,e,i){null!=i&&i.motionEventFired(e)},t.prototype.release=function(){null!=this._motionManager&&(this._motionManager.release(),this._motionManager=null),null!=this._expressionManager&&(this._expressionManager.release(),this._expressionManager=null),null!=this._moc&&(this._moc.deleteModel(this._model),this._moc.release(),this._moc=null),this._modelMatrix=null,x.delete(this._pose),y.delete(this._eyeBlink),v.delete(this._breath),this._dragManager=null,b.delete(this._physics),C.delete(this._modelUserData),this.deleteRenderer()},t}();t.CubismUserModel=e}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var n=i(16).Live2DCubismFramework.CubismMotionQueueManager;!function(t){var e=function(t){function e(){var e=t.call(this)||this;return e._currentPriority=0,e._reservePriority=0,e}return o(e,t),e.prototype.getCurrentPriority=function(){return this._currentPriority},e.prototype.getReservePriority=function(){return this._reservePriority},e.prototype.setReservePriority=function(t){this._reservePriority=t},e.prototype.startMotionPriority=function(e,i,r){return r==this._reservePriority&&(this._reservePriority=0),this._currentPriority=r,t.prototype.startMotion.call(this,e,i,this._userTimeSeconds)},e.prototype.updateMotion=function(e,i){this._userTimeSeconds+=i;var r=t.prototype.doUpdateMotion.call(this,e,this._userTimeSeconds);return this.isFinished()&&(this._currentPriority=0),r},e.prototype.reserveMotion=function(t){return!(t<=this._reservePriority||t<=this._currentPriority)&&(this._reservePriority=t,!0)},e}(n);t.CubismMotionManager=e}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(9).Live2DCubismFramework.ACubismMotion;!function(t){var e=function(){function t(){this._autoDelete=!1,this._motion=null,this._available=!0,this._finished=!1,this._started=!1,this._startTimeSeconds=-1,this._fadeInStartTimeSeconds=0,this._endTimeSeconds=-1,this._stateTimeSeconds=0,this._stateWeight=0,this._lastEventCheckSeconds=0,this._motionQueueEntryHandle=this}return t.prototype.release=function(){this._autoDelete&&this._motion&&r.delete(this._motion)},t.prototype.startFadeout=function(t,e){var i=e+t;(this._endTimeSeconds<0||i<this._endTimeSeconds)&&(this._endTimeSeconds=i)},t.prototype.isFinished=function(){return this._finished},t.prototype.isStarted=function(){return this._started},t.prototype.getStartTime=function(){return this._startTimeSeconds},t.prototype.getFadeInStartTime=function(){return this._fadeInStartTimeSeconds},t.prototype.getEndTime=function(){return this._endTimeSeconds},t.prototype.setStartTime=function(t){this._startTimeSeconds=t},t.prototype.setFadeInStartTime=function(t){this._fadeInStartTimeSeconds=t},t.prototype.setEndTime=function(t){this._endTimeSeconds=t},t.prototype.setIsFinished=function(t){this._finished=t},t.prototype.setIsStarted=function(t){this._started=t},t.prototype.isAvailable=function(){return this._available},t.prototype.setIsAvailable=function(t){this._available=t},t.prototype.setState=function(t,e){this._stateTimeSeconds=t,this._stateWeight=e},t.prototype.getStateTime=function(){return this._stateTimeSeconds},t.prototype.getStateWeight=function(){return this._stateWeight},t.prototype.getLastCheckEventTime=function(){return this._lastEventCheckSeconds},t.prototype.setLastCheckEventTime=function(t){this._lastEventCheckSeconds=t},t}();t.CubismMotionQueueEntry=e}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(10).Live2DCubismFramework.CubismMath;!function(t){var e=function(){function t(){this._faceTargetX=0,this._faceTargetY=0,this._faceX=0,this._faceY=0,this._faceVX=0,this._faceVY=0,this._lastTimeSeconds=0,this._userTimeSeconds=0}return t.prototype.update=function(t){this._userTimeSeconds+=t;if(0!=this._lastTimeSeconds){var e=30*(this._userTimeSeconds-this._lastTimeSeconds);this._lastTimeSeconds=this._userTimeSeconds;var i=e*(4/30)/4.5,o=this._faceTargetX-this._faceX,n=this._faceTargetY-this._faceY;if(!(r.abs(o)<=.01&&r.abs(n)<=.01)){var s=r.sqrt(o*o+n*n),a=4/30*n/s,u=4/30*o/s-this._faceVX,l=a-this._faceVY,h=r.sqrt(u*u+l*l);(h<-i||h>i)&&(u*=i/h,l*=i/h),this._faceVX+=u,this._faceVY+=l;var p=.5*(r.sqrt(i*i+16*i*s-8*i*s)-i),g=r.sqrt(this._faceVX*this._faceVX+this._faceVY*this._faceVY);g>p&&(this._faceVX*=p/g,this._faceVY*=p/g),this._faceX+=this._faceVX,this._faceY+=this._faceVY}}else this._lastTimeSeconds=this._userTimeSeconds},t.prototype.getX=function(){return this._faceX},t.prototype.getY=function(){return this._faceY},t.prototype.set=function(t,e){this._faceTargetX=t,this._faceTargetY=e},t}();t.CubismTargetPoint=e}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var n=i(6).Live2DCubismFramework.CubismMatrix44;!function(t){var e=function(t){function e(e,i){var r=t.call(this)||this;return r._width=void 0!==e?e:0,r._height=void 0!==i?i:0,r.setHeight(1),r}return o(e,t),e.prototype.setWidth=function(t){var e=t/this._width,i=e;this.scale(2.6*e,2.6*i)},e.prototype.setHeight=function(t){var e=t/this._height,i=e;this.scale(2.6*e,2.6*i)},e.prototype.setPosition=function(t,e){this.translate(t,e)},e.prototype.setCenterPosition=function(t,e){this.centerX(t),this.centerY(e)},e.prototype.top=function(t){this.setY(t)},e.prototype.bottom=function(t){var e=this._height*this.getScaleY();this.translateY(t-e)},e.prototype.left=function(t){this.setX(t)},e.prototype.right=function(t){var e=this._width*this.getScaleX();this.translateX(t-e)},e.prototype.centerX=function(t){var e=this._width*this.getScaleX();this.translateX(t-e/2)},e.prototype.setX=function(t){this.translateX(t)},e.prototype.centerY=function(t){var e=this._height*this.getScaleY();this.translateY(t-e/2)},e.prototype.setY=function(t){this.translateY(t)},e.prototype.setupFromLayout=function(t){for(var e=t.begin();e.notEqual(t.end());e.preIncrement()){var i=e.ptr().first,r=e.ptr().second;"width"==i?this.setWidth(r):"height"==i&&this.setHeight(r)}for(e=t.begin();e.notEqual(t.end());e.preIncrement()){i=e.ptr().first,r=e.ptr().second;"x"==i?this.setX(r):"y"==i?this.setY(r):"center_x"==i?this.centerX(r):"center_y"==i?this.centerY(r):"top"==i?this.top(r):"bottom"==i?this.bottom(r):"left"==i?this.left(r):"right"==i&&this.right(r)}},e}(n);t.CubismModelMatrix=e}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(33).Live2DCubismFramework.CubismModel,o=i(2);!function(t){var e=function(){function t(t){this._moc=t,this._modelCount=0}return t.create=function(e){var i=null,r=Live2DCubismCore.Moc.fromArrayBuffer(e);return r&&(i=new t(r)),i},t.delete=function(t){t._moc._release(),t._moc=null,t=null},t.prototype.createModel=function(){var t=null,e=Live2DCubismCore.Model.fromMoc(this._moc);return e&&((t=new r(e)).initialize(),++this._modelCount),t},t.prototype.deleteModel=function(t){null!=t&&(t.release(),t=null,--this._modelCount)},t.prototype.release=function(){o.CSM_ASSERT(0==this._modelCount),this._moc._release(),this._moc=null},t}();t.CubismMoc=e}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(14),o=i(0),n=i(8),s=i(1),a=i(2),u=o.Live2DCubismFramework.CubismFramework,l=r.Live2DCubismFramework.CubismBlendMode,h=s.Live2DCubismFramework.csmVector,p=n.Live2DCubismFramework.csmMap;!function(t){var e=function(){function t(t){this._model=t,this._parameterValues=null,this._parameterMaximumValues=null,this._parameterMinimumValues=null,this._partOpacities=null,this._savedParameters=new h,this._parameterIds=new h,this._drawableIds=new h,this._partIds=new h,this._notExistPartId=new p,this._notExistParameterId=new p,this._notExistParameterValues=new p,this._notExistPartOpacities=new p}return t.prototype.update=function(){this._model.update(),this._model.drawables.resetDynamicFlags()},t.prototype.getCanvasWidth=function(){return null==this._model?0:this._model.canvasinfo.CanvasWidth/this._model.canvasinfo.PixelsPerUnit},t.prototype.getCanvasHeight=function(){return null==this._model?0:this._model.canvasinfo.CanvasHeight/this._model.canvasinfo.PixelsPerUnit},t.prototype.saveParameters=function(){for(var t=this._model.parameters.count,e=this._savedParameters.getSize(),i=0;i<t;++i)i<e?this._savedParameters.set(i,this._parameterValues[i]):this._savedParameters.pushBack(this._parameterValues[i])},t.prototype.getModel=function(){return this._model},t.prototype.getPartIndex=function(t){var e,i=this._model.parts.count;for(e=0;e<i;++e)if(t==this._partIds.at(e))return e;return this._notExistPartId.isExist(t)?this._notExistPartId.getValue(t):(e=i+this._notExistPartId.getSize(),this._notExistPartId.setValue(t,e),this._notExistPartOpacities.appendKey(e),e)},t.prototype.getPartCount=function(){return this._model.parts.count},t.prototype.setPartOpacityByIndex=function(t,e){this._notExistPartOpacities.isExist(t)?this._notExistPartOpacities.setValue(t,e):(a.CSM_ASSERT(0<=t&&t<this.getPartCount()),this._partOpacities[t]=e)},t.prototype.setPartOpacityById=function(t,e){var i=this.getPartIndex(t);i<0||this.setPartOpacityByIndex(i,e)},t.prototype.getPartOpacityByIndex=function(t){return this._notExistPartOpacities.isExist(t)?this._notExistPartOpacities.getValue(t):(a.CSM_ASSERT(0<=t&&t<this.getPartCount()),this._partOpacities[t])},t.prototype.getPartOpacityById=function(t){var e=this.getPartIndex(t);return e<0?0:this.getPartOpacityByIndex(e)},t.prototype.getParameterIndex=function(t){var e,i=this._model.parameters.count;for(e=0;e<i;++e)if(t==this._parameterIds.at(e))return e;return this._notExistParameterId.isExist(t)?this._notExistParameterId.getValue(t):(e=this._model.parameters.count+this._notExistParameterId.getSize(),this._notExistParameterId.setValue(t,e),this._notExistParameterValues.appendKey(e),e)},t.prototype.getParameterCount=function(){return this._model.parameters.count},t.prototype.getParameterMaximumValue=function(t){return this._model.parameters.maximumValues[t]},t.prototype.getParameterMinimumValue=function(t){return this._model.parameters.minimumValues[t]},t.prototype.getParameterDefaultValue=function(t){return this._model.parameters.defaultValues[t]},t.prototype.getParameterValueByIndex=function(t){return this._notExistParameterValues.isExist(t)?this._notExistParameterValues.getValue(t):(a.CSM_ASSERT(0<=t&&t<this.getParameterCount()),this._parameterValues[t])},t.prototype.getParameterValueById=function(t){var e=this.getParameterIndex(t);return this.getParameterValueByIndex(e)},t.prototype.setParameterValueByIndex=function(t,e,i){void 0===i&&(i=1),this._notExistParameterValues.isExist(t)?this._notExistParameterValues.setValue(t,1==i?e:this._notExistParameterValues.getValue(t)*(1-i)+e*i):(a.CSM_ASSERT(0<=t&&t<this.getParameterCount()),this._model.parameters.maximumValues[t]<e&&(e=this._model.parameters.maximumValues[t]),this._model.parameters.minimumValues[t]>e&&(e=this._model.parameters.minimumValues[t]),this._parameterValues[t]=1==i?e:this._parameterValues[t]=this._parameterValues[t]*(1-i)+e*i)},t.prototype.setParameterValueById=function(t,e,i){void 0===i&&(i=1);var r=this.getParameterIndex(t);this.setParameterValueByIndex(r,e,i)},t.prototype.addParameterValueByIndex=function(t,e,i){void 0===i&&(i=1),this.setParameterValueByIndex(t,this.getParameterValueByIndex(t)+e*i)},t.prototype.addParameterValueById=function(t,e,i){void 0===i&&(i=1);var r=this.getParameterIndex(t);this.addParameterValueByIndex(r,e,i)},t.prototype.multiplyParameterValueById=function(t,e,i){void 0===i&&(i=1);var r=this.getParameterIndex(t);this.multiplyParameterValueByIndex(r,e,i)},t.prototype.multiplyParameterValueByIndex=function(t,e,i){void 0===i&&(i=1),this.setParameterValueByIndex(t,this.getParameterValueByIndex(t)*(1+(e-1)*i))},t.prototype.getDrawableIndex=function(t){for(var e=this._model.drawables.count,i=0;i<e;++i)if(this._drawableIds.at(i)==t)return i;return-1},t.prototype.getDrawableCount=function(){return this._model.drawables.count},t.prototype.getDrawableId=function(t){var e=this._model.drawables.ids;return u.getIdManager().getId(e[t])},t.prototype.getDrawableRenderOrders=function(){return this._model.drawables.renderOrders},t.prototype.getDrawableTextureIndices=function(t){return this._model.drawables.textureIndices[t]},t.prototype.getDrawableDynamicFlagVertexPositionsDidChange=function(t){var e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(e[t])},t.prototype.getDrawableVertexIndexCount=function(t){return this._model.drawables.indexCounts[t]},t.prototype.getDrawableVertexCount=function(t){return this._model.drawables.vertexCounts[t]},t.prototype.getDrawableVertices=function(t){return this.getDrawableVertexPositions(t)},t.prototype.getDrawableVertexIndices=function(t){return this._model.drawables.indices[t]},t.prototype.getDrawableVertexPositions=function(t){return this._model.drawables.vertexPositions[t]},t.prototype.getDrawableVertexUvs=function(t){return this._model.drawables.vertexUvs[t]},t.prototype.getDrawableOpacity=function(t){return this._model.drawables.opacities[t]},t.prototype.getDrawableCulling=function(t){var e=this._model.drawables.constantFlags;return!Live2DCubismCore.Utils.hasIsDoubleSidedBit(e[t])},t.prototype.getDrawableBlendMode=function(t){var e=this._model.drawables.constantFlags;return Live2DCubismCore.Utils.hasBlendAdditiveBit(e[t])?l.CubismBlendMode_Additive:Live2DCubismCore.Utils.hasBlendMultiplicativeBit(e[t])?l.CubismBlendMode_Multiplicative:l.CubismBlendMode_Normal},t.prototype.getDrawableInvertedMaskBit=function(t){var e=this._model.drawables.constantFlags;return Live2DCubismCore.Utils.hasIsInvertedMaskBit(e[t])},t.prototype.getDrawableMasks=function(){return this._model.drawables.masks},t.prototype.getDrawableMaskCounts=function(){return this._model.drawables.maskCounts},t.prototype.isUsingMasking=function(){for(var t=0;t<this._model.drawables.count;++t)if(!(this._model.drawables.maskCounts[t]<=0))return!0;return!1},t.prototype.getDrawableDynamicFlagIsVisible=function(t){var e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasIsVisibleBit(e[t])},t.prototype.getDrawableDynamicFlagVisibilityDidChange=function(t){var e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(e[t])},t.prototype.getDrawableDynamicFlagOpacityDidChange=function(t){var e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasOpacityDidChangeBit(e[t])},t.prototype.getDrawableDynamicFlagRenderOrderDidChange=function(t){var e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(e[t])},t.prototype.loadParameters=function(){var t=this._model.parameters.count,e=this._savedParameters.getSize();t>e&&(t=e);for(var i=0;i<t;++i)this._parameterValues[i]=this._savedParameters.at(i)},t.prototype.initialize=function(){a.CSM_ASSERT(this._model),this._parameterValues=this._model.parameters.values,this._partOpacities=this._model.parts.opacities,this._parameterMaximumValues=this._model.parameters.maximumValues,this._parameterMinimumValues=this._model.parameters.minimumValues;var t=this._model.parameters.ids,e=this._model.parameters.count;this._parameterIds.prepareCapacity(e);for(var i=0;i<e;++i)this._parameterIds.pushBack(u.getIdManager().getId(t[i]));var r=this._model.parts.ids,o=this._model.parts.count;this._partIds.prepareCapacity(o);for(i=0;i<o;++i)this._partIds.pushBack(u.getIdManager().getId(r[i]));var n=this._model.drawables.ids,s=this._model.drawables.count;this._drawableIds.prepareCapacity(s);for(i=0;i<s;++i)this._drawableIds.pushBack(u.getIdManager().getId(n[i]))},t.prototype.release=function(){this._model.release(),this._model=null},t}();t.CubismModel=e}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var n=i(35),s=i(36),a=i(9),u=i(0),l=i(10),h=i(7),p=i(2),g=h.Live2DCubismFramework.csmString,c=s.Live2DCubismFramework.CubismMotionData,d=s.Live2DCubismFramework.CubismMotionSegment,_=s.Live2DCubismFramework.CubismMotionPoint,m=s.Live2DCubismFramework.CubismMotionEvent,f=s.Live2DCubismFramework.CubismMotionSegmentType,y=s.Live2DCubismFramework.CubismMotionCurve,v=s.Live2DCubismFramework.CubismMotionCurveTarget,S=l.Live2DCubismFramework.CubismMath,b=u.Live2DCubismFramework.CubismFramework,C=a.Live2DCubismFramework.ACubismMotion,x=n.Live2DCubismFramework.CubismMotionJson;!function(t){function e(t,e,i){var r=new _;return r.time=t.time+(e.time-t.time)*i,r.value=t.value+(e.value-t.value)*i,r}function i(t,e){var i=(e-t[0].time)/(t[1].time-t[0].time);return i<0&&(i=0),t[0].value+(t[1].value-t[0].value)*i}function r(t,i){var r=(i-t[0].time)/(t[3].time-t[0].time);r<0&&(r=0);var o=e(t[0],t[1],r),n=e(t[1],t[2],r),s=e(t[2],t[3],r),a=e(o,n,r),u=e(n,s,r);return e(a,u,r).value}function n(t,e){return t[0].value}function s(t,e){return t[1].value}function a(t,e,i){for(var r=t.curves.at(e),o=-1,n=r.baseSegmentIndex+r.segmentCount,s=0,a=r.baseSegmentIndex;a<n;++a)if(s=t.segments.at(a).basePointIndex+(t.segments.at(a).segmentType==f.CubismMotionSegmentType_Bezier?3:1),t.points.at(s).time>i){o=a;break}if(-1==o)return t.points.at(s).value;var u=t.segments.at(o);return u.evaluate(t.points.get(u.basePointIndex),i)}var u=function(t){function e(){var e=t.call(this)||this;return e._sourceFrameRate=30,e._loopDurationSeconds=-1,e._isLoop=!1,e._isLoopFadeIn=!0,e._lastWeight=0,e._motionData=null,e._modelCurveIdEyeBlink=null,e._modelCurveIdLipSync=null,e._eyeBlinkParameterIds=null,e._lipSyncParameterIds=null,e}return o(e,t),e.create=function(t,i,r){var o=new e;return o.parse(t,i),o._sourceFrameRate=o._motionData.fps,o._loopDurationSeconds=o._motionData.duration,o._onFinishedMotion=r,o},e.prototype.doUpdateParameters=function(t,e,i,r){null==this._modelCurveIdEyeBlink&&(this._modelCurveIdEyeBlink=b.getIdManager().getId("EyeBlink")),null==this._modelCurveIdLipSync&&(this._modelCurveIdLipSync=b.getIdManager().getId("LipSync"));var o=e-r.getStartTime();o<0&&(o=0);var n=Number.MAX_VALUE,s=Number.MAX_VALUE,u=0,l=0;this._eyeBlinkParameterIds.getSize()>64&&p.CubismLogDebug("too many eye blink targets : {0}",this._eyeBlinkParameterIds.getSize()),this._lipSyncParameterIds.getSize()>64&&p.CubismLogDebug("too many lip sync targets : {0}",this._lipSyncParameterIds.getSize());var h,g,c,d=this._fadeInSeconds<=0?1:S.getEasingSine((e-r.getFadeInStartTime())/this._fadeInSeconds),_=this._fadeOutSeconds<=0||r.getEndTime()<0?1:S.getEasingSine((r.getEndTime()-e)/this._fadeOutSeconds),m=o;if(this._isLoop)for(;m>this._motionData.duration;)m-=this._motionData.duration;var f=this._motionData.curves;for(g=0;g<this._motionData.curveCount&&f.at(g).type==v.CubismMotionCurveTarget_Model;++g)h=a(this._motionData,g,m),f.at(g).id==this._modelCurveIdEyeBlink?s=h:f.at(g).id==this._modelCurveIdLipSync&&(n=h);for(;g<this._motionData.curveCount&&f.at(g).type==v.CubismMotionCurveTarget_Parameter;++g)if(-1!=(c=t.getParameterIndex(f.at(g).id))){var y=t.getParameterValueByIndex(c);if(h=a(this._motionData,g,m),s!=Number.MAX_VALUE)for(var C=0;C<this._eyeBlinkParameterIds.getSize()&&C<64;++C)if(this._eyeBlinkParameterIds.at(C)==f.at(g).id){h*=s,l|=1<<C;break}if(n!=Number.MAX_VALUE)for(C=0;C<this._lipSyncParameterIds.getSize()&&C<64;++C)if(this._lipSyncParameterIds.at(C)==f.at(g).id){h+=n,u|=1<<C;break}var x=void 0;if(f.at(g).fadeInTime<0&&f.at(g).fadeOutTime<0)x=y+(h-y)*i;else{var M=void 0,L=void 0;M=f.at(g).fadeInTime<0?d:0==f.at(g).fadeInTime?1:S.getEasingSine((e-r.getFadeInStartTime())/f.at(g).fadeInTime),L=f.at(g).fadeOutTime<0?_:0==f.at(g).fadeOutTime||r.getEndTime()<0?1:S.getEasingSine((r.getEndTime()-e)/f.at(g).fadeOutTime),x=y+(h-y)*(this._weight*M*L)}t.setParameterValueByIndex(c,x,1)}if(s!=Number.MAX_VALUE)for(C=0;C<this._eyeBlinkParameterIds.getSize()&&C<64;++C){y=t.getParameterValueById(this._eyeBlinkParameterIds.at(C));if(!(l>>C&1)){x=y+(s-y)*i;t.setParameterValueById(this._eyeBlinkParameterIds.at(C),x)}}if(n!=Number.MAX_VALUE)for(C=0;C<this._lipSyncParameterIds.getSize()&&C<64;++C){y=t.getParameterValueById(this._lipSyncParameterIds.at(C));if(!(u>>C&1)){x=y+(n-y)*i;t.setParameterValueById(this._lipSyncParameterIds.at(C),x)}}for(;g<this._motionData.curveCount&&f.at(g).type==v.CubismMotionCurveTarget_PartOpacity;++g)-1!=(c=t.getParameterIndex(f.at(g).id))&&(h=a(this._motionData,g,m),t.setParameterValueByIndex(c,h));o>=this._motionData.duration&&(this._isLoop?(r.setStartTime(e),this._isLoopFadeIn&&r.setFadeInStartTime(e)):(this._onFinishedMotion&&this._onFinishedMotion(this),r.setIsFinished(!0))),this._lastWeight=i},e.prototype.setIsLoop=function(t){this._isLoop=t},e.prototype.isLoop=function(){return this._isLoop},e.prototype.setIsLoopFadeIn=function(t){this._isLoopFadeIn=t},e.prototype.isLoopFadeIn=function(){return this._isLoopFadeIn},e.prototype.getDuration=function(){return this._isLoop?-1:this._loopDurationSeconds},e.prototype.getLoopDuration=function(){return this._loopDurationSeconds},e.prototype.setParameterFadeInTime=function(t,e){for(var i=this._motionData.curves,r=0;r<this._motionData.curveCount;++r)if(t==i.at(r).id)return void(i.at(r).fadeInTime=e)},e.prototype.setParameterFadeOutTime=function(t,e){for(var i=this._motionData.curves,r=0;r<this._motionData.curveCount;++r)if(t==i.at(r).id)return void(i.at(r).fadeOutTime=e)},e.prototype.getParameterFadeInTime=function(t){for(var e=this._motionData.curves,i=0;i<this._motionData.curveCount;++i)if(t==e.at(i).id)return e.at(i).fadeInTime;return-1},e.prototype.getParameterFadeOutTime=function(t){for(var e=this._motionData.curves,i=0;i<this._motionData.curveCount;++i)if(t==e.at(i).id)return e.at(i).fadeOutTime;return-1},e.prototype.setEffectIds=function(t,e){this._eyeBlinkParameterIds=t,this._lipSyncParameterIds=e},e.prototype.release=function(){this._motionData=void 0,this._motionData=null},e.prototype.parse=function(t,e){this._motionData=new c;var o=new x(t,e);this._motionData.duration=o.getMotionDuration(),this._motionData.loop=o.isMotionLoop(),this._motionData.curveCount=o.getMotionCurveCount(),this._motionData.fps=o.getMotionFps(),this._motionData.eventCount=o.getEventCount(),o.isExistMotionFadeInTime()?this._fadeInSeconds=o.getMotionFadeInTime()<0?1:o.getMotionFadeInTime():this._fadeInSeconds=1,o.isExistMotionFadeOutTime()?this._fadeOutSeconds=o.getMotionFadeOutTime()<0?1:o.getMotionFadeOutTime():this._fadeOutSeconds=1,this._motionData.curves.updateSize(this._motionData.curveCount,y,!0),this._motionData.segments.updateSize(o.getMotionTotalSegmentCount(),d,!0),this._motionData.points.updateSize(o.getMotionTotalPointCount(),_,!0),this._motionData.events.updateSize(this._motionData.eventCount,m,!0);for(var a=0,u=0,l=0;l<this._motionData.curveCount;++l){"Model"==o.getMotionCurveTarget(l)?this._motionData.curves.at(l).type=v.CubismMotionCurveTarget_Model:"Parameter"==o.getMotionCurveTarget(l)?this._motionData.curves.at(l).type=v.CubismMotionCurveTarget_Parameter:"PartOpacity"==o.getMotionCurveTarget(l)&&(this._motionData.curves.at(l).type=v.CubismMotionCurveTarget_PartOpacity),this._motionData.curves.at(l).id=o.getMotionCurveId(l),this._motionData.curves.at(l).baseSegmentIndex=u,this._motionData.curves.at(l).fadeInTime=o.isExistMotionCurveFadeInTime(l)?o.getMotionCurveFadeInTime(l):-1,this._motionData.curves.at(l).fadeOutTime=o.isExistMotionCurveFadeOutTime(l)?o.getMotionCurveFadeOutTime(l):-1;for(var h=0;h<o.getMotionCurveSegmentCount(l);){switch(0==h?(this._motionData.segments.at(u).basePointIndex=a,this._motionData.points.at(a).time=o.getMotionCurveSegment(l,h),this._motionData.points.at(a).value=o.getMotionCurveSegment(l,h+1),a+=1,h+=2):this._motionData.segments.at(u).basePointIndex=a-1,o.getMotionCurveSegment(l,h)){case f.CubismMotionSegmentType_Linear:this._motionData.segments.at(u).segmentType=f.CubismMotionSegmentType_Linear,this._motionData.segments.at(u).evaluate=i,this._motionData.points.at(a).time=o.getMotionCurveSegment(l,h+1),this._motionData.points.at(a).value=o.getMotionCurveSegment(l,h+2),a+=1,h+=3;break;case f.CubismMotionSegmentType_Bezier:this._motionData.segments.at(u).segmentType=f.CubismMotionSegmentType_Bezier,this._motionData.segments.at(u).evaluate=r,this._motionData.points.at(a).time=o.getMotionCurveSegment(l,h+1),this._motionData.points.at(a).value=o.getMotionCurveSegment(l,h+2),this._motionData.points.at(a+1).time=o.getMotionCurveSegment(l,h+3),this._motionData.points.at(a+1).value=o.getMotionCurveSegment(l,h+4),this._motionData.points.at(a+2).time=o.getMotionCurveSegment(l,h+5),this._motionData.points.at(a+2).value=o.getMotionCurveSegment(l,h+6),a+=3,h+=7;break;case f.CubismMotionSegmentType_Stepped:this._motionData.segments.at(u).segmentType=f.CubismMotionSegmentType_Stepped,this._motionData.segments.at(u).evaluate=n,this._motionData.points.at(a).time=o.getMotionCurveSegment(l,h+1),this._motionData.points.at(a).value=o.getMotionCurveSegment(l,h+2),a+=1,h+=3;break;case f.CubismMotionSegmentType_InverseStepped:this._motionData.segments.at(u).segmentType=f.CubismMotionSegmentType_InverseStepped,this._motionData.segments.at(u).evaluate=s,this._motionData.points.at(a).time=o.getMotionCurveSegment(l,h+1),this._motionData.points.at(a).value=o.getMotionCurveSegment(l,h+2),a+=1,h+=3;break;default:p.CSM_ASSERT(0)}++this._motionData.curves.at(l).segmentCount,++u}}for(var g=0;g<o.getEventCount();++g)this._motionData.events.at(g).fireTime=o.getEventTime(g),this._motionData.events.at(g).value=o.getEventValue(g);o.release(),o=void 0,o=null},e.prototype.getFiredEvent=function(t,e){this._firedEventValues.updateSize(0);for(var i=0;i<this._motionData.eventCount;++i)this._motionData.events.at(i).fireTime>t&&this._motionData.events.at(i).fireTime<=e&&this._firedEventValues.pushBack(new g(this._motionData.events.at(i).value.s));return this._firedEventValues},e}(C);t.CubismMotion=u}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(4),o=i(0),n=i(7).Live2DCubismFramework.csmString,s=o.Live2DCubismFramework.CubismFramework,a=r.Live2DCubismFramework.CubismJson;!function(t){var e="Meta",i=function(){function t(t,e){this._json=a.create(t,e)}return t.prototype.release=function(){a.delete(this._json)},t.prototype.getMotionDuration=function(){return this._json.getRoot().getValueByString(e).getValueByString("Duration").toFloat()},t.prototype.isMotionLoop=function(){return this._json.getRoot().getValueByString(e).getValueByString("Loop").toBoolean()},t.prototype.getMotionCurveCount=function(){return this._json.getRoot().getValueByString(e).getValueByString("CurveCount").toInt()},t.prototype.getMotionFps=function(){return this._json.getRoot().getValueByString(e).getValueByString("Fps").toFloat()},t.prototype.getMotionTotalSegmentCount=function(){return this._json.getRoot().getValueByString(e).getValueByString("TotalSegmentCount").toInt()},t.prototype.getMotionTotalPointCount=function(){return this._json.getRoot().getValueByString(e).getValueByString("TotalPointCount").toInt()},t.prototype.isExistMotionFadeInTime=function(){return!this._json.getRoot().getValueByString(e).getValueByString("FadeInTime").isNull()},t.prototype.isExistMotionFadeOutTime=function(){return!this._json.getRoot().getValueByString(e).getValueByString("FadeOutTime").isNull()},t.prototype.getMotionFadeInTime=function(){return this._json.getRoot().getValueByString(e).getValueByString("FadeInTime").toFloat()},t.prototype.getMotionFadeOutTime=function(){return this._json.getRoot().getValueByString(e).getValueByString("FadeOutTime").toFloat()},t.prototype.getMotionCurveTarget=function(t){return this._json.getRoot().getValueByString("Curves").getValueByIndex(t).getValueByString("Target").getRawString()},t.prototype.getMotionCurveId=function(t){return s.getIdManager().getId(this._json.getRoot().getValueByString("Curves").getValueByIndex(t).getValueByString("Id").getRawString())},t.prototype.isExistMotionCurveFadeInTime=function(t){return!this._json.getRoot().getValueByString("Curves").getValueByIndex(t).getValueByString("FadeInTime").isNull()},t.prototype.isExistMotionCurveFadeOutTime=function(t){return!this._json.getRoot().getValueByString("Curves").getValueByIndex(t).getValueByString("FadeOutTime").isNull()},t.prototype.getMotionCurveFadeInTime=function(t){return this._json.getRoot().getValueByString("Curves").getValueByIndex(t).getValueByString("FadeInTime").toFloat()},t.prototype.getMotionCurveFadeOutTime=function(t){return this._json.getRoot().getValueByString("Curves").getValueByIndex(t).getValueByString("FadeOutTime").toFloat()},t.prototype.getMotionCurveSegmentCount=function(t){return this._json.getRoot().getValueByString("Curves").getValueByIndex(t).getValueByString("Segments").getVector().getSize()},t.prototype.getMotionCurveSegment=function(t,e){return this._json.getRoot().getValueByString("Curves").getValueByIndex(t).getValueByString("Segments").getValueByIndex(e).toFloat()},t.prototype.getEventCount=function(){return this._json.getRoot().getValueByString(e).getValueByString("UserDataCount").toInt()},t.prototype.getTotalEventValueSize=function(){return this._json.getRoot().getValueByString(e).getValueByString("TotalUserDataSize").toInt()},t.prototype.getEventTime=function(t){return this._json.getRoot().getValueByString("UserData").getValueByIndex(t).getValueByString("Time").toInt()},t.prototype.getEventValue=function(t){return new n(this._json.getRoot().getValueByString("UserData").getValueByIndex(t).getValueByString("Value").getRawString())},t}();t.CubismMotionJson=i}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(1).Live2DCubismFramework.csmVector;!function(t){var e;!function(t){t[t.CubismMotionCurveTarget_Model=0]="CubismMotionCurveTarget_Model",t[t.CubismMotionCurveTarget_Parameter=1]="CubismMotionCurveTarget_Parameter",t[t.CubismMotionCurveTarget_PartOpacity=2]="CubismMotionCurveTarget_PartOpacity"}(e=t.CubismMotionCurveTarget||(t.CubismMotionCurveTarget={})),function(t){t[t.CubismMotionSegmentType_Linear=0]="CubismMotionSegmentType_Linear",t[t.CubismMotionSegmentType_Bezier=1]="CubismMotionSegmentType_Bezier",t[t.CubismMotionSegmentType_Stepped=2]="CubismMotionSegmentType_Stepped",t[t.CubismMotionSegmentType_InverseStepped=3]="CubismMotionSegmentType_InverseStepped"}(t.CubismMotionSegmentType||(t.CubismMotionSegmentType={}));var i=function(){this.time=0,this.value=0};t.CubismMotionPoint=i;var o=function(){this.evaluate=null,this.basePointIndex=0,this.segmentType=0};t.CubismMotionSegment=o;var n=function(){this.type=e.CubismMotionCurveTarget_Model,this.segmentCount=0,this.baseSegmentIndex=0,this.fadeInTime=0,this.fadeOutTime=0};t.CubismMotionCurve=n;var s=function(){this.fireTime=0};t.CubismMotionEvent=s;var a=function(){this.duration=0,this.loop=!1,this.curveCount=0,this.eventCount=0,this.fps=0,this.curves=new r,this.segments=new r,this.points=new r,this.events=new r};t.CubismMotionData=a}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var n=i(9),s=i(4),a=i(0),u=i(1).Live2DCubismFramework.csmVector,l=a.Live2DCubismFramework.CubismFramework,h=s.Live2DCubismFramework.CubismJson,p=n.Live2DCubismFramework.ACubismMotion;!function(t){var e,i=function(t){function i(){var e=t.call(this)||this;return e._parameters=new u,e}return o(i,t),i.create=function(t,o){var n=new i,s=h.create(t,o),a=s.getRoot();n.setFadeInTime(a.getValueByString("FadeInTime").toFloat(1)),n.setFadeOutTime(a.getValueByString("FadeOutTime").toFloat(1));var u=a.getValueByString("Parameters").getSize();n._parameters.prepareCapacity(u);for(var p=0;p<u;++p){var g=a.getValueByString("Parameters").getValueByIndex(p),c=l.getIdManager().getId(g.getValueByString("Id").getRawString()),d=g.getValueByString("Value").toFloat(),_=void 0;_=g.getValueByString("Blend").isNull()||"Add"==g.getValueByString("Blend").getString()?e.ExpressionBlendType_Add:"Multiply"==g.getValueByString("Blend").getString()?e.ExpressionBlendType_Multiply:"Overwrite"==g.getValueByString("Blend").getString()?e.ExpressionBlendType_Overwrite:e.ExpressionBlendType_Add;var m=new r;m.parameterId=c,m.blendType=_,m.value=d,n._parameters.pushBack(m)}return h.delete(s),n},i.prototype.doUpdateParameters=function(t,i,r,o){for(var n=0;n<this._parameters.getSize();++n){var s=this._parameters.at(n);switch(s.blendType){case e.ExpressionBlendType_Add:t.addParameterValueById(s.parameterId,s.value,r);break;case e.ExpressionBlendType_Multiply:t.multiplyParameterValueById(s.parameterId,s.value,r);break;case e.ExpressionBlendType_Overwrite:t.setParameterValueById(s.parameterId,s.value,r)}}},i}(p);t.CubismExpressionMotion=i,function(t){t[t.ExpressionBlendType_Add=0]="ExpressionBlendType_Add",t[t.ExpressionBlendType_Multiply=1]="ExpressionBlendType_Multiply",t[t.ExpressionBlendType_Overwrite=2]="ExpressionBlendType_Overwrite"}(e=t.ExpressionBlendType||(t.ExpressionBlendType={}));var r=function(){};t.ExpressionParameter=r}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(1),o=i(0),n=i(4),s=r.Live2DCubismFramework.csmVector,a=o.Live2DCubismFramework.CubismFramework,u=n.Live2DCubismFramework.CubismJson;!function(t){var e=function(){function t(){this._fadeTimeSeconds=.5,this._lastModel=null,this._partGroups=new s,this._partGroupCounts=new s}return t.create=function(e,r){var o=new t,n=u.create(e,r),s=n.getRoot();s.getValueByString("FadeInTime").isNull()||(o._fadeTimeSeconds=s.getValueByString("FadeInTime").toFloat(.5),o._fadeTimeSeconds<=0&&(o._fadeTimeSeconds=.5));for(var l=s.getValueByString("Groups"),h=l.getSize(),p=0;p<h;++p){for(var g=l.getValueByIndex(p),c=g.getSize(),d=0,_=0;_<c;++_){var m=g.getValueByIndex(_),f=new i,y=a.getIdManager().getId(m.getValueByString("Id").getRawString());if(f.partId=y,!m.getValueByString("Link").isNull())for(var v=m.getValueByString("Link"),S=v.getSize(),b=0;b<S;++b){var C=new i,x=a.getIdManager().getId(v.getValueByIndex(b).getString());C.partId=x,f.link.pushBack(C)}o._partGroups.pushBack(f.clone()),++d}o._partGroupCounts.pushBack(d)}return u.delete(n),o},t.delete=function(t){null!=t&&(t=null)},t.prototype.updateParameters=function(t,e){t!=this._lastModel&&this.reset(t),this._lastModel=t,e<0&&(e=0);for(var i=0,r=0;r<this._partGroupCounts.getSize();r++){var o=this._partGroupCounts.at(r);this.doFade(t,e,i,o),i+=o}this.copyPartOpacities(t)},t.prototype.reset=function(t){for(var e=0,i=0;i<this._partGroupCounts.getSize();++i){for(var r=this._partGroupCounts.at(i),o=e;o<e+r;++o){this._partGroups.at(o).initialize(t);var n=this._partGroups.at(o).partIndex,s=this._partGroups.at(o).parameterIndex;if(!(n<0)){t.setPartOpacityByIndex(n,o==e?1:0),t.setParameterValueByIndex(s,o==e?1:0);for(var a=0;a<this._partGroups.at(o).link.getSize();++a)this._partGroups.at(o).link.at(a).initialize(t)}}e+=r}},t.prototype.copyPartOpacities=function(t){for(var e=0;e<this._partGroups.getSize();++e){var i=this._partGroups.at(e);if(0!=i.link.getSize())for(var r=this._partGroups.at(e).partIndex,o=t.getPartOpacityByIndex(r),n=0;n<i.link.getSize();++n){var s=i.link.at(n).partIndex;s<0||t.setPartOpacityByIndex(s,o)}}},t.prototype.doFade=function(t,e,i,r){for(var o=-1,n=1,s=i;s<i+r;++s){var a=this._partGroups.at(s).partIndex,u=this._partGroups.at(s).parameterIndex;if(t.getParameterValueByIndex(u)>.001){if(o>=0)break;o=s,n=t.getPartOpacityByIndex(a),(n+=e/this._fadeTimeSeconds)>1&&(n=1)}}o<0&&(o=0,n=1);for(s=i;s<i+r;++s){var l=this._partGroups.at(s).partIndex;if(o==s)t.setPartOpacityByIndex(l,n);else{var h=t.getPartOpacityByIndex(l),p=void 0;(1-(p=n<.5?-.5*n/.5+1:.5*(1-n)/.5))*(1-n)>.15&&(p=1-.15/(1-n)),h>p&&(h=p),t.setPartOpacityByIndex(l,h)}}},t}();t.CubismPose=e;var i=function(){function t(t){if(this.parameterIndex=0,this.partIndex=0,this.link=new s,null!=t){this.partId=t.partId;for(var e=t.link.begin();e.notEqual(t.link.end());e.preIncrement())this.link.pushBack(e.ptr().clone())}}return t.prototype.assignment=function(t){this.partId=t.partId;for(var e=t.link.begin();e.notEqual(t.link.end());e.preIncrement())this.link.pushBack(e.ptr().clone());return this},t.prototype.initialize=function(t){this.parameterIndex=t.getParameterIndex(this.partId),this.partIndex=t.getPartIndex(this.partId),t.setParameterValueByIndex(this.parameterIndex,1)},t.prototype.clone=function(){var e=new t;e.partId=this.partId,e.parameterIndex=this.parameterIndex,e.partIndex=this.partIndex,e.link=new s;for(var i=this.link.begin();i.notEqual(this.link.end());i.increment())e.link.pushBack(i.ptr().clone());return e},t}();t.PartData=i}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(40),o=i(7),n=i(1),s=i(0).Live2DCubismFramework.CubismFramework,a=n.Live2DCubismFramework.csmVector,u=o.Live2DCubismFramework.csmString,l=r.Live2DCubismFramework.CubismModelUserDataJson;!function(t){var e=function(){};t.CubismModelUserDataNode=e;var i=function(){function t(){this._userDataNodes=new a,this._artMeshUserDataNode=new a}return t.create=function(e,i){var r=new t;return r.parseUserData(e,i),r},t.delete=function(t){null!=t&&(t.release(),t=null)},t.prototype.getArtMeshUserDatas=function(){return this._artMeshUserDataNode},t.prototype.parseUserData=function(t,i){for(var r=new l(t,i),o=s.getIdManager().getId("ArtMesh"),n=r.getUserDataCount(),a=0;a<n;a++){var h=new e;h.targetId=r.getUserDataId(a),h.targetType=s.getIdManager().getId(r.getUserDataTargetType(a)),h.value=new u(r.getUserDataValue(a)),this._userDataNodes.pushBack(h),h.targetType==o&&this._artMeshUserDataNode.pushBack(h)}r.release(),r=void 0},t.prototype.release=function(){for(var t=0;t<this._userDataNodes.getSize();++t)this._userDataNodes.set(t,null);this._userDataNodes=null},t}();t.CubismModelUserData=i}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(4),o=i(0).Live2DCubismFramework.CubismFramework,n=r.Live2DCubismFramework.CubismJson;!function(t){var e=function(){function t(t,e){this._json=n.create(t,e)}return t.prototype.release=function(){n.delete(this._json)},t.prototype.getUserDataCount=function(){return this._json.getRoot().getValueByString("Meta").getValueByString("UserDataCount").toInt()},t.prototype.getTotalUserDataSize=function(){return this._json.getRoot().getValueByString("Meta").getValueByString("TotalUserDataSize").toInt()},t.prototype.getUserDataTargetType=function(t){return this._json.getRoot().getValueByString("UserData").getValueByIndex(t).getValueByString("Target").getRawString()},t.prototype.getUserDataId=function(t){return o.getIdManager().getId(this._json.getRoot().getValueByString("UserData").getValueByIndex(t).getValueByString("Id").getRawString())},t.prototype.getUserDataValue=function(t){return this._json.getRoot().getValueByString("UserData").getValueByIndex(t).getValueByString("Value").getRawString()},t}();t.CubismModelUserDataJson=e}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(42),o=i(11),n=i(10),s=i(43).Live2DCubismFramework.CubismPhysicsJson,a=n.Live2DCubismFramework.CubismMath,u=r.Live2DCubismFramework.CubismPhysicsRig,l=r.Live2DCubismFramework.CubismPhysicsSubRig,h=r.Live2DCubismFramework.CubismPhysicsInput,p=r.Live2DCubismFramework.CubismPhysicsOutput,g=r.Live2DCubismFramework.CubismPhysicsParticle,c=r.Live2DCubismFramework.CubismPhysicsSource,d=r.Live2DCubismFramework.CubismPhysicsTargetType,_=o.Live2DCubismFramework.CubismVector2;!function(t){var e=function(){function t(){this._physicsRig=null,this._options=new i,this._options.gravity.y=-1,this._options.gravity.x=0,this._options.wind.x=0,this._options.wind.y=0}return t.create=function(e,i){var r=new t;return r.parse(e,i),r._physicsRig.gravity.y=0,r},t.delete=function(t){null!=t&&(t.release(),t=null)},t.prototype.evaluate=function(t,e){var i,r,o,n,s,u,l,h,p,g,c,d,m=new _;p=t.getModel().parameters.values,g=t.getModel().parameters.maximumValues,c=t.getModel().parameters.minimumValues,d=t.getModel().parameters.defaultValues;for(var f=0;f<this._physicsRig.subRigCount;++f){i={angle:0},m.x=0,m.y=0,s=this._physicsRig.settings.at(f),u=this._physicsRig.inputs.get(s.baseInputIndex),l=this._physicsRig.outputs.get(s.baseOutputIndex),h=this._physicsRig.particles.get(s.baseParticleIndex);for(var y=0;y<s.inputCount;++y)r=u[y].weight/100,-1==u[y].sourceParameterIndex&&(u[y].sourceParameterIndex=t.getParameterIndex(u[y].source.id)),u[y].getNormalizedParameterValue(m,i,p[u[y].sourceParameterIndex],c[u[y].sourceParameterIndex],g[u[y].sourceParameterIndex],d[u[y].sourceParameterIndex],s.normalizationPosition,s.normalizationAngle,u[0].reflect,r);o=a.degreesToRadian(-i.angle),m.x=m.x*a.cos(o)-m.y*a.sin(o),m.y=m.x*a.sin(o)+m.y*a.cos(o),x(h,s.particleCount,m,i.angle,this._options.wind,.001*s.normalizationPosition.maximum,e,5);for(y=0;y<s.outputCount;++y){var v=l[y].vertexIndex;if(v<1||v>=s.particleCount)break;-1==l[y].destinationParameterIndex&&(l[y].destinationParameterIndex=t.getParameterIndex(l[y].destination.id));var S=new _;S.x=h[v].position.x-h[v-1].position.x,S.y=h[v].position.y-h[v-1].position.y,n=l[y].getValue(S,h,v,l[y].reflect,this._options.gravity);var b=l[y].destinationParameterIndex,C=!Float32Array.prototype.slice&&"subarray"in Float32Array.prototype?JSON.parse(JSON.stringify(p.subarray(b))):p.slice(b);M(C,c[b],g[b],n,l[y]);for(var L=b,P=0;L<p.length;L++,P++)p[L]=C[P]}}},t.prototype.setOptions=function(t){this._options=t},t.prototype.getOption=function(){return this._options},t.prototype.release=function(){this._physicsRig=void 0,this._physicsRig=null},t.prototype.parse=function(t,e){this._physicsRig=new u;var i=new s(t,e);this._physicsRig.gravity=i.getGravity(),this._physicsRig.wind=i.getWind(),this._physicsRig.subRigCount=i.getSubRigCount(),this._physicsRig.settings.updateSize(this._physicsRig.subRigCount,l,!0),this._physicsRig.inputs.updateSize(i.getTotalInputCount(),h,!0),this._physicsRig.outputs.updateSize(i.getTotalOutputCount(),p,!0),this._physicsRig.particles.updateSize(i.getVertexCount(),g,!0);for(var a=0,_=0,v=0,x=0;x<this._physicsRig.settings.getSize();++x){this._physicsRig.settings.at(x).normalizationPosition.minimum=i.getNormalizationPositionMinimumValue(x),this._physicsRig.settings.at(x).normalizationPosition.maximum=i.getNormalizationPositionMaximumValue(x),this._physicsRig.settings.at(x).normalizationPosition.defalut=i.getNormalizationPositionDefaultValue(x),this._physicsRig.settings.at(x).normalizationAngle.minimum=i.getNormalizationAngleMinimumValue(x),this._physicsRig.settings.at(x).normalizationAngle.maximum=i.getNormalizationAngleMaximumValue(x),this._physicsRig.settings.at(x).normalizationAngle.defalut=i.getNormalizationAngleDefaultValue(x),this._physicsRig.settings.at(x).inputCount=i.getInputCount(x),this._physicsRig.settings.at(x).baseInputIndex=a;for(var M=0;M<this._physicsRig.settings.at(x).inputCount;++M)this._physicsRig.inputs.at(a+M).sourceParameterIndex=-1,this._physicsRig.inputs.at(a+M).weight=i.getInputWeight(x,M),this._physicsRig.inputs.at(a+M).reflect=i.getInputReflect(x,M),"X"==i.getInputType(x,M)?(this._physicsRig.inputs.at(a+M).type=c.CubismPhysicsSource_X,this._physicsRig.inputs.at(a+M).getNormalizedParameterValue=r):"Y"==i.getInputType(x,M)?(this._physicsRig.inputs.at(a+M).type=c.CubismPhysicsSource_Y,this._physicsRig.inputs.at(a+M).getNormalizedParameterValue=o):"Angle"==i.getInputType(x,M)&&(this._physicsRig.inputs.at(a+M).type=c.CubismPhysicsSource_Angle,this._physicsRig.inputs.at(a+M).getNormalizedParameterValue=n),this._physicsRig.inputs.at(a+M).source.targetType=d.CubismPhysicsTargetType_Parameter,this._physicsRig.inputs.at(a+M).source.id=i.getInputSourceId(x,M);a+=this._physicsRig.settings.at(x).inputCount,this._physicsRig.settings.at(x).outputCount=i.getOutputCount(x),this._physicsRig.settings.at(x).baseOutputIndex=_;for(M=0;M<this._physicsRig.settings.at(x).outputCount;++M)this._physicsRig.outputs.at(_+M).destinationParameterIndex=-1,this._physicsRig.outputs.at(_+M).vertexIndex=i.getOutputVertexIndex(x,M),this._physicsRig.outputs.at(_+M).angleScale=i.getOutputAngleScale(x,M),this._physicsRig.outputs.at(_+M).weight=i.getOutputWeight(x,M),this._physicsRig.outputs.at(_+M).destination.targetType=d.CubismPhysicsTargetType_Parameter,this._physicsRig.outputs.at(_+M).destination.id=i.getOutputDestinationId(x,M),"X"==i.getOutputType(x,M)?(this._physicsRig.outputs.at(_+M).type=c.CubismPhysicsSource_X,this._physicsRig.outputs.at(_+M).getValue=m,this._physicsRig.outputs.at(_+M).getScale=S):"Y"==i.getOutputType(x,M)?(this._physicsRig.outputs.at(_+M).type=c.CubismPhysicsSource_Y,this._physicsRig.outputs.at(_+M).getValue=f,this._physicsRig.outputs.at(_+M).getScale=b):"Angle"==i.getOutputType(x,M)&&(this._physicsRig.outputs.at(_+M).type=c.CubismPhysicsSource_Angle,this._physicsRig.outputs.at(_+M).getValue=y,this._physicsRig.outputs.at(_+M).getScale=C),this._physicsRig.outputs.at(_+M).reflect=i.getOutputReflect(x,M);_+=this._physicsRig.settings.at(x).outputCount,this._physicsRig.settings.at(x).particleCount=i.getParticleCount(x),this._physicsRig.settings.at(x).baseParticleIndex=v;for(M=0;M<this._physicsRig.settings.at(x).particleCount;++M)this._physicsRig.particles.at(v+M).mobility=i.getParticleMobility(x,M),this._physicsRig.particles.at(v+M).delay=i.getParticleDelay(x,M),this._physicsRig.particles.at(v+M).acceleration=i.getParticleAcceleration(x,M),this._physicsRig.particles.at(v+M).radius=i.getParticleRadius(x,M),this._physicsRig.particles.at(v+M).position=i.getParticlePosition(x,M);v+=this._physicsRig.settings.at(x).particleCount}this.initialize(),i.release(),i=void 0,i=null},t.prototype.initialize=function(){for(var t,e,i,r=0;r<this._physicsRig.subRigCount;++r){e=this._physicsRig.settings.at(r),(t=this._physicsRig.particles.get(e.baseParticleIndex))[0].initialPosition=new _(0,0),t[0].lastPosition=new _(t[0].initialPosition.x,t[0].initialPosition.y),t[0].lastGravity=new _(0,-1),t[0].lastGravity.y*=-1,t[0].velocity=new _(0,0),t[0].force=new _(0,0);for(var o=1;o<e.particleCount;++o)(i=new _(0,0)).y=t[o].radius,t[o].initialPosition=new _(t[o-1].initialPosition.x+i.x,t[o-1].initialPosition.y+i.y),t[o].position=new _(t[o].initialPosition.x,t[o].initialPosition.y),t[o].lastPosition=new _(t[o].initialPosition.x,t[o].initialPosition.y),t[o].lastGravity=new _(0,-1),t[o].lastGravity.y*=-1,t[o].velocity=new _(0,0),t[o].force=new _(0,0)}},t}();t.CubismPhysics=e;var i=function(){this.gravity=new _(0,0),this.wind=new _(0,0)};function r(t,e,i,r,o,n,s,a,u,l){t.x+=L(i,r,o,n,s.minimum,s.maximum,s.defalut,u)*l}function o(t,e,i,r,o,n,s,a,u,l){t.y+=L(i,r,o,n,s.minimum,s.maximum,s.defalut,u)*l}function n(t,e,i,r,o,n,s,a,u,l){e.angle+=L(i,r,o,n,a.minimum,a.maximum,a.defalut,u)*l}function m(t,e,i,r,o){var n=t.x;return r&&(n*=-1),n}function f(t,e,i,r,o){var n=t.y;return r&&(n*=-1),n}function y(t,e,i,r,o){var n;return o=i>=2?e[i-1].position.substract(e[i-2].position):o.multiplyByScaler(-1),n=a.directionToRadian(o,t),r&&(n*=-1),n}function v(t,e){return a.min(t,e)+function(t,e){var i=a.max(t,e),r=a.min(t,e);return a.abs(i-r)}(t,e)/2}function S(t,e){return JSON.parse(JSON.stringify(t.x))}function b(t,e){return JSON.parse(JSON.stringify(t.y))}function C(t,e){return JSON.parse(JSON.stringify(e))}function x(t,e,i,r,o,n,s,u){var l,h,p,g,c=new _(0,0),d=new _(0,0),m=new _(0,0),f=new _(0,0);t[0].position=new _(i.x,i.y),l=a.degreesToRadian(r),(g=a.radianToDirection(l)).normalize();for(var y=1;y<e;++y)t[y].force=g.multiplyByScaler(t[y].acceleration).add(o),t[y].lastPosition=new _(t[y].position.x,t[y].position.y),h=t[y].delay*s*30,c=t[y].position.substract(t[y-1].position),p=a.directionToRadian(t[y].lastGravity,g)/u,c.x=a.cos(p)*c.x-c.y*a.sin(p),c.y=a.sin(p)*c.x+c.y*a.cos(p),t[y].position=t[y-1].position.add(c),d=t[y].velocity.multiplyByScaler(h),m=t[y].force.multiplyByScaler(h).multiplyByScaler(h),t[y].position=t[y].position.add(d).add(m),(f=t[y].position.substract(t[y-1].position)).normalize(),t[y].position=t[y-1].position.add(f.multiplyByScaler(t[y].radius)),a.abs(t[y].position.x)<n&&(t[y].position.x=0),0!=h&&(t[y].velocity=t[y].position.substract(t[y].lastPosition),t[y].velocity=t[y].velocity.divisionByScalar(h),t[y].velocity=t[y].velocity.multiplyByScaler(t[y].mobility)),t[y].force=new _(0,0),t[y].lastGravity=new _(g.x,g.y)}function M(t,e,i,r,o){var n,s;(n=r*o.getScale(o.translationScale,o.angleScale))<e?(n<o.valueBelowMinimum&&(o.valueBelowMinimum=n),n=e):n>i&&(n>o.valueExceededMaximum&&(o.valueExceededMaximum=n),n=i),(s=o.weight/100)>=1?t[0]=n:(n=t[0]*(1-s)+n*s,t[0]=n)}function L(t,e,i,r,o,n,s,u){var l=0,h=a.max(i,e);h<t&&(t=h);var p=a.min(i,e);p>t&&(t=p);var g=a.min(o,n),c=a.max(o,n),d=s,_=v(p,h),m=t-_;switch(function(t){var e=0;return t>0?e=1:t<0&&(e=-1),e}(m)){case 1:var f=c-d;0!=(y=h-_)&&(l=m*(f/y),l+=d);break;case-1:var y;f=g-d;0!=(y=p-_)&&(l=m*(f/y),l+=d);break;case 0:l=d}return u?l:-1*l}t.Options=i}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(11),o=i(1).Live2DCubismFramework.csmVector,n=r.Live2DCubismFramework.CubismVector2;!function(t){!function(t){t[t.CubismPhysicsTargetType_Parameter=0]="CubismPhysicsTargetType_Parameter"}(t.CubismPhysicsTargetType||(t.CubismPhysicsTargetType={})),function(t){t[t.CubismPhysicsSource_X=0]="CubismPhysicsSource_X",t[t.CubismPhysicsSource_Y=1]="CubismPhysicsSource_Y",t[t.CubismPhysicsSource_Angle=2]="CubismPhysicsSource_Angle"}(t.CubismPhysicsSource||(t.CubismPhysicsSource={}));var e=function(){this.gravity=new n(0,0),this.wind=new n(0,0)};t.PhysicsJsonEffectiveForces=e;var i=function(){};t.CubismPhysicsParameter=i;var r=function(){};t.CubismPhysicsNormalization=r;var s=function(){this.initialPosition=new n(0,0),this.position=new n(0,0),this.lastPosition=new n(0,0),this.lastGravity=new n(0,0),this.force=new n(0,0),this.velocity=new n(0,0)};t.CubismPhysicsParticle=s;var a=function(){this.normalizationPosition=new r,this.normalizationAngle=new r};t.CubismPhysicsSubRig=a;var u=function(){this.source=new i};t.CubismPhysicsInput=u;var l=function(){this.destination=new i,this.translationScale=new n(0,0)};t.CubismPhysicsOutput=l;var h=function(){this.settings=new o,this.inputs=new o,this.outputs=new o,this.particles=new o,this.gravity=new n(0,0),this.wind=new n(0,0)};t.CubismPhysicsRig=h}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(4),o=i(11),n=i(0).Live2DCubismFramework.CubismFramework,s=o.Live2DCubismFramework.CubismVector2,a=r.Live2DCubismFramework.CubismJson;!function(t){var e="Meta",i="PhysicsSettings",r=function(){function t(t,e){this._json=a.create(t,e)}return t.prototype.release=function(){a.delete(this._json)},t.prototype.getGravity=function(){var t=new s(0,0);return t.x=this._json.getRoot().getValueByString(e).getValueByString("EffectiveForces").getValueByString("Gravity").getValueByString("X").toFloat(),t.y=this._json.getRoot().getValueByString(e).getValueByString("EffectiveForces").getValueByString("Gravity").getValueByString("Y").toFloat(),t},t.prototype.getWind=function(){var t=new s(0,0);return t.x=this._json.getRoot().getValueByString(e).getValueByString("EffectiveForces").getValueByString("Wind").getValueByString("X").toFloat(),t.y=this._json.getRoot().getValueByString(e).getValueByString("EffectiveForces").getValueByString("Wind").getValueByString("Y").toFloat(),t},t.prototype.getSubRigCount=function(){return this._json.getRoot().getValueByString(e).getValueByString("PhysicsSettingCount").toInt()},t.prototype.getTotalInputCount=function(){return this._json.getRoot().getValueByString(e).getValueByString("TotalInputCount").toInt()},t.prototype.getTotalOutputCount=function(){return this._json.getRoot().getValueByString(e).getValueByString("TotalOutputCount").toInt()},t.prototype.getVertexCount=function(){return this._json.getRoot().getValueByString(e).getValueByString("VertexCount").toInt()},t.prototype.getNormalizationPositionMinimumValue=function(t){return this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Normalization").getValueByString("Position").getValueByString("Minimum").toFloat()},t.prototype.getNormalizationPositionMaximumValue=function(t){return this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Normalization").getValueByString("Position").getValueByString("Maximum").toFloat()},t.prototype.getNormalizationPositionDefaultValue=function(t){return this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Normalization").getValueByString("Position").getValueByString("Default").toFloat()},t.prototype.getNormalizationAngleMinimumValue=function(t){return this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Normalization").getValueByString("Angle").getValueByString("Minimum").toFloat()},t.prototype.getNormalizationAngleMaximumValue=function(t){return this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Normalization").getValueByString("Angle").getValueByString("Maximum").toFloat()},t.prototype.getNormalizationAngleDefaultValue=function(t){return this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Normalization").getValueByString("Angle").getValueByString("Default").toFloat()},t.prototype.getInputCount=function(t){return this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Input").getVector().getSize()},t.prototype.getInputWeight=function(t,e){return this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Input").getValueByIndex(e).getValueByString("Weight").toFloat()},t.prototype.getInputReflect=function(t,e){return this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Input").getValueByIndex(e).getValueByString("Reflect").toBoolean()},t.prototype.getInputType=function(t,e){return this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Input").getValueByIndex(e).getValueByString("Type").getRawString()},t.prototype.getInputSourceId=function(t,e){return n.getIdManager().getId(this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Input").getValueByIndex(e).getValueByString("Source").getValueByString("Id").getRawString())},t.prototype.getOutputCount=function(t){return this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Output").getVector().getSize()},t.prototype.getOutputVertexIndex=function(t,e){return this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Output").getValueByIndex(e).getValueByString("VertexIndex").toInt()},t.prototype.getOutputAngleScale=function(t,e){return this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Output").getValueByIndex(e).getValueByString("Scale").toFloat()},t.prototype.getOutputWeight=function(t,e){return this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Output").getValueByIndex(e).getValueByString("Weight").toFloat()},t.prototype.getOutputDestinationId=function(t,e){return n.getIdManager().getId(this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Output").getValueByIndex(e).getValueByString("Destination").getValueByString("Id").getRawString())},t.prototype.getOutputType=function(t,e){return this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Output").getValueByIndex(e).getValueByString("Type").getRawString()},t.prototype.getOutputReflect=function(t,e){return this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Output").getValueByIndex(e).getValueByString("Reflect").toBoolean()},t.prototype.getParticleCount=function(t){return this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Vertices").getVector().getSize()},t.prototype.getParticleMobility=function(t,e){return this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Vertices").getValueByIndex(e).getValueByString("Mobility").toFloat()},t.prototype.getParticleDelay=function(t,e){return this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Vertices").getValueByIndex(e).getValueByString("Delay").toFloat()},t.prototype.getParticleAcceleration=function(t,e){return this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Vertices").getValueByIndex(e).getValueByString("Acceleration").toFloat()},t.prototype.getParticleRadius=function(t,e){return this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Vertices").getValueByIndex(e).getValueByString("Radius").toInt()},t.prototype.getParticlePosition=function(t,e){var r=new s(0,0);return r.x=this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Vertices").getValueByIndex(e).getValueByString("Position").getValueByString("X").toFloat(),r.y=this._json.getRoot().getValueByString(i).getValueByIndex(t).getValueByString("Vertices").getValueByIndex(e).getValueByString("Position").getValueByString("Y").toFloat(),r},t}();t.CubismPhysicsJson=r}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var n=i(0),s=i(45),a=i(14),u=i(6),l=i(8),h=i(1),p=i(2),g=n.Live2DCubismFramework.Constant,c=u.Live2DCubismFramework.CubismMatrix44,d=s.Live2DCubismFramework.csmRect,_=l.Live2DCubismFramework.csmMap,m=h.Live2DCubismFramework.csmVector,f=a.Live2DCubismFramework.CubismRenderer,y=a.Live2DCubismFramework.CubismBlendMode,v=a.Live2DCubismFramework.CubismTextureColor;!function(t){var e,i,r,n=function(){function t(){this._maskRenderTexture=null,this._colorBuffer=null,this._currentFrameNo=0,this._clippingMaskBufferSize=256,this._clippingContextListForMask=new m,this._clippingContextListForDraw=new m,this._channelColors=new m,this._tmpBoundsOnModel=new d,this._tmpMatrix=new c,this._tmpMatrixForMask=new c,this._tmpMatrixForDraw=new c,this._maskTexture=null;var t=new v;t.R=1,t.G=0,t.B=0,t.A=0,this._channelColors.pushBack(t),(t=new v).R=0,t.G=1,t.B=0,t.A=0,this._channelColors.pushBack(t),(t=new v).R=0,t.G=0,t.B=1,t.A=0,this._channelColors.pushBack(t),(t=new v).R=0,t.G=0,t.B=0,t.A=1,this._channelColors.pushBack(t)}return t.prototype.getChannelFlagAsColor=function(t){return this._channelColors.at(t)},t.prototype.getMaskRenderTexture=function(){var t=0;if(this._maskTexture&&0!=this._maskTexture.texture&&(this._maskTexture.frameNo=this._currentFrameNo,t=this._maskTexture.texture),0==t){var e=this._clippingMaskBufferSize;this._colorBuffer=this.gl.createTexture(),this.gl.bindTexture(this.gl.TEXTURE_2D,this._colorBuffer),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,e,e,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,null),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR),this.gl.bindTexture(this.gl.TEXTURE_2D,null),t=this.gl.createFramebuffer(),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,t),this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER,this.gl.COLOR_ATTACHMENT0,this.gl.TEXTURE_2D,this._colorBuffer,0),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,r),this._maskTexture=new s(this._currentFrameNo,t)}return t},t.prototype.setGL=function(t){this.gl=t},t.prototype.calcClippedDrawTotalBounds=function(t,e){for(var i=Number.MAX_VALUE,r=Number.MAX_VALUE,o=Number.MIN_VALUE,n=Number.MIN_VALUE,s=e._clippedDrawableIndexList.length,a=0;a<s;a++){for(var u=e._clippedDrawableIndexList[a],l=t.getDrawableVertexCount(u),h=t.getDrawableVertices(u),p=Number.MAX_VALUE,c=Number.MAX_VALUE,d=Number.MIN_VALUE,_=Number.MIN_VALUE,m=l*g.vertexStep,f=g.vertexOffset;f<m;f+=g.vertexStep){var y=h[f],v=h[f+1];y<p&&(p=y),y>d&&(d=y),v<c&&(c=v),v>_&&(_=v)}if(p!=Number.MAX_VALUE)if(p<i&&(i=p),c<r&&(r=c),d>o&&(o=d),_>n&&(n=_),i==Number.MAX_VALUE)e._allClippedDrawRect.x=0,e._allClippedDrawRect.y=0,e._allClippedDrawRect.width=0,e._allClippedDrawRect.height=0,e._isUsing=!1;else{e._isUsing=!0;var S=o-i,b=n-r;e._allClippedDrawRect.x=i,e._allClippedDrawRect.y=r,e._allClippedDrawRect.width=S,e._allClippedDrawRect.height=b}}},t.prototype.release=function(){for(var t=0;t<this._clippingContextListForMask.getSize();t++)this._clippingContextListForMask.at(t)&&(this._clippingContextListForMask.at(t).release(),this._clippingContextListForMask.set(t,void 0)),this._clippingContextListForMask.set(t,null);this._clippingContextListForMask=null;for(t=0;t<this._clippingContextListForDraw.getSize();t++)this._clippingContextListForDraw.set(t,null);this._clippingContextListForDraw=null,this._maskTexture&&(this.gl.deleteFramebuffer(this._maskTexture.texture),this._maskTexture=null);for(t=0;t<this._channelColors.getSize();t++)this._channelColors.set(t,null);this._channelColors=null,this.gl.deleteTexture(this._colorBuffer),this._colorBuffer=null},t.prototype.initialize=function(t,e,i,r){for(var o=0;o<e;o++)if(r[o]<=0)this._clippingContextListForDraw.pushBack(null);else{var n=this.findSameClip(i[o],r[o]);null==n&&(n=new a(this,i[o],r[o]),this._clippingContextListForMask.pushBack(n)),n.addClippedDrawable(o),this._clippingContextListForDraw.pushBack(n)}},t.prototype.setupClippingContext=function(t,e){this._currentFrameNo++;for(var o=0,n=0;n<this._clippingContextListForMask.getSize();n++){var s=this._clippingContextListForMask.at(n);this.calcClippedDrawTotalBounds(t,s),s._isUsing&&o++}if(o>0){this.gl.viewport(0,0,this._clippingMaskBufferSize,this._clippingMaskBufferSize),this._maskRenderTexture=this.getMaskRenderTexture();e.getMvpMatrix();e.preDraw(),this.setupLayoutBounds(o),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this._maskRenderTexture),this.gl.clearColor(1,1,1,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT);for(n=0;n<this._clippingContextListForMask.getSize();n++){var a=this._clippingContextListForMask.at(n),u=a._allClippedDrawRect,l=a._layoutBounds;this._tmpBoundsOnModel.setRect(u),this._tmpBoundsOnModel.expand(.05*u.width,.05*u.height);var h=l.width/this._tmpBoundsOnModel.width,p=l.height/this._tmpBoundsOnModel.height;this._tmpMatrix.loadIdentity(),this._tmpMatrix.translateRelative(-1,-1),this._tmpMatrix.scaleRelative(2,2),this._tmpMatrix.translateRelative(l.x,l.y),this._tmpMatrix.scaleRelative(h,p),this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x,-this._tmpBoundsOnModel.y),this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray()),this._tmpMatrix.loadIdentity(),this._tmpMatrix.translateRelative(l.x,l.y),this._tmpMatrix.scaleRelative(h,p),this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x,-this._tmpBoundsOnModel.y),this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray()),a._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray()),a._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());for(var g=a._clippingIdCount,c=0;c<g;c++){var d=a._clippingIdList[c];t.getDrawableDynamicFlagVertexPositionsDidChange(d)&&(e.setIsCulling(0!=t.getDrawableCulling(d)),e.setClippingContextBufferForMask(a),e.drawMesh(t.getDrawableTextureIndices(d),t.getDrawableVertexIndexCount(d),t.getDrawableVertexCount(d),t.getDrawableVertexIndices(d),t.getDrawableVertices(d),t.getDrawableVertexUvs(d),t.getDrawableOpacity(d),y.CubismBlendMode_Normal,!1))}}this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,r),e.setClippingContextBufferForMask(null),this.gl.viewport(i[0],i[1],i[2],i[3])}},t.prototype.findSameClip=function(t,e){for(var i=0;i<this._clippingContextListForMask.getSize();i++){var r=this._clippingContextListForMask.at(i),o=r._clippingIdCount;if(o==e){for(var n=0,s=0;s<o;s++)for(var a=r._clippingIdList[s],u=0;u<o;u++)if(t[u]==a){n++;break}if(n==o)return r}}return null},t.prototype.setupLayoutBounds=function(t){var e=t/4,i=t%4;e=~~e,i=~~i;for(var r=0,o=0;o<4;o++){var n=e+(o<i?1:0);if(0==n);else if(1==n){var s=this._clippingContextListForMask.at(r++);s._layoutChannelNo=o,s._layoutBounds.x=0,s._layoutBounds.y=0,s._layoutBounds.width=1,s._layoutBounds.height=1}else if(2==n)for(var a=0;a<n;a++){u=~~(u=a%2),(h=this._clippingContextListForMask.at(r++))._layoutChannelNo=o,h._layoutBounds.x=.5*u,h._layoutBounds.y=0,h._layoutBounds.width=.5,h._layoutBounds.height=1}else if(n<=4)for(a=0;a<n;a++){u=~~(u=a%2),l=~~(l=a/2),(h=this._clippingContextListForMask.at(r++))._layoutChannelNo=o,h._layoutBounds.x=.5*u,h._layoutBounds.y=.5*l,h._layoutBounds.width=.5,h._layoutBounds.height=.5}else if(n<=9)for(a=0;a<n;a++){var u,l,h;u=~~(u=a%3),l=~~(l=a/3),(h=this._clippingContextListForMask.at(r++))._layoutChannelNo=o,h._layoutBounds.x=u/3,h._layoutBounds.y=l/3,h._layoutBounds.width=1/3,h._layoutBounds.height=1/3}else p.CubismLogError("not supported mask count : {0}",n)}},t.prototype.getColorBuffer=function(){return this._colorBuffer},t.prototype.getClippingContextListForDraw=function(){return this._clippingContextListForDraw},t.prototype.setClippingMaskBufferSize=function(t){this._clippingMaskBufferSize=t},t.prototype.getClippingMaskBufferSize=function(){return this._clippingMaskBufferSize},t}();t.CubismClippingManager_WebGL=n;var s=function(t,e){this.frameNo=t,this.texture=e};t.CubismRenderTextureResource=s;var a=function(){function t(t,e,i){this._owner=t,this._clippingIdList=e,this._clippingIdCount=i,this._allClippedDrawRect=new d,this._layoutBounds=new d,this._clippedDrawableIndexList=[],this._matrixForMask=new c,this._matrixForDraw=new c}return t.prototype.release=function(){null!=this._layoutBounds&&(this._layoutBounds=null),null!=this._allClippedDrawRect&&(this._allClippedDrawRect=null),null!=this._clippedDrawableIndexList&&(this._clippedDrawableIndexList=null)},t.prototype.addClippedDrawable=function(t){this._clippedDrawableIndexList.push(t)},t.prototype.getClippingManager=function(){return this._owner},t.prototype.setGl=function(t){this._owner.setGL(t)},t}();t.CubismClippingContext=a;var u=function(){function i(){this._shaderSets=new m}return i.getInstance=function(){return null==e?e=new i:e},i.deleteInstance=function(){e&&(e.release(),e=null)},i.prototype.release=function(){this.releaseShaderProgram()},i.prototype.setupShaderProgram=function(t,e,i,r,o,n,s,a,u,g,c,d,_){var m,f,v,S;if(c||p.CubismLogError("NoPremultipliedAlpha is not allowed"),0==this._shaderSets.getSize()&&this.generateShaders(),null!=t.getClippingContextBufferForMask()){var b=this._shaderSets.at(l.ShaderNames_SetupMask);this.gl.useProgram(b.shaderProgram),this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,e),this.gl.uniform1i(b.samplerTexture0Location,0),null==s.vertex&&(s.vertex=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,s.vertex),this.gl.bufferData(this.gl.ARRAY_BUFFER,r,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(b.attributePositionLocation),this.gl.vertexAttribPointer(b.attributePositionLocation,2,this.gl.FLOAT,!1,0,0),null==s.uv&&(s.uv=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,s.uv),this.gl.bufferData(this.gl.ARRAY_BUFFER,n,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(b.attributeTexCoordLocation),this.gl.vertexAttribPointer(b.attributeTexCoordLocation,2,this.gl.FLOAT,!1,0,0);var C=t.getClippingContextBufferForMask()._layoutChannelNo,x=t.getClippingContextBufferForMask().getClippingManager().getChannelFlagAsColor(C);this.gl.uniform4f(b.uniformChannelFlagLocation,x.R,x.G,x.B,x.A),this.gl.uniformMatrix4fv(b.uniformClipMatrixLocation,!1,t.getClippingContextBufferForMask()._matrixForMask.getArray());var M=t.getClippingContextBufferForMask()._layoutBounds;this.gl.uniform4f(b.uniformBaseColorLocation,2*M.x-1,2*M.y-1,2*M.getRight()-1,2*M.getBottom()-1),m=this.gl.ZERO,f=this.gl.ONE_MINUS_SRC_COLOR,v=this.gl.ZERO,S=this.gl.ONE_MINUS_SRC_ALPHA}else{var L=null!=t.getClippingContextBufferForDraw(),P=L?_?2:1:0;b=new h;switch(u){case y.CubismBlendMode_Normal:default:b=this._shaderSets.at(l.ShaderNames_NormalPremultipliedAlpha+P),m=this.gl.ONE,f=this.gl.ONE_MINUS_SRC_ALPHA,v=this.gl.ONE,S=this.gl.ONE_MINUS_SRC_ALPHA;break;case y.CubismBlendMode_Additive:b=this._shaderSets.at(l.ShaderNames_AddPremultipliedAlpha+P),m=this.gl.ONE,f=this.gl.ONE,v=this.gl.ZERO,S=this.gl.ONE;break;case y.CubismBlendMode_Multiplicative:b=this._shaderSets.at(l.ShaderNames_MultPremultipliedAlpha+P),m=this.gl.DST_COLOR,f=this.gl.ONE_MINUS_SRC_ALPHA,v=this.gl.ZERO,S=this.gl.ONE}if(this.gl.useProgram(b.shaderProgram),null==s.vertex&&(s.vertex=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,s.vertex),this.gl.bufferData(this.gl.ARRAY_BUFFER,r,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(b.attributePositionLocation),this.gl.vertexAttribPointer(b.attributePositionLocation,2,this.gl.FLOAT,!1,0,0),null==s.uv&&(s.uv=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,s.uv),this.gl.bufferData(this.gl.ARRAY_BUFFER,n,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(b.attributeTexCoordLocation),this.gl.vertexAttribPointer(b.attributeTexCoordLocation,2,this.gl.FLOAT,!1,0,0),L){this.gl.activeTexture(this.gl.TEXTURE1);var B=t.getClippingContextBufferForDraw().getClippingManager().getColorBuffer();this.gl.bindTexture(this.gl.TEXTURE_2D,B),this.gl.uniform1i(b.samplerTexture1Location,1),this.gl.uniformMatrix4fv(b.uniformClipMatrixLocation,!1,t.getClippingContextBufferForDraw()._matrixForDraw.getArray());C=t.getClippingContextBufferForDraw()._layoutChannelNo,x=t.getClippingContextBufferForDraw().getClippingManager().getChannelFlagAsColor(C);this.gl.uniform4f(b.uniformChannelFlagLocation,x.R,x.G,x.B,x.A)}this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,e),this.gl.uniform1i(b.samplerTexture0Location,0),this.gl.uniformMatrix4fv(b.uniformMatrixLocation,!1,d.getArray()),this.gl.uniform4f(b.uniformBaseColorLocation,g.R,g.G,g.B,g.A)}null==s.index&&(s.index=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,s.index),this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,o,this.gl.DYNAMIC_DRAW),this.gl.blendFuncSeparate(m,f,v,S)},i.prototype.releaseShaderProgram=function(){for(var t=0;t<this._shaderSets.getSize();t++)this.gl.deleteProgram(this._shaderSets.at(t).shaderProgram),this._shaderSets.at(t).shaderProgram=0,this._shaderSets.set(t,void 0),this._shaderSets.set(t,null)},i.prototype.generateShaders=function(){for(var e=0;e<10;e++)this._shaderSets.pushBack(new h);this._shaderSets.at(0).shaderProgram=this.loadShaderProgram(t.vertexShaderSrcSetupMask,t.fragmentShaderSrcsetupMask),this._shaderSets.at(1).shaderProgram=this.loadShaderProgram(t.vertexShaderSrc,t.fragmentShaderSrcPremultipliedAlpha),this._shaderSets.at(2).shaderProgram=this.loadShaderProgram(t.vertexShaderSrcMasked,t.fragmentShaderSrcMaskPremultipliedAlpha),this._shaderSets.at(3).shaderProgram=this.loadShaderProgram(t.vertexShaderSrcMasked,t.fragmentShaderSrcMaskInvertedPremultipliedAlpha),this._shaderSets.at(4).shaderProgram=this._shaderSets.at(1).shaderProgram,this._shaderSets.at(5).shaderProgram=this._shaderSets.at(2).shaderProgram,this._shaderSets.at(6).shaderProgram=this._shaderSets.at(3).shaderProgram,this._shaderSets.at(7).shaderProgram=this._shaderSets.at(1).shaderProgram,this._shaderSets.at(8).shaderProgram=this._shaderSets.at(2).shaderProgram,this._shaderSets.at(9).shaderProgram=this._shaderSets.at(3).shaderProgram,this._shaderSets.at(0).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram,"a_position"),this._shaderSets.at(0).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram,"a_texCoord"),this._shaderSets.at(0).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"s_texture0"),this._shaderSets.at(0).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_clipMatrix"),this._shaderSets.at(0).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_channelFlag"),this._shaderSets.at(0).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_baseColor"),this._shaderSets.at(1).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram,"a_position"),this._shaderSets.at(1).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram,"a_texCoord"),this._shaderSets.at(1).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"s_texture0"),this._shaderSets.at(1).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_matrix"),this._shaderSets.at(1).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_baseColor"),this._shaderSets.at(2).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram,"a_position"),this._shaderSets.at(2).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram,"a_texCoord"),this._shaderSets.at(2).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"s_texture0"),this._shaderSets.at(2).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"s_texture1"),this._shaderSets.at(2).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_matrix"),this._shaderSets.at(2).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_clipMatrix"),this._shaderSets.at(2).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_channelFlag"),this._shaderSets.at(2).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_baseColor"),this._shaderSets.at(3).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram,"a_position"),this._shaderSets.at(3).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram,"a_texCoord"),this._shaderSets.at(3).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"s_texture0"),this._shaderSets.at(3).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"s_texture1"),this._shaderSets.at(3).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_matrix"),this._shaderSets.at(3).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_clipMatrix"),this._shaderSets.at(3).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_channelFlag"),this._shaderSets.at(3).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_baseColor"),this._shaderSets.at(4).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram,"a_position"),this._shaderSets.at(4).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram,"a_texCoord"),this._shaderSets.at(4).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"s_texture0"),this._shaderSets.at(4).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_matrix"),this._shaderSets.at(4).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_baseColor"),this._shaderSets.at(5).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram,"a_position"),this._shaderSets.at(5).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram,"a_texCoord"),this._shaderSets.at(5).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"s_texture0"),this._shaderSets.at(5).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"s_texture1"),this._shaderSets.at(5).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_matrix"),this._shaderSets.at(5).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_clipMatrix"),this._shaderSets.at(5).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_channelFlag"),this._shaderSets.at(5).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_baseColor"),this._shaderSets.at(6).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram,"a_position"),this._shaderSets.at(6).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram,"a_texCoord"),this._shaderSets.at(6).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"s_texture0"),this._shaderSets.at(6).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"s_texture1"),this._shaderSets.at(6).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_matrix"),this._shaderSets.at(6).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_clipMatrix"),this._shaderSets.at(6).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_channelFlag"),this._shaderSets.at(6).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_baseColor"),this._shaderSets.at(7).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram,"a_position"),this._shaderSets.at(7).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram,"a_texCoord"),this._shaderSets.at(7).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"s_texture0"),this._shaderSets.at(7).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_matrix"),this._shaderSets.at(7).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_baseColor"),this._shaderSets.at(8).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram,"a_position"),this._shaderSets.at(8).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram,"a_texCoord"),this._shaderSets.at(8).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"s_texture0"),this._shaderSets.at(8).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"s_texture1"),this._shaderSets.at(8).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_matrix"),this._shaderSets.at(8).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_clipMatrix"),this._shaderSets.at(8).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_channelFlag"),this._shaderSets.at(8).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_baseColor"),this._shaderSets.at(9).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram,"a_position"),this._shaderSets.at(9).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram,"a_texCoord"),this._shaderSets.at(9).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"s_texture0"),this._shaderSets.at(9).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"s_texture1"),this._shaderSets.at(9).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_matrix"),this._shaderSets.at(9).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_clipMatrix"),this._shaderSets.at(9).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_channelFlag"),this._shaderSets.at(9).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_baseColor")},i.prototype.loadShaderProgram=function(t,e){var i=this.gl.createProgram(),r=this.compileShaderSource(this.gl.VERTEX_SHADER,t);if(!r)return p.CubismLogError("Vertex shader compile error!"),0;var o=this.compileShaderSource(this.gl.FRAGMENT_SHADER,e);return o?(this.gl.attachShader(i,r),this.gl.attachShader(i,o),this.gl.linkProgram(i),this.gl.getProgramParameter(i,this.gl.LINK_STATUS)?(this.gl.deleteShader(r),this.gl.deleteShader(o),i):(p.CubismLogError("Failed to link program: {0}",i),this.gl.deleteShader(r),r=0,this.gl.deleteShader(o),o=0,i&&(this.gl.deleteProgram(i),i=0),0)):(p.CubismLogError("Vertex shader compile error!"),0)},i.prototype.compileShaderSource=function(t,e){var i=e,r=this.gl.createShader(t);if(this.gl.shaderSource(r,i),this.gl.compileShader(r),!r){var o=this.gl.getShaderInfoLog(r);p.CubismLogError("Shader compile log: {0} ",o)}return this.gl.getShaderParameter(r,this.gl.COMPILE_STATUS)?r:(this.gl.deleteShader(r),null)},i.prototype.setGl=function(t){this.gl=t},i}();t.CubismShader_WebGL=u;var l,h=function(){};t.CubismShaderSet=h,function(t){t[t.ShaderNames_SetupMask=0]="ShaderNames_SetupMask",t[t.ShaderNames_NormalPremultipliedAlpha=1]="ShaderNames_NormalPremultipliedAlpha",t[t.ShaderNames_NormalMaskedPremultipliedAlpha=2]="ShaderNames_NormalMaskedPremultipliedAlpha",t[t.ShaderNames_NomralMaskedInvertedPremultipliedAlpha=3]="ShaderNames_NomralMaskedInvertedPremultipliedAlpha",t[t.ShaderNames_AddPremultipliedAlpha=4]="ShaderNames_AddPremultipliedAlpha",t[t.ShaderNames_AddMaskedPremultipliedAlpha=5]="ShaderNames_AddMaskedPremultipliedAlpha",t[t.ShaderNames_AddMaskedPremultipliedAlphaInverted=6]="ShaderNames_AddMaskedPremultipliedAlphaInverted",t[t.ShaderNames_MultPremultipliedAlpha=7]="ShaderNames_MultPremultipliedAlpha",t[t.ShaderNames_MultMaskedPremultipliedAlpha=8]="ShaderNames_MultMaskedPremultipliedAlpha",t[t.ShaderNames_MultMaskedPremultipliedAlphaInverted=9]="ShaderNames_MultMaskedPremultipliedAlphaInverted"}(l=t.ShaderNames||(t.ShaderNames={})),t.vertexShaderSrcSetupMask="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_myPos;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_clipMatrix * a_position;   v_myPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",t.fragmentShaderSrcsetupMask="precision mediump float;varying vec2       v_texCoord;varying vec4       v_myPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;void main(){   float isInside =        step(u_baseColor.x, v_myPos.x/v_myPos.w)       * step(u_baseColor.y, v_myPos.y/v_myPos.w)       * step(v_myPos.x/v_myPos.w, u_baseColor.z)       * step(v_myPos.y/v_myPos.w, u_baseColor.w);   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;}",t.vertexShaderSrc="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;uniform mat4       u_matrix;void main(){   gl_Position = u_matrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",t.vertexShaderSrcMasked="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform mat4       u_matrix;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_matrix * a_position;   v_clipPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",t.fragmentShaderSrcPremultipliedAlpha="precision mediump float;varying vec2       v_texCoord;uniform vec4       u_baseColor;uniform sampler2D  s_texture0;void main(){   gl_FragColor = texture2D(s_texture0 , v_texCoord) * u_baseColor;}",t.fragmentShaderSrcMaskPremultipliedAlpha="precision mediump float;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;uniform sampler2D  s_texture1;void main(){   vec4 col_formask = texture2D(s_texture0 , v_texCoord) * u_baseColor;   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;   col_formask = col_formask * maskVal;   gl_FragColor = col_formask;}",t.fragmentShaderSrcMaskInvertedPremultipliedAlpha="precision mediump float;varying vec2 v_texCoord;varying vec4 v_clipPos;uniform sampler2D s_texture0;uniform sampler2D s_texture1;uniform vec4 u_channelFlag;uniform vec4 u_baseColor;void main(){vec4 col_formask = texture2D(s_texture0, v_texCoord) * u_baseColor;vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;col_formask = col_formask * (1.0 - maskVal);gl_FragColor = col_formask;}";var S=function(t){function e(){var e=t.call(this)||this;return e._clippingContextBufferForMask=null,e._clippingContextBufferForDraw=null,e._clippingManager=new n,e.firstDraw=!0,e._textures=new _,e._sortedDrawableIndexList=new m,e._bufferData={vertex:WebGLBuffer=null,uv:WebGLBuffer=null,index:WebGLBuffer=null},e._textures.prepareCapacity(32,!0),e}return o(e,t),e.prototype.initialize=function(e){e.isUsingMasking()&&(this._clippingManager=new n,this._clippingManager.initialize(e,e.getDrawableCount(),e.getDrawableMasks(),e.getDrawableMaskCounts())),this._sortedDrawableIndexList.resize(e.getDrawableCount(),0),t.prototype.initialize.call(this,e)},e.prototype.bindTexture=function(t,e){this._textures.setValue(t,e)},e.prototype.getBindedTextures=function(){return this._textures},e.prototype.setClippingMaskBufferSize=function(t){this._clippingManager.release(),this._clippingManager=void 0,this._clippingManager=null,this._clippingManager=new n,this._clippingManager.setClippingMaskBufferSize(t),this._clippingManager.initialize(this.getModel(),this.getModel().getDrawableCount(),this.getModel().getDrawableMasks(),this.getModel().getDrawableMaskCounts())},e.prototype.getClippingMaskBufferSize=function(){return this._clippingManager.getClippingMaskBufferSize()},e.prototype.release=function(){this._clippingManager.release(),this._clippingManager=void 0,this._clippingManager=null,this.gl.deleteBuffer(this._bufferData.vertex),this._bufferData.vertex=null,this.gl.deleteBuffer(this._bufferData.uv),this._bufferData.uv=null,this.gl.deleteBuffer(this._bufferData.index),this._bufferData.index=null,this._bufferData=null,this._textures=null},e.prototype.doDrawModel=function(){null!=this._clippingManager&&(this.preDraw(),this._clippingManager.setupClippingContext(this.getModel(),this)),this.preDraw();for(var t=this.getModel().getDrawableCount(),e=this.getModel().getDrawableRenderOrders(),i=0;i<t;++i){var r=e[i];this._sortedDrawableIndexList.set(r,i)}for(i=0;i<t;++i){var o=this._sortedDrawableIndexList.at(i);this.getModel().getDrawableDynamicFlagIsVisible(o)&&(this.setClippingContextBufferForDraw(null!=this._clippingManager?this._clippingManager.getClippingContextListForDraw().at(o):null),this.setIsCulling(this.getModel().getDrawableCulling(o)),this.drawMesh(this.getModel().getDrawableTextureIndices(o),this.getModel().getDrawableVertexIndexCount(o),this.getModel().getDrawableVertexCount(o),this.getModel().getDrawableVertexIndices(o),this.getModel().getDrawableVertices(o),this.getModel().getDrawableVertexUvs(o),this.getModel().getDrawableOpacity(o),this.getModel().getDrawableBlendMode(o),this.getModel().getDrawableInvertedMaskBit(o)))}},e.prototype.drawMesh=function(t,e,i,r,o,n,s,a,l){this.isCulling()?this.gl.enable(this.gl.CULL_FACE):this.gl.disable(this.gl.CULL_FACE),this.gl.frontFace(this.gl.CCW);var h,p=this.getModelColor();null==this.getClippingContextBufferForMask()&&(p.A*=s,this.isPremultipliedAlpha()&&(p.R*=p.A,p.G*=p.A,p.B*=p.A)),h=null!=this._textures.getValue(t)?this._textures.getValue(t):null,u.getInstance().setupShaderProgram(this,h,i,o,r,n,this._bufferData,s,a,p,this.isPremultipliedAlpha(),this.getMvpMatrix(),l),this.gl.drawElements(this.gl.TRIANGLES,e,this.gl.UNSIGNED_SHORT,0),this.gl.useProgram(null),this.setClippingContextBufferForDraw(null),this.setClippingContextBufferForMask(null)},e.doStaticRelease=function(){u.deleteInstance()},e.prototype.setRenderState=function(t,e){r=t,i=e},e.prototype.preDraw=function(){this.firstDraw&&(this.firstDraw=!1,this._anisortopy=this.gl.getExtension("EXT_texture_filter_anisotropic")||this.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic")||this.gl.getExtension("MOZ_EXT_texture_filter_anisotropic")),this.gl.disable(this.gl.SCISSOR_TEST),this.gl.disable(this.gl.STENCIL_TEST),this.gl.disable(this.gl.DEPTH_TEST),this.gl.frontFace(this.gl.CW),this.gl.enable(this.gl.BLEND),this.gl.colorMask(!0,!0,!0,!0),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,null)},e.prototype.setClippingContextBufferForMask=function(t){this._clippingContextBufferForMask=t},e.prototype.getClippingContextBufferForMask=function(){return this._clippingContextBufferForMask},e.prototype.setClippingContextBufferForDraw=function(t){this._clippingContextBufferForDraw=t},e.prototype.getClippingContextBufferForDraw=function(){return this._clippingContextBufferForDraw},e.prototype.startUp=function(t){this.gl=t,this._clippingManager.setGL(t),u.getInstance().setGl(t)},e}(f);t.CubismRenderer_WebGL=S,f.staticRelease=function(){S.doStaticRelease()}}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){var e=function(){function t(t,e,i,r){this.x=t,this.y=e,this.width=i,this.height=r}return t.prototype.getCenterX=function(){return this.x+.5*this.width},t.prototype.getCenterY=function(){return this.y+.5*this.height},t.prototype.getRight=function(){return this.x+this.width},t.prototype.getBottom=function(){return this.y+this.height},t.prototype.setRect=function(t){this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height},t.prototype.expand=function(t,e){this.x-=t,this.y-=e,this.width+=2*t,this.height+=2*e},t}();t.csmRect=e}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var n=i(0),s=i(47),a=i(4),u=i(1).Live2DCubismFramework.csmVector,l=n.Live2DCubismFramework.CubismFramework,h=a.Live2DCubismFramework.CubismJson,p=s.Live2DCubismFramework.ICubismModelSetting;!function(t){var e,i="Name";!function(t){t[t.FrequestNode_Groups=0]="FrequestNode_Groups",t[t.FrequestNode_Moc=1]="FrequestNode_Moc",t[t.FrequestNode_Motions=2]="FrequestNode_Motions",t[t.FrequestNode_Expressions=3]="FrequestNode_Expressions",t[t.FrequestNode_Textures=4]="FrequestNode_Textures",t[t.FrequestNode_Physics=5]="FrequestNode_Physics",t[t.FrequestNode_Pose=6]="FrequestNode_Pose",t[t.FrequestNode_HitAreas=7]="FrequestNode_HitAreas"}(e||(e={}));var r=function(t){function r(e,i){var r=t.call(this)||this;return r._json=h.create(e,i),r._json&&(r._jsonValue=new u,r._jsonValue.pushBack(r._json.getRoot().getValueByString("Groups")),r._jsonValue.pushBack(r._json.getRoot().getValueByString("FileReferences").getValueByString("Moc")),r._jsonValue.pushBack(r._json.getRoot().getValueByString("FileReferences").getValueByString("Motions")),r._jsonValue.pushBack(r._json.getRoot().getValueByString("FileReferences").getValueByString("Expressions")),r._jsonValue.pushBack(r._json.getRoot().getValueByString("FileReferences").getValueByString("Textures")),r._jsonValue.pushBack(r._json.getRoot().getValueByString("FileReferences").getValueByString("Physics")),r._jsonValue.pushBack(r._json.getRoot().getValueByString("FileReferences").getValueByString("Pose")),r._jsonValue.pushBack(r._json.getRoot().getValueByString("HitAreas"))),r}return o(r,t),r.prototype.release=function(){h.delete(this._json),this._jsonValue=null},r.prototype.GetJson=function(){return this._json},r.prototype.getModelFileName=function(){return this.isExistModelFile()?this._jsonValue.at(e.FrequestNode_Moc).getRawString():""},r.prototype.getTextureCount=function(){return this.isExistTextureFiles()?this._jsonValue.at(e.FrequestNode_Textures).getSize():0},r.prototype.getTextureDirectory=function(){return this._jsonValue.at(e.FrequestNode_Textures).getRawString()},r.prototype.getTextureFileName=function(t){return this._jsonValue.at(e.FrequestNode_Textures).getValueByIndex(t).getRawString()},r.prototype.getHitAreasCount=function(){return this.isExistHitAreas()?this._jsonValue.at(e.FrequestNode_HitAreas).getSize():0},r.prototype.getHitAreaId=function(t){return l.getIdManager().getId(this._jsonValue.at(e.FrequestNode_HitAreas).getValueByIndex(t).getValueByString("Id").getRawString())},r.prototype.getHitAreaName=function(t){return this._jsonValue.at(e.FrequestNode_HitAreas).getValueByIndex(t).getValueByString(i).getRawString()},r.prototype.getPhysicsFileName=function(){return this.isExistPhysicsFile()?this._jsonValue.at(e.FrequestNode_Physics).getRawString():""},r.prototype.getPoseFileName=function(){return this.isExistPoseFile()?this._jsonValue.at(e.FrequestNode_Pose).getRawString():""},r.prototype.getExpressionCount=function(){return this.isExistExpressionFile()?this._jsonValue.at(e.FrequestNode_Expressions).getSize():0},r.prototype.getExpressionName=function(t){return this._jsonValue.at(e.FrequestNode_Expressions).getValueByIndex(t).getValueByString(i).getRawString()},r.prototype.getExpressionFileName=function(t){return this._jsonValue.at(e.FrequestNode_Expressions).getValueByIndex(t).getValueByString("File").getRawString()},r.prototype.getMotionGroupCount=function(){return this.isExistMotionGroups()?this._jsonValue.at(e.FrequestNode_Motions).getKeys().getSize():0},r.prototype.getMotionGroupName=function(t){return this.isExistMotionGroups()?this._jsonValue.at(e.FrequestNode_Motions).getKeys().at(t):null},r.prototype.getMotionCount=function(t){return this.isExistMotionGroupName(t)?this._jsonValue.at(e.FrequestNode_Motions).getValueByString(t).getSize():0},r.prototype.getMotionFileName=function(t,i){return this.isExistMotionGroupName(t)?this._jsonValue.at(e.FrequestNode_Motions).getValueByString(t).getValueByIndex(i).getValueByString("File").getRawString():""},r.prototype.getMotionSoundFileName=function(t,i){return this.isExistMotionSoundFile(t,i)?this._jsonValue.at(e.FrequestNode_Motions).getValueByString(t).getValueByIndex(i).getValueByString("Sound").getRawString():""},r.prototype.getMotionFadeInTimeValue=function(t,i){return this.isExistMotionFadeIn(t,i)?this._jsonValue.at(e.FrequestNode_Motions).getValueByString(t).getValueByIndex(i).getValueByString("FadeInTime").toFloat():-1},r.prototype.getMotionFadeOutTimeValue=function(t,i){return this.isExistMotionFadeOut(t,i)?this._jsonValue.at(e.FrequestNode_Motions).getValueByString(t).getValueByIndex(i).getValueByString("FadeOutTime").toFloat():-1},r.prototype.getUserDataFile=function(){return this.isExistUserDataFile()?this._json.getRoot().getValueByString("FileReferences").getValueByString("UserData").getRawString():""},r.prototype.getLayoutMap=function(t){var e=this._json.getRoot().getValueByString("Layout").getMap();if(null==e)return!1;for(var i=!1,r=e.begin();r.notEqual(e.end());r.preIncrement())t.setValue(r.ptr().first,r.ptr().second.toFloat()),i=!0;return i},r.prototype.getEyeBlinkParameterCount=function(){if(!this.isExistEyeBlinkParameters())return 0;for(var t=0,r=0;r<this._jsonValue.at(e.FrequestNode_Groups).getSize();r++){var o=this._jsonValue.at(e.FrequestNode_Groups).getValueByIndex(r);if(!o.isNull()&&!o.isError()&&"EyeBlink"==o.getValueByString(i).getRawString()){t=o.getValueByString("Ids").getVector().getSize();break}}return t},r.prototype.getEyeBlinkParameterId=function(t){if(!this.isExistEyeBlinkParameters())return null;for(var r=0;r<this._jsonValue.at(e.FrequestNode_Groups).getSize();r++){var o=this._jsonValue.at(e.FrequestNode_Groups).getValueByIndex(r);if(!o.isNull()&&!o.isError()&&"EyeBlink"==o.getValueByString(i).getRawString())return l.getIdManager().getId(o.getValueByString("Ids").getValueByIndex(t).getRawString())}return null},r.prototype.getLipSyncParameterCount=function(){if(!this.isExistLipSyncParameters())return 0;for(var t=0,r=0;r<this._jsonValue.at(e.FrequestNode_Groups).getSize();r++){var o=this._jsonValue.at(e.FrequestNode_Groups).getValueByIndex(r);if(!o.isNull()&&!o.isError()&&"LipSync"==o.getValueByString(i).getRawString()){t=o.getValueByString("Ids").getVector().getSize();break}}return t},r.prototype.getLipSyncParameterId=function(t){if(!this.isExistLipSyncParameters())return null;for(var r=0;r<this._jsonValue.at(e.FrequestNode_Groups).getSize();r++){var o=this._jsonValue.at(e.FrequestNode_Groups).getValueByIndex(r);if(!o.isNull()&&!o.isError()&&"LipSync"==o.getValueByString(i).getRawString())return l.getIdManager().getId(o.getValueByString("Ids").getValueByIndex(t).getRawString())}return null},r.prototype.isExistModelFile=function(){var t=this._jsonValue.at(e.FrequestNode_Moc);return!t.isNull()&&!t.isError()},r.prototype.isExistTextureFiles=function(){var t=this._jsonValue.at(e.FrequestNode_Textures);return!t.isNull()&&!t.isError()},r.prototype.isExistHitAreas=function(){var t=this._jsonValue.at(e.FrequestNode_HitAreas);return!t.isNull()&&!t.isError()},r.prototype.isExistPhysicsFile=function(){var t=this._jsonValue.at(e.FrequestNode_Physics);return!t.isNull()&&!t.isError()},r.prototype.isExistPoseFile=function(){var t=this._jsonValue.at(e.FrequestNode_Pose);return!t.isNull()&&!t.isError()},r.prototype.isExistExpressionFile=function(){var t=this._jsonValue.at(e.FrequestNode_Expressions);return!t.isNull()&&!t.isError()},r.prototype.isExistMotionGroups=function(){var t=this._jsonValue.at(e.FrequestNode_Motions);return!t.isNull()&&!t.isError()},r.prototype.isExistMotionGroupName=function(t){var i=this._jsonValue.at(e.FrequestNode_Motions).getValueByString(t);return!i.isNull()&&!i.isError()},r.prototype.isExistMotionSoundFile=function(t,i){var r=this._jsonValue.at(e.FrequestNode_Motions).getValueByString(t).getValueByIndex(i).getValueByString("Sound");return!r.isNull()&&!r.isError()},r.prototype.isExistMotionFadeIn=function(t,i){var r=this._jsonValue.at(e.FrequestNode_Motions).getValueByString(t).getValueByIndex(i).getValueByString("FadeInTime");return!r.isNull()&&!r.isError()},r.prototype.isExistMotionFadeOut=function(t,i){var r=this._jsonValue.at(e.FrequestNode_Motions).getValueByString(t).getValueByIndex(i).getValueByString("FadeOutTime");return!r.isNull()&&!r.isError()},r.prototype.isExistUserDataFile=function(){var t=this._json.getRoot().getValueByString("FileReferences").getValueByString("UserData");return!t.isNull()&&!t.isError()},r.prototype.isExistEyeBlinkParameters=function(){if(this._jsonValue.at(e.FrequestNode_Groups).isNull()||this._jsonValue.at(e.FrequestNode_Groups).isError())return!1;for(var t=0;t<this._jsonValue.at(e.FrequestNode_Groups).getSize();++t)if("EyeBlink"==this._jsonValue.at(e.FrequestNode_Groups).getValueByIndex(t).getValueByString(i).getRawString())return!0;return!1},r.prototype.isExistLipSyncParameters=function(){if(this._jsonValue.at(e.FrequestNode_Groups).isNull()||this._jsonValue.at(e.FrequestNode_Groups).isError())return!1;for(var t=0;t<this._jsonValue.at(e.FrequestNode_Groups).getSize();++t)if("LipSync"==this._jsonValue.at(e.FrequestNode_Groups).getValueByIndex(t).getValueByString(i).getRawString())return!0;return!1},r}(p);t.CubismModelSettingJson=r}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){var e=function(){};t.ICubismModelSetting=e}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.HitAreaPrefix="HitArea",t.HitAreaHead="Head",t.HitAreaBody="Body",t.PartsIdCore="Parts01Core",t.PartsArmPrefix="Parts01Arm_",t.PartsArmLPrefix="Parts01ArmL_",t.PartsArmRPrefix="Parts01ArmR_",t.ParamAngleX="ParamAngleX",t.ParamAngleY="ParamAngleY",t.ParamAngleZ="ParamAngleZ",t.ParamEyeLOpen="ParamEyeLOpen",t.ParamEyeLSmile="ParamEyeLSmile",t.ParamEyeROpen="ParamEyeROpen",t.ParamEyeRSmile="ParamEyeRSmile",t.ParamEyeBallX="ParamEyeBallX",t.ParamEyeBallY="ParamEyeBallY",t.ParamEyeBallForm="ParamEyeBallForm",t.ParamBrowLY="ParamBrowLY",t.ParamBrowRY="ParamBrowRY",t.ParamBrowLX="ParamBrowLX",t.ParamBrowRX="ParamBrowRX",t.ParamBrowLAngle="ParamBrowLAngle",t.ParamBrowRAngle="ParamBrowRAngle",t.ParamBrowLForm="ParamBrowLForm",t.ParamBrowRForm="ParamBrowRForm",t.ParamMouthForm="ParamMouthForm",t.ParamMouthOpenY="ParamMouthOpenY",t.ParamCheek="ParamCheek",t.ParamBodyAngleX="ParamBodyAngleX",t.ParamBodyAngleY="ParamBodyAngleY",t.ParamBodyAngleZ="ParamBodyAngleZ",t.ParamBreath="ParamBreath",t.ParamArmLA="ParamArmLA",t.ParamArmRA="ParamArmRA",t.ParamArmLB="ParamArmLB",t.ParamArmRB="ParamArmRB",t.ParamHandL="ParamHandL",t.ParamHandR="ParamHandR",t.ParamHairFront="ParamHairFront",t.ParamHairSide="ParamHairSide",t.ParamHairBack="ParamHairBack",t.ParamHairFluffy="ParamHairFluffy",t.ParamShoulderY="ParamShoulderY",t.ParamBustX="ParamBustX",t.ParamBustY="ParamBustY",t.ParamBaseX="ParamBaseX",t.ParamBaseY="ParamBaseY",t.ParamNONE="NONE:"}(e.Live2DCubismFramework||(e.Live2DCubismFramework={}))},function(t,e,i){"use strict";i.r(e),i.d(e,"Headers",(function(){return c})),i.d(e,"Request",(function(){return S})),i.d(e,"Response",(function(){return C})),i.d(e,"DOMException",(function(){return M})),i.d(e,"fetch",(function(){return L}));var r="URLSearchParams"in self,o="Symbol"in self&&"iterator"in Symbol,n="FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),s="FormData"in self,a="ArrayBuffer"in self;if(a)var u=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],l=ArrayBuffer.isView||function(t){return t&&u.indexOf(Object.prototype.toString.call(t))>-1};function h(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function p(t){return"string"!=typeof t&&(t=String(t)),t}function g(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return o&&(e[Symbol.iterator]=function(){return e}),e}function c(t){this.map={},t instanceof c?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function d(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function _(t){return new Promise((function(e,i){t.onload=function(){e(t.result)},t.onerror=function(){i(t.error)}}))}function m(t){var e=new FileReader,i=_(e);return e.readAsArrayBuffer(t),i}function f(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function y(){return this.bodyUsed=!1,this._initBody=function(t){var e;this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:n&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:s&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:r&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():a&&n&&((e=t)&&DataView.prototype.isPrototypeOf(e))?(this._bodyArrayBuffer=f(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):a&&(ArrayBuffer.prototype.isPrototypeOf(t)||l(t))?this._bodyArrayBuffer=f(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):r&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},n&&(this.blob=function(){var t=d(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?d(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(m)}),this.text=function(){var t,e,i,r=d(this);if(r)return r;if(this._bodyBlob)return t=this._bodyBlob,e=new FileReader,i=_(e),e.readAsText(t),i;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),i=new Array(e.length),r=0;r<e.length;r++)i[r]=String.fromCharCode(e[r]);return i.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},s&&(this.formData=function(){return this.text().then(b)}),this.json=function(){return this.text().then(JSON.parse)},this}c.prototype.append=function(t,e){t=h(t),e=p(e);var i=this.map[t];this.map[t]=i?i+", "+e:e},c.prototype.delete=function(t){delete this.map[h(t)]},c.prototype.get=function(t){return t=h(t),this.has(t)?this.map[t]:null},c.prototype.has=function(t){return this.map.hasOwnProperty(h(t))},c.prototype.set=function(t,e){this.map[h(t)]=p(e)},c.prototype.forEach=function(t,e){for(var i in this.map)this.map.hasOwnProperty(i)&&t.call(e,this.map[i],i,this)},c.prototype.keys=function(){var t=[];return this.forEach((function(e,i){t.push(i)})),g(t)},c.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),g(t)},c.prototype.entries=function(){var t=[];return this.forEach((function(e,i){t.push([i,e])})),g(t)},o&&(c.prototype[Symbol.iterator]=c.prototype.entries);var v=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function S(t,e){var i,r,o=(e=e||{}).body;if(t instanceof S){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new c(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,o||null==t._bodyInit||(o=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new c(e.headers)),this.method=(i=e.method||this.method||"GET",r=i.toUpperCase(),v.indexOf(r)>-1?r:i),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o)}function b(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var i=t.split("="),r=i.shift().replace(/\+/g," "),o=i.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(o))}})),e}function C(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new c(e.headers),this.url=e.url||"",this._initBody(t)}S.prototype.clone=function(){return new S(this,{body:this._bodyInit})},y.call(S.prototype),y.call(C.prototype),C.prototype.clone=function(){return new C(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new c(this.headers),url:this.url})},C.error=function(){var t=new C(null,{status:0,statusText:""});return t.type="error",t};var x=[301,302,303,307,308];C.redirect=function(t,e){if(-1===x.indexOf(e))throw new RangeError("Invalid status code");return new C(null,{status:e,headers:{location:t}})};var M=self.DOMException;try{new M}catch(t){(M=function(t,e){this.message=t,this.name=e;var i=Error(t);this.stack=i.stack}).prototype=Object.create(Error.prototype),M.prototype.constructor=M}function L(t,e){return new Promise((function(i,r){var o=new S(t,e);if(o.signal&&o.signal.aborted)return r(new M("Aborted","AbortError"));var s=new XMLHttpRequest;function a(){s.abort()}s.onload=function(){var t,e,r={status:s.status,statusText:s.statusText,headers:(t=s.getAllResponseHeaders()||"",e=new c,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(t){var i=t.split(":"),r=i.shift().trim();if(r){var o=i.join(":").trim();e.append(r,o)}})),e)};r.url="responseURL"in s?s.responseURL:r.headers.get("X-Request-URL");var o="response"in s?s.response:s.responseText;i(new C(o,r))},s.onerror=function(){r(new TypeError("Network request failed"))},s.ontimeout=function(){r(new TypeError("Network request failed"))},s.onabort=function(){r(new M("Aborted","AbortError"))},s.open(o.method,o.url,!0),"include"===o.credentials?s.withCredentials=!0:"omit"===o.credentials&&(s.withCredentials=!1),"responseType"in s&&n&&(s.responseType="blob"),o.headers.forEach((function(t,e){s.setRequestHeader(e,t)})),o.signal&&(o.signal.addEventListener("abort",a),s.onreadystatechange=function(){4===s.readyState&&o.signal.removeEventListener("abort",a)}),s.send(void 0===o._bodyInit?null:o._bodyInit)}))}L.polyfill=!0,self.fetch||(self.fetch=L,self.Headers=c,self.Request=S,self.Response=C)},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(1).Live2DCubismFramework.csmVector,o=i(3),n=function(){function t(){this._textures=new r}return t.prototype.release=function(){for(var t=this._textures.begin();t.notEqual(this._textures.end());t.preIncrement())o.gl.deleteTexture(t.ptr().id);this._textures=null},t.prototype.createTextureFromPngFile=function(t,e,i){for(var r=this,n=function(r){if(r.ptr().fileName==t&&r.ptr().usePremultply==e)return r.ptr().img=new Image,r.ptr().img.onload=function(){return i(r.ptr())},r.ptr().img.src=t,{value:void 0}},a=this._textures.begin();a.notEqual(this._textures.end());a.preIncrement()){var u=n(a);if("object"==typeof u)return u.value}var l=new Image;l.onload=function(){var n=o.gl.createTexture();o.gl.bindTexture(o.gl.TEXTURE_2D,n),o.gl.texParameteri(o.gl.TEXTURE_2D,o.gl.TEXTURE_MIN_FILTER,o.gl.LINEAR_MIPMAP_LINEAR),o.gl.texParameteri(o.gl.TEXTURE_2D,o.gl.TEXTURE_MAG_FILTER,o.gl.LINEAR),e&&o.gl.pixelStorei(o.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1),o.gl.texImage2D(o.gl.TEXTURE_2D,0,o.gl.RGBA,o.gl.RGBA,o.gl.UNSIGNED_BYTE,l),o.gl.generateMipmap(o.gl.TEXTURE_2D),o.gl.bindTexture(o.gl.TEXTURE_2D,null);var a=new s;null!=a&&(a.fileName=t,a.width=l.width,a.height=l.height,a.id=n,a.img=l,a.usePremultply=e,r._textures.pushBack(a)),i(a)},l.src=t},t.prototype.releaseTextures=function(){for(var t=0;t<this._textures.getSize();t++)this._textures.set(t,null);this._textures.clear()},t.prototype.releaseTextureByTexture=function(t){for(var e=0;e<this._textures.getSize();e++)if(this._textures.at(e).id==t){this._textures.set(e,null),this._textures.remove(e);break}},t.prototype.releaseTextureByFilePath=function(t){for(var e=0;e<this._textures.getSize();e++)if(this._textures.at(e).fileName==t){this._textures.set(e,null),this._textures.remove(e);break}},t}();e.LAppTextureManager=n;var s=function(){this.id=null,this.width=0,this.height=0};e.TextureInfo=s}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saXZlMmQvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL2xpdmUyZC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9saXZlMmQvLi9GcmFtZXdvcmsvc3JjL2xpdmUyZGN1YmlzbWZyYW1ld29yay50cyIsIndlYnBhY2s6Ly9saXZlMmQvLi9GcmFtZXdvcmsvc3JjL3R5cGUvY3NtdmVjdG9yLnRzIiwid2VicGFjazovL2xpdmUyZC8uL0ZyYW1ld29yay9zcmMvdXRpbHMvY3ViaXNtZGVidWcudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkLy4vc3JjL2xhcHBkZWxlZ2F0ZS50cyIsIndlYnBhY2s6Ly9saXZlMmQvLi9GcmFtZXdvcmsvc3JjL3V0aWxzL2N1YmlzbWpzb24udHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkLy4vc3JjL2xhcHBkZWZpbmUudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkLy4vRnJhbWV3b3JrL3NyYy9tYXRoL2N1YmlzbW1hdHJpeDQ0LnRzIiwid2VicGFjazovL2xpdmUyZC8uL0ZyYW1ld29yay9zcmMvdHlwZS9jc21zdHJpbmcudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkLy4vRnJhbWV3b3JrL3NyYy90eXBlL2NzbW1hcC50cyIsIndlYnBhY2s6Ly9saXZlMmQvLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9hY3ViaXNtbW90aW9uLnRzIiwid2VicGFjazovL2xpdmUyZC8uL0ZyYW1ld29yay9zcmMvbWF0aC9jdWJpc21tYXRoLnRzIiwid2VicGFjazovL2xpdmUyZC8uL0ZyYW1ld29yay9zcmMvbWF0aC9jdWJpc212ZWN0b3IyLnRzIiwid2VicGFjazovL2xpdmUyZC8uL3NyYy9sYXBwcGFsLnRzIiwid2VicGFjazovL2xpdmUyZC9leHRlcm5hbCB7XCJyb290XCI6XCJSZWFjdFwiLFwiY29tbW9uanMyXCI6XCJyZWFjdFwiLFwiY29tbW9uanNcIjpcInJlYWN0XCIsXCJhbWRcIjpcInJlYWN0XCJ9Iiwid2VicGFjazovL2xpdmUyZC8uL0ZyYW1ld29yay9zcmMvcmVuZGVyaW5nL2N1YmlzbXJlbmRlcmVyLnRzIiwid2VicGFjazovL2xpdmUyZC8uL3NyYy9sYXBwbGl2ZTJkbWFuYWdlci50cyIsIndlYnBhY2s6Ly9saXZlMmQvLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkLy4vRnJhbWV3b3JrL3NyYy9lZmZlY3QvY3ViaXNtYnJlYXRoLnRzIiwid2VicGFjazovL2xpdmUyZC8uL0ZyYW1ld29yay9zcmMvZWZmZWN0L2N1YmlzbWV5ZWJsaW5rLnRzIiwid2VicGFjazovL2xpdmUyZC8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9saXZlMmQvLi9GcmFtZXdvcmsvc3JjL2N1YmlzbWZyYW1ld29ya2NvbmZpZy50cyIsIndlYnBhY2s6Ly9saXZlMmQvLi9GcmFtZXdvcmsvc3JjL2lkL2N1YmlzbWlkbWFuYWdlci50cyIsIndlYnBhY2s6Ly9saXZlMmQvLi9GcmFtZXdvcmsvc3JjL2lkL2N1YmlzbWlkLnRzIiwid2VicGFjazovL2xpdmUyZC8uL3NyYy9sYXBwdmlldy50cyIsIndlYnBhY2s6Ly9saXZlMmQvLi9GcmFtZXdvcmsvc3JjL21hdGgvY3ViaXNtdmlld21hdHJpeC50cyIsIndlYnBhY2s6Ly9saXZlMmQvLi9zcmMvdG91Y2htYW5hZ2VyLnRzIiwid2VicGFjazovL2xpdmUyZC8uL3NyYy9sYXBwbW9kZWwudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkLy4vRnJhbWV3b3JrL3NyYy9tb2RlbC9jdWJpc211c2VybW9kZWwudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkLy4vRnJhbWV3b3JrL3NyYy9tb3Rpb24vY3ViaXNtbW90aW9ubWFuYWdlci50cyIsIndlYnBhY2s6Ly9saXZlMmQvLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25xdWV1ZWVudHJ5LnRzIiwid2VicGFjazovL2xpdmUyZC8uL0ZyYW1ld29yay9zcmMvbWF0aC9jdWJpc210YXJnZXRwb2ludC50cyIsIndlYnBhY2s6Ly9saXZlMmQvLi9GcmFtZXdvcmsvc3JjL21hdGgvY3ViaXNtbW9kZWxtYXRyaXgudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkLy4vRnJhbWV3b3JrL3NyYy9tb2RlbC9jdWJpc21tb2MudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkLy4vRnJhbWV3b3JrL3NyYy9tb2RlbC9jdWJpc21tb2RlbC50cyIsIndlYnBhY2s6Ly9saXZlMmQvLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb24udHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkLy4vRnJhbWV3b3JrL3NyYy9tb3Rpb24vY3ViaXNtbW90aW9uanNvbi50cyIsIndlYnBhY2s6Ly9saXZlMmQvLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25pbnRlcm5hbC50cyIsIndlYnBhY2s6Ly9saXZlMmQvLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21leHByZXNzaW9ubW90aW9uLnRzIiwid2VicGFjazovL2xpdmUyZC8uL0ZyYW1ld29yay9zcmMvZWZmZWN0L2N1YmlzbXBvc2UudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkLy4vRnJhbWV3b3JrL3NyYy9tb2RlbC9jdWJpc21tb2RlbHVzZXJkYXRhLnRzIiwid2VicGFjazovL2xpdmUyZC8uL0ZyYW1ld29yay9zcmMvbW9kZWwvY3ViaXNtbW9kZWx1c2VyZGF0YWpzb24udHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkLy4vRnJhbWV3b3JrL3NyYy9waHlzaWNzL2N1YmlzbXBoeXNpY3MudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkLy4vRnJhbWV3b3JrL3NyYy9waHlzaWNzL2N1YmlzbXBoeXNpY3NpbnRlcm5hbC50cyIsIndlYnBhY2s6Ly9saXZlMmQvLi9GcmFtZXdvcmsvc3JjL3BoeXNpY3MvY3ViaXNtcGh5c2ljc2pzb24udHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkLy4vRnJhbWV3b3JrL3NyYy9yZW5kZXJpbmcvY3ViaXNtcmVuZGVyZXJfd2ViZ2wudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkLy4vRnJhbWV3b3JrL3NyYy90eXBlL2NzbXJlY3RmLnRzIiwid2VicGFjazovL2xpdmUyZC8uL0ZyYW1ld29yay9zcmMvY3ViaXNtbW9kZWxzZXR0aW5nanNvbi50cyIsIndlYnBhY2s6Ly9saXZlMmQvLi9GcmFtZXdvcmsvc3JjL2ljdWJpc21tb2RlbHNldHRpbmcudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkLy4vRnJhbWV3b3JrL3NyYy9jdWJpc21kZWZhdWx0cGFyYW1ldGVyaWQudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkLy4vbm9kZV9tb2R1bGVzL3doYXR3Zy1mZXRjaC9mZXRjaC5qcyIsIndlYnBhY2s6Ly9saXZlMmQvLi9zcmMvbGFwcHRleHR1cmVtYW5hZ2VyLnRzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJkZWZpbmUiLCJhbWQiLCJ3aW5kb3ciLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xM19fIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIlZhbHVlIiwiQ3ViaXNtSWRNYW5hZ2VyIiwiQ3ViaXNtUmVuZGVyZXIiLCJlbmRQdHIiLCJpbmRleCIsInRlc3RDIiwic2xpY2UiLCJ0ZXN0Iiwic3Vic3RyaW5nIiwibnVtYmVyIiwiTnVtYmVyIiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwiTmFOIiwiTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIiwic19pc1N0YXJ0ZWQiLCJzX2lzSW5pdGlhbGl6ZWQiLCJzX29wdGlvbiIsInNfY3ViaXNtSWRNYW5hZ2VyIiwiQ29uc3RhbnQiLCJ2ZXJ0ZXhPZmZzZXQiLCJ2ZXJ0ZXhTdGVwIiwiY3NtRGVsZXRlIiwiYWRkcmVzcyIsInN0YXJ0VXAiLCJvcHRpb24iLCJDdWJpc21Mb2dJbmZvIiwiTGl2ZTJEQ3ViaXNtQ29yZSIsIkxvZ2dpbmciLCJjc21TZXRMb2dGdW5jdGlvbiIsImxvZ0Z1bmN0aW9uIiwidmVyc2lvbiIsIlZlcnNpb24iLCJjc21HZXRWZXJzaW9uIiwibWFqb3IiLCJtaW5vciIsInBhdGNoIiwidmVyc2lvbk51bWJlciIsImNsZWFuVXAiLCJpbml0aWFsaXplIiwiQ1NNX0FTU0VSVCIsIkN1YmlzbUxvZ1dhcm5pbmciLCJzdGF0aWNJbml0aWFsaXplTm90Rm9yQ2xpZW50Q2FsbCIsImRpc3Bvc2UiLCJzdGF0aWNSZWxlYXNlTm90Rm9yQ2xpZW50Q2FsbCIsInJlbGVhc2UiLCJzdGF0aWNSZWxlYXNlIiwiaXNTdGFydGVkIiwiaXNJbml0aWFsaXplZCIsImNvcmVMb2dGdW5jdGlvbiIsIm1lc3NhZ2UiLCJjc21HZXRMb2dGdW5jdGlvbiIsImdldExvZ2dpbmdMZXZlbCIsImxvZ2dpbmdMZXZlbCIsIkxvZ0xldmVsIiwiTG9nTGV2ZWxfT2ZmIiwiZ2V0SWRNYW5hZ2VyIiwiQ3ViaXNtRnJhbWV3b3JrIiwiT3B0aW9uIiwiaW5pdGlhbENhcGFjaXR5IiwidGhpcyIsIl9wdHIiLCJfY2FwYWNpdHkiLCJfc2l6ZSIsIkFycmF5IiwiYXQiLCJzZXQiLCJvZmZzZXQiLCJyZXQiLCJwdXNoIiwicHVzaEJhY2siLCJwcmVwYXJlQ2FwYWNpdHkiLCJjc21WZWN0b3IiLCJzX2RlZmF1bHRTaXplIiwiY2xlYXIiLCJsZW5ndGgiLCJnZXRTaXplIiwiYXNzaWduIiwibmV3U2l6ZSIsInJlc2l6ZSIsInVwZGF0ZVNpemUiLCJjYWxsUGxhY2VtZW50TmV3IiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5Iiwic3ViIiwic3BsaWNlIiwiaW5zZXJ0IiwicG9zaXRpb24iLCJiZWdpbiIsImVuZCIsImRzdFNpIiwiX2luZGV4Iiwic3JjU2kiLCJzcmNFaSIsImFkZENvdW50IiwiYWRkU2l6ZSIsIl92ZWN0b3IiLCJyZW1vdmUiLCJlcmFzZSIsIml0ZSIsIml0ZXJhdG9yIiwiZ2V0T2Zmc2V0IiwibmV3VmVjdG9yIiwidiIsInVuZGVmaW5lZCIsInByZUluY3JlbWVudCIsInByZURlY3JlbWVudCIsImluY3JlbWVudCIsIml0ZW9sZCIsImRlY3JlbWVudCIsInB0ciIsInN1YnN0aXR1dGlvbiIsIm5vdEVxdWFsIiwiQ3ViaXNtTG9nUHJpbnQiLCJsZXZlbCIsImZtdCIsImFyZ3MiLCJDdWJpc21EZWJ1ZyIsInByaW50IiwiQ3ViaXNtTG9nUHJpbnRJbiIsImV4cHIiLCJjb25zb2xlIiwiYXNzZXJ0IiwiQ1NNX0xPR19MRVZFTCIsIkNTTV9MT0dfTEVWRUxfVkVSQk9TRSIsIkN1YmlzbUxvZ1ZlcmJvc2UiLCJMb2dMZXZlbF9WZXJib3NlIiwiQ3ViaXNtTG9nRGVidWciLCJMb2dMZXZlbF9EZWJ1ZyIsIkxvZ0xldmVsX0luZm8iLCJMb2dMZXZlbF9XYXJuaW5nIiwiQ3ViaXNtTG9nRXJyb3IiLCJMb2dMZXZlbF9FcnJvciIsIkNTTV9MT0dfTEVWRUxfREVCVUciLCJDU01fTE9HX0xFVkVMX0lORk8iLCJDU01fTE9HX0xFVkVMX1dBUk5JTkciLCJDU01fTE9HX0xFVkVMX0VSUk9SIiwibG9nTGV2ZWwiLCJmb3JtYXQiLCJsb2dQcmludCIsInJlcGxhY2UiLCJrIiwiZHVtcEJ5dGVzIiwiZGF0YSIsIkNzbV9DdWJpc21GcmFtZXdvcmsiLCJjYW52YXMiLCJzX2luc3RhbmNlIiwiZ2wiLCJmcmFtZUJ1ZmZlciIsIl9jYXB0dXJlZCIsIl9tb3VzZVgiLCJfbW91c2VZIiwiX2lzRW5kIiwiX2N1YmlzbU9wdGlvbiIsIl92aWV3IiwiTEFwcFZpZXciLCJfdGV4dHVyZU1hbmFnZXIiLCJMQXBwVGV4dHVyZU1hbmFnZXIiLCJnZXRJbnN0YW5jZSIsIkxBcHBEZWxlZ2F0ZSIsInJlbGVhc2VJbnN0YW5jZSIsImxvZyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwb3NYIiwiY2xpZW50WCIsImxlZnQiLCJwb3NZIiwiY2xpZW50WSIsInRvcCIsIm9uVG91Y2hlc01vdmVkIiwiTEFwcFBhbCIsInByaW50TWVzc2FnZSIsIkxBcHBMaXZlMkRNYW5hZ2VyIiwib25EcmFnIiwib25Ub3VjaGVzQmVnYW4iLCJvblRvdWNoZXNFbmRlZCIsImdldENvbnRleHQiLCJnZXRQYXJhbWV0ZXIiLCJGUkFNRUJVRkZFUl9CSU5ESU5HIiwiZW5hYmxlIiwiQkxFTkQiLCJibGVuZEZ1bmMiLCJTUkNfQUxQSEEiLCJPTkVfTUlOVVNfU1JDX0FMUEhBIiwib250b3VjaHN0YXJ0Iiwib25Ub3VjaEJlZ2FuIiwib250b3VjaG1vdmUiLCJvblRvdWNoTW92ZWQiLCJvbnRvdWNoZW5kIiwib25Ub3VjaEVuZGVkIiwib250b3VjaGNhbmNlbCIsIm9uVG91Y2hDYW5jZWwiLCJpbml0aWFsaXplQ3ViaXNtIiwiYWxlcnQiLCJib2R5IiwiaW5uZXJIVE1MIiwicnVuIiwibG9vcCIsInVwZGF0ZVRpbWUiLCJjbGVhckNvbG9yIiwiREVQVEhfVEVTVCIsImRlcHRoRnVuYyIsIkxFUVVBTCIsIkNPTE9SX0JVRkZFUl9CSVQiLCJERVBUSF9CVUZGRVJfQklUIiwiY2xlYXJEZXB0aCIsInJlbmRlciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNyZWF0ZVNoYWRlciIsInZlcnRleFNoYWRlcklkIiwiVkVSVEVYX1NIQURFUiIsInNoYWRlclNvdXJjZSIsImNvbXBpbGVTaGFkZXIiLCJmcmFnbWVudFNoYWRlcklkIiwiRlJBR01FTlRfU0hBREVSIiwicHJvZ3JhbUlkIiwiY3JlYXRlUHJvZ3JhbSIsImF0dGFjaFNoYWRlciIsImRlbGV0ZVNoYWRlciIsImxpbmtQcm9ncmFtIiwidXNlUHJvZ3JhbSIsImdldFZpZXciLCJnZXRUZXh0dXJlTWFuYWdlciIsIkxBcHBEZWZpbmUiLCJDdWJpc21Mb2dnaW5nTGV2ZWwiLCJpbml0aWFsaXplU3ByaXRlIiwiY2hhbmdlZFRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwidGFyZ2V0IiwiY3NtTWFwIiwiY3NtU3RyaW5nIiwiZ2V0UmF3U3RyaW5nIiwiZGVmYXVsdFZhbHVlIiwiaW5kZW50IiwiZ2V0U3RyaW5nIiwidG9JbnQiLCJ0b0Zsb2F0IiwidG9Cb29sZWFuIiwiZ2V0QXJyYXkiLCJnZXRWZWN0b3IiLCJnZXRNYXAiLCJnZXRWYWx1ZUJ5SW5kZXgiLCJlcnJvclZhbHVlIiwic2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsIiwiZ2V0VmFsdWVCeVN0cmluZyIsIm51bGxWYWx1ZSIsImdldEtleXMiLCJzX2R1bW15S2V5cyIsImlzRXJyb3IiLCJpc051bGwiLCJpc0Jvb2wiLCJpc0Zsb2F0IiwiaXNTdHJpbmciLCJpc0FycmF5IiwiaXNNYXAiLCJlcXVhbHMiLCJpc1N0YXRpYyIsImVycm9yU3RyIiwiSnNvbkVycm9yIiwiSnNvbkJvb2xlYW4iLCJ0cnVlVmFsdWUiLCJmYWxzZVZhbHVlIiwiSnNvbk51bGx2YWx1ZSIsImJ1ZmZlciIsIl9lcnJvciIsIl9saW5lQ291bnQiLCJfcm9vdCIsInBhcnNlQnl0ZXMiLCJzaXplIiwianNvbiIsIkN1YmlzbUpzb24iLCJkZWxldGUiLCJpbnN0YW5jZSIsImdldFJvb3QiLCJhcnJheUJ1ZmZlclRvU3RyaW5nIiwidWludDhBcnJheSIsIlVpbnQ4QXJyYXkiLCJzdHIiLCJsZW4iLCJwYWQiLCJ0b1N0cmluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsImVuZFBvcyIsImRlY29kZUJ1ZmZlciIsInBhcnNlVmFsdWUiLCJzdHJidWYiLCJKc29uU3RyaW5nIiwiZ2V0UGFyc2VFcnJvciIsImNoZWNrRW5kT2ZGaWxlIiwib3V0RW5kUG9zIiwiZiIsImFmdGVyU3RyaW5nIiwic3RydG9kIiwiaW5kZXhPZiIsIkpzb25GbG9hdCIsInBhcnNlU3RyaW5nIiwicGFyc2VBcnJheSIsInBhcnNlT2JqZWN0Iiwic3RyaW5nIiwiYnVmU3RhcnQiLCJhcHBlbmQiLCJleHBhbnNpb24iLCJKc29uTWFwIiwibG9jYWxSZXRFbmRQb3MyIiwib2siLCJGT1JfTE9PUCIsIkZPUl9MT09QMiIsInB1dCIsIkZPUl9MT09QMyIsIkpzb25BcnJheSIsImxvY2FsUmV0RW5kcG9zMiIsImFkZCIsIl92YWx1ZSIsIl9zdHJpbmdCdWZmZXIiLCJwYXJzZUludCIsIk1hdGgiLCJyb3VuZCIsIl9ib29sVmFsdWUiLCJfaXNTdGF0aWMiLCJfYXJyYXkiLCJzdHJpbmdCdWZmZXIiLCJfbWFwIiwic2Vjb25kIiwiZ2V0VmFsdWUiLCJpdGVyIiwiZmlyc3QiLCJzZXRWYWx1ZSIsIl9rZXlzIiwiVmlld01heFNjYWxlIiwiVmlld01pblNjYWxlIiwiVmlld0xvZ2ljYWxMZWZ0IiwiVmlld0xvZ2ljYWxSaWdodCIsIlZpZXdMb2dpY2FsTWF4TGVmdCIsIlZpZXdMb2dpY2FsTWF4UmlnaHQiLCJWaWV3TG9naWNhbE1heEJvdHRvbSIsIlZpZXdMb2dpY2FsTWF4VG9wIiwiUmVzb3VyY2VzUGF0aCIsIkJhY2tJbWFnZU5hbWUiLCJHZWFySW1hZ2VOYW1lIiwiUG93ZXJJbWFnZU5hbWUiLCJNb2RlbERpciIsIk1vZGVsRGlyU2l6ZSIsIk1vdGlvbkdyb3VwSWRsZSIsIk1vdGlvbkdyb3VwVGFwQm9keSIsIkhpdEFyZWFOYW1lSGVhZCIsIkhpdEFyZWFOYW1lQm9keSIsIlByaW9yaXR5Tm9uZSIsIlByaW9yaXR5SWRsZSIsIlByaW9yaXR5Tm9ybWFsIiwiUHJpb3JpdHlGb3JjZSIsIkRlYnVnTG9nRW5hYmxlIiwiRGVidWdUb3VjaExvZ0VuYWJsZSIsIlJlbmRlclRhcmdldFdpZHRoIiwiUmVuZGVyVGFyZ2V0SGVpZ2h0Iiwic2V0TW9kZWxEaXIiLCJtb2RlbERpciIsImxhcHBkZWZpbmVTZXQiLCJfdHIiLCJGbG9hdDMyQXJyYXkiLCJsb2FkSWRlbnRpdHkiLCJtdWx0aXBseSIsImEiLCJiIiwiZHN0IiwiaiIsInNldE1hdHJpeCIsInRyIiwiZ2V0U2NhbGVYIiwiZ2V0U2NhbGVZIiwiZ2V0VHJhbnNsYXRlWCIsImdldFRyYW5zbGF0ZVkiLCJ0cmFuc2Zvcm1YIiwic3JjIiwidHJhbnNmb3JtWSIsImludmVydFRyYW5zZm9ybVgiLCJpbnZlcnRUcmFuc2Zvcm1ZIiwidHJhbnNsYXRlUmVsYXRpdmUiLCJ4IiwieSIsInRyMSIsIkN1YmlzbU1hdHJpeDQ0IiwidHJhbnNsYXRlIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJzY2FsZVJlbGF0aXZlIiwic2NhbGUiLCJtdWx0aXBseUJ5TWF0cml4IiwiY2xvbmUiLCJjbG9uZU1hdHJpeCIsInN1YnN0ciIsImdldEJ5dGVzIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZ2V0TGVuZ3RoIiwiaXNMZXNzIiwiaXNHcmVhdCIsImlzRXF1YWwiLCJpc0VtcHR5IiwiY3NtUGFpciIsIl9rZXlWYWx1ZXMiLCJfZHVtbXlWYWx1ZSIsImFwcGVuZEtleSIsImZvdW5kIiwiaXNFeGlzdCIsImZpdFRvU2l6ZSIsIkRlZmF1bHRTaXplIiwiZHVtcEFzSW50IiwiaWR4IiwiQ3ViaXNtTWF0aCIsInNldEZpbmlzaGVkTW90aW9uSGFuZGxlciIsIm9uRmluaXNoZWRNb3Rpb25IYW5kbGVyIiwiX29uRmluaXNoZWRNb3Rpb24iLCJnZXRGaW5pc2hlZE1vdGlvbkhhbmRsZXIiLCJfZmFkZUluU2Vjb25kcyIsIl9mYWRlT3V0U2Vjb25kcyIsIl93ZWlnaHQiLCJfb2Zmc2V0U2Vjb25kcyIsIl9maXJlZEV2ZW50VmFsdWVzIiwibW90aW9uIiwidXBkYXRlUGFyYW1ldGVycyIsIm1vZGVsIiwibW90aW9uUXVldWVFbnRyeSIsInVzZXJUaW1lU2Vjb25kcyIsImlzQXZhaWxhYmxlIiwiaXNGaW5pc2hlZCIsInNldElzU3RhcnRlZCIsInNldFN0YXJ0VGltZSIsInNldEZhZGVJblN0YXJ0VGltZSIsImR1cmF0aW9uIiwiZ2V0RHVyYXRpb24iLCJnZXRFbmRUaW1lIiwic2V0RW5kVGltZSIsImdldFN0YXJ0VGltZSIsImZhZGVXZWlnaHQiLCJnZXRFYXNpbmdTaW5lIiwiZ2V0RmFkZUluU3RhcnRUaW1lIiwic2V0U3RhdGUiLCJkb1VwZGF0ZVBhcmFtZXRlcnMiLCJzZXRJc0ZpbmlzaGVkIiwic2V0RmFkZUluVGltZSIsImZhZGVJblNlY29uZHMiLCJzZXRGYWRlT3V0VGltZSIsImZhZGVPdXRTZWNvbmRzIiwiZ2V0RmFkZU91dFRpbWUiLCJnZXRGYWRlSW5UaW1lIiwic2V0V2VpZ2h0Iiwid2VpZ2h0IiwiZ2V0V2VpZ2h0IiwiZ2V0TG9vcER1cmF0aW9uIiwic2V0T2Zmc2V0VGltZSIsIm9mZnNldFNlY29uZHMiLCJnZXRGaXJlZEV2ZW50IiwiYmVmb3JlQ2hlY2tUaW1lU2Vjb25kcyIsIm1vdGlvblRpbWVTZWNvbmRzIiwiQUN1YmlzbU1vdGlvbiIsIkN1YmlzbVZlY3RvcjIiLCJyYW5nZSIsIm1pbiIsIm1heCIsInNpbiIsImNvcyIsImFicyIsInNxcnQiLCJQSSIsInJpZ2h0IiwiZGVncmVlc1RvUmFkaWFuIiwiZGVncmVlcyIsInJhZGlhblRvRGVncmVlcyIsInJhZGlhbiIsImRpcmVjdGlvblRvUmFkaWFuIiwiZnJvbSIsInRvIiwiYXRhbjIiLCJkaXJlY3Rpb25Ub0RlZ3JlZXMiLCJkZWdyZWUiLCJyYWRpYW5Ub0RpcmVjdGlvbiIsInRvdGFsQW5nbGUiLCJ2ZWN0b3IyIiwic3Vic3RyYWN0IiwibXVsdGlwbHlCeVNjYWxlciIsInNjYWxhciIsImRpdmlzaW9uIiwiZGl2aXNpb25CeVNjYWxhciIsImdldERpc3RhbmNlV2l0aCIsImRvdCIsIm5vcm1hbGl6ZSIsInBvdyIsInJocyIsImlzTm90RXF1YWwiLCJsb2FkRmlsZUFzQnl0ZXMiLCJmaWxlUGF0aCIsImNhbGxiYWNrIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJhcnJheUJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJnZXREZWx0YVRpbWUiLCJzX2RlbHRhVGltZSIsInNfY3VycmVudEZyYW1lIiwiRGF0ZSIsIm5vdyIsInNfbGFzdEZyYW1lIiwibGFzdFVwZGF0ZSIsIl9pc0N1bGxpbmciLCJfaXNQcmVtdWx0aXBsaWVkQWxwaGEiLCJfYW5pc29ydG9weSIsIl9tb2RlbCIsIl9tb2RlbENvbG9yIiwiQ3ViaXNtVGV4dHVyZUNvbG9yIiwiX212cE1hdHJpeDR4NCIsInJlbmRlcmVyIiwiZHJhd01vZGVsIiwiZ2V0TW9kZWwiLCJkb0RyYXdNb2RlbCIsInNldE12cE1hdHJpeCIsIm1hdHJpeDQ0IiwiZ2V0TXZwTWF0cml4Iiwic2V0TW9kZWxDb2xvciIsInJlZCIsImdyZWVuIiwiYmx1ZSIsImFscGhhIiwiUiIsIkciLCJCIiwiQSIsImdldE1vZGVsQ29sb3IiLCJzZXRJc1ByZW11bHRpcGxpZWRBbHBoYSIsImlzUHJlbXVsdGlwbGllZEFscGhhIiwic2V0SXNDdWxsaW5nIiwiY3VsbGluZyIsImlzQ3VsbGluZyIsInNldEFuaXNvdHJvcHkiLCJnZXRBbmlzb3Ryb3B5IiwiQ3ViaXNtQmxlbmRNb2RlIiwiQ3NtX2NzbVZlY3RvciIsIkNzbV9DdWJpc21NYXRyaXg0NCIsIl9maW5pc2hlZE1vdGlvbiIsInNlbGYiLCJfdmlld01hdHJpeCIsIl9tb2RlbHMiLCJfc2NlbmVJbmRleCIsImNoYW5nZVNjZW5lIiwibm8iLCJyZWxlYXNlQWxsTW9kZWwiLCJzZXREcmFnZ2luZyIsIm9uVGFwIiwidG9GaXhlZCIsImhpdFRlc3QiLCJzZXRSYW5kb21FeHByZXNzaW9uIiwic3RhcnRSYW5kb21Nb3Rpb24iLCJvblVwZGF0ZSIsInByb2plY3Rpb24iLCJ3aWR0aCIsImhlaWdodCIsInNhdmVQcm9qZWN0aW9uIiwibW9kZWxDb3VudCIsInVwZGF0ZSIsImRyYXciLCJuZXh0U2NlbmUiLCJtb2RlbFBhdGgiLCJtb2RlbEpzb25OYW1lIiwiTEFwcE1vZGVsIiwibG9hZEFzc2V0cyIsIkN1YmlzbU1vdGlvblF1ZXVlRW50cnkiLCJfdXNlclRpbWVTZWNvbmRzIiwiX2V2ZW50Q2FsbEJhY2siLCJfZXZlbnRDdXN0b21EYXRhIiwiX21vdGlvbnMiLCJzdGFydE1vdGlvbiIsImF1dG9EZWxldGUiLCJJbnZhbGlkTW90aW9uUXVldWVFbnRyeUhhbmRsZVZhbHVlIiwic3RhcnRGYWRlb3V0IiwiX21vdGlvbiIsIl9hdXRvRGVsZXRlIiwiX21vdGlvblF1ZXVlRW50cnlIYW5kbGUiLCJpc0ZpbmlzaGVkQnlIYW5kbGUiLCJtb3Rpb25RdWV1ZUVudHJ5TnVtYmVyIiwic3RvcEFsbE1vdGlvbnMiLCJnZXRDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5Iiwic2V0RXZlbnRDYWxsYmFjayIsImN1c3RvbURhdGEiLCJkb1VwZGF0ZU1vdGlvbiIsInVwZGF0ZWQiLCJmaXJlZExpc3QiLCJnZXRMYXN0Q2hlY2tFdmVudFRpbWUiLCJzZXRMYXN0Q2hlY2tFdmVudFRpbWUiLCJDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIiLCJfY3VycmVudFRpbWUiLCJDdWJpc21CcmVhdGgiLCJzZXRQYXJhbWV0ZXJzIiwiYnJlYXRoUGFyYW1ldGVycyIsIl9icmVhdGhQYXJhbWV0ZXJzIiwiZ2V0UGFyYW1ldGVycyIsImRlbHRhVGltZVNlY29uZHMiLCJhZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQiLCJwYXJhbWV0ZXJJZCIsInBlYWsiLCJjeWNsZSIsIkJyZWF0aFBhcmFtZXRlckRhdGEiLCJFeWVTdGF0ZSIsIm1vZGVsU2V0dGluZyIsIl9ibGlua2luZ1N0YXRlIiwiRXllU3RhdGVfRmlyc3QiLCJfbmV4dEJsaW5raW5nVGltZSIsIl9zdGF0ZVN0YXJ0VGltZVNlY29uZHMiLCJfYmxpbmtpbmdJbnRlcnZhbFNlY29uZHMiLCJfY2xvc2luZ1NlY29uZHMiLCJfY2xvc2VkU2Vjb25kcyIsIl9vcGVuaW5nU2Vjb25kcyIsIl9wYXJhbWV0ZXJJZHMiLCJnZXRFeWVCbGlua1BhcmFtZXRlckNvdW50IiwiZ2V0RXllQmxpbmtQYXJhbWV0ZXJJZCIsIkN1YmlzbUV5ZUJsaW5rIiwiZXllQmxpbmsiLCJzZXRCbGlua2luZ0ludGVydmFsIiwiYmxpbmtpbmdJbnRlcnZhbCIsInNldEJsaW5raW5nU2V0dGluZyIsImNsb3NpbmciLCJjbG9zZWQiLCJvcGVuaW5nIiwic2V0UGFyYW1ldGVySWRzIiwicGFyYW1ldGVySWRzIiwiZ2V0UGFyYW1ldGVySWRzIiwicGFyYW1ldGVyVmFsdWUiLCJFeWVTdGF0ZV9DbG9zaW5nIiwiRXllU3RhdGVfQ2xvc2VkIiwiRXllU3RhdGVfT3BlbmluZyIsIkV5ZVN0YXRlX0ludGVydmFsIiwiZGV0ZXJtaW5OZXh0QmxpbmtpbmdUaW1pbmciLCJDbG9zZUlmWmVybyIsInNldFBhcmFtZXRlclZhbHVlQnlJZCIsInJhbmRvbSIsIlJlYWN0TGl2ZTJkIiwicHJvcHMiLCJjYW52YXNTdHlsZSIsImJvdHRvbSIsInVzZUVmZmVjdCIsIk1vZGVsTGlzdCIsIm9uYmVmb3JldW5sb2FkIiwiaWQiLCJzdHlsZSIsImNsYXNzTmFtZSIsIkNTTV9MT0dfTEVWRUxfT0ZGIiwiQ3ViaXNtSWQiLCJfaWRzIiwicmVnaXN0ZXJJZHMiLCJpZHMiLCJyZWdpc3RlcklkIiwicmVzdWx0IiwiZmluZElkIiwiZ2V0SWQiLCJfaWQiLCJDc21fQ3ViaXNtVmlld01hdHJpeCIsIkN1YmlzbVZpZXdNYXRyaXgiLCJfcHJvZ3JhbUlkIiwiX2JhY2siLCJfZ2VhciIsIl90b3VjaE1hbmFnZXIiLCJUb3VjaE1hbmFnZXIiLCJfZGV2aWNlVG9TY3JlZW4iLCJyYXRpbyIsInNldFNjcmVlblJlY3QiLCJzY3JlZW5XIiwic2V0TWF4U2NhbGUiLCJzZXRNaW5TY2FsZSIsInNldE1heFNjcmVlblJlY3QiLCJkZWxldGVQcm9ncmFtIiwiZmx1c2giLCJwb2ludFgiLCJwb2ludFkiLCJ0b3VjaGVzQmVnYW4iLCJ2aWV3WCIsInRyYW5zZm9ybVZpZXdYIiwiZ2V0WCIsInZpZXdZIiwidHJhbnNmb3JtVmlld1kiLCJnZXRZIiwidG91Y2hlc01vdmVkIiwibGl2ZTJETWFuYWdlciIsImRldmljZVgiLCJzY3JlZW5YIiwiZGV2aWNlWSIsInNjcmVlblkiLCJ0cmFuc2Zvcm1TY3JlZW5YIiwidHJhbnNmb3JtU2NyZWVuWSIsIl9zY3JlZW5MZWZ0IiwiX3NjcmVlblJpZ2h0IiwiX3NjcmVlblRvcCIsIl9zY3JlZW5Cb3R0b20iLCJfbWF4TGVmdCIsIl9tYXhSaWdodCIsIl9tYXhUb3AiLCJfbWF4Qm90dG9tIiwiX21heFNjYWxlIiwiX21pblNjYWxlIiwiYWRqdXN0VHJhbnNsYXRlIiwiYWRqdXN0U2NhbGUiLCJjeCIsImN5IiwibWF4U2NhbGUiLCJnZXRNYXhTY2FsZSIsIm1pblNjYWxlIiwiZ2V0TWluU2NhbGUiLCJ0YXJnZXRTY2FsZSIsInRyMiIsInRyMyIsImlzTWF4U2NhbGUiLCJpc01pblNjYWxlIiwiZ2V0U2NyZWVuTGVmdCIsImdldFNjcmVlblJpZ2h0IiwiZ2V0U2NyZWVuQm90dG9tIiwiZ2V0U2NyZWVuVG9wIiwiZ2V0TWF4TGVmdCIsImdldE1heFJpZ2h0IiwiZ2V0TWF4Qm90dG9tIiwiZ2V0TWF4VG9wIiwiX3N0YXJ0WCIsIl9zdGFydFkiLCJfbGFzdFgiLCJfbGFzdFkiLCJfbGFzdFgxIiwiX2xhc3RZMSIsIl9sYXN0WDIiLCJfbGFzdFkyIiwiX2xhc3RUb3VjaERpc3RhbmNlIiwiX2RlbHRhWCIsIl9kZWx0YVkiLCJfc2NhbGUiLCJfdG91Y2hTaW5nbGUiLCJfZmxpcEF2YWlsYWJsZSIsImdldENlbnRlclgiLCJnZXRDZW50ZXJZIiwiZ2V0RGVsdGFYIiwiZ2V0RGVsdGFZIiwiZ2V0U3RhcnRYIiwiZ2V0U3RhcnRZIiwiZ2V0U2NhbGUiLCJnZXRYMSIsImdldFkxIiwiZ2V0WDIiLCJnZXRZMiIsImlzU2luZ2xlVG91Y2giLCJpc0ZsaWNrQXZhaWxhYmxlIiwiZGlzYWJsZUZsaWNrIiwiZ2V0RmxpY2tEaXN0YW5jZSIsImNhbGN1bGF0ZURpc3RhbmNlIiwieDEiLCJ5MSIsIngyIiwieTIiLCJjYWxjdWxhdGVNb3ZpbmdBbW91bnQiLCJ2MSIsInYyIiwic2lnbiIsImFic29sdXRlVmFsdWUxIiwiYWJzb2x1dGVWYWx1ZTIiLCJMb2FkU3RlcCIsIkN1YmlzbVVzZXJNb2RlbCIsIkN1YmlzbU1vZGVsU2V0dGluZ0pzb24iLCJDdWJpc21EZWZhdWx0UGFyYW1ldGVySWQiLCJfbW9kZWxTZXR0aW5nIiwiX21vZGVsSG9tZURpciIsIl9leWVCbGlua0lkcyIsIl9saXBTeW5jSWRzIiwiX2V4cHJlc3Npb25zIiwiX2hpdEFyZWEiLCJfdXNlckFyZWEiLCJfaWRQYXJhbUFuZ2xlWCIsIlBhcmFtQW5nbGVYIiwiX2lkUGFyYW1BbmdsZVkiLCJQYXJhbUFuZ2xlWSIsIl9pZFBhcmFtQW5nbGVaIiwiUGFyYW1BbmdsZVoiLCJfaWRQYXJhbUV5ZUJhbGxYIiwiUGFyYW1FeWVCYWxsWCIsIl9pZFBhcmFtRXllQmFsbFkiLCJQYXJhbUV5ZUJhbGxZIiwiX2lkUGFyYW1Cb2R5QW5nbGVYIiwiUGFyYW1Cb2R5QW5nbGVYIiwiX3N0YXRlIiwiTG9hZEFzc2V0cyIsIl9leHByZXNzaW9uQ291bnQiLCJfdGV4dHVyZUNvdW50IiwiX21vdGlvbkNvdW50IiwiX2FsbE1vdGlvbkNvdW50IiwiZGlyIiwiZmlsZU5hbWUiLCJzZXR0aW5nIiwiTG9hZE1vZGVsIiwic2V0dXBNb2RlbCIsIl91cGRhdGluZyIsIl9pbml0aWFsaXplZCIsImdldE1vZGVsRmlsZU5hbWUiLCJtb2RlbEZpbGVOYW1lIiwibG9hZE1vZGVsIiwiTG9hZEV4cHJlc3Npb24iLCJsb2FkQ3ViaXNtRXhwcmVzc2lvbiIsIldhaXRMb2FkTW9kZWwiLCJnZXRFeHByZXNzaW9uQ291bnQiLCJleHByZXNzaW9uTmFtZSIsImdldEV4cHJlc3Npb25OYW1lIiwiZXhwcmVzc2lvbkZpbGVOYW1lIiwiZ2V0RXhwcmVzc2lvbkZpbGVOYW1lIiwibG9hZEV4cHJlc3Npb24iLCJMb2FkUGh5c2ljcyIsImxvYWRDdWJpc21QaHlzaWNzIiwiV2FpdExvYWRFeHByZXNzaW9uIiwiZ2V0UGh5c2ljc0ZpbGVOYW1lIiwicGh5c2ljc0ZpbGVOYW1lIiwibG9hZFBoeXNpY3MiLCJMb2FkUG9zZSIsImxvYWRDdWJpc21Qb3NlIiwiV2FpdExvYWRQaHlzaWNzIiwiZ2V0UG9zZUZpbGVOYW1lIiwicG9zZUZpbGVOYW1lIiwibG9hZFBvc2UiLCJTZXR1cEV5ZUJsaW5rIiwic2V0dXBFeWVCbGluayIsIldhaXRMb2FkUG9zZSIsIl9leWVCbGluayIsIlNldHVwQnJlYXRoIiwic2V0dXBCcmVhdGgiLCJfYnJlYXRoIiwiUGFyYW1CcmVhdGgiLCJMb2FkVXNlckRhdGEiLCJsb2FkVXNlckRhdGEiLCJnZXRVc2VyRGF0YUZpbGUiLCJ1c2VyRGF0YUZpbGUiLCJTZXR1cEV5ZUJsaW5rSWRzIiwic2V0dXBFeWVCbGlua0lkcyIsIldhaXRMb2FkVXNlckRhdGEiLCJleWVCbGlua0lkQ291bnQiLCJTZXR1cExpcFN5bmNJZHMiLCJzZXR1cExpcFN5bmNJZHMiLCJsaXBTeW5jSWRDb3VudCIsImdldExpcFN5bmNQYXJhbWV0ZXJDb3VudCIsImdldExpcFN5bmNQYXJhbWV0ZXJJZCIsIlNldHVwTGF5b3V0Iiwic2V0dXBMYXlvdXQiLCJsYXlvdXQiLCJnZXRMYXlvdXRNYXAiLCJfbW9kZWxNYXRyaXgiLCJzZXR1cEZyb21MYXlvdXQiLCJMb2FkTW90aW9uIiwibG9hZEN1YmlzbU1vdGlvbiIsIldhaXRMb2FkTW90aW9uIiwic2F2ZVBhcmFtZXRlcnMiLCJncm91cCIsIm1vdGlvbkdyb3VwQ291bnQiLCJnZXRNb3Rpb25Hcm91cENvdW50IiwiZ2V0TW90aW9uR3JvdXBOYW1lIiwiZ2V0TW90aW9uQ291bnQiLCJwcmVMb2FkTW90aW9uR3JvdXAiLCJMb2FkVGV4dHVyZSIsIl9tb3Rpb25NYW5hZ2VyIiwiY3JlYXRlUmVuZGVyZXIiLCJzZXR1cFRleHR1cmVzIiwiZ2V0UmVuZGVyZXIiLCJnZXRUZXh0dXJlQ291bnQiLCJtb2RlbFRleHR1cmVOdW1iZXIiLCJnZXRUZXh0dXJlRmlsZU5hbWUiLCJ0ZXh0dXJlUGF0aCIsImNyZWF0ZVRleHR1cmVGcm9tUG5nRmlsZSIsInRleHR1cmVJbmZvIiwiYmluZFRleHR1cmUiLCJDb21wbGV0ZVNldHVwIiwiV2FpdExvYWRUZXh0dXJlIiwicmVsb2FkUmVuZGVyZXIiLCJkZWxldGVSZW5kZXJlciIsIl9kcmFnTWFuYWdlciIsIl9kcmFnWCIsIl9kcmFnWSIsIm1vdGlvblVwZGF0ZWQiLCJsb2FkUGFyYW1ldGVycyIsInVwZGF0ZU1vdGlvbiIsIl9leHByZXNzaW9uTWFuYWdlciIsIl9waHlzaWNzIiwiZXZhbHVhdGUiLCJfbGlwc3luYyIsIl9wb3NlIiwicHJpb3JpdHkiLCJzZXRSZXNlcnZlUHJpb3JpdHkiLCJyZXNlcnZlTW90aW9uIiwiX2RlYnVnTW9kZSIsIm1vdGlvbkZpbGVOYW1lIiwiZ2V0TW90aW9uRmlsZU5hbWUiLCJsb2FkTW90aW9uIiwiZmFkZVRpbWUiLCJnZXRNb3Rpb25GYWRlSW5UaW1lVmFsdWUiLCJnZXRNb3Rpb25GYWRlT3V0VGltZVZhbHVlIiwic2V0RWZmZWN0SWRzIiwic3RhcnRNb3Rpb25Qcmlvcml0eSIsImZsb29yIiwic2V0RXhwcmVzc2lvbiIsImV4cHJlc3Npb25JZCIsIm1vdGlvbkV2ZW50RmlyZWQiLCJldmVudFZhbHVlIiwiaGl0QXJlbmFOYW1lIiwiX29wYWNpdHkiLCJjb3VudCIsImdldEhpdEFyZWFzQ291bnQiLCJnZXRIaXRBcmVhTmFtZSIsImRyYXdJZCIsImdldEhpdEFyZWFJZCIsImlzSGl0IiwidG1wTW90aW9uIiwicmVsZWFzZU1vdGlvbnMiLCJyZWxlYXNlRXhwcmVzc2lvbnMiLCJkb0RyYXciLCJ2aWV3cG9ydCIsInNldFJlbmRlclN0YXRlIiwibWF0cml4IiwiQ3ViaXNtUmVuZGVyZXJfV2ViR0wiLCJDdWJpc21QaHlzaWNzIiwiQ3ViaXNtTW9kZWxVc2VyRGF0YSIsIkN1YmlzbVBvc2UiLCJDdWJpc21FeHByZXNzaW9uTW90aW9uIiwiQ3ViaXNtTW90aW9uIiwiQ3ViaXNtTW9jIiwiQ3ViaXNtTW9kZWxNYXRyaXgiLCJDdWJpc21UYXJnZXRQb2ludCIsIkN1YmlzbU1vdGlvbk1hbmFnZXIiLCJfbW9jIiwiX21vZGVsVXNlckRhdGEiLCJfbGFzdExpcFN5bmNWYWx1ZSIsIl9hY2NlbGVyYXRpb25YIiwiX2FjY2VsZXJhdGlvblkiLCJfYWNjZWxlcmF0aW9uWiIsIl9yZW5kZXJlciIsImN1YmlzbURlZmF1bHRNb3Rpb25FdmVudENhbGxiYWNrIiwic2V0SW5pdGlhbGl6ZWQiLCJpc1VwZGF0aW5nIiwic2V0VXBkYXRpbmciLCJzZXRBY2NlbGVyYXRpb24iLCJ6IiwiZ2V0TW9kZWxNYXRyaXgiLCJzZXRPcGFjaXR5IiwiZ2V0T3BhY2l0eSIsImNyZWF0ZU1vZGVsIiwiZ2V0Q2FudmFzV2lkdGgiLCJnZXRDYW52YXNIZWlnaHQiLCJkcmF3YWJsZUlkIiwiZHJhd0luZGV4IiwiZ2V0RHJhd2FibGVJbmRleCIsImdldERyYXdhYmxlVmVydGV4Q291bnQiLCJ2ZXJ0aWNlcyIsImdldERyYXdhYmxlVmVydGljZXMiLCJ0eCIsInR5IiwiY2FsbGVyIiwiZGVsZXRlTW9kZWwiLCJfY3VycmVudFByaW9yaXR5IiwiX3Jlc2VydmVQcmlvcml0eSIsImdldEN1cnJlbnRQcmlvcml0eSIsImdldFJlc2VydmVQcmlvcml0eSIsInZhbCIsIl9hdmFpbGFibGUiLCJfZmluaXNoZWQiLCJfc3RhcnRlZCIsIl9zdGFydFRpbWVTZWNvbmRzIiwiX2ZhZGVJblN0YXJ0VGltZVNlY29uZHMiLCJfZW5kVGltZVNlY29uZHMiLCJfc3RhdGVUaW1lU2Vjb25kcyIsIl9zdGF0ZVdlaWdodCIsIl9sYXN0RXZlbnRDaGVja1NlY29uZHMiLCJmYWRlb3V0U2Vjb25kcyIsIm5ld0VuZFRpbWVTZWNvbmRzIiwic3RhcnRUaW1lIiwiZW5kVGltZSIsInNldElzQXZhaWxhYmxlIiwidGltZVNlY29uZHMiLCJnZXRTdGF0ZVRpbWUiLCJnZXRTdGF0ZVdlaWdodCIsImNoZWNrVGltZSIsIl9mYWNlVGFyZ2V0WCIsIl9mYWNlVGFyZ2V0WSIsIl9mYWNlWCIsIl9mYWNlWSIsIl9mYWNlVlgiLCJfZmFjZVZZIiwiX2xhc3RUaW1lU2Vjb25kcyIsImRlbHRhVGltZVdlaWdodCIsIm1heEEiLCJ0aW1lVG9NYXhTcGVlZCIsImR4IiwiZHkiLCJ2eSIsImF4IiwiYXkiLCJjdXJWIiwidyIsImgiLCJfd2lkdGgiLCJfaGVpZ2h0Iiwic2V0SGVpZ2h0Iiwic2V0V2lkdGgiLCJzY2FsZVgiLCJzY2FsZVkiLCJzZXRQb3NpdGlvbiIsInNldENlbnRlclBvc2l0aW9uIiwiY2VudGVyWCIsImNlbnRlclkiLCJzZXRZIiwic2V0WCIsIkN1YmlzbU1vZGVsIiwibW9jIiwiX21vZGVsQ291bnQiLCJtb2NCeXRlcyIsImN1YmlzbU1vYyIsIk1vYyIsImZyb21BcnJheUJ1ZmZlciIsIl9yZWxlYXNlIiwiY3ViaXNtTW9kZWwiLCJNb2RlbCIsImZyb21Nb2MiLCJfcGFyYW1ldGVyVmFsdWVzIiwiX3BhcmFtZXRlck1heGltdW1WYWx1ZXMiLCJfcGFyYW1ldGVyTWluaW11bVZhbHVlcyIsIl9wYXJ0T3BhY2l0aWVzIiwiX3NhdmVkUGFyYW1ldGVycyIsIl9kcmF3YWJsZUlkcyIsIl9wYXJ0SWRzIiwiX25vdEV4aXN0UGFydElkIiwiX25vdEV4aXN0UGFyYW1ldGVySWQiLCJfbm90RXhpc3RQYXJhbWV0ZXJWYWx1ZXMiLCJfbm90RXhpc3RQYXJ0T3BhY2l0aWVzIiwiZHJhd2FibGVzIiwicmVzZXREeW5hbWljRmxhZ3MiLCJjYW52YXNpbmZvIiwiQ2FudmFzV2lkdGgiLCJQaXhlbHNQZXJVbml0IiwiQ2FudmFzSGVpZ2h0IiwicGFyYW1ldGVyQ291bnQiLCJwYXJhbWV0ZXJzIiwic2F2ZWRQYXJhbWV0ZXJDb3VudCIsImdldFBhcnRJbmRleCIsInBhcnRJZCIsInBhcnRJbmRleCIsInBhcnRDb3VudCIsInBhcnRzIiwiZ2V0UGFydENvdW50Iiwic2V0UGFydE9wYWNpdHlCeUluZGV4Iiwib3BhY2l0eSIsInNldFBhcnRPcGFjaXR5QnlJZCIsImdldFBhcnRPcGFjaXR5QnlJbmRleCIsImdldFBhcnRPcGFjaXR5QnlJZCIsImdldFBhcmFtZXRlckluZGV4IiwicGFyYW1ldGVySW5kZXgiLCJpZENvdW50IiwiZ2V0UGFyYW1ldGVyQ291bnQiLCJnZXRQYXJhbWV0ZXJNYXhpbXVtVmFsdWUiLCJtYXhpbXVtVmFsdWVzIiwiZ2V0UGFyYW1ldGVyTWluaW11bVZhbHVlIiwibWluaW11bVZhbHVlcyIsImdldFBhcmFtZXRlckRlZmF1bHRWYWx1ZSIsImRlZmF1bHRWYWx1ZXMiLCJnZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgiLCJnZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQiLCJzZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgiLCJhZGRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgiLCJtdWx0aXBseVBhcmFtZXRlclZhbHVlQnlJZCIsIm11bHRpcGx5UGFyYW1ldGVyVmFsdWVCeUluZGV4IiwiZHJhd2FibGVDb3VudCIsImRyYXdhYmxlSW5kZXgiLCJnZXREcmF3YWJsZUNvdW50IiwiZ2V0RHJhd2FibGVJZCIsImdldERyYXdhYmxlUmVuZGVyT3JkZXJzIiwicmVuZGVyT3JkZXJzIiwiZ2V0RHJhd2FibGVUZXh0dXJlSW5kaWNlcyIsInRleHR1cmVJbmRpY2VzIiwiZ2V0RHJhd2FibGVEeW5hbWljRmxhZ1ZlcnRleFBvc2l0aW9uc0RpZENoYW5nZSIsImR5bmFtaWNGbGFncyIsIlV0aWxzIiwiaGFzVmVydGV4UG9zaXRpb25zRGlkQ2hhbmdlQml0IiwiZ2V0RHJhd2FibGVWZXJ0ZXhJbmRleENvdW50IiwiaW5kZXhDb3VudHMiLCJ2ZXJ0ZXhDb3VudHMiLCJnZXREcmF3YWJsZVZlcnRleFBvc2l0aW9ucyIsImdldERyYXdhYmxlVmVydGV4SW5kaWNlcyIsImluZGljZXMiLCJ2ZXJ0ZXhQb3NpdGlvbnMiLCJnZXREcmF3YWJsZVZlcnRleFV2cyIsInZlcnRleFV2cyIsImdldERyYXdhYmxlT3BhY2l0eSIsIm9wYWNpdGllcyIsImdldERyYXdhYmxlQ3VsbGluZyIsImNvbnN0YW50RmxhZ3MiLCJoYXNJc0RvdWJsZVNpZGVkQml0IiwiZ2V0RHJhd2FibGVCbGVuZE1vZGUiLCJoYXNCbGVuZEFkZGl0aXZlQml0IiwiQ3ViaXNtQmxlbmRNb2RlX0FkZGl0aXZlIiwiaGFzQmxlbmRNdWx0aXBsaWNhdGl2ZUJpdCIsIkN1YmlzbUJsZW5kTW9kZV9NdWx0aXBsaWNhdGl2ZSIsIkN1YmlzbUJsZW5kTW9kZV9Ob3JtYWwiLCJnZXREcmF3YWJsZUludmVydGVkTWFza0JpdCIsImhhc0lzSW52ZXJ0ZWRNYXNrQml0IiwiZ2V0RHJhd2FibGVNYXNrcyIsIm1hc2tzIiwiZ2V0RHJhd2FibGVNYXNrQ291bnRzIiwibWFza0NvdW50cyIsImlzVXNpbmdNYXNraW5nIiwiZ2V0RHJhd2FibGVEeW5hbWljRmxhZ0lzVmlzaWJsZSIsImhhc0lzVmlzaWJsZUJpdCIsImdldERyYXdhYmxlRHluYW1pY0ZsYWdWaXNpYmlsaXR5RGlkQ2hhbmdlIiwiaGFzVmlzaWJpbGl0eURpZENoYW5nZUJpdCIsImdldERyYXdhYmxlRHluYW1pY0ZsYWdPcGFjaXR5RGlkQ2hhbmdlIiwiaGFzT3BhY2l0eURpZENoYW5nZUJpdCIsImdldERyYXdhYmxlRHluYW1pY0ZsYWdSZW5kZXJPcmRlckRpZENoYW5nZSIsImhhc1JlbmRlck9yZGVyRGlkQ2hhbmdlQml0IiwidmFsdWVzIiwicGFydElkcyIsImRyYXdhYmxlSWRzIiwiQ3ViaXNtTW90aW9uRGF0YSIsIkN1YmlzbU1vdGlvblNlZ21lbnQiLCJDdWJpc21Nb3Rpb25Qb2ludCIsIkN1YmlzbU1vdGlvbkV2ZW50IiwiQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUiLCJDdWJpc21Nb3Rpb25DdXJ2ZSIsIkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0IiwiQ3ViaXNtTW90aW9uSnNvbiIsImxlcnBQb2ludHMiLCJ0aW1lIiwibGluZWFyRXZhbHVhdGUiLCJwb2ludHMiLCJiZXppZXJFdmFsdWF0ZSIsInAwMSIsInAxMiIsInAyMyIsInAwMTIiLCJwMTIzIiwic3RlcHBlZEV2YWx1YXRlIiwiaW52ZXJzZVN0ZXBwZWRFdmFsdWF0ZSIsImV2YWx1YXRlQ3VydmUiLCJtb3Rpb25EYXRhIiwiY3VydmUiLCJjdXJ2ZXMiLCJ0b3RhbFNlZ21lbnRDb3VudCIsImJhc2VTZWdtZW50SW5kZXgiLCJzZWdtZW50Q291bnQiLCJwb2ludFBvc2l0aW9uIiwic2VnbWVudHMiLCJiYXNlUG9pbnRJbmRleCIsInNlZ21lbnRUeXBlIiwiQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfQmV6aWVyIiwic2VnbWVudCIsIl9zb3VyY2VGcmFtZVJhdGUiLCJfbG9vcER1cmF0aW9uU2Vjb25kcyIsIl9pc0xvb3AiLCJfaXNMb29wRmFkZUluIiwiX2xhc3RXZWlnaHQiLCJfbW90aW9uRGF0YSIsIl9tb2RlbEN1cnZlSWRFeWVCbGluayIsIl9tb2RlbEN1cnZlSWRMaXBTeW5jIiwiX2V5ZUJsaW5rUGFyYW1ldGVySWRzIiwiX2xpcFN5bmNQYXJhbWV0ZXJJZHMiLCJmcHMiLCJ0aW1lT2Zmc2V0U2Vjb25kcyIsImxpcFN5bmNWYWx1ZSIsIk1BWF9WQUxVRSIsImV5ZUJsaW5rVmFsdWUiLCJsaXBTeW5jRmxhZ3MiLCJleWVCbGlua0ZsYWdzIiwidG1wRmFkZUluIiwidG1wRmFkZU91dCIsImN1cnZlQ291bnQiLCJ0eXBlIiwiQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfTW9kZWwiLCJDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9QYXJhbWV0ZXIiLCJzb3VyY2VWYWx1ZSIsImZhZGVJblRpbWUiLCJmYWRlT3V0VGltZSIsImZpbiIsImZvdXQiLCJDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9QYXJ0T3BhY2l0eSIsInNldElzTG9vcCIsImlzTG9vcCIsInNldElzTG9vcEZhZGVJbiIsImxvb3BGYWRlSW4iLCJpc0xvb3BGYWRlSW4iLCJzZXRQYXJhbWV0ZXJGYWRlSW5UaW1lIiwic2V0UGFyYW1ldGVyRmFkZU91dFRpbWUiLCJnZXRQYXJhbWV0ZXJGYWRlSW5UaW1lIiwiZ2V0UGFyYW1ldGVyRmFkZU91dFRpbWUiLCJleWVCbGlua1BhcmFtZXRlcklkcyIsImxpcFN5bmNQYXJhbWV0ZXJJZHMiLCJtb3Rpb25Kc29uIiwiZ2V0TW90aW9uRHVyYXRpb24iLCJpc01vdGlvbkxvb3AiLCJnZXRNb3Rpb25DdXJ2ZUNvdW50IiwiZ2V0TW90aW9uRnBzIiwiZXZlbnRDb3VudCIsImdldEV2ZW50Q291bnQiLCJpc0V4aXN0TW90aW9uRmFkZUluVGltZSIsImdldE1vdGlvbkZhZGVJblRpbWUiLCJpc0V4aXN0TW90aW9uRmFkZU91dFRpbWUiLCJnZXRNb3Rpb25GYWRlT3V0VGltZSIsImdldE1vdGlvblRvdGFsU2VnbWVudENvdW50IiwiZ2V0TW90aW9uVG90YWxQb2ludENvdW50IiwiZXZlbnRzIiwidG90YWxQb2ludENvdW50IiwiZ2V0TW90aW9uQ3VydmVUYXJnZXQiLCJnZXRNb3Rpb25DdXJ2ZUlkIiwiaXNFeGlzdE1vdGlvbkN1cnZlRmFkZUluVGltZSIsImdldE1vdGlvbkN1cnZlRmFkZUluVGltZSIsImlzRXhpc3RNb3Rpb25DdXJ2ZUZhZGVPdXRUaW1lIiwiZ2V0TW90aW9uQ3VydmVGYWRlT3V0VGltZSIsInNlZ21lbnRQb3NpdGlvbiIsImdldE1vdGlvbkN1cnZlU2VnbWVudENvdW50IiwiZ2V0TW90aW9uQ3VydmVTZWdtZW50IiwiQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfTGluZWFyIiwiQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfU3RlcHBlZCIsIkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0ludmVyc2VTdGVwcGVkIiwidXNlcmRhdGFjb3VudCIsImZpcmVUaW1lIiwiZ2V0RXZlbnRUaW1lIiwiZ2V0RXZlbnRWYWx1ZSIsInUiLCJNZXRhIiwiX2pzb24iLCJjdXJ2ZUluZGV4Iiwic2VnbWVudEluZGV4IiwiZ2V0VG90YWxFdmVudFZhbHVlU2l6ZSIsInVzZXJEYXRhSW5kZXgiLCJFeHByZXNzaW9uQmxlbmRUeXBlIiwiX3BhcmFtZXRlcnMiLCJleHByZXNzaW9uIiwicGFyYW0iLCJibGVuZFR5cGUiLCJFeHByZXNzaW9uQmxlbmRUeXBlX0FkZCIsIkV4cHJlc3Npb25CbGVuZFR5cGVfTXVsdGlwbHkiLCJFeHByZXNzaW9uQmxlbmRUeXBlX092ZXJ3cml0ZSIsIml0ZW0iLCJFeHByZXNzaW9uUGFyYW1ldGVyIiwicGFyYW1ldGVyIiwiX2ZhZGVUaW1lU2Vjb25kcyIsIl9sYXN0TW9kZWwiLCJfcGFydEdyb3VwcyIsIl9wYXJ0R3JvdXBDb3VudHMiLCJwb3NlM2pzb24iLCJwb3NlTGlzdEluZm8iLCJwb3NlQ291bnQiLCJwb3NlSW5kZXgiLCJpZExpc3RJbmZvIiwiZ3JvdXBDb3VudCIsImdyb3VwSW5kZXgiLCJwYXJ0SW5mbyIsInBhcnREYXRhIiwiUGFydERhdGEiLCJsaW5rTGlzdEluZm8iLCJsaW5rQ291bnQiLCJsaW5rSW5kZXgiLCJsaW5rUGFydCIsImxpbmtJZCIsImxpbmsiLCJwb3NlIiwicmVzZXQiLCJiZWdpbkluZGV4IiwicGFydEdyb3VwQ291bnQiLCJkb0ZhZGUiLCJjb3B5UGFydE9wYWNpdGllcyIsInBhcnRzSW5kZXgiLCJwYXJhbUluZGV4IiwibGlua1BhcnRJbmRleCIsInZpc2libGVQYXJ0SW5kZXgiLCJuZXdPcGFjaXR5IiwiYTEiLCJhc3NpZ25tZW50IiwiY2xvbmVQYXJ0RGF0YSIsIkN1YmlzbU1vZGVsVXNlckRhdGFKc29uIiwiQ3ViaXNtTW9kZWxVc2VyRGF0YU5vZGUiLCJfdXNlckRhdGFOb2RlcyIsIl9hcnRNZXNoVXNlckRhdGFOb2RlIiwicGFyc2VVc2VyRGF0YSIsIm1vZGVsVXNlckRhdGEiLCJnZXRBcnRNZXNoVXNlckRhdGFzIiwidHlwZU9mQXJ0TWVzaCIsIm5vZGVDb3VudCIsImdldFVzZXJEYXRhQ291bnQiLCJhZGROb2RlIiwidGFyZ2V0SWQiLCJnZXRVc2VyRGF0YUlkIiwidGFyZ2V0VHlwZSIsImdldFVzZXJEYXRhVGFyZ2V0VHlwZSIsImdldFVzZXJEYXRhVmFsdWUiLCJnZXRUb3RhbFVzZXJEYXRhU2l6ZSIsIkN1YmlzbVBoeXNpY3NKc29uIiwiQ3ViaXNtUGh5c2ljc1JpZyIsIkN1YmlzbVBoeXNpY3NTdWJSaWciLCJDdWJpc21QaHlzaWNzSW5wdXQiLCJDdWJpc21QaHlzaWNzT3V0cHV0IiwiQ3ViaXNtUGh5c2ljc1BhcnRpY2xlIiwiQ3ViaXNtUGh5c2ljc1NvdXJjZSIsIkN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlIiwiX3BoeXNpY3NSaWciLCJfb3B0aW9ucyIsIk9wdGlvbnMiLCJncmF2aXR5Iiwid2luZCIsInBoeXNpY3MiLCJyYWRBbmdsZSIsIm91dHB1dFZhbHVlIiwiY3VycmVudFNldHRpbmciLCJjdXJyZW50SW5wdXQiLCJjdXJyZW50T3V0cHV0IiwiY3VycmVudFBhcnRpY2xlcyIsInBhcmFtZXRlck1heGltdW1WYWx1ZSIsInBhcmFtZXRlck1pbmltdW1WYWx1ZSIsInBhcmFtZXRlckRlZmF1bHRWYWx1ZSIsInRvdGFsVHJhbnNsYXRpb24iLCJzZXR0aW5nSW5kZXgiLCJzdWJSaWdDb3VudCIsImFuZ2xlIiwic2V0dGluZ3MiLCJpbnB1dHMiLCJiYXNlSW5wdXRJbmRleCIsIm91dHB1dHMiLCJiYXNlT3V0cHV0SW5kZXgiLCJwYXJ0aWNsZXMiLCJiYXNlUGFydGljbGVJbmRleCIsImlucHV0Q291bnQiLCJzb3VyY2VQYXJhbWV0ZXJJbmRleCIsInNvdXJjZSIsImdldE5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZSIsIm5vcm1hbGl6YXRpb25Qb3NpdGlvbiIsIm5vcm1hbGl6YXRpb25BbmdsZSIsInJlZmxlY3QiLCJ1cGRhdGVQYXJ0aWNsZXMiLCJwYXJ0aWNsZUNvdW50IiwibWF4aW11bSIsIm91dHB1dENvdW50IiwicGFydGljbGVJbmRleCIsInZlcnRleEluZGV4IiwiZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleCIsImRlc3RpbmF0aW9uIiwidHJhbnNsYXRpb24iLCJvdXRQYXJhbWV0ZXJWYWx1ZSIsInN1YmFycmF5IiwidXBkYXRlT3V0cHV0UGFyYW1ldGVyVmFsdWUiLCJvdXRQYXJhbUluZGV4Iiwic2V0T3B0aW9ucyIsIm9wdGlvbnMiLCJnZXRPcHRpb24iLCJwaHlzaWNzSnNvbiIsImdldEdyYXZpdHkiLCJnZXRXaW5kIiwiZ2V0U3ViUmlnQ291bnQiLCJnZXRUb3RhbElucHV0Q291bnQiLCJnZXRUb3RhbE91dHB1dENvdW50IiwiZ2V0VmVydGV4Q291bnQiLCJpbnB1dEluZGV4Iiwib3V0cHV0SW5kZXgiLCJtaW5pbXVtIiwiZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uTWluaW11bVZhbHVlIiwiZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uTWF4aW11bVZhbHVlIiwiZGVmYWx1dCIsImdldE5vcm1hbGl6YXRpb25Qb3NpdGlvbkRlZmF1bHRWYWx1ZSIsImdldE5vcm1hbGl6YXRpb25BbmdsZU1pbmltdW1WYWx1ZSIsImdldE5vcm1hbGl6YXRpb25BbmdsZU1heGltdW1WYWx1ZSIsImdldE5vcm1hbGl6YXRpb25BbmdsZURlZmF1bHRWYWx1ZSIsImdldElucHV0Q291bnQiLCJnZXRJbnB1dFdlaWdodCIsImdldElucHV0UmVmbGVjdCIsImdldElucHV0VHlwZSIsIkN1YmlzbVBoeXNpY3NTb3VyY2VfWCIsImdldElucHV0VHJhbnNsYXRpb25YRnJvbU5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZSIsIkN1YmlzbVBoeXNpY3NTb3VyY2VfWSIsImdldElucHV0VHJhbnNsYXRpb25ZRnJvbU5vcm1hbGl6ZWRQYXJhbXRlclZhbHVlIiwiQ3ViaXNtUGh5c2ljc1NvdXJjZV9BbmdsZSIsImdldElucHV0QW5nbGVGcm9tTm9ybWFsaXplZFBhcmFtZXRlclZhbHVlIiwiQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGVfUGFyYW1ldGVyIiwiZ2V0SW5wdXRTb3VyY2VJZCIsImdldE91dHB1dENvdW50IiwiZ2V0T3V0cHV0VmVydGV4SW5kZXgiLCJhbmdsZVNjYWxlIiwiZ2V0T3V0cHV0QW5nbGVTY2FsZSIsImdldE91dHB1dFdlaWdodCIsImdldE91dHB1dERlc3RpbmF0aW9uSWQiLCJnZXRPdXRwdXRUeXBlIiwiZ2V0T3V0cHV0VHJhbnNsYXRpb25YIiwiZ2V0T3V0cHV0U2NhbGVUcmFuc2xhdGlvblgiLCJnZXRPdXRwdXRUcmFuc2xhdGlvblkiLCJnZXRPdXRwdXRTY2FsZVRyYW5zbGF0aW9uWSIsImdldE91dHB1dEFuZ2xlIiwiZ2V0T3V0cHV0U2NhbGVBbmdsZSIsImdldE91dHB1dFJlZmxlY3QiLCJnZXRQYXJ0aWNsZUNvdW50IiwibW9iaWxpdHkiLCJnZXRQYXJ0aWNsZU1vYmlsaXR5IiwiZGVsYXkiLCJnZXRQYXJ0aWNsZURlbGF5IiwiYWNjZWxlcmF0aW9uIiwiZ2V0UGFydGljbGVBY2NlbGVyYXRpb24iLCJyYWRpdXMiLCJnZXRQYXJ0aWNsZVJhZGl1cyIsImdldFBhcnRpY2xlUG9zaXRpb24iLCJzdHJhbmQiLCJpbml0aWFsUG9zaXRpb24iLCJsYXN0UG9zaXRpb24iLCJsYXN0R3Jhdml0eSIsInZlbG9jaXR5IiwiZm9yY2UiLCJ0YXJnZXRUcmFuc2xhdGlvbiIsInRhcmdldEFuZ2xlIiwiaXNJbnZlcnRlZCIsIm5vcm1hbGl6ZVBhcmFtZXRlclZhbHVlIiwibm9ybWFsaXphaXRpb25Qb3NpdGlvbiIsInBhcmVudEdyYXZpdHkiLCJnZXREZWZhdWx0VmFsdWUiLCJtYXhWYWx1ZSIsIm1pblZhbHVlIiwiZ2V0UmFuZ2VWYWx1ZSIsInRyYW5zbGF0aW9uU2NhbGUiLCJzdHJhbmRDb3VudCIsIndpbmREaXJlY3Rpb24iLCJ0aHJlc2hvbGRWYWx1ZSIsImFpclJlc2lzdGFuY2UiLCJ0b3RhbFJhZGlhbiIsImN1cnJlbnRHcmF2aXR5IiwiZGlyZWN0aW9uIiwibmV3RGlyZWN0aW9uIiwicGFyYW1ldGVyVmFsdWVNaW5pbXVtIiwicGFyYW1ldGVyVmFsdWVNYXhpbXVtIiwib3V0cHV0IiwidmFsdWVCZWxvd01pbmltdW0iLCJ2YWx1ZUV4Y2VlZGVkTWF4aW11bSIsInBhcmFtZXRlck1pbmltdW0iLCJwYXJhbWV0ZXJNYXhpbXVtIiwicGFyYW1ldGVyRGVmYXVsdCIsIm5vcm1hbGl6ZWRNaW5pbXVtIiwibm9ybWFsaXplZE1heGltdW0iLCJub3JtYWxpemVkRGVmYXVsdCIsIm1pbk5vcm1WYWx1ZSIsIm1heE5vcm1WYWx1ZSIsIm1pZGRsZU5vcm1WYWx1ZSIsIm1pZGRsZVZhbHVlIiwicGFyYW1WYWx1ZSIsIm5MZW5ndGgiLCJwTGVuZ3RoIiwiUGh5c2ljc0pzb25FZmZlY3RpdmVGb3JjZXMiLCJDdWJpc21QaHlzaWNzUGFyYW1ldGVyIiwiQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24iLCJQaHlzaWNzU2V0dGluZ3MiLCJwaHlzaWNzU2V0dGluZ0luZGV4IiwiY3NtUmVjdCIsInNfdmlld3BvcnQiLCJzX2ZibyIsIl9tYXNrUmVuZGVyVGV4dHVyZSIsIl9jb2xvckJ1ZmZlciIsIl9jdXJyZW50RnJhbWVObyIsIl9jbGlwcGluZ01hc2tCdWZmZXJTaXplIiwiX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrIiwiX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3IiwiX2NoYW5uZWxDb2xvcnMiLCJfdG1wQm91bmRzT25Nb2RlbCIsIl90bXBNYXRyaXgiLCJfdG1wTWF0cml4Rm9yTWFzayIsIl90bXBNYXRyaXhGb3JEcmF3IiwiX21hc2tUZXh0dXJlIiwidG1wIiwiZ2V0Q2hhbm5lbEZsYWdBc0NvbG9yIiwiY2hhbm5lbE5vIiwiZ2V0TWFza1JlbmRlclRleHR1cmUiLCJ0ZXh0dXJlIiwiZnJhbWVObyIsImNyZWF0ZVRleHR1cmUiLCJURVhUVVJFXzJEIiwidGV4SW1hZ2UyRCIsIlJHQkEiLCJVTlNJR05FRF9CWVRFIiwidGV4UGFyYW1ldGVyaSIsIlRFWFRVUkVfV1JBUF9TIiwiQ0xBTVBfVE9fRURHRSIsIlRFWFRVUkVfV1JBUF9UIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwiTElORUFSIiwiVEVYVFVSRV9NQUdfRklMVEVSIiwiY3JlYXRlRnJhbWVidWZmZXIiLCJiaW5kRnJhbWVidWZmZXIiLCJGUkFNRUJVRkZFUiIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwiQ09MT1JfQVRUQUNITUVOVDAiLCJDdWJpc21SZW5kZXJUZXh0dXJlUmVzb3VyY2UiLCJzZXRHTCIsImNhbGNDbGlwcGVkRHJhd1RvdGFsQm91bmRzIiwiY2xpcHBpbmdDb250ZXh0IiwiY2xpcHBlZERyYXdUb3RhbE1pblgiLCJjbGlwcGVkRHJhd1RvdGFsTWluWSIsImNsaXBwZWREcmF3VG90YWxNYXhYIiwiTUlOX1ZBTFVFIiwiY2xpcHBlZERyYXdUb3RhbE1heFkiLCJjbGlwcGVkRHJhd0NvdW50IiwiX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdCIsImNsaXBwZWREcmF3YWJsZUluZGV4IiwiZHJhd2FibGVWZXJ0ZXhDb3VudCIsImRyYXdhYmxlVmVydGV4ZXMiLCJtaW5YIiwibWluWSIsIm1heFgiLCJtYXhZIiwicGkiLCJfYWxsQ2xpcHBlZERyYXdSZWN0IiwiX2lzVXNpbmciLCJkZWxldGVGcmFtZWJ1ZmZlciIsImRlbGV0ZVRleHR1cmUiLCJkcmF3YWJsZU1hc2tzIiwiZHJhd2FibGVNYXNrQ291bnRzIiwiZmluZFNhbWVDbGlwIiwiQ3ViaXNtQ2xpcHBpbmdDb250ZXh0IiwiYWRkQ2xpcHBlZERyYXdhYmxlIiwic2V0dXBDbGlwcGluZ0NvbnRleHQiLCJ1c2luZ0NsaXBDb3VudCIsImNsaXBJbmRleCIsImNjIiwicHJlRHJhdyIsInNldHVwTGF5b3V0Qm91bmRzIiwiY2xpcENvbnRleHQiLCJhbGxDbGlwZWREcmF3UmVjdCIsImxheW91dEJvdW5kc09uVGV4MDEiLCJfbGF5b3V0Qm91bmRzIiwic2V0UmVjdCIsImV4cGFuZCIsIl9tYXRyaXhGb3JNYXNrIiwiX21hdHJpeEZvckRyYXciLCJjbGlwRHJhd0NvdW50IiwiX2NsaXBwaW5nSWRDb3VudCIsImNsaXBEcmF3SW5kZXgiLCJfY2xpcHBpbmdJZExpc3QiLCJzZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrIiwiZHJhd01lc2giLCJzYW1lQ291bnQiLCJjbGlwSWQiLCJkaXYiLCJtb2QiLCJjdXJDbGlwSW5kZXgiLCJsYXlvdXRDb3VudCIsIl9sYXlvdXRDaGFubmVsTm8iLCJ4cG9zIiwieXBvcyIsImdldENvbG9yQnVmZmVyIiwiZ2V0Q2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXciLCJzZXRDbGlwcGluZ01hc2tCdWZmZXJTaXplIiwiZ2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZSIsIkN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTCIsIm1hbmFnZXIiLCJjbGlwcGluZ0RyYXdhYmxlSW5kaWNlcyIsImNsaXBDb3VudCIsIl9vd25lciIsImdldENsaXBwaW5nTWFuYWdlciIsInNldEdsIiwiX3NoYWRlclNldHMiLCJDdWJpc21TaGFkZXJfV2ViR0wiLCJkZWxldGVJbnN0YW5jZSIsInJlbGVhc2VTaGFkZXJQcm9ncmFtIiwic2V0dXBTaGFkZXJQcm9ncmFtIiwidGV4dHVyZUlkIiwidmVydGV4Q291bnQiLCJ2ZXJ0ZXhBcnJheSIsImluZGV4QXJyYXkiLCJ1dkFycmF5IiwiYnVmZmVyRGF0YSIsImNvbG9yQmxlbmRNb2RlIiwiYmFzZUNvbG9yIiwibWF0cml4NHg0IiwiaW52ZXJ0ZWRNYXNrIiwiU1JDX0NPTE9SIiwiRFNUX0NPTE9SIiwiRFNUX0FMUEhBIiwiZ2VuZXJhdGVTaGFkZXJzIiwiZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayIsInNoYWRlclNldCIsIlNoYWRlck5hbWVzIiwiU2hhZGVyTmFtZXNfU2V0dXBNYXNrIiwic2hhZGVyUHJvZ3JhbSIsImFjdGl2ZVRleHR1cmUiLCJURVhUVVJFMCIsInVuaWZvcm0xaSIsInNhbXBsZXJUZXh0dXJlMExvY2F0aW9uIiwidmVydGV4IiwiY3JlYXRlQnVmZmVyIiwiYmluZEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsIkRZTkFNSUNfRFJBVyIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwiYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJGTE9BVCIsInV2IiwiYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiIsImNvbG9yQ2hhbm5lbCIsInVuaWZvcm00ZiIsInVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uIiwidW5pZm9ybU1hdHJpeDRmdiIsInVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24iLCJ1bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24iLCJnZXRSaWdodCIsImdldEJvdHRvbSIsIlpFUk8iLCJPTkVfTUlOVVNfU1JDX0NPTE9SIiwibWFza2VkIiwiZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdyIsIkN1YmlzbVNoYWRlclNldCIsIlNoYWRlck5hbWVzX05vcm1hbFByZW11bHRpcGxpZWRBbHBoYSIsIk9ORSIsIlNoYWRlck5hbWVzX0FkZFByZW11bHRpcGxpZWRBbHBoYSIsIlNoYWRlck5hbWVzX011bHRQcmVtdWx0aXBsaWVkQWxwaGEiLCJURVhUVVJFMSIsInRleCIsInNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uIiwidW5pZm9ybU1hdHJpeExvY2F0aW9uIiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJibGVuZEZ1bmNTZXBhcmF0ZSIsImxvYWRTaGFkZXJQcm9ncmFtIiwidmVydGV4U2hhZGVyU3JjU2V0dXBNYXNrIiwiZnJhZ21lbnRTaGFkZXJTcmNzZXR1cE1hc2siLCJ2ZXJ0ZXhTaGFkZXJTcmMiLCJmcmFnbWVudFNoYWRlclNyY1ByZW11bHRpcGxpZWRBbHBoYSIsInZlcnRleFNoYWRlclNyY01hc2tlZCIsImZyYWdtZW50U2hhZGVyU3JjTWFza1ByZW11bHRpcGxpZWRBbHBoYSIsImZyYWdtZW50U2hhZGVyU3JjTWFza0ludmVydGVkUHJlbXVsdGlwbGllZEFscGhhIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJ2ZXJ0ZXhTaGFkZXJTb3VyY2UiLCJmcmFnbWVudFNoYWRlclNvdXJjZSIsInZlcnRTaGFkZXIiLCJjb21waWxlU2hhZGVyU291cmNlIiwiZnJhZ1NoYWRlciIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsInNoYWRlclR5cGUiLCJzaGFkZXIiLCJnZXRTaGFkZXJJbmZvTG9nIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJfY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayIsIl9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3IiwiX2NsaXBwaW5nTWFuYWdlciIsImZpcnN0RHJhdyIsIl90ZXh0dXJlcyIsIl9zb3J0ZWREcmF3YWJsZUluZGV4TGlzdCIsIl9idWZmZXJEYXRhIiwiV2ViR0xCdWZmZXIiLCJtb2RlbFRleHR1cmVObyIsImdsVGV4dHVyZSIsImdldEJpbmRlZFRleHR1cmVzIiwiZGVsZXRlQnVmZmVyIiwicmVuZGVyT3JkZXIiLCJvcmRlciIsInNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXciLCJ0ZXh0dXJlTm8iLCJpbmRleENvdW50IiwiQ1VMTF9GQUNFIiwiZGlzYWJsZSIsImZyb250RmFjZSIsIkNDVyIsImRyYXd0ZXh0dXJlIiwibW9kZWxDb2xvclJHQkEiLCJkcmF3RWxlbWVudHMiLCJUUklBTkdMRVMiLCJVTlNJR05FRF9TSE9SVCIsImRvU3RhdGljUmVsZWFzZSIsImZibyIsImdldEV4dGVuc2lvbiIsIlNDSVNTT1JfVEVTVCIsIlNURU5DSUxfVEVTVCIsIkNXIiwiY29sb3JNYXNrIiwiY2xpcCIsIklDdWJpc21Nb2RlbFNldHRpbmciLCJGcmVxdWVzdE5vZGUiLCJOYW1lIiwiX2pzb25WYWx1ZSIsIkdldEpzb24iLCJpc0V4aXN0TW9kZWxGaWxlIiwiRnJlcXVlc3ROb2RlX01vYyIsImlzRXhpc3RUZXh0dXJlRmlsZXMiLCJGcmVxdWVzdE5vZGVfVGV4dHVyZXMiLCJnZXRUZXh0dXJlRGlyZWN0b3J5IiwiaXNFeGlzdEhpdEFyZWFzIiwiRnJlcXVlc3ROb2RlX0hpdEFyZWFzIiwiaXNFeGlzdFBoeXNpY3NGaWxlIiwiRnJlcXVlc3ROb2RlX1BoeXNpY3MiLCJpc0V4aXN0UG9zZUZpbGUiLCJGcmVxdWVzdE5vZGVfUG9zZSIsImlzRXhpc3RFeHByZXNzaW9uRmlsZSIsIkZyZXF1ZXN0Tm9kZV9FeHByZXNzaW9ucyIsImlzRXhpc3RNb3Rpb25Hcm91cHMiLCJGcmVxdWVzdE5vZGVfTW90aW9ucyIsImdyb3VwTmFtZSIsImlzRXhpc3RNb3Rpb25Hcm91cE5hbWUiLCJnZXRNb3Rpb25Tb3VuZEZpbGVOYW1lIiwiaXNFeGlzdE1vdGlvblNvdW5kRmlsZSIsImlzRXhpc3RNb3Rpb25GYWRlSW4iLCJpc0V4aXN0TW90aW9uRmFkZU91dCIsImlzRXhpc3RVc2VyRGF0YUZpbGUiLCJvdXRMYXlvdXRNYXAiLCJtYXAiLCJpc0V4aXN0RXllQmxpbmtQYXJhbWV0ZXJzIiwibnVtIiwiRnJlcXVlc3ROb2RlX0dyb3VwcyIsInJlZkkiLCJpc0V4aXN0TGlwU3luY1BhcmFtZXRlcnMiLCJub2RlIiwiSGl0QXJlYVByZWZpeCIsIkhpdEFyZWFIZWFkIiwiSGl0QXJlYUJvZHkiLCJQYXJ0c0lkQ29yZSIsIlBhcnRzQXJtUHJlZml4IiwiUGFydHNBcm1MUHJlZml4IiwiUGFydHNBcm1SUHJlZml4IiwiUGFyYW1FeWVMT3BlbiIsIlBhcmFtRXllTFNtaWxlIiwiUGFyYW1FeWVST3BlbiIsIlBhcmFtRXllUlNtaWxlIiwiUGFyYW1FeWVCYWxsRm9ybSIsIlBhcmFtQnJvd0xZIiwiUGFyYW1Ccm93UlkiLCJQYXJhbUJyb3dMWCIsIlBhcmFtQnJvd1JYIiwiUGFyYW1Ccm93TEFuZ2xlIiwiUGFyYW1Ccm93UkFuZ2xlIiwiUGFyYW1Ccm93TEZvcm0iLCJQYXJhbUJyb3dSRm9ybSIsIlBhcmFtTW91dGhGb3JtIiwiUGFyYW1Nb3V0aE9wZW5ZIiwiUGFyYW1DaGVlayIsIlBhcmFtQm9keUFuZ2xlWSIsIlBhcmFtQm9keUFuZ2xlWiIsIlBhcmFtQXJtTEEiLCJQYXJhbUFybVJBIiwiUGFyYW1Bcm1MQiIsIlBhcmFtQXJtUkIiLCJQYXJhbUhhbmRMIiwiUGFyYW1IYW5kUiIsIlBhcmFtSGFpckZyb250IiwiUGFyYW1IYWlyU2lkZSIsIlBhcmFtSGFpckJhY2siLCJQYXJhbUhhaXJGbHVmZnkiLCJQYXJhbVNob3VsZGVyWSIsIlBhcmFtQnVzdFgiLCJQYXJhbUJ1c3RZIiwiUGFyYW1CYXNlWCIsIlBhcmFtQmFzZVkiLCJQYXJhbU5PTkUiLCJzdXBwb3J0IiwiQmxvYiIsInZpZXdDbGFzc2VzIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIm9iaiIsIm5vcm1hbGl6ZU5hbWUiLCJTdHJpbmciLCJUeXBlRXJyb3IiLCJ0b0xvd2VyQ2FzZSIsIm5vcm1hbGl6ZVZhbHVlIiwiaXRlcmF0b3JGb3IiLCJpdGVtcyIsIm5leHQiLCJzaGlmdCIsImRvbmUiLCJIZWFkZXJzIiwiaGVhZGVycyIsImZvckVhY2giLCJoZWFkZXIiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uc3VtZWQiLCJib2R5VXNlZCIsIlByb21pc2UiLCJyZWplY3QiLCJmaWxlUmVhZGVyUmVhZHkiLCJyZWFkZXIiLCJyZXNvbHZlIiwib25sb2FkIiwib25lcnJvciIsImVycm9yIiwicmVhZEJsb2JBc0FycmF5QnVmZmVyIiwiYmxvYiIsIkZpbGVSZWFkZXIiLCJwcm9taXNlIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJidWZmZXJDbG9uZSIsImJ1ZiIsInZpZXciLCJCb2R5IiwiX2luaXRCb2R5IiwiX2JvZHlJbml0IiwiX2JvZHlUZXh0IiwiaXNQcm90b3R5cGVPZiIsIl9ib2R5QmxvYiIsIkZvcm1EYXRhIiwiX2JvZHlGb3JtRGF0YSIsIlVSTFNlYXJjaFBhcmFtcyIsIkRhdGFWaWV3IiwiX2JvZHlBcnJheUJ1ZmZlciIsInJlamVjdGVkIiwiRXJyb3IiLCJ0ZXh0IiwicmVhZEFzVGV4dCIsImNoYXJzIiwiZnJvbUNoYXJDb2RlIiwiam9pbiIsInJlYWRBcnJheUJ1ZmZlckFzVGV4dCIsImZvcm1EYXRhIiwiZGVjb2RlIiwib2xkVmFsdWUiLCJoYXMiLCJ0aGlzQXJnIiwia2V5cyIsImVudHJpZXMiLCJtZXRob2RzIiwiUmVxdWVzdCIsImlucHV0IiwibWV0aG9kIiwidXBjYXNlZCIsInVybCIsImNyZWRlbnRpYWxzIiwic2lnbmFsIiwidG9VcHBlckNhc2UiLCJyZWZlcnJlciIsImZvcm0iLCJ0cmltIiwic3BsaXQiLCJieXRlcyIsIlJlc3BvbnNlIiwiYm9keUluaXQiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwicmVkaXJlY3RTdGF0dXNlcyIsInJlZGlyZWN0IiwiUmFuZ2VFcnJvciIsImxvY2F0aW9uIiwiRE9NRXhjZXB0aW9uIiwiZXJyIiwic3RhY2siLCJjb25zdHJ1Y3RvciIsImluaXQiLCJyZXF1ZXN0IiwiYWJvcnRlZCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwiYWJvcnRYaHIiLCJhYm9ydCIsInJhd0hlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJsaW5lIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZVRleHQiLCJvbnRpbWVvdXQiLCJvbmFib3J0Iiwib3BlbiIsIndpdGhDcmVkZW50aWFscyIsInJlc3BvbnNlVHlwZSIsInNldFJlcXVlc3RIZWFkZXIiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNlbmQiLCJwb2x5ZmlsbCIsInVzZVByZW11bHRpcGx5IiwidXNlUHJlbXVsdHBseSIsImltZyIsIkltYWdlIiwiTElORUFSX01JUE1BUF9MSU5FQVIiLCJwaXhlbFN0b3JlaSIsIlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCIsImdlbmVyYXRlTWlwbWFwIiwiVGV4dHVyZUluZm8iLCJyZWxlYXNlVGV4dHVyZXMiLCJyZWxlYXNlVGV4dHVyZUJ5VGV4dHVyZSIsInJlbGVhc2VUZXh0dXJlQnlGaWxlUGF0aCJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBMkNBLEVBQU1DLEdBQzFCLGlCQUFaQyxTQUEwQyxpQkFBWEMsT0FDeENBLE9BQU9ELFFBQVVELEVBQVFHLFFBQVEsVUFDUixtQkFBWEMsUUFBeUJBLE9BQU9DLElBQzlDRCxPQUFPLENBQUMsU0FBVUosR0FDUSxpQkFBWkMsUUFDZEEsUUFBZ0IsT0FBSUQsRUFBUUcsUUFBUSxVQUVwQ0osRUFBYSxPQUFJQyxFQUFRRCxFQUFZLE9BUnZDLENBU0dPLFFBQVEsU0FBU0MsR0FDcEIsTyxZQ1RFLElBQUlDLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVULFFBR25DLElBQUlDLEVB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QUdBLEVBQUk0RixLQUFLaWpELFVBQVVqaUQsVUFBVzVHLElBQzVDLEdBQUk0RixLQUFLaWpELFVBQVU1aUQsR0FBR2pHLEdBQUd1cUIsSUFBTXV6QixFQUEvQixDQUlBbDRDLEtBQUtpakQsVUFBVTNpRCxJQUFJbEcsRUFBRyxNQUN0QjRGLEtBQUtpakQsVUFBVTNnRCxPQUFPbEksR0FDdEIsUUFVRyxZQUFBcTNELHlCQUFQLFNBQWdDM2pDLEdBQzlCLElBQUssSUFBSTF6QixFQUFJLEVBQUdBLEVBQUk0RixLQUFLaWpELFVBQVVqaUQsVUFBVzVHLElBQzVDLEdBQUk0RixLQUFLaWpELFVBQVU1aUQsR0FBR2pHLEdBQUcwekIsVUFBWUEsRUFBVSxDQUM3Qzl0QixLQUFLaWpELFVBQVUzaUQsSUFBSWxHLEVBQUcsTUFDdEI0RixLQUFLaWpELFVBQVUzZ0QsT0FBT2xJLEdBQ3RCLFFBTVIsRUFySkEsR0FBYSxFQUFBOEwscUJBMEpiLGlCQUVFLEtBQUF5ZSxHQUFtQixLQUNuQixLQUFBdkYsTUFBUSxFQUNSLEtBQUFDLE9BQVMsR0FKRSxFQUFBaXlDIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcInJlYWN0XCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcInJlYWN0XCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImxpdmUyZFwiXSA9IGZhY3RvcnkocmVxdWlyZShcInJlYWN0XCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJsaXZlMmRcIl0gPSBmYWN0b3J5KHJvb3RbXCJSZWFjdFwiXSk7XG59KSh3aW5kb3csIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzEzX18pIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTkpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWpzb24gfSBmcm9tICcuL3V0aWxzL2N1YmlzbWpzb24nO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkbWFuYWdlciB9IGZyb20gJy4vaWQvY3ViaXNtaWRtYW5hZ2VyJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21yZW5kZXJlciB9IGZyb20gJy4vcmVuZGVyaW5nL2N1YmlzbXJlbmRlcmVyJztcbmltcG9ydCB7XG4gIEN1YmlzbUxvZ0luZm8sXG4gIEN1YmlzbUxvZ1dhcm5pbmcsXG4gIENTTV9BU1NFUlRcbn0gZnJvbSAnLi91dGlscy9jdWJpc21kZWJ1Zyc7XG5pbXBvcnQgVmFsdWUgPSBjdWJpc21qc29uLlZhbHVlO1xuaW1wb3J0IEN1YmlzbUlkTWFuYWdlciA9IGN1YmlzbWlkbWFuYWdlci5DdWJpc21JZE1hbmFnZXI7XG5pbXBvcnQgQ3ViaXNtUmVuZGVyZXIgPSBjdWJpc21yZW5kZXJlci5DdWJpc21SZW5kZXJlcjtcblxuZXhwb3J0IGZ1bmN0aW9uIHN0cnRvZChzOiBzdHJpbmcsIGVuZFB0cjogc3RyaW5nW10pOiBudW1iZXIge1xuICBsZXQgaW5kZXggPSAwO1xuICBmb3IgKGxldCBpID0gMTsgOyBpKyspIHtcbiAgICBjb25zdCB0ZXN0Qzogc3RyaW5nID0gcy5zbGljZShpIC0gMSwgaSk7XG5cbiAgICAvLyDmjIfmlbDjg7vjg57jgqTjg4rjgrnjga7lj6/og73mgKfjgYzjgYLjgovjga7jgafjgrnjgq3jg4Pjg5fjgZnjgotcbiAgICBpZiAodGVzdEMgPT0gJ2UnIHx8IHRlc3RDID09ICctJyB8fCB0ZXN0QyA9PSAnRScpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gLy8g5paH5a2X5YiX44Gu56+E5Zuy44KS5bqD44GS44Gm44GE44GPXG5cbiAgICBjb25zdCB0ZXN0OiBzdHJpbmcgPSBzLnN1YnN0cmluZygwLCBpKTtcbiAgICBjb25zdCBudW1iZXIgPSBOdW1iZXIodGVzdCk7XG4gICAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICAgIC8vIOaVsOWApOOBqOOBl+OBpuiqjeitmOOBp+OBjeOBquOBj+OBquOBo+OBn+OBruOBp+e1guS6hlxuICAgICAgYnJlYWs7XG4gICAgfSAvLyDmnIDlvozjgavmlbDlgKTjgajjgZfjgabjgafjgY3jgZ9pbmRleOOCkuagvOe0jeOBl+OBpuOBiuOBj1xuXG4gICAgaW5kZXggPSBpO1xuICB9XG4gIGxldCBkID0gcGFyc2VGbG9hdChzKTsgLy8g44OR44O844K544GX44Gf5pWw5YCkXG5cbiAgaWYgKGlzTmFOKGQpKSB7XG4gICAgLy8g5pWw5YCk44Go44GX44Gm6KqN6K2Y44Gn44GN44Gq44GP44Gq44Gj44Gf44Gu44Gn57WC5LqGXG4gICAgZCA9IE5hTjtcbiAgfVxuXG4gIGVuZFB0clswXSA9IHMuc2xpY2UoaW5kZXgpOyAvLyDlvozntprjga7mloflrZfliJdcbiAgcmV0dXJuIGQ7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgLy8g44OV44Kh44Kk44Or44K544Kz44O844OX44Gu5aSJ5pWw44KS5Yid5pyf5YyWXG5cbiAgbGV0IHNfaXNTdGFydGVkID0gZmFsc2U7XG4gIGxldCBzX2lzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgbGV0IHNfb3B0aW9uOiBPcHRpb24gPSBudWxsO1xuICBsZXQgc19jdWJpc21JZE1hbmFnZXI6IEN1YmlzbUlkTWFuYWdlciA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEZyYW1ld29ya+WGheOBp+S9v+OBhuWumuaVsOOBruWuo+iogFxuICAgKi9cbiAgZXhwb3J0IG5hbWVzcGFjZSBDb25zdGFudCB7XG4gICAgZXhwb3J0IGNvbnN0IHZlcnRleE9mZnNldCA9IDA7IC8vIOODoeODg+OCt+ODpemggueCueOBruOCquODleOCu+ODg+ODiOWApFxuICAgIGV4cG9ydCBjb25zdCB2ZXJ0ZXhTdGVwID0gMjsgLy8g44Oh44OD44K344Ol6aCC54K544Gu44K544OG44OD44OX5YCkXG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gY3NtRGVsZXRlPFQ+KGFkZHJlc3M6IFQpOiB2b2lkIHtcbiAgICBpZiAoIWFkZHJlc3MpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBhZGRyZXNzID0gdm9pZCAwO1xuICB9XG5cbiAgLyoqXG4gICAqIExpdmUyRCBDdWJpc20gU0RLIE9yaWdpbmFsIFdvcmtmbG93IFNES+OBruOCqOODs+ODiOODquODneOCpOODs+ODiFxuICAgKiDliKnnlKjplovlp4vmmYLjga9DdWJpc21GcmFtZXdvcmsuaW5pdGlhbGl6ZSgp44KS5ZG844Gz44CBQ3ViaXNtRnJhbWV3b3JrLmRpc3Bvc2UoKeOBp+e1guS6huOBmeOCi+OAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbUZyYW1ld29yayB7XG4gICAgLyoqXG4gICAgICogQ3ViaXNtIEZyYW1ld29ya+OBrkFQSeOCkuS9v+eUqOWPr+iDveOBq+OBmeOCi+OAglxuICAgICAqICBBUEnjgpLlrp/ooYzjgZnjgovliY3jgavlv4XjgZrjgZPjga7plqLmlbDjgpLlrp/ooYzjgZnjgovjgZPjgajjgIJcbiAgICAgKiAg5LiA5bqm5rqW5YKZ44GM5a6M5LqG44GX44Gm5Lul6ZmN44Gv44CB5YaN44Gz5a6f6KGM44GX44Gm44KC5YaF6YOo5Yem55CG44GM44K544Kt44OD44OX44GV44KM44G+44GZ44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICAgb3B0aW9uICAgICAgT3B0aW9u44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K5XG4gICAgICpcbiAgICAgKiBAcmV0dXJuICAg5rqW5YKZ5Yem55CG44GM5a6M5LqG44GX44Gf44KJdHJ1ZeOBjOi/lOOCiuOBvuOBmeOAglxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgc3RhcnRVcChvcHRpb246IE9wdGlvbiA9IG51bGwpOiBib29sZWFuIHtcbiAgICAgIGlmIChzX2lzU3RhcnRlZCkge1xuICAgICAgICBDdWJpc21Mb2dJbmZvKCdDdWJpc21GcmFtZXdvcmsuc3RhcnRVcCgpIGlzIGFscmVhZHkgZG9uZS4nKTtcbiAgICAgICAgcmV0dXJuIHNfaXNTdGFydGVkO1xuICAgICAgfVxuXG4gICAgICBzX29wdGlvbiA9IG9wdGlvbjtcblxuICAgICAgaWYgKHNfb3B0aW9uICE9IG51bGwpIHtcbiAgICAgICAgTGl2ZTJEQ3ViaXNtQ29yZS5Mb2dnaW5nLmNzbVNldExvZ0Z1bmN0aW9uKHNfb3B0aW9uLmxvZ0Z1bmN0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc19pc1N0YXJ0ZWQgPSB0cnVlO1xuXG4gICAgICAvLyBMaXZlMkQgQ3ViaXNtIENvcmXjg5Djg7zjgrjjg6fjg7Pmg4XloLHjgpLooajnpLpcbiAgICAgIGlmIChzX2lzU3RhcnRlZCkge1xuICAgICAgICBjb25zdCB2ZXJzaW9uOiBudW1iZXIgPSBMaXZlMkRDdWJpc21Db3JlLlZlcnNpb24uY3NtR2V0VmVyc2lvbigpO1xuICAgICAgICBjb25zdCBtYWpvcjogbnVtYmVyID0gKHZlcnNpb24gJiAweGZmMDAwMDAwKSA+PiAyNDtcbiAgICAgICAgY29uc3QgbWlub3I6IG51bWJlciA9ICh2ZXJzaW9uICYgMHgwMGZmMDAwMCkgPj4gMTY7XG4gICAgICAgIGNvbnN0IHBhdGNoOiBudW1iZXIgPSB2ZXJzaW9uICYgMHgwMDAwZmZmZjtcbiAgICAgICAgY29uc3QgdmVyc2lvbk51bWJlcjogbnVtYmVyID0gdmVyc2lvbjtcblxuICAgICAgICBDdWJpc21Mb2dJbmZvKFxuICAgICAgICAgIGBMaXZlMkQgQ3ViaXNtIENvcmUgdmVyc2lvbjogezB9LnsxfS57Mn0gKHszfSlgLFxuICAgICAgICAgICgnMDAnICsgbWFqb3IpLnNsaWNlKC0yKSxcbiAgICAgICAgICAoJzAwJyArIG1pbm9yKS5zbGljZSgtMiksXG4gICAgICAgICAgKCcwMDAwJyArIHBhdGNoKS5zbGljZSgtNCksXG4gICAgICAgICAgdmVyc2lvbk51bWJlclxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBDdWJpc21Mb2dJbmZvKCdDdWJpc21GcmFtZXdvcmsuc3RhcnRVcCgpIGlzIGNvbXBsZXRlLicpO1xuXG4gICAgICByZXR1cm4gc19pc1N0YXJ0ZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RhcnRVcCgp44Gn5Yid5pyf5YyW44GX44GfQ3ViaXNtRnJhbWV3b3Jr44Gu5ZCE44OR44Op44Oh44O844K/44KS44Kv44Oq44Ki44GX44G+44GZ44CCXG4gICAgICogRGlzcG9zZSgp44GX44GfQ3ViaXNtRnJhbWV3b3Jr44KS5YaN5Yip55So44GZ44KL6Zqb44Gr5Yip55So44GX44Gm44GP44Gg44GV44GE44CCXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBjbGVhblVwKCk6IHZvaWQge1xuICAgICAgc19pc1N0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgIHNfaXNJbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgc19vcHRpb24gPSBudWxsO1xuICAgICAgc19jdWJpc21JZE1hbmFnZXIgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEN1YmlzbSBGcmFtZXdvcmvlhoXjga7jg6rjgr3jg7zjgrnjgpLliJ3mnJ/ljJbjgZfjgabjg6Ljg4fjg6vjgpLooajnpLrlj6/og73jgarnirbmhYvjgavjgZfjgb7jgZnjgII8YnI+XG4gICAgICogICAgIOWGjeW6pkluaXRpYWxpemUoKeOBmeOCi+OBq+OBr+WFiOOBq0Rpc3Bvc2UoKeOCkuWun+ihjOOBmeOCi+W/heimgeOBjOOBguOCiuOBvuOBmeOAglxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgaW5pdGlhbGl6ZSgpOiB2b2lkIHtcbiAgICAgIENTTV9BU1NFUlQoc19pc1N0YXJ0ZWQpO1xuICAgICAgaWYgKCFzX2lzU3RhcnRlZCkge1xuICAgICAgICBDdWJpc21Mb2dXYXJuaW5nKCdDdWJpc21GcmFtZXdvcmsgaXMgbm90IHN0YXJ0ZWQuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gLS0tIHNfaXNJbml0aWFsaXplZOOBq+OCiOOCi+mAo+e2muWIneacn+WMluOCrOODvOODiSAtLS1cbiAgICAgIC8vIOmAo+e2muOBl+OBpuODquOCveODvOOCueeiuuS/neOBjOihjOOCj+OCjOOBquOBhOOCiOOBhuOBq+OBmeOCi+OAglxuICAgICAgLy8g5YaN5bqmSW5pdGlhbGl6ZSgp44GZ44KL44Gr44Gv5YWI44GrRGlzcG9zZSgp44KS5a6f6KGM44GZ44KL5b+F6KaB44GM44GC44KL44CCXG4gICAgICBpZiAoc19pc0luaXRpYWxpemVkKSB7XG4gICAgICAgIEN1YmlzbUxvZ1dhcm5pbmcoXG4gICAgICAgICAgJ0N1YmlzbUZyYW1ld29yay5pbml0aWFsaXplKCkgc2tpcHBlZCwgYWxyZWFkeSBpbml0aWFsaXplZC4nXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8tLS0tIHN0YXRpYyDliJ3mnJ/ljJYgLS0tLVxuICAgICAgVmFsdWUuc3RhdGljSW5pdGlhbGl6ZU5vdEZvckNsaWVudENhbGwoKTtcblxuICAgICAgc19jdWJpc21JZE1hbmFnZXIgPSBuZXcgQ3ViaXNtSWRNYW5hZ2VyKCk7XG5cbiAgICAgIHNfaXNJbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICAgIEN1YmlzbUxvZ0luZm8oJ0N1YmlzbUZyYW1ld29yay5pbml0aWFsaXplKCkgaXMgY29tcGxldGUuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3ViaXNtIEZyYW1ld29ya+WGheOBruWFqOOBpuOBruODquOCveODvOOCueOCkuino+aUvuOBl+OBvuOBmeOAglxuICAgICAqICAgICAg44Gf44Gg44GX44CB5aSW6YOo44Gn56K65L+d44GV44KM44Gf44Oq44K944O844K544Gr44Gk44GE44Gm44Gv6Kej5pS+44GX44G+44Gb44KT44CCXG4gICAgICogICAgICDlpJbpg6jjgafpganliIfjgavnoLTmo4TjgZnjgovlv4XopoHjgYzjgYLjgorjgb7jgZnjgIJcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgICBDU01fQVNTRVJUKHNfaXNTdGFydGVkKTtcbiAgICAgIGlmICghc19pc1N0YXJ0ZWQpIHtcbiAgICAgICAgQ3ViaXNtTG9nV2FybmluZygnQ3ViaXNtRnJhbWV3b3JrIGlzIG5vdCBzdGFydGVkLicpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIC0tLSBzX2lzSW5pdGlhbGl6ZWTjgavjgojjgovmnKrliJ3mnJ/ljJbop6PmlL7jgqzjg7zjg4kgLS0tXG4gICAgICAvLyBkaXNwb3NlKCnjgZnjgovjgavjga/lhYjjgatpbml0aWFsaXplKCnjgpLlrp/ooYzjgZnjgovlv4XopoHjgYzjgYLjgovjgIJcbiAgICAgIGlmICghc19pc0luaXRpYWxpemVkKSB7XG4gICAgICAgIC8vIGZhbHNlLi4u44Oq44K944O844K55pyq56K65L+d44Gu5aC05ZCIXG4gICAgICAgIEN1YmlzbUxvZ1dhcm5pbmcoJ0N1YmlzbUZyYW1ld29yay5kaXNwb3NlKCkgc2tpcHBlZCwgbm90IGluaXRpYWxpemVkLicpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIFZhbHVlLnN0YXRpY1JlbGVhc2VOb3RGb3JDbGllbnRDYWxsKCk7XG5cbiAgICAgIHNfY3ViaXNtSWRNYW5hZ2VyLnJlbGVhc2UoKTtcbiAgICAgIHNfY3ViaXNtSWRNYW5hZ2VyID0gbnVsbDtcblxuICAgICAgLy8g44Os44Oz44OA44Op44Gu6Z2Z55qE44Oq44K944O844K577yI44K344Kn44O844OA44OX44Ot44Kw44Op44Og5LuW77yJ44KS6Kej5pS+44GZ44KLXG4gICAgICBDdWJpc21SZW5kZXJlci5zdGF0aWNSZWxlYXNlKCk7XG5cbiAgICAgIHNfaXNJbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgICBDdWJpc21Mb2dJbmZvKCdDdWJpc21GcmFtZXdvcmsuZGlzcG9zZSgpIGlzIGNvbXBsZXRlLicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEN1YmlzbSBGcmFtZXdvcmvjga5BUEnjgpLkvb/nlKjjgZnjgovmupblgpnjgYzlrozkuobjgZfjgZ/jgYvjganjgYbjgYtcbiAgICAgKiBAcmV0dXJuIEFQSeOCkuS9v+eUqOOBmeOCi+a6luWCmeOBjOWujOS6huOBl+OBpuOBhOOCjOOBsHRydWXjgYzov5Tjgorjgb7jgZnjgIJcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGlzU3RhcnRlZCgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiBzX2lzU3RhcnRlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDdWJpc20gRnJhbWV3b3Jr44Gu44Oq44K944O844K55Yid5pyf5YyW44GM44GZ44Gn44Gr6KGM44KP44KM44Gm44GE44KL44GL44Gp44GG44GLXG4gICAgICogQHJldHVybiDjg6rjgr3jg7zjgrnnorrkv53jgYzlrozkuobjgZfjgabjgYTjgozjgbB0cnVl44GM6L+U44KK44G+44GZXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBpc0luaXRpYWxpemVkKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHNfaXNJbml0aWFsaXplZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3JlIEFQSeOBq+ODkOOCpOODs+ODieOBl+OBn+ODreOCsOmWouaVsOOCkuWun+ihjOOBmeOCi1xuICAgICAqXG4gICAgICogQHByYXJhbSBtZXNzYWdlIOODreOCsOODoeODg+OCu+ODvOOCuFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgY29yZUxvZ0Z1bmN0aW9uKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgICAgLy8gUmV0dXJuIGlmIGxvZ2dpbmcgbm90IHBvc3NpYmxlLlxuICAgICAgaWYgKCFMaXZlMkRDdWJpc21Db3JlLkxvZ2dpbmcuY3NtR2V0TG9nRnVuY3Rpb24oKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIExpdmUyREN1YmlzbUNvcmUuTG9nZ2luZy5jc21HZXRMb2dGdW5jdGlvbigpKG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOePvuWcqOOBruODreOCsOWHuuWKm+ODrOODmeODq+ioreWumuOBruWApOOCkui/lOOBmeOAglxuICAgICAqXG4gICAgICogQHJldHVybiAg54++5Zyo44Gu44Ot44Kw5Ye65Yqb44Os44OZ44Or6Kit5a6a44Gu5YCkXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBnZXRMb2dnaW5nTGV2ZWwoKTogTG9nTGV2ZWwge1xuICAgICAgaWYgKHNfb3B0aW9uICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHNfb3B0aW9uLmxvZ2dpbmdMZXZlbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBMb2dMZXZlbC5Mb2dMZXZlbF9PZmY7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSUTjg57jg43jg7zjgrjjg6Pjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcmV0dXJuIEN1YmlzbU1hbmFnZXLjgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGdldElkTWFuYWdlcigpOiBDdWJpc21JZE1hbmFnZXIge1xuICAgICAgcmV0dXJuIHNfY3ViaXNtSWRNYW5hZ2VyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOmdmeeahOOCr+ODqeOCueOBqOOBl+OBpuS9v+eUqOOBmeOCi1xuICAgICAqIOOCpOODs+OCueOCv+ODs+OCueWMluOBleOBm+OBquOBhFxuICAgICAqL1xuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBPcHRpb24ge1xuICBsb2dGdW5jdGlvbjogTGl2ZTJEQ3ViaXNtQ29yZS5jc21Mb2dGdW5jdGlvbjsgLy8g44Ot44Kw5Ye65Yqb44Gu6Zai5pWw44Kq44OW44K444Kn44Kv44OIXG4gIGxvZ2dpbmdMZXZlbDogTG9nTGV2ZWw7IC8vIOODreOCsOWHuuWKm+ODrOODmeODq+OBruioreWumlxufVxuXG4vKipcbiAqIOODreOCsOWHuuWKm+OBruODrOODmeODq1xuICovXG5leHBvcnQgZW51bSBMb2dMZXZlbCB7XG4gIExvZ0xldmVsX1ZlcmJvc2UgPSAwLCAvLyDoqbPntLDjg63jgrBcbiAgTG9nTGV2ZWxfRGVidWcsIC8vIOODh+ODkOODg+OCsOODreOCsFxuICBMb2dMZXZlbF9JbmZvLCAvLyBJbmZv44Ot44KwXG4gIExvZ0xldmVsX1dhcm5pbmcsIC8vIOitpuWRiuODreOCsFxuICBMb2dMZXZlbF9FcnJvciwgLy8g44Ko44Op44O844Ot44KwXG4gIExvZ0xldmVsX09mZiAvLyDjg63jgrDlh7rlipvnhKHlirlcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgLyoqXG4gICAqIOODmeOCr+OCv+ODvOWei++8iOWPr+WkiemFjeWIl+Wei++8iVxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIGNzbVZlY3RvcjxUPiB7XG4gICAgLyoqXG4gICAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICogQHBhcmFtIGluaWl0YWxDYXBhY2l0eSDliJ3mnJ/ljJblvozjga7jgq3jg6Pjg5Hjgrfjg4bjgqPjgILjg4fjg7zjgr/jgrXjgqTjgrrjga9fY2FwYWNpdHkgKiBzaXplb2YoVClcbiAgICAgKiBAcGFyYW0gemVyb0NsZWFyIHRydWXjgarjgonliJ3mnJ/ljJbmmYLjgavnorrkv53jgZfjgZ/poJjln5/jgpIw44Gn5Z+L44KB44KLXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaW5pdGlhbENhcGFjaXR5ID0gMCkge1xuICAgICAgaWYgKGluaXRpYWxDYXBhY2l0eSA8IDEpIHtcbiAgICAgICAgdGhpcy5fcHRyID0gW107XG4gICAgICAgIHRoaXMuX2NhcGFjaXR5ID0gMDtcbiAgICAgICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9wdHIgPSBuZXcgQXJyYXkoaW5pdGlhbENhcGFjaXR5KTtcbiAgICAgICAgdGhpcy5fY2FwYWNpdHkgPSBpbml0aWFsQ2FwYWNpdHk7XG4gICAgICAgIHRoaXMuX3NpemUgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCpOODs+ODh+ODg+OCr+OCueOBp+aMh+WumuOBl+OBn+imgee0oOOCkui/lOOBmVxuICAgICAqL1xuICAgIHB1YmxpYyBhdChpbmRleDogbnVtYmVyKTogVCB7XG4gICAgICByZXR1cm4gdGhpcy5fcHRyW2luZGV4XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDopoHntKDjgpLjgrvjg4Pjg4hcbiAgICAgKiBAcGFyYW0gaW5kZXgg6KaB57Sg44KS44K744OD44OI44GZ44KL44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHBhcmFtIHZhbHVlIOOCu+ODg+ODiOOBmeOCi+imgee0oFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQoaW5kZXg6IG51bWJlciwgdmFsdWU6IFQpOiB2b2lkIHtcbiAgICAgIHRoaXMuX3B0cltpbmRleF0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjg4bjg4rjgpLlj5blvpfjgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0KG9mZnNldCA9IDApOiBUW10ge1xuICAgICAgY29uc3QgcmV0OiBUW10gPSBuZXcgQXJyYXk8VD4oKTtcbiAgICAgIGZvciAobGV0IGkgPSBvZmZzZXQ7IGkgPCB0aGlzLl9zaXplOyBpKyspIHtcbiAgICAgICAgcmV0LnB1c2godGhpcy5fcHRyW2ldKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcHVzaEJhY2vlh6bnkIbjgIHjgrPjg7Pjg4bjg4rjgavmlrDjgZ/jgaropoHntKDjgpLov73liqDjgZnjgotcbiAgICAgKiBAcGFyYW0gdmFsdWUgUHVzaEJhY2vlh6bnkIbjgafov73liqDjgZnjgovlgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgcHVzaEJhY2sodmFsdWU6IFQpOiB2b2lkIHtcbiAgICAgIGlmICh0aGlzLl9zaXplID49IHRoaXMuX2NhcGFjaXR5KSB7XG4gICAgICAgIHRoaXMucHJlcGFyZUNhcGFjaXR5KFxuICAgICAgICAgIHRoaXMuX2NhcGFjaXR5ID09IDAgPyBjc21WZWN0b3Iuc19kZWZhdWx0U2l6ZSA6IHRoaXMuX2NhcGFjaXR5ICogMlxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9wdHJbdGhpcy5fc2l6ZSsrXSA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+ODs+ODhuODiuOBruWFqOimgee0oOOCkuino+aUvuOBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBjbGVhcigpOiB2b2lkIHtcbiAgICAgIHRoaXMuX3B0ci5sZW5ndGggPSAwO1xuICAgICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44OG44OK44Gu6KaB57Sg5pWw44KS6L+U44GZXG4gICAgICogQHJldHVybiDjgrPjg7Pjg4bjg4rjga7opoHntKDmlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0U2l6ZSgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44OG44OK44Gu5YWo6KaB57Sg44Gr5a++44GX44Gm5Luj5YWl5Yem55CG44KS6KGM44GGXG4gICAgICogQHBhcmFtIG5ld1NpemUg5Luj5YWl5Yem55CG5b6M44Gu44K144Kk44K6XG4gICAgICogQHBhcmFtIHZhbHVlIOimgee0oOOBq+S7o+WFpeOBmeOCi+WApFxuICAgICAqL1xuICAgIHB1YmxpYyBhc3NpZ24obmV3U2l6ZTogbnVtYmVyLCB2YWx1ZTogVCk6IHZvaWQge1xuICAgICAgY29uc3QgY3VyU2l6ZSA9IHRoaXMuX3NpemU7XG5cbiAgICAgIGlmIChjdXJTaXplIDwgbmV3U2l6ZSkge1xuICAgICAgICB0aGlzLnByZXBhcmVDYXBhY2l0eShuZXdTaXplKTsgLy8gY2FwYWNpdHnmm7TmlrBcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdTaXplOyBpKyspIHtcbiAgICAgICAgdGhpcy5fcHRyW2ldID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3NpemUgPSBuZXdTaXplO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCteOCpOOCuuWkieabtFxuICAgICAqL1xuICAgIHB1YmxpYyByZXNpemUobmV3U2l6ZTogbnVtYmVyLCB2YWx1ZTogVCA9IG51bGwpOiB2b2lkIHtcbiAgICAgIHRoaXMudXBkYXRlU2l6ZShuZXdTaXplLCB2YWx1ZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44K144Kk44K65aSJ5pu0XG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZVNpemUoXG4gICAgICBuZXdTaXplOiBudW1iZXIsXG4gICAgICB2YWx1ZTogYW55ID0gbnVsbCxcbiAgICAgIGNhbGxQbGFjZW1lbnROZXcgPSB0cnVlXG4gICAgKTogdm9pZCB7XG4gICAgICBjb25zdCBjdXJTaXplOiBudW1iZXIgPSB0aGlzLl9zaXplO1xuXG4gICAgICBpZiAoY3VyU2l6ZSA8IG5ld1NpemUpIHtcbiAgICAgICAgdGhpcy5wcmVwYXJlQ2FwYWNpdHkobmV3U2l6ZSk7IC8vIGNhcGFjaXR55pu05pawXG5cbiAgICAgICAgaWYgKGNhbGxQbGFjZW1lbnROZXcpIHtcbiAgICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSB0aGlzLl9zaXplOyBpIDwgbmV3U2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgLy8gbmV3XG4gICAgICAgICAgICAgIHRoaXMuX3B0cltpXSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkobmV3IHZhbHVlKCkpKTtcbiAgICAgICAgICAgIH0gLy8g44OX44Oq44Of44OG44Kj44OW5Z6L44Gq44Gu44Gn5YCk5rih44GXXG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5fcHRyW2ldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IHRoaXMuX3NpemU7IGkgPCBuZXdTaXplOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX3B0cltpXSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbmV3U2l6ZSA8PSB0aGlzLl9zaXplXG4gICAgICAgIC8vLS0tXG4gICAgICAgIGNvbnN0IHN1YiA9IHRoaXMuX3NpemUgLSBuZXdTaXplO1xuICAgICAgICB0aGlzLl9wdHIuc3BsaWNlKHRoaXMuX3NpemUgLSBzdWIsIHN1Yik7IC8vIOS4jeimgeOBquOBruOBp+egtOajhOOBmeOCi1xuICAgICAgfVxuICAgICAgdGhpcy5fc2l6ZSA9IG5ld1NpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44OG44OK44Gr44Kz44Oz44OG44OK6KaB57Sg44KS5oy/5YWl44GZ44KLXG4gICAgICogQHBhcmFtIHBvc2l0aW9uIOaMv+WFpeOBmeOCi+S9jee9rlxuICAgICAqIEBwYXJhbSBiZWdpbiDmjL/lhaXjgZnjgovjgrPjg7Pjg4bjg4rjga7plovlp4vkvY3nva5cbiAgICAgKiBAcGFyYW0gZW5kIOaMv+WFpeOBmeOCi+OCs+ODs+ODhuODiuOBrue1guerr+S9jee9rlxuICAgICAqL1xuICAgIHB1YmxpYyBpbnNlcnQoXG4gICAgICBwb3NpdGlvbjogaXRlcmF0b3I8VD4sXG4gICAgICBiZWdpbjogaXRlcmF0b3I8VD4sXG4gICAgICBlbmQ6IGl0ZXJhdG9yPFQ+XG4gICAgKTogdm9pZCB7XG4gICAgICBsZXQgZHN0U2k6IG51bWJlciA9IHBvc2l0aW9uLl9pbmRleDtcbiAgICAgIGNvbnN0IHNyY1NpOiBudW1iZXIgPSBiZWdpbi5faW5kZXg7XG4gICAgICBjb25zdCBzcmNFaTogbnVtYmVyID0gZW5kLl9pbmRleDtcblxuICAgICAgY29uc3QgYWRkQ291bnQ6IG51bWJlciA9IHNyY0VpIC0gc3JjU2k7XG5cbiAgICAgIHRoaXMucHJlcGFyZUNhcGFjaXR5KHRoaXMuX3NpemUgKyBhZGRDb3VudCk7XG5cbiAgICAgIC8vIOaMv+WFpeeUqOOBruaXouWtmOODh+ODvOOCv+OCkuOCt+ODleODiOOBl+OBpumamemWk+OCkuS9nOOCi1xuICAgICAgY29uc3QgYWRkU2l6ZSA9IHRoaXMuX3NpemUgLSBkc3RTaTtcbiAgICAgIGlmIChhZGRTaXplID4gMCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFkZFNpemU7IGkrKykge1xuICAgICAgICAgIHRoaXMuX3B0ci5zcGxpY2UoZHN0U2kgKyBpLCAwLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSBzcmNTaTsgaSA8IHNyY0VpOyBpKyssIGRzdFNpKyspIHtcbiAgICAgICAgdGhpcy5fcHRyW2RzdFNpXSA9IGJlZ2luLl92ZWN0b3IuX3B0cltpXTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc2l6ZSA9IHRoaXMuX3NpemUgKyBhZGRDb3VudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjg4bjg4rjgYvjgonjgqTjg7Pjg4fjg4Pjgq/jgrnjgafmjIflrprjgZfjgZ/opoHntKDjgpLliYrpmaTjgZnjgotcbiAgICAgKiBAcGFyYW0gaW5kZXgg44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAgICogQHJldHVybiB0cnVlIOWJiumZpOWun+ihjFxuICAgICAqIEByZXR1cm4gZmFsc2Ug5YmK6Zmk56+E5Zuy5aSWXG4gICAgICovXG4gICAgcHVibGljIHJlbW92ZShpbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICBpZiAoaW5kZXggPCAwIHx8IHRoaXMuX3NpemUgPD0gaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyDliYrpmaTnr4Tlm7LlpJZcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcHRyLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAtLXRoaXMuX3NpemU7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+ODs+ODhuODiuOBi+OCieimgee0oOOCkuWJiumZpOOBl+OBpuS7luOBruimgee0oOOCkuOCt+ODleODiOOBmeOCi1xuICAgICAqIEBwYXJhbSBpdGUg5YmK6Zmk44GZ44KL6KaB57SgXG4gICAgICovXG4gICAgcHVibGljIGVyYXNlKGl0ZTogaXRlcmF0b3I8VD4pOiBpdGVyYXRvcjxUPiB7XG4gICAgICBjb25zdCBpbmRleDogbnVtYmVyID0gaXRlLl9pbmRleDtcbiAgICAgIGlmIChpbmRleCA8IDAgfHwgdGhpcy5fc2l6ZSA8PSBpbmRleCkge1xuICAgICAgICByZXR1cm4gaXRlOyAvLyDliYrpmaTnr4Tlm7LlpJZcbiAgICAgIH1cblxuICAgICAgLy8g5YmK6ZmkXG4gICAgICB0aGlzLl9wdHIuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIC0tdGhpcy5fc2l6ZTtcblxuICAgICAgY29uc3QgaXRlMjogaXRlcmF0b3I8VD4gPSBuZXcgaXRlcmF0b3I8VD4odGhpcywgaW5kZXgpOyAvLyDntYLkuoZcbiAgICAgIHJldHVybiBpdGUyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+ODs+ODhuODiuOBruOCreODo+ODkeOCt+ODhuOCo+OCkueiuuS/neOBmeOCi1xuICAgICAqIEBwYXJhbSBuZXdTaXplIOaWsOOBn+OBquOCreODo+ODkeOCt+ODhuOCo+OAguW8leaVsOOBruWApOOBjOePvuWcqOOBruOCteOCpOOCuuacqua6gOOBruWgtOWQiOOBr+S9leOCguOBl+OBquOBhC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcHJlcGFyZUNhcGFjaXR5KG5ld1NpemU6IG51bWJlcik6IHZvaWQge1xuICAgICAgaWYgKG5ld1NpemUgPiB0aGlzLl9jYXBhY2l0eSkge1xuICAgICAgICBpZiAodGhpcy5fY2FwYWNpdHkgPT0gMCkge1xuICAgICAgICAgIHRoaXMuX3B0ciA9IG5ldyBBcnJheShuZXdTaXplKTtcbiAgICAgICAgICB0aGlzLl9jYXBhY2l0eSA9IG5ld1NpemU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fcHRyLmxlbmd0aCA9IG5ld1NpemU7XG4gICAgICAgICAgdGhpcy5fY2FwYWNpdHkgPSBuZXdTaXplO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44OG44OK44Gu5YWI6aCt6KaB57Sg44KS6L+U44GZXG4gICAgICovXG4gICAgcHVibGljIGJlZ2luKCk6IGl0ZXJhdG9yPFQ+IHtcbiAgICAgIGNvbnN0IGl0ZTogaXRlcmF0b3I8VD4gPVxuICAgICAgICB0aGlzLl9zaXplID09IDAgPyB0aGlzLmVuZCgpIDogbmV3IGl0ZXJhdG9yPFQ+KHRoaXMsIDApO1xuICAgICAgcmV0dXJuIGl0ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjg4bjg4rjga7ntYLnq6/opoHntKDjgpLov5TjgZlcbiAgICAgKi9cbiAgICBwdWJsaWMgZW5kKCk6IGl0ZXJhdG9yPFQ+IHtcbiAgICAgIGNvbnN0IGl0ZTogaXRlcmF0b3I8VD4gPSBuZXcgaXRlcmF0b3I8VD4odGhpcywgdGhpcy5fc2l6ZSk7XG4gICAgICByZXR1cm4gaXRlO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRPZmZzZXQob2Zmc2V0OiBudW1iZXIpOiBjc21WZWN0b3I8VD4ge1xuICAgICAgY29uc3QgbmV3VmVjdG9yID0gbmV3IGNzbVZlY3RvcjxUPigpO1xuICAgICAgbmV3VmVjdG9yLl9wdHIgPSB0aGlzLmdldChvZmZzZXQpO1xuICAgICAgbmV3VmVjdG9yLl9zaXplID0gdGhpcy5nZXQob2Zmc2V0KS5sZW5ndGg7XG4gICAgICBuZXdWZWN0b3IuX2NhcGFjaXR5ID0gdGhpcy5nZXQob2Zmc2V0KS5sZW5ndGg7XG5cbiAgICAgIHJldHVybiBuZXdWZWN0b3I7XG4gICAgfVxuXG4gICAgX3B0cjogVFtdOyAvLyDjgrPjg7Pjg4bjg4rjga7lhYjpoK3jgqLjg4njg6zjgrlcbiAgICBfc2l6ZTogbnVtYmVyOyAvLyDjgrPjg7Pjg4bjg4rjga7opoHntKDmlbBcbiAgICBfY2FwYWNpdHk6IG51bWJlcjsgLy8g44Kz44Oz44OG44OK44Gu44Kt44Oj44OR44K344OG44KjXG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgc19kZWZhdWx0U2l6ZSA9IDEwOyAvLyDjgrPjg7Pjg4bjg4rliJ3mnJ/ljJbjga7jg4fjg5Xjgqnjg6vjg4jjgrXjgqTjgrpcbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBpdGVyYXRvcjxUPiB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHY/OiBjc21WZWN0b3I8VD4sIGluZGV4PzogbnVtYmVyKSB7XG4gICAgICB0aGlzLl92ZWN0b3IgPSB2ICE9IHVuZGVmaW5lZCA/IHYgOiBudWxsO1xuICAgICAgdGhpcy5faW5kZXggPSBpbmRleCAhPSB1bmRlZmluZWQgPyBpbmRleCA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5Luj5YWlXG4gICAgICovXG4gICAgcHVibGljIHNldChpdGU6IGl0ZXJhdG9yPFQ+KTogaXRlcmF0b3I8VD4ge1xuICAgICAgdGhpcy5faW5kZXggPSBpdGUuX2luZGV4O1xuICAgICAgdGhpcy5fdmVjdG9yID0gaXRlLl92ZWN0b3I7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDliY3nva7jgY0rK+a8lOeul1xuICAgICAqL1xuICAgIHB1YmxpYyBwcmVJbmNyZW1lbnQoKTogaXRlcmF0b3I8VD4ge1xuICAgICAgKyt0aGlzLl9pbmRleDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWJjee9ruOBjS0t5ryU566XXG4gICAgICovXG4gICAgcHVibGljIHByZURlY3JlbWVudCgpOiBpdGVyYXRvcjxUPiB7XG4gICAgICAtLXRoaXMuX2luZGV4O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5b6M572u44GNKyvmvJTnrpflrZBcbiAgICAgKi9cbiAgICBwdWJsaWMgaW5jcmVtZW50KCk6IGl0ZXJhdG9yPFQ+IHtcbiAgICAgIGNvbnN0IGl0ZW9sZCA9IG5ldyBpdGVyYXRvcjxUPih0aGlzLl92ZWN0b3IsIHRoaXMuX2luZGV4KyspO1xuICAgICAgdGhpcy5fdmVjdG9yID0gaXRlb2xkLl92ZWN0b3I7XG4gICAgICB0aGlzLl9pbmRleCA9IGl0ZW9sZC5faW5kZXg7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlvoznva7jgY0tLea8lOeul+WtkFxuICAgICAqL1xuICAgIHB1YmxpYyBkZWNyZW1lbnQoKTogaXRlcmF0b3I8VD4ge1xuICAgICAgY29uc3QgaXRlb2xkID0gbmV3IGl0ZXJhdG9yPFQ+KHRoaXMuX3ZlY3RvciwgdGhpcy5faW5kZXgtLSk7IC8vIOWPpOOBhOWApOOCkuS/neWtmFxuICAgICAgdGhpcy5fdmVjdG9yID0gaXRlb2xkLl92ZWN0b3I7XG4gICAgICB0aGlzLl9pbmRleCA9IGl0ZW9sZC5faW5kZXg7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBwdHJcbiAgICAgKi9cbiAgICBwdWJsaWMgcHRyKCk6IFQge1xuICAgICAgcmV0dXJuIHRoaXMuX3ZlY3Rvci5fcHRyW3RoaXMuX2luZGV4XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiA95ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXG4gICAgICovXG4gICAgcHVibGljIHN1YnN0aXR1dGlvbihpdGU6IGl0ZXJhdG9yPFQ+KTogaXRlcmF0b3I8VD4ge1xuICAgICAgdGhpcy5faW5kZXggPSBpdGUuX2luZGV4O1xuICAgICAgdGhpcy5fdmVjdG9yID0gaXRlLl92ZWN0b3I7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAhPea8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxuICAgICAqL1xuICAgIHB1YmxpYyBub3RFcXVhbChpdGU6IGl0ZXJhdG9yPFQ+KTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdGhpcy5faW5kZXggIT0gaXRlLl9pbmRleCB8fCB0aGlzLl92ZWN0b3IgIT0gaXRlLl92ZWN0b3I7XG4gICAgfVxuXG4gICAgX2luZGV4OiBudW1iZXI7IC8vIOOCs+ODs+ODhuODiuOBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgIF92ZWN0b3I6IGNzbVZlY3RvcjxUPjsgLy8g44Kz44Oz44OG44OKXG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7XG4gIExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21mcmFtZXdvcmssXG4gIExvZ0xldmVsXG59IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQge1xuICBDU01fTE9HX0xFVkVMLFxuICBDU01fTE9HX0xFVkVMX1ZFUkJPU0UsXG4gIENTTV9MT0dfTEVWRUxfREVCVUcsXG4gIENTTV9MT0dfTEVWRUxfSU5GTyxcbiAgQ1NNX0xPR19MRVZFTF9XQVJOSU5HLFxuICBDU01fTE9HX0xFVkVMX0VSUk9SXG59IGZyb20gJy4uL2N1YmlzbWZyYW1ld29ya2NvbmZpZyc7XG5cbmV4cG9ydCBjb25zdCBDdWJpc21Mb2dQcmludCA9IChsZXZlbDogTG9nTGV2ZWwsIGZtdDogc3RyaW5nLCBhcmdzOiBhbnlbXSkgPT4ge1xuICBMaXZlMkRDdWJpc21GcmFtZXdvcmsuQ3ViaXNtRGVidWcucHJpbnQobGV2ZWwsICdbQ1NNXScgKyBmbXQsIGFyZ3MpO1xufTtcblxuZXhwb3J0IGNvbnN0IEN1YmlzbUxvZ1ByaW50SW4gPSAobGV2ZWw6IExvZ0xldmVsLCBmbXQ6IHN0cmluZywgYXJnczogYW55W10pID0+IHtcbiAgQ3ViaXNtTG9nUHJpbnQobGV2ZWwsIGZtdCArICdcXG4nLCBhcmdzKTtcbn07XG5cbmV4cG9ydCBjb25zdCBDU01fQVNTRVJUID0gKGV4cHI6IGFueSkgPT4ge1xuICBjb25zb2xlLmFzc2VydChleHByKTtcbn07XG5cbmV4cG9ydCBsZXQgQ3ViaXNtTG9nVmVyYm9zZTogKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4gdm9pZDtcbmV4cG9ydCBsZXQgQ3ViaXNtTG9nRGVidWc6IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHZvaWQ7XG5leHBvcnQgbGV0IEN1YmlzbUxvZ0luZm86IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHZvaWQ7XG5leHBvcnQgbGV0IEN1YmlzbUxvZ1dhcm5pbmc6IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHZvaWQ7XG5leHBvcnQgbGV0IEN1YmlzbUxvZ0Vycm9yOiAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkO1xuXG5pZiAoQ1NNX0xPR19MRVZFTCA8PSBDU01fTE9HX0xFVkVMX1ZFUkJPU0UpIHtcbiAgQ3ViaXNtTG9nVmVyYm9zZSA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX1ZlcmJvc2UsICdbVl0nICsgZm10LCBhcmdzKTtcbiAgfTtcblxuICBDdWJpc21Mb2dEZWJ1ZyA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0RlYnVnLCAnW0RdJyArIGZtdCwgYXJncyk7XG4gIH07XG5cbiAgQ3ViaXNtTG9nSW5mbyA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0luZm8sICdbSV0nICsgZm10LCBhcmdzKTtcbiAgfTtcblxuICBDdWJpc21Mb2dXYXJuaW5nID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfV2FybmluZywgJ1tXXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xuXG4gIEN1YmlzbUxvZ0Vycm9yID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfRXJyb3IsICdbRV0nICsgZm10LCBhcmdzKTtcbiAgfTtcbn0gZWxzZSBpZiAoQ1NNX0xPR19MRVZFTCA9PSBDU01fTE9HX0xFVkVMX0RFQlVHKSB7XG4gIEN1YmlzbUxvZ0RlYnVnID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfRGVidWcsICdbRF0nICsgZm10LCBhcmdzKTtcbiAgfTtcblxuICBDdWJpc21Mb2dJbmZvID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfSW5mbywgJ1tJXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xuXG4gIEN1YmlzbUxvZ1dhcm5pbmcgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9XYXJuaW5nLCAnW1ddJyArIGZtdCwgYXJncyk7XG4gIH07XG5cbiAgQ3ViaXNtTG9nRXJyb3IgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9FcnJvciwgJ1tFXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xufSBlbHNlIGlmIChDU01fTE9HX0xFVkVMID09IENTTV9MT0dfTEVWRUxfSU5GTykge1xuICBDdWJpc21Mb2dJbmZvID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfSW5mbywgJ1tJXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xuXG4gIEN1YmlzbUxvZ1dhcm5pbmcgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9XYXJuaW5nLCAnW1ddJyArIGZtdCwgYXJncyk7XG4gIH07XG5cbiAgQ3ViaXNtTG9nRXJyb3IgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9FcnJvciwgJ1tFXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xufSBlbHNlIGlmIChDU01fTE9HX0xFVkVMID09IENTTV9MT0dfTEVWRUxfV0FSTklORykge1xuICBDdWJpc21Mb2dXYXJuaW5nID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfV2FybmluZywgJ1tXXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xuXG4gIEN1YmlzbUxvZ0Vycm9yID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfRXJyb3IsICdbRV0nICsgZm10LCBhcmdzKTtcbiAgfTtcbn0gZWxzZSBpZiAoQ1NNX0xPR19MRVZFTCA9PSBDU01fTE9HX0xFVkVMX0VSUk9SKSB7XG4gIEN1YmlzbUxvZ0Vycm9yID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfRXJyb3IsICdbRV0nICsgZm10LCBhcmdzKTtcbiAgfTtcbn1cblxuLy8tLS0tLS0tLS0tLS0gTElWRTJEIE5BTUVTUEFDRSAtLS0tLS0tLS0tLS1cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgLyoqXG4gICAqIOODh+ODkOODg+OCsOeUqOOBruODpuODvOODhuOCo+ODquODhuOCo+OCr+ODqeOCueOAglxuICAgKiDjg63jgrDjga7lh7rlipvjgIHjg5DjgqTjg4jjga7jg4Djg7Pjg5fjgarjgalcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21EZWJ1ZyB7XG4gICAgLyoqXG4gICAgICog44Ot44Kw44KS5Ye65Yqb44GZ44KL44CC56ys5LiA5byV5pWw44Gr44Ot44Kw44Os44OZ44Or44KS6Kit5a6a44GZ44KL44CCXG4gICAgICogQ3ViaXNtRnJhbWV3b3JrLmluaXRpYWxpemUoKeaZguOBq+OCquODl+OCt+ODp+ODs+OBp+ioreWumuOBleOCjOOBn+ODreOCsOWHuuWKm+ODrOODmeODq+OCkuS4i+WbnuOCi+WgtOWQiOOBr+ODreOCsOOBq+WHuuOBleOBquOBhOOAglxuICAgICAqXG4gICAgICogQHBhcmFtIGxvZ0xldmVsIOODreOCsOODrOODmeODq+OBruioreWumlxuICAgICAqIEBwYXJhbSBmb3JtYXQg5pu45byP5LuY44GN5paH5a2X5YiXXG4gICAgICogQHBhcmFtIGFyZ3Mg5Y+v5aSJ6ZW35byV5pWwXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBwcmludChcbiAgICAgIGxvZ0xldmVsOiBMb2dMZXZlbCxcbiAgICAgIGZvcm1hdDogc3RyaW5nLFxuICAgICAgYXJncz86IGFueVtdXG4gICAgKTogdm9pZCB7XG4gICAgICAvLyDjgqrjg5fjgrfjg6fjg7PjgafoqK3lrprjgZXjgozjgZ/jg63jgrDlh7rlipvjg6zjg5njg6vjgpLkuIvlm57jgovloLTlkIjjga/jg63jgrDjgavlh7rjgZXjgarjgYRcbiAgICAgIGlmIChsb2dMZXZlbCA8IGN1YmlzbWZyYW1ld29yay5DdWJpc21GcmFtZXdvcmsuZ2V0TG9nZ2luZ0xldmVsKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBsb2dQcmludDogTGl2ZTJEQ3ViaXNtQ29yZS5jc21Mb2dGdW5jdGlvbiA9XG4gICAgICAgIGN1YmlzbWZyYW1ld29yay5DdWJpc21GcmFtZXdvcmsuY29yZUxvZ0Z1bmN0aW9uO1xuXG4gICAgICBpZiAoIWxvZ1ByaW50KSByZXR1cm47XG5cbiAgICAgIGNvbnN0IGJ1ZmZlcjogc3RyaW5nID0gZm9ybWF0LnJlcGxhY2UoL1xceyhcXGQrKVxcfS9nLCAobSwgaykgPT4ge1xuICAgICAgICByZXR1cm4gYXJnc1trXTtcbiAgICAgIH0pO1xuICAgICAgbG9nUHJpbnQoYnVmZmVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjg7zjgr/jgYvjgonmjIflrprjgZfjgZ/plbfjgZXjgaDjgZHjg4Djg7Pjg5flh7rlipvjgZnjgovjgIJcbiAgICAgKiBDdWJpc21GcmFtZXdvcmsuaW5pdGlhbGl6ZSgp5pmC44Gr44Kq44OX44K344On44Oz44Gn6Kit5a6a44GV44KM44Gf44Ot44Kw5Ye65Yqb44Os44OZ44Or44KS5LiL5Zue44KL5aC05ZCI44Gv44Ot44Kw44Gr5Ye644GV44Gq44GE44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbG9nTGV2ZWwg44Ot44Kw44Os44OZ44Or44Gu6Kit5a6aXG4gICAgICogQHBhcmFtIGRhdGEg44OA44Oz44OX44GZ44KL44OH44O844K/XG4gICAgICogQHBhcmFtIGxlbmd0aCDjg4Djg7Pjg5fjgZnjgovplbfjgZVcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGR1bXBCeXRlcyhcbiAgICAgIGxvZ0xldmVsOiBMb2dMZXZlbCxcbiAgICAgIGRhdGE6IFVpbnQ4QXJyYXksXG4gICAgICBsZW5ndGg6IG51bWJlclxuICAgICk6IHZvaWQge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaSAlIDE2ID09IDAgJiYgaSA+IDApIHRoaXMucHJpbnQobG9nTGV2ZWwsICdcXG4nKTtcbiAgICAgICAgZWxzZSBpZiAoaSAlIDggPT0gMCAmJiBpID4gMCkgdGhpcy5wcmludChsb2dMZXZlbCwgJyAgJyk7XG4gICAgICAgIHRoaXMucHJpbnQobG9nTGV2ZWwsICd7MH0gJywgW2RhdGFbaV0gJiAweGZmXSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJpbnQobG9nTGV2ZWwsICdcXG4nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBwcml2YXRlIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxuICB9XG59XG5cbi8vLS0tLS0tLS0tLS0tIExJVkUyRCBOQU1FU1BBQ0UgLS0tLS0tLS0tLS0tXG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQge1xuICBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgbGl2ZTJkY3ViaXNtZnJhbWV3b3JrLFxuICBPcHRpb24gYXMgQ3NtX09wdGlvblxufSBmcm9tICcuLi9GcmFtZXdvcmsvc3JjL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgQ3NtX0N1YmlzbUZyYW1ld29yayA9IGxpdmUyZGN1YmlzbWZyYW1ld29yay5DdWJpc21GcmFtZXdvcms7XG5pbXBvcnQgeyBMQXBwVmlldyB9IGZyb20gJy4vbGFwcHZpZXcnO1xuaW1wb3J0IHsgTEFwcFBhbCB9IGZyb20gJy4vbGFwcHBhbCc7XG5pbXBvcnQgeyBMQXBwVGV4dHVyZU1hbmFnZXIgfSBmcm9tICcuL2xhcHB0ZXh0dXJlbWFuYWdlcic7XG5pbXBvcnQgeyBMQXBwTGl2ZTJETWFuYWdlciB9IGZyb20gJy4vbGFwcGxpdmUyZG1hbmFnZXInO1xuaW1wb3J0ICogYXMgTEFwcERlZmluZSBmcm9tICcuL2xhcHBkZWZpbmUnO1xuXG5leHBvcnQgbGV0IGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQgPSBudWxsO1xuZXhwb3J0IGxldCBzX2luc3RhbmNlOiBMQXBwRGVsZWdhdGUgPSBudWxsO1xuZXhwb3J0IGxldCBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0ID0gbnVsbDtcbmV4cG9ydCBsZXQgZnJhbWVCdWZmZXI6IFdlYkdMRnJhbWVidWZmZXIgPSBudWxsO1xuXG4vKipcbiAqIOOCouODl+ODquOCseODvOOCt+ODp+ODs+OCr+ODqeOCueOAglxuICogQ3ViaXNtIFNES+OBrueuoeeQhuOCkuihjOOBhuOAglxuICovXG5leHBvcnQgY2xhc3MgTEFwcERlbGVnYXRlIHtcbiAgLyoqXG4gICAqIOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCue+8iOOCt+ODs+OCsOODq+ODiOODs++8ieOCkui/lOOBmeOAglxuICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgYznlJ/miJDjgZXjgozjgabjgYTjgarjgYTloLTlkIjjga/lhoXpg6jjgafjgqTjg7Pjgrnjgr/jg7PjgrnjgpLnlJ/miJDjgZnjgovjgIJcbiAgICpcbiAgICogQHJldHVybiDjgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogTEFwcERlbGVnYXRlIHtcbiAgICBpZiAoc19pbnN0YW5jZSA9PSBudWxsKSB7XG4gICAgICBzX2luc3RhbmNlID0gbmV3IExBcHBEZWxlZ2F0ZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBzX2luc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCue+8iOOCt+ODs+OCsOODq+ODiOODs++8ieOCkuino+aUvuOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWxlYXNlSW5zdGFuY2UoKTogdm9pZCB7XG4gICAgY29uc29sZS5sb2coXCJyZWxlYXNlSW5zdGFuY2VcIilcbiAgICBpZiAoc19pbnN0YW5jZSAhPSBudWxsKSB7XG4gICAgICBzX2luc3RhbmNlLnJlbGVhc2UoKTtcbiAgICB9XG5cbiAgICBzX2luc3RhbmNlID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBUFDjgavlv4XopoHjgarnianjgpLliJ3mnJ/ljJbjgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplKCk6IGJvb2xlYW4ge1xuICAgIC8vIOOCreODo+ODs+ODkOOCueOBruS9nOaIkFxuICAgIC8vIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIC8vIGNhbnZhcy53aWR0aCA9IExBcHBEZWZpbmUuUmVuZGVyVGFyZ2V0V2lkdGg7XG4gICAgLy8gY2FudmFzLmhlaWdodCA9IExBcHBEZWZpbmUuUmVuZGVyVGFyZ2V0SGVpZ2h0O1xuXG4gICAgLy8gIOWPlua2iOahhuaetuWOn+acieeahGNhbnZhc+eUu+W4g+WwuuWvuO+8jOeLrOeri+iuvue9ruWwuuWvuFxuICAgIC8vICDmoLnmja5pZOiOt+WPlumhtemdoumHjOeahGNhbnZhc1xuICAgIGNhbnZhcyA9IDxIVE1MQ2FudmFzRWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpdmUyZFwiKTtcblxuICAgIC8v5re75Yqg5YWo5bGA6byg5qCH56e75Yqo5LqL5Lu255uR5o6nXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBmdW5jdGlvbiAoZSkge1xuXG4gICAgICBpZiAoIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3KSB7XG4gICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKFwidmlldyBub3Rmb3VuZFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcblxuICAgICAgfVxuXG4gICAgICAvL+i/memHjGlk55qE5YC85LiO5LiK5pa555qEIGNhdmFucyDlj5jph4/kv53mjIHkuIDoh7RcbiAgICAgIGxldCByZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsaXZlMmRcIikuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBsZXQgcG9zWDogbnVtYmVyID0gZS5jbGllbnRYIC0gcmVjdC5sZWZ0O1xuICAgICAgbGV0IHBvc1k6IG51bWJlciA9IGUuY2xpZW50WSAtIHJlY3QudG9wO1xuICAgICAgLy8gY29uc29sZS5sb2coXCJvbk1vdXNlTW92ZWQ6IGdhdGXmlofku7bkuK1wb3NZ5YC85Li677yaIOOAkFwiK3Bvc1krXCLjgJEgIGNhbnZhc+eahHRvcOi3neemu+S4uu+8mlwiK3JlY3QudG9wKTtcbiAgICAgIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc01vdmVkKHBvc1gsIHBvc1kpO1xuXG4gICAgfSwgZmFsc2UpO1xuXG4gICAgLy/lnKjov5nph4zliqDkuIrpvKDmoIfnprvlvIDmtY/op4jlmajlkI7vvIzkuIDliIflvZLkvY1cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdXRcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIC8v6byg5qCH56a75byAZG9jdW1lbnTlkI7vvIzlsIblhbbkvY3nva7nva7kuLrvvIgw77yMMO+8iSAgXG4gICAgICBsZXQgbGl2ZTJETWFuYWdlcjogTEFwcExpdmUyRE1hbmFnZXIgPSBMQXBwTGl2ZTJETWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgICAgbGl2ZTJETWFuYWdlci5vbkRyYWcoMC4wLCAwLjApO1xuICAgIH0sIGZhbHNlKTtcblxuICAgIC8v5re75Yqg6byg5qCH54K55Ye75LqL5Lu2XG4gICAgLy/nm5HlkKxjYXZhc+eahOm8oOagh+eCueWHu+S6i+S7tizlpoLmnpzkvaDluIzmnJvlnKjpvKDmoIfngrnlh7vpobXpnaLlhYPntKDlkI5cbiAgICAvL+eci+adv+WomOS4jeWcqOeci+WQkem8oOagh++8jOebtOWIsOS9oOWGjeasoeenu+WKqOm8oOagh++8jOaKiuebkeWQrOS6i+S7tuWvueixoeS7jmNhbnZhc+aNouaIkGRvY3VtZW50XG4gICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKCFMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldykge1xuICAgICAgICBMQXBwUGFsLnByaW50TWVzc2FnZShcInZpZXcgbm90Zm91bmRcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCByZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgbGV0IHBvc1g6IG51bWJlciA9IGUuY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgICAgIGxldCBwb3NZOiBudW1iZXIgPSBlLmNsaWVudFkgLSByZWN0LnRvcDtcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwib25Nb3VzZU1vdmVkOiBnYXRl5paH5Lu25LitcG9zWeWAvOS4uu+8miDjgJBcIitwb3NZK1wi44CRICBjYW52YXPnmoR0b3Dot53nprvkuLrvvJpcIityZWN0LnRvcCk7XG4gICAgICAvL+WFtuWunuWwseaYr+eFp+aKhOS4iumdoueahO+8jOaKiuS4i+mdouS4pOihjOS7o+eggeWKoOS4ilxuICAgICAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcub25Ub3VjaGVzQmVnYW4ocG9zWCwgcG9zWSk7XG4gICAgICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldy5vblRvdWNoZXNFbmRlZChwb3NYLCBwb3NZKTtcbiAgICB9LCBmYWxzZSk7XG5cbiAgICAvLyBnbOOCs+ODs+ODhuOCreOCueODiOOCkuWIneacn+WMllxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBnbCA9IGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcpIHx8IGNhbnZhcy5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnKTtcblxuICAgIGlmICghZ2wpIHtcbiAgICAgIGFsZXJ0KCdDYW5ub3QgaW5pdGlhbGl6ZSBXZWJHTC4gVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQuJyk7XG4gICAgICBnbCA9IG51bGw7XG5cbiAgICAgIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID1cbiAgICAgICAgJ1RoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoZSA8Y29kZT4mbHQ7Y2FudmFzJmd0OzwvY29kZT4gZWxlbWVudC4nO1xuXG4gICAgICAvLyBnbOWIneacn+WMluWkseaVl1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIOOCreODo+ODs+ODkOOCueOCkiBET00g44Gr6L+95YqgXG4gICAgLy8gZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW52YXMpO1xuXG4gICAgaWYgKCFmcmFtZUJ1ZmZlcikge1xuICAgICAgZnJhbWVCdWZmZXIgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuRlJBTUVCVUZGRVJfQklORElORyk7XG4gICAgfVxuXG4gICAgLy8g6YCP6YGO6Kit5a6aXG4gICAgZ2wuZW5hYmxlKGdsLkJMRU5EKTtcbiAgICBnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcblxuICAgIGNvbnN0IHN1cHBvcnRUb3VjaDogYm9vbGVhbiA9ICdvbnRvdWNoZW5kJyBpbiBjYW52YXM7XG5cbiAgICBpZiAoc3VwcG9ydFRvdWNoKSB7XG4gICAgICAvLyDjgr/jg4Pjg4HplqLpgKPjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbDnmbvpjLJcbiAgICAgIGNhbnZhcy5vbnRvdWNoc3RhcnQgPSBvblRvdWNoQmVnYW47XG4gICAgICBjYW52YXMub250b3VjaG1vdmUgPSBvblRvdWNoTW92ZWQ7XG4gICAgICBjYW52YXMub250b3VjaGVuZCA9IG9uVG91Y2hFbmRlZDtcbiAgICAgIGNhbnZhcy5vbnRvdWNoY2FuY2VsID0gb25Ub3VjaENhbmNlbDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8g44Oe44Km44K56Zai6YCj44Kz44O844Or44OQ44OD44Kv6Zai5pWw55m76YyyXG4gICAgICAvLyBjYW52YXMub25tb3VzZWRvd24gPSBvbkNsaWNrQmVnYW47XG4gICAgICAvLyBjYW52YXMub25tb3VzZW1vdmUgPSBvbk1vdXNlTW92ZWQ7XG4gICAgICAvLyBjYW52YXMub25tb3VzZXVwID0gb25DbGlja0VuZGVkO1xuICAgIH1cblxuICAgIC8vIEFwcFZpZXfjga7liJ3mnJ/ljJZcbiAgICB0aGlzLl92aWV3LmluaXRpYWxpemUoKTtcblxuICAgIC8vIEN1YmlzbSBTREvjga7liJ3mnJ/ljJZcbiAgICB0aGlzLmluaXRpYWxpemVDdWJpc20oKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOino+aUvuOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgdGhpcy5fdGV4dHVyZU1hbmFnZXIucmVsZWFzZSgpO1xuICAgIHRoaXMuX3RleHR1cmVNYW5hZ2VyID0gbnVsbDtcblxuICAgIHRoaXMuX3ZpZXcucmVsZWFzZSgpO1xuICAgIHRoaXMuX3ZpZXcgPSBudWxsO1xuXG4gICAgLy8g44Oq44K944O844K544KS6Kej5pS+XG4gICAgTEFwcExpdmUyRE1hbmFnZXIucmVsZWFzZUluc3RhbmNlKCk7XG5cbiAgICAvLyBDdWJpc20gU0RL44Gu6Kej5pS+XG4gICAgQ3NtX0N1YmlzbUZyYW1ld29yay5kaXNwb3NlKCk7XG4gIH1cblxuICAvKipcbiAgICog5a6f6KGM5Yem55CG44CCXG4gICAqL1xuICBwdWJsaWMgcnVuKCk6IHZvaWQge1xuICAgIGNvbnNvbGUubG9nKCdydW4nKVxuICAgIC8vIOODoeOCpOODs+ODq+ODvOODl1xuICAgIGNvbnN0IGxvb3AgPSAoKTogdm9pZCA9PiB7XG4gICAgICAvLyDjgqTjg7Pjgrnjgr/jg7Pjgrnjga7mnInnhKHjga7norroqo1cbiAgICAgIC8vIOehruWumuacieaXoOWunuS+i1xuICAgICAgaWYgKHNfaW5zdGFuY2UgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIOaZgumWk+abtOaWsFxuICAgICAgTEFwcFBhbC51cGRhdGVUaW1lKCk7XG5cbiAgICAgIC8vIOeUu+mdouOBruWIneacn+WMllxuICAgICAgZ2wuY2xlYXJDb2xvcigwLjAsIDAuMCwgMC4wLCAwLjApO1xuXG4gICAgICAvLyDmt7Hluqbjg4bjgrnjg4jjgpLmnInlirnljJZcbiAgICAgIGdsLmVuYWJsZShnbC5ERVBUSF9URVNUKTtcblxuICAgICAgLy8g6L+R44GP44Gr44GC44KL54mp5L2T44Gv44CB6YGg44GP44Gr44GC44KL54mp5L2T44KS6KaG44GE6Zqg44GZXG4gICAgICBnbC5kZXB0aEZ1bmMoZ2wuTEVRVUFMKTtcblxuICAgICAgLy8g44Kr44Op44O844OQ44OD44OV44Kh44KE5rex5bqm44OQ44OD44OV44Kh44KS44Kv44Oq44Ki44GZ44KLXG4gICAgICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUIHwgZ2wuREVQVEhfQlVGRkVSX0JJVCk7XG5cbiAgICAgIGdsLmNsZWFyRGVwdGgoMS4wKTtcblxuICAgICAgLy8g6YCP6YGO6Kit5a6aXG4gICAgICBnbC5lbmFibGUoZ2wuQkxFTkQpO1xuICAgICAgZ2wuYmxlbmRGdW5jKGdsLlNSQ19BTFBIQSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSk7XG5cbiAgICAgIC8vIOaPj+eUu+abtOaWsFxuICAgICAgdGhpcy5fdmlldy5yZW5kZXIoKTtcblxuICAgICAgLy8g44Or44O844OX44Gu44Gf44KB44Gr5YaN5biw5ZG844Gz5Ye644GXXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XG4gICAgfTtcbiAgICBsb29wKCk7XG4gIH1cblxuICAvKipcbiAgICog44K344Kn44O844OA44O844KS55m76Yyy44GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgY3JlYXRlU2hhZGVyKCk6IFdlYkdMUHJvZ3JhbSB7XG4gICAgLy8g44OQ44O844OG44OD44Kv44K544K344Kn44O844OA44O844Gu44Kz44Oz44OR44Kk44OrXG4gICAgY29uc3QgdmVydGV4U2hhZGVySWQgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuVkVSVEVYX1NIQURFUik7XG5cbiAgICBpZiAodmVydGV4U2hhZGVySWQgPT0gbnVsbCkge1xuICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ2ZhaWxlZCB0byBjcmVhdGUgdmVydGV4U2hhZGVyJyk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB2ZXJ0ZXhTaGFkZXI6IHN0cmluZyA9XG4gICAgICAncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyArXG4gICAgICAnYXR0cmlidXRlIHZlYzMgcG9zaXRpb247JyArXG4gICAgICAnYXR0cmlidXRlIHZlYzIgdXY7JyArXG4gICAgICAndmFyeWluZyB2ZWMyIHZ1djsnICtcbiAgICAgICd2b2lkIG1haW4odm9pZCknICtcbiAgICAgICd7JyArXG4gICAgICAnICAgZ2xfUG9zaXRpb24gPSB2ZWM0KHBvc2l0aW9uLCAxLjApOycgK1xuICAgICAgJyAgIHZ1diA9IHV2OycgK1xuICAgICAgJ30nO1xuXG4gICAgZ2wuc2hhZGVyU291cmNlKHZlcnRleFNoYWRlcklkLCB2ZXJ0ZXhTaGFkZXIpO1xuICAgIGdsLmNvbXBpbGVTaGFkZXIodmVydGV4U2hhZGVySWQpO1xuXG4gICAgLy8g44OV44Op44Kw44Oh44Oz44OI44K344Kn44O844OA44Gu44Kz44Oz44OR44Kk44OrXG4gICAgY29uc3QgZnJhZ21lbnRTaGFkZXJJZCA9IGdsLmNyZWF0ZVNoYWRlcihnbC5GUkFHTUVOVF9TSEFERVIpO1xuXG4gICAgaWYgKGZyYWdtZW50U2hhZGVySWQgPT0gbnVsbCkge1xuICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ2ZhaWxlZCB0byBjcmVhdGUgZnJhZ21lbnRTaGFkZXInKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGZyYWdtZW50U2hhZGVyOiBzdHJpbmcgPVxuICAgICAgJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycgK1xuICAgICAgJ3ZhcnlpbmcgdmVjMiB2dXY7JyArXG4gICAgICAndW5pZm9ybSBzYW1wbGVyMkQgdGV4dHVyZTsnICtcbiAgICAgICd2b2lkIG1haW4odm9pZCknICtcbiAgICAgICd7JyArXG4gICAgICAnICAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHRleHR1cmUsIHZ1dik7JyArXG4gICAgICAnfSc7XG5cbiAgICBnbC5zaGFkZXJTb3VyY2UoZnJhZ21lbnRTaGFkZXJJZCwgZnJhZ21lbnRTaGFkZXIpO1xuICAgIGdsLmNvbXBpbGVTaGFkZXIoZnJhZ21lbnRTaGFkZXJJZCk7XG5cbiAgICAvLyDjg5fjg63jgrDjg6njg6Djgqrjg5bjgrjjgqfjgq/jg4jjga7kvZzmiJBcbiAgICBjb25zdCBwcm9ncmFtSWQgPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW1JZCwgdmVydGV4U2hhZGVySWQpO1xuICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtSWQsIGZyYWdtZW50U2hhZGVySWQpO1xuXG4gICAgZ2wuZGVsZXRlU2hhZGVyKHZlcnRleFNoYWRlcklkKTtcbiAgICBnbC5kZWxldGVTaGFkZXIoZnJhZ21lbnRTaGFkZXJJZCk7XG5cbiAgICAvLyDjg6rjg7Pjgq9cbiAgICBnbC5saW5rUHJvZ3JhbShwcm9ncmFtSWQpO1xuXG4gICAgZ2wudXNlUHJvZ3JhbShwcm9ncmFtSWQpO1xuXG4gICAgcmV0dXJuIHByb2dyYW1JZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBWaWV35oOF5aCx44KS5Y+W5b6X44GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgZ2V0VmlldygpOiBMQXBwVmlldyB7XG4gICAgcmV0dXJuIHRoaXMuX3ZpZXc7XG4gIH1cblxuICBwdWJsaWMgZ2V0VGV4dHVyZU1hbmFnZXIoKTogTEFwcFRleHR1cmVNYW5hZ2VyIHtcbiAgICByZXR1cm4gdGhpcy5fdGV4dHVyZU1hbmFnZXI7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9jYXB0dXJlZCA9IGZhbHNlO1xuICAgIHRoaXMuX21vdXNlWCA9IDAuMDtcbiAgICB0aGlzLl9tb3VzZVkgPSAwLjA7XG4gICAgdGhpcy5faXNFbmQgPSBmYWxzZTtcblxuICAgIHRoaXMuX2N1YmlzbU9wdGlvbiA9IG5ldyBDc21fT3B0aW9uKCk7XG4gICAgdGhpcy5fdmlldyA9IG5ldyBMQXBwVmlldygpO1xuICAgIHRoaXMuX3RleHR1cmVNYW5hZ2VyID0gbmV3IExBcHBUZXh0dXJlTWFuYWdlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEN1YmlzbSBTREvjga7liJ3mnJ/ljJZcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplQ3ViaXNtKCk6IHZvaWQge1xuICAgIC8vIHNldHVwIGN1YmlzbVxuICAgIHRoaXMuX2N1YmlzbU9wdGlvbi5sb2dGdW5jdGlvbiA9IExBcHBQYWwucHJpbnRNZXNzYWdlO1xuICAgIHRoaXMuX2N1YmlzbU9wdGlvbi5sb2dnaW5nTGV2ZWwgPSBMQXBwRGVmaW5lLkN1YmlzbUxvZ2dpbmdMZXZlbDtcbiAgICBDc21fQ3ViaXNtRnJhbWV3b3JrLnN0YXJ0VXAodGhpcy5fY3ViaXNtT3B0aW9uKTtcblxuICAgIC8vIGluaXRpYWxpemUgY3ViaXNtXG4gICAgQ3NtX0N1YmlzbUZyYW1ld29yay5pbml0aWFsaXplKCk7XG5cbiAgICAvLyBsb2FkIG1vZGVsXG4gICAgTEFwcExpdmUyRE1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblxuICAgIExBcHBQYWwudXBkYXRlVGltZSgpO1xuXG4gICAgdGhpcy5fdmlldy5pbml0aWFsaXplU3ByaXRlKCk7XG4gIH1cblxuICBfY3ViaXNtT3B0aW9uOiBDc21fT3B0aW9uOyAvLyBDdWJpc20gU0RLIE9wdGlvblxuICBfdmlldzogTEFwcFZpZXc7IC8vIFZpZXfmg4XloLFcbiAgX2NhcHR1cmVkOiBib29sZWFuOyAvLyDjgq/jg6rjg4Pjgq/jgZfjgabjgYTjgovjgYtcbiAgX21vdXNlWDogbnVtYmVyOyAvLyDjg57jgqbjgrlY5bqn5qiZXG4gIF9tb3VzZVk6IG51bWJlcjsgLy8g44Oe44Km44K5WeW6p+aomVxuICBfaXNFbmQ6IGJvb2xlYW47IC8vIEFQUOe1guS6huOBl+OBpuOBhOOCi+OBi1xuICBfdGV4dHVyZU1hbmFnZXI6IExBcHBUZXh0dXJlTWFuYWdlcjsgLy8g44OG44Kv44K544OB44Oj44Oe44ON44O844K444Oj44O8XG59XG5cbi8qKlxuICog44Kv44Oq44OD44Kv44GX44Gf44Go44GN44Gr5ZG844Gw44KM44KL44CCXG4gKi9cbmZ1bmN0aW9uIG9uQ2xpY2tCZWdhbihlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgIHJldHVybjtcbiAgfVxuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fY2FwdHVyZWQgPSB0cnVlO1xuXG4gIGNvbnN0IHBvc1g6IG51bWJlciA9IGUucGFnZVg7XG4gIGNvbnN0IHBvc1k6IG51bWJlciA9IGUucGFnZVk7XG5cbiAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcub25Ub3VjaGVzQmVnYW4ocG9zWCwgcG9zWSk7XG59XG5cbi8qKlxuICog44Oe44Km44K544Od44Kk44Oz44K/44GM5YuV44GE44Gf44KJ5ZG844Gw44KM44KL44CCXG4gKi9cbmZ1bmN0aW9uIG9uTW91c2VNb3ZlZChlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX2NhcHR1cmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldykge1xuICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKCd2aWV3IG5vdGZvdW5kJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgcmVjdCA9IChlLnRhcmdldCBhcyBFbGVtZW50KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgcG9zWDogbnVtYmVyID0gZS5jbGllbnRYIC0gcmVjdC5sZWZ0O1xuICBjb25zdCBwb3NZOiBudW1iZXIgPSBlLmNsaWVudFkgLSByZWN0LnRvcDtcblxuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldy5vblRvdWNoZXNNb3ZlZChwb3NYLCBwb3NZKTtcbn1cblxuLyoqXG4gKiDjgq/jg6rjg4Pjgq/jgYzntYLkuobjgZfjgZ/jgonlkbzjgbDjgozjgovjgIJcbiAqL1xuZnVuY3Rpb24gb25DbGlja0VuZGVkKGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX2NhcHR1cmVkID0gZmFsc2U7XG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJlY3QgPSAoZS50YXJnZXQgYXMgRWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IHBvc1g6IG51bWJlciA9IGUuY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgY29uc3QgcG9zWTogbnVtYmVyID0gZS5jbGllbnRZIC0gcmVjdC50b3A7XG5cbiAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcub25Ub3VjaGVzRW5kZWQocG9zWCwgcG9zWSk7XG59XG5cbi8qKlxuICog44K/44OD44OB44GX44Gf44Go44GN44Gr5ZG844Gw44KM44KL44CCXG4gKi9cbmZ1bmN0aW9uIG9uVG91Y2hCZWdhbihlOiBUb3VjaEV2ZW50KTogdm9pZCB7XG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl9jYXB0dXJlZCA9IHRydWU7XG5cbiAgY29uc3QgcG9zWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVg7XG4gIGNvbnN0IHBvc1kgPSBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZO1xuXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc0JlZ2FuKHBvc1gsIHBvc1kpO1xufVxuXG4vKipcbiAqIOOCueODr+OCpOODl+OBmeOCi+OBqOWRvOOBsOOCjOOCi+OAglxuICovXG5mdW5jdGlvbiBvblRvdWNoTW92ZWQoZTogVG91Y2hFdmVudCk6IHZvaWQge1xuICBpZiAoIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl9jYXB0dXJlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJlY3QgPSAoZS50YXJnZXQgYXMgRWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgY29uc3QgcG9zWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgY29uc3QgcG9zWSA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSAtIHJlY3QudG9wO1xuXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc01vdmVkKHBvc1gsIHBvc1kpO1xufVxuXG4vKipcbiAqIOOCv+ODg+ODgeOBjOe1guS6huOBl+OBn+OCieWRvOOBsOOCjOOCi+OAglxuICovXG5mdW5jdGlvbiBvblRvdWNoRW5kZWQoZTogVG91Y2hFdmVudCk6IHZvaWQge1xuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fY2FwdHVyZWQgPSBmYWxzZTtcblxuICBpZiAoIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3KSB7XG4gICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ3ZpZXcgbm90Zm91bmQnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCByZWN0ID0gKGUudGFyZ2V0IGFzIEVsZW1lbnQpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gIGNvbnN0IHBvc1ggPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFggLSByZWN0LmxlZnQ7XG4gIGNvbnN0IHBvc1kgPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFkgLSByZWN0LnRvcDtcblxuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldy5vblRvdWNoZXNFbmRlZChwb3NYLCBwb3NZKTtcbn1cblxuLyoqXG4gKiDjgr/jg4Pjg4HjgYzjgq3jg6Pjg7Pjgrvjg6vjgZXjgozjgovjgajlkbzjgbDjgozjgovjgIJcbiAqL1xuZnVuY3Rpb24gb25Ub3VjaENhbmNlbChlOiBUb3VjaEV2ZW50KTogdm9pZCB7XG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl9jYXB0dXJlZCA9IGZhbHNlO1xuXG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJlY3QgPSAoZS50YXJnZXQgYXMgRWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgY29uc3QgcG9zWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgY29uc3QgcG9zWSA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSAtIHJlY3QudG9wO1xuXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc0VuZGVkKHBvc1gsIHBvc1kpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc21tYXAgfSBmcm9tICcuLi90eXBlL2NzbW1hcCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtdmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IHsgQ3ViaXNtTG9nSW5mbyB9IGZyb20gJy4vY3ViaXNtZGVidWcnO1xuaW1wb3J0IHsgc3RydG9kIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCBjc21WZWN0b3IgPSBjc212ZWN0b3IuY3NtVmVjdG9yO1xuaW1wb3J0IGNzbVZlY3Rvcl9pdGVyYXRvciA9IGNzbXZlY3Rvci5pdGVyYXRvcjtcbmltcG9ydCBjc21NYXAgPSBjc21tYXAuY3NtTWFwO1xuaW1wb3J0IGNzbU1hcF9pdGVyYXRvciA9IGNzbW1hcC5pdGVyYXRvcjtcbmltcG9ydCBjc21TdHJpbmcgPSBjc21zdHJpbmcuY3NtU3RyaW5nO1xuXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIC8vIFN0YXRpY0luaXRpYWxpemVOb3RGb3JDbGllbnRDYWxsKCnjgafliJ3mnJ/ljJbjgZnjgotcbiAgY29uc3QgQ1NNX0pTT05fRVJST1JfVFlQRV9NSVNNQVRDSCA9ICdFcnJvcjogdHlwZSBtaXNtYXRjaCc7XG4gIGNvbnN0IENTTV9KU09OX0VSUk9SX0lOREVYX09GX0JPVU5EUyA9ICdFcnJvcjogaW5kZXggb3V0IG9mIGJvdW5kcyc7XG5cbiAgLyoqXG4gICAqIOODkeODvOOCueOBl+OBn0pTT07jgqjjg6zjg6Hjg7Pjg4jjga7opoHntKDjga7ln7rlupXjgq/jg6njgrnjgIJcbiAgICovXG4gIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBWYWx1ZSB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge31cblxuICAgIC8qKlxuICAgICAqIOimgee0oOOCkuaWh+Wtl+WIl+Wei+OBp+i/lOOBmShjc21TdHJpbmflnospXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IGdldFN0cmluZyhkZWZhdWx0VmFsdWU/OiBzdHJpbmcsIGluZGVudD86IHN0cmluZyk6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIOimgee0oOOCkuaWh+Wtl+WIl+Wei+OBp+i/lOOBmShzdHJpbmcpXG4gICAgICovXG4gICAgcHVibGljIGdldFJhd1N0cmluZyhkZWZhdWx0VmFsdWU/OiBzdHJpbmcsIGluZGVudD86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmcoZGVmYXVsdFZhbHVlLCBpbmRlbnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOimgee0oOOCkuaVsOWApOWei+OBp+i/lOOBmShudW1iZXIpXG4gICAgICovXG4gICAgcHVibGljIHRvSW50KGRlZmF1bHRWYWx1ZSA9IDApOiBudW1iZXIge1xuICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDopoHntKDjgpLmlbDlgKTlnovjgafov5TjgZkobnVtYmVyKVxuICAgICAqL1xuICAgIHB1YmxpYyB0b0Zsb2F0KGRlZmF1bHRWYWx1ZSA9IDApOiBudW1iZXIge1xuICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDopoHntKDjgpLnnJ/lgb3lgKTjgafov5TjgZkoYm9vbGVhbilcbiAgICAgKi9cbiAgICBwdWJsaWMgdG9Cb29sZWFuKGRlZmF1bHRWYWx1ZSA9IGZhbHNlKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCteOCpOOCuuOCkui/lOOBmVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRTaXplKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDopoHntKDjgpLphY3liJfjgafov5TjgZkoVmFsdWVbXSlcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0QXJyYXkoZGVmYXVsdFZhbHVlOiBWYWx1ZVtdID0gbnVsbCk6IFZhbHVlW10ge1xuICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDopoHntKDjgpLjgrPjg7Pjg4bjg4rjgafov5TjgZkoYXJyYXkpXG4gICAgICovXG4gICAgcHVibGljIGdldFZlY3RvcihkZWZhdWx0VmFsdWU/OiBjc21WZWN0b3I8VmFsdWU+KTogY3NtVmVjdG9yPFZhbHVlPiB7XG4gICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOimgee0oOOCkuODnuODg+ODl+OBp+i/lOOBmShjc21NYXA8Y3NtU3RyaW5nLCBWYWx1ZT4pXG4gICAgICovXG4gICAgcHVibGljIGdldE1hcChkZWZhdWx0VmFsdWU/OiBjc21NYXA8c3RyaW5nLCBWYWx1ZT4pOiBjc21NYXA8c3RyaW5nLCBWYWx1ZT4ge1xuICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmt7vlrZfmvJTnrpflrZBbaW5kZXhdXG4gICAgICovXG4gICAgcHVibGljIGdldFZhbHVlQnlJbmRleChpbmRleDogbnVtYmVyKTogVmFsdWUge1xuICAgICAgcmV0dXJuIFZhbHVlLmVycm9yVmFsdWUuc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKFxuICAgICAgICBDU01fSlNPTl9FUlJPUl9UWVBFX01JU01BVENIXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOa3u+Wtl+a8lOeul+WtkFtzdHJpbmcgfCBjc21TdHJpbmddXG4gICAgICovXG4gICAgcHVibGljIGdldFZhbHVlQnlTdHJpbmcoczogc3RyaW5nIHwgY3NtU3RyaW5nKTogVmFsdWUge1xuICAgICAgcmV0dXJuIFZhbHVlLm51bGxWYWx1ZS5zZXRFcnJvck5vdEZvckNsaWVudENhbGwoXG4gICAgICAgIENTTV9KU09OX0VSUk9SX1RZUEVfTUlTTUFUQ0hcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oe44OD44OX44Gu44Kt44O85LiA6Kan44KS44Kz44Oz44OG44OK44Gn6L+U44GZXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIOODnuODg+ODl+OBruOCreODvOOBruS4gOimp1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRLZXlzKCk6IGNzbVZlY3RvcjxzdHJpbmc+IHtcbiAgICAgIHJldHVybiBWYWx1ZS5zX2R1bW15S2V5cztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZeOBrueorumhnuOBjOOCqOODqeODvOWApOOBquOCiXRydWVcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNFcnJvcigpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZeOBrueorumhnuOBjG51bGzjgarjgol0cnVlXG4gICAgICovXG4gICAgcHVibGljIGlzTnVsbCgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZeOBrueorumhnuOBjOecn+WBveWApOOBquOCiXRydWVcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNCb29sKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFZhbHVl44Gu56iu6aGe44GM5pWw5YCk5Z6L44Gq44KJdHJ1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBpc0Zsb2F0KCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFZhbHVl44Gu56iu6aGe44GM5paH5a2X5YiX44Gq44KJdHJ1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBpc1N0cmluZygpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZeOBrueorumhnuOBjOmFjeWIl+OBquOCiXRydWVcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNBcnJheSgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZeOBrueorumhnuOBjOODnuODg+ODl+Wei+OBquOCiXRydWVcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNNYXAoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5byV5pWw44Gu5YCk44Go562J44GX44GR44KM44GwdHJ1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBlcXVhbHModmFsdWU6IGNzbVN0cmluZyk6IGJvb2xlYW47XG4gICAgcHVibGljIGVxdWFscyh2YWx1ZTogc3RyaW5nKTogYm9vbGVhbjtcbiAgICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBudW1iZXIpOiBib29sZWFuO1xuICAgIHB1YmxpYyBlcXVhbHModmFsdWU6IGJvb2xlYW4pOiBib29sZWFuO1xuICAgIHB1YmxpYyBlcXVhbHModmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFZhbHVl44Gu5YCk44GM6Z2Z55qE44Gq44KJdHJ1ZeOAgemdmeeahOOBquOCieino+aUvuOBl+OBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBpc1N0YXRpYygpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZeOBq+OCqOODqeODvOWApOOCkuOCu+ODg+ODiOOBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBzZXRFcnJvck5vdEZvckNsaWVudENhbGwoZXJyb3JTdHI6IHN0cmluZyk6IFZhbHVlIHtcbiAgICAgIHJldHVybiBKc29uRXJyb3IuZXJyb3JWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDliJ3mnJ/ljJbnlKjjg6Hjgr3jg4Pjg4lcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHN0YXRpY0luaXRpYWxpemVOb3RGb3JDbGllbnRDYWxsKCk6IHZvaWQge1xuICAgICAgSnNvbkJvb2xlYW4udHJ1ZVZhbHVlID0gbmV3IEpzb25Cb29sZWFuKHRydWUpO1xuICAgICAgSnNvbkJvb2xlYW4uZmFsc2VWYWx1ZSA9IG5ldyBKc29uQm9vbGVhbihmYWxzZSk7XG5cbiAgICAgIEpzb25FcnJvci5lcnJvclZhbHVlID0gbmV3IEpzb25FcnJvcignRVJST1InLCB0cnVlKTtcbiAgICAgIHRoaXMubnVsbFZhbHVlID0gbmV3IEpzb25OdWxsdmFsdWUoKTtcblxuICAgICAgVmFsdWUuc19kdW1teUtleXMgPSBuZXcgY3NtVmVjdG9yPHN0cmluZz4oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6rjg6rjg7zjgrnnlKjjg6Hjgr3jg4Pjg4lcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHN0YXRpY1JlbGVhc2VOb3RGb3JDbGllbnRDYWxsKCk6IHZvaWQge1xuICAgICAgSnNvbkJvb2xlYW4udHJ1ZVZhbHVlID0gbnVsbDtcbiAgICAgIEpzb25Cb29sZWFuLmZhbHNlVmFsdWUgPSBudWxsO1xuICAgICAgSnNvbkVycm9yLmVycm9yVmFsdWUgPSBudWxsO1xuICAgICAgVmFsdWUubnVsbFZhbHVlID0gbnVsbDtcbiAgICAgIFZhbHVlLnNfZHVtbXlLZXlzID0gbnVsbDtcblxuICAgICAgSnNvbkJvb2xlYW4udHJ1ZVZhbHVlID0gbnVsbDtcbiAgICAgIEpzb25Cb29sZWFuLmZhbHNlVmFsdWUgPSBudWxsO1xuICAgICAgSnNvbkVycm9yLmVycm9yVmFsdWUgPSBudWxsO1xuICAgICAgVmFsdWUubnVsbFZhbHVlID0gbnVsbDtcbiAgICAgIFZhbHVlLnNfZHVtbXlLZXlzID0gbnVsbDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX3N0cmluZ0J1ZmZlcjogc3RyaW5nOyAvLyDmloflrZfliJfjg5Djg4Pjg5XjgqFcblxuICAgIHByaXZhdGUgc3RhdGljIHNfZHVtbXlLZXlzOiBjc21WZWN0b3I8c3RyaW5nPjsgLy8g44OA44Of44O844Kt44O8XG5cbiAgICBwdWJsaWMgc3RhdGljIGVycm9yVmFsdWU6IFZhbHVlOyAvLyDkuIDmmYLnmoTjgarov5TjgorlgKTjgajjgZfjgabov5TjgZnjgqjjg6njg7zjgIIgQ3ViaXNtRnJhbWV3b3JrOjpEaXNwb3Nl44GZ44KL44G+44Gn44GvZGVsZXRl44GX44Gq44GEXG4gICAgcHVibGljIHN0YXRpYyBudWxsVmFsdWU6IFZhbHVlOyAvLyDkuIDmmYLnmoTjgarov5TjgorlgKTjgajjgZfjgabov5TjgZlOVUxM44CCICAgQ3ViaXNtRnJhbWV3b3JrOjpEaXNwb3Nl44GZ44KL44G+44Gn44GvZGVsZXRl44GX44Gq44GEXG4gIH1cblxuICAvKipcbiAgICogQXNjaWnmloflrZfjga7jgb/lr77lv5zjgZfjgZ/mnIDlsI/pmZDjga7ou73ph49KU09O44OR44O844K144CCXG4gICAqIOS7leanmOOBr0pTT07jga7jgrXjg5bjgrvjg4Pjg4jjgajjgarjgovjgIJcbiAgICog6Kit5a6a44OV44Kh44Kk44OrKG1vZGVsMy5qc29uKeOBquOBqeOBruODreODvOODieeUqFxuICAgKlxuICAgKiBb5pyq5a++5b+c6aCF55uuXVxuICAgKiDjg7vml6XmnKzoqp7jgarjganjga7pnZ5BU0NJSeaWh+Wtl1xuICAgKiDjg7tl44Gr44KI44KL5oyH5pWw6KGo54++XG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtSnNvbiB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGJ1ZmZlcj86IEFycmF5QnVmZmVyLCBsZW5ndGg/OiBudW1iZXIpIHtcbiAgICAgIHRoaXMuX2Vycm9yID0gbnVsbDtcbiAgICAgIHRoaXMuX2xpbmVDb3VudCA9IDA7XG4gICAgICB0aGlzLl9yb290ID0gbnVsbDtcblxuICAgICAgaWYgKGJ1ZmZlciAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5wYXJzZUJ5dGVzKGJ1ZmZlciwgbGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5DjgqTjg4jjg4fjg7zjgr/jgYvjgonnm7TmjqXjg63jg7zjg4njgZfjgabjg5Hjg7zjgrnjgZnjgotcbiAgICAgKlxuICAgICAqIEBwYXJhbSBidWZmZXIg44OQ44OD44OV44KhXG4gICAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44K144Kk44K6XG4gICAgICogQHJldHVybiBDdWJpc21Kc29u44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K544CC5aSx5pWX44GX44Gf44KJTlVMTFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcikge1xuICAgICAgY29uc3QganNvbiA9IG5ldyBDdWJpc21Kc29uKCk7XG4gICAgICBjb25zdCBzdWNjZWVkZWQ6IGJvb2xlYW4gPSBqc29uLnBhcnNlQnl0ZXMoYnVmZmVyLCBzaXplKTtcblxuICAgICAgaWYgKCFzdWNjZWVkZWQpIHtcbiAgICAgICAgQ3ViaXNtSnNvbi5kZWxldGUoanNvbik7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGpzb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OR44O844K544GX44GfSlNPTuOCquODluOCuOOCp+OCr+ODiOOBruino+aUvuWHpueQhlxuICAgICAqXG4gICAgICogQHBhcmFtIGluc3RhbmNlIEN1YmlzbUpzb27jgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGRlbGV0ZShpbnN0YW5jZTogQ3ViaXNtSnNvbikge1xuICAgICAgaW5zdGFuY2UgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODkeODvOOCueOBl+OBn0pTT07jga7jg6vjg7zjg4jopoHntKDjgpLov5TjgZlcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0Um9vdCgpOiBWYWx1ZSB7XG4gICAgICByZXR1cm4gdGhpcy5fcm9vdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgVW5pY29kZeOBruODkOOCpOODiuODquOCklN0cmluZ+OBq+WkieaPm1xuICAgICAqXG4gICAgICogQHBhcmFtIGJ1ZmZlciDlpInmj5vjgZnjgovjg5DjgqTjg4rjg6rjg4fjg7zjgr9cbiAgICAgKiBAcmV0dXJuIOWkieaPm+W+jOOBruaWh+Wtl+WIl1xuICAgICAqL1xuICAgIHB1YmxpYyBhcnJheUJ1ZmZlclRvU3RyaW5nKGJ1ZmZlcjogQXJyYXlCdWZmZXIpOiBzdHJpbmcge1xuICAgICAgY29uc3QgdWludDhBcnJheTogVWludDhBcnJheSA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XG4gICAgICBsZXQgc3RyID0gJyc7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwLCBsZW46IG51bWJlciA9IHVpbnQ4QXJyYXkubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgc3RyICs9ICclJyArIHRoaXMucGFkKHVpbnQ4QXJyYXlbaV0udG9TdHJpbmcoMTYpKTtcbiAgICAgIH1cblxuICAgICAgc3RyID0gZGVjb2RlVVJJQ29tcG9uZW50KHN0cik7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCqOODs+OCs+ODvOODieOAgeODkeODh+OCo+ODs+OCsFxuICAgICAqL1xuICAgIHByaXZhdGUgcGFkKG46IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gbi5sZW5ndGggPCAyID8gJzAnICsgbiA6IG47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSlNPTuOBruODkeODvOOCueOCkuWun+ihjOOBmeOCi1xuICAgICAqIEBwYXJhbSBidWZmZXIgICAg44OR44O844K55a++6LGh44Gu44OH44O844K/44OQ44Kk44OIXG4gICAgICogQHBhcmFtIHNpemUgICAgICDjg4fjg7zjgr/jg5DjgqTjg4jjga7jgrXjgqTjgrpcbiAgICAgKiByZXR1cm4gdHJ1ZSA6IOaIkOWKn1xuICAgICAqIHJldHVybiBmYWxzZTog5aSx5pWXXG4gICAgICovXG4gICAgcHVibGljIHBhcnNlQnl0ZXMoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICBjb25zdCBlbmRQb3M6IG51bWJlcltdID0gbmV3IEFycmF5KDEpOyAvLyDlj4LnhafmuKHjgZfjgavjgZnjgovjgZ/jgoHphY3liJdcbiAgICAgIGNvbnN0IGRlY29kZUJ1ZmZlcjogc3RyaW5nID0gdGhpcy5hcnJheUJ1ZmZlclRvU3RyaW5nKGJ1ZmZlcik7XG4gICAgICB0aGlzLl9yb290ID0gdGhpcy5wYXJzZVZhbHVlKGRlY29kZUJ1ZmZlciwgc2l6ZSwgMCwgZW5kUG9zKTtcblxuICAgICAgaWYgKHRoaXMuX2Vycm9yKSB7XG4gICAgICAgIGxldCBzdHJidWYgPSAnXFwwJztcbiAgICAgICAgc3RyYnVmID0gJ0pzb24gcGFyc2UgZXJyb3IgOiBAbGluZSAnICsgKHRoaXMuX2xpbmVDb3VudCArIDEpICsgJ1xcbic7XG4gICAgICAgIHRoaXMuX3Jvb3QgPSBuZXcgSnNvblN0cmluZyhzdHJidWYpO1xuXG4gICAgICAgIEN1YmlzbUxvZ0luZm8oJ3swfScsIHRoaXMuX3Jvb3QuZ2V0UmF3U3RyaW5nKCkpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX3Jvb3QgPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9yb290ID0gbmV3IEpzb25FcnJvcihuZXcgY3NtU3RyaW5nKHRoaXMuX2Vycm9yKSwgZmFsc2UpOyAvLyByb29044Gv6Kej5pS+44GV44KM44KL44Gu44Gn44Ko44Op44O844Kq44OW44K444Kn44Kv44OI44KS5Yil6YCU5L2c5oiQ44GZ44KLXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODkeODvOOCueaZguOBruOCqOODqeODvOWApOOCkui/lOOBmVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRQYXJzZUVycm9yKCk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gdGhpcy5fZXJyb3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Or44O844OI6KaB57Sg44Gu5qyh44Gu6KaB57Sg44GM44OV44Kh44Kk44Or44Gu57WC56uv44Gg44Gj44Gf44KJdHJ1ZeOCkui/lOOBmVxuICAgICAqL1xuICAgIHB1YmxpYyBjaGVja0VuZE9mRmlsZSgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLl9yb290LmdldEFycmF5KClbMV0uZXF1YWxzKCdFT0YnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBKU09O44Ko44Os44Oh44Oz44OI44GL44KJVmFsdWUoZmxvYXQsU3RyaW5nLFZhbHVlKixBcnJheSxudWxsLHRydWUsZmFsc2Up44KS44OR44O844K544GZ44KLXG4gICAgICog44Ko44Os44Oh44Oz44OI44Gu5pu45byP44Gr5b+c44GY44Gm5YaF6YOo44GnUGFyc2VTdHJpbmcoKSwgUGFyc2VPYmplY3QoKSwgUGFyc2VBcnJheSgp44KS5ZG844G2XG4gICAgICpcbiAgICAgKiBAcGFyYW0gICBidWZmZXIgICAgICBKU09O44Ko44Os44Oh44Oz44OI44Gu44OQ44OD44OV44KhXG4gICAgICogQHBhcmFtICAgbGVuZ3RoICAgICAg44OR44O844K544GZ44KL6ZW344GVXG4gICAgICogQHBhcmFtICAgYmVnaW4gICAgICAg44OR44O844K544KS6ZaL5aeL44GZ44KL5L2N572uXG4gICAgICogQHBhcmFtICAgb3V0RW5kUG9zICAg44OR44O844K557WC5LqG5pmC44Gu5L2N572uXG4gICAgICogQHJldHVybiAgICAgIOODkeODvOOCueOBi+OCieWPluW+l+OBl+OBn1ZhbHVl44Kq44OW44K444Kn44Kv44OIXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHBhcnNlVmFsdWUoXG4gICAgICBidWZmZXI6IHN0cmluZyxcbiAgICAgIGxlbmd0aDogbnVtYmVyLFxuICAgICAgYmVnaW46IG51bWJlcixcbiAgICAgIG91dEVuZFBvczogbnVtYmVyW11cbiAgICApIHtcbiAgICAgIGlmICh0aGlzLl9lcnJvcikgcmV0dXJuIG51bGw7XG5cbiAgICAgIGxldCBvOiBWYWx1ZSA9IG51bGw7XG4gICAgICBsZXQgaTogbnVtYmVyID0gYmVnaW47XG4gICAgICBsZXQgZjogbnVtYmVyO1xuXG4gICAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGM6IHN0cmluZyA9IGJ1ZmZlcltpXTtcbiAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgY2FzZSAnLSc6XG4gICAgICAgICAgY2FzZSAnLic6XG4gICAgICAgICAgY2FzZSAnMCc6XG4gICAgICAgICAgY2FzZSAnMSc6XG4gICAgICAgICAgY2FzZSAnMic6XG4gICAgICAgICAgY2FzZSAnMyc6XG4gICAgICAgICAgY2FzZSAnNCc6XG4gICAgICAgICAgY2FzZSAnNSc6XG4gICAgICAgICAgY2FzZSAnNic6XG4gICAgICAgICAgY2FzZSAnNyc6XG4gICAgICAgICAgY2FzZSAnOCc6XG4gICAgICAgICAgY2FzZSAnOSc6IHtcbiAgICAgICAgICAgIGNvbnN0IGFmdGVyU3RyaW5nOiBzdHJpbmdbXSA9IG5ldyBBcnJheSgxKTsgLy8g5Y+C54Wn5rih44GX44Gr44GZ44KL44Gf44KBXG4gICAgICAgICAgICBmID0gc3RydG9kKGJ1ZmZlci5zbGljZShpKSwgYWZ0ZXJTdHJpbmcpO1xuICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gYnVmZmVyLmluZGV4T2YoYWZ0ZXJTdHJpbmdbMF0pO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBKc29uRmxvYXQoZik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgSnNvblN0cmluZyhcbiAgICAgICAgICAgICAgdGhpcy5wYXJzZVN0cmluZyhidWZmZXIsIGxlbmd0aCwgaSArIDEsIG91dEVuZFBvcylcbiAgICAgICAgICAgICk7IC8vIFxcXCLjga7mrKHjga7mloflrZfjgYvjgolcbiAgICAgICAgICBjYXNlICdbJzpcbiAgICAgICAgICAgIG8gPSB0aGlzLnBhcnNlQXJyYXkoYnVmZmVyLCBsZW5ndGgsIGkgKyAxLCBvdXRFbmRQb3MpO1xuICAgICAgICAgICAgcmV0dXJuIG87XG4gICAgICAgICAgY2FzZSAneyc6XG4gICAgICAgICAgICBvID0gdGhpcy5wYXJzZU9iamVjdChidWZmZXIsIGxlbmd0aCwgaSArIDEsIG91dEVuZFBvcyk7XG4gICAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgICBjYXNlICduJzogLy8gbnVsbOS7peWkluOBq+OBquOBhFxuICAgICAgICAgICAgaWYgKGkgKyAzIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICAgIG8gPSBuZXcgSnNvbk51bGx2YWx1ZSgpOyAvLyDop6PmlL7jgafjgY3jgovjgojjgYbjgavjgZnjgotcbiAgICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gaSArIDQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLl9lcnJvciA9ICdwYXJzZSBudWxsJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICAgIGNhc2UgJ3QnOiAvLyB0cnVl5Lul5aSW44Gr44Gq44GEXG4gICAgICAgICAgICBpZiAoaSArIDMgPCBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgbyA9IEpzb25Cb29sZWFuLnRydWVWYWx1ZTtcbiAgICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gaSArIDQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLl9lcnJvciA9ICdwYXJzZSB0cnVlJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICAgIGNhc2UgJ2YnOiAvLyBmYWxzZeS7peWkluOBq+OBquOBhFxuICAgICAgICAgICAgaWYgKGkgKyA0IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICAgIG8gPSBKc29uQm9vbGVhbi5mYWxzZVZhbHVlO1xuICAgICAgICAgICAgICBvdXRFbmRQb3NbMF0gPSBpICsgNTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gXCJpbGxlZ2FsICcsJyBwb3NpdGlvblwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG87XG4gICAgICAgICAgY2FzZSAnLCc6IC8vIEFycmF5IHNlcGFyYXRvclxuICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBcImlsbGVnYWwgJywnIHBvc2l0aW9uXCI7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICBjYXNlICddJzogLy8g5LiN5q2j44Gq772d44Gg44GM44K544Kt44OD44OX44GZ44KL44CC6YWN5YiX44Gu5pyA5b6M44Gr5LiN6KaB44GqICwg44GM44GC44KL44Go5oCd44KP44KM44KLXG4gICAgICAgICAgICBvdXRFbmRQb3NbMF0gPSBpOyAvLyDlkIzjgZjmloflrZfjgpLlho3lh6bnkIZcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIGNhc2UgJ1xcbic6XG4gICAgICAgICAgICB0aGlzLl9saW5lQ291bnQrKztcbiAgICAgICAgICBjYXNlICcgJzpcbiAgICAgICAgICBjYXNlICdcXHQnOlxuICAgICAgICAgIGNhc2UgJ1xccic6XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIC8vIOOCueOCreODg+ODl1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fZXJyb3IgPSAnaWxsZWdhbCBlbmQgb2YgdmFsdWUnO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5qyh44Gu44CMXCLjgI3jgb7jgafjga7mloflrZfliJfjgpLjg5Hjg7zjgrnjgZnjgovjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHN0cmluZyAgLT4gIOODkeODvOOCueWvvuixoeOBruaWh+Wtl+WIl1xuICAgICAqIEBwYXJhbSAgIGxlbmd0aCAgLT4gIOODkeODvOOCueOBmeOCi+mVt+OBlVxuICAgICAqIEBwYXJhbSAgIGJlZ2luICAgLT4gIOODkeODvOOCueOCkumWi+Wni+OBmeOCi+S9jee9rlxuICAgICAqIEBwYXJhbSAgb3V0RW5kUG9zICAgLT4gIOODkeODvOOCuee1guS6huaZguOBruS9jee9rlxuICAgICAqIEByZXR1cm4gICAgICDjg5Hjg7zjgrnjgZfjgZ/mlodG5a2X5YiX6KaB57SgXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHBhcnNlU3RyaW5nKFxuICAgICAgc3RyaW5nOiBzdHJpbmcsXG4gICAgICBsZW5ndGg6IG51bWJlcixcbiAgICAgIGJlZ2luOiBudW1iZXIsXG4gICAgICBvdXRFbmRQb3M6IG51bWJlcltdXG4gICAgKTogc3RyaW5nIHtcbiAgICAgIGlmICh0aGlzLl9lcnJvcikgcmV0dXJuIG51bGw7XG5cbiAgICAgIGxldCBpID0gYmVnaW47XG4gICAgICBsZXQgYzogc3RyaW5nLCBjMjogc3RyaW5nO1xuICAgICAgY29uc3QgcmV0OiBjc21TdHJpbmcgPSBuZXcgY3NtU3RyaW5nKCcnKTtcbiAgICAgIGxldCBidWZTdGFydDogbnVtYmVyID0gYmVnaW47IC8vIHNidWbjgavnmbvpjLLjgZXjgozjgabjgYTjgarjgYTmloflrZfjga7plovlp4vkvY3nva5cblxuICAgICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBjID0gc3RyaW5nW2ldO1xuXG4gICAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICAgIGNhc2UgJ1wiJzoge1xuICAgICAgICAgICAgLy8g57WC56uv44Gu4oCd44CB44Ko44K544Kx44O844OX5paH5a2X44Gv5Yil44Gr5Yem55CG44GV44KM44KL44Gu44Gn44GT44GT44Gr5p2l44Gq44GEXG4gICAgICAgICAgICBvdXRFbmRQb3NbMF0gPSBpICsgMTsgLy8g4oCd44Gu5qyh44Gu5paH5a2XXG4gICAgICAgICAgICByZXQuYXBwZW5kKHN0cmluZy5zbGljZShidWZTdGFydCksIGkgLSBidWZTdGFydCk7IC8vIOWJjeOBruaWh+Wtl+OBvuOBp+OCkueZu+mMsuOBmeOCi1xuICAgICAgICAgICAgcmV0dXJuIHJldC5zO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlICcvLyc6IHtcbiAgICAgICAgICAgIC8vIOOCqOOCueOCseODvOODl+OBruWgtOWQiFxuICAgICAgICAgICAgaSsrOyAvLyDvvJLmloflrZfjgpLjgrvjg4Pjg4jjgafmibHjgYZcblxuICAgICAgICAgICAgaWYgKGkgLSAxID4gYnVmU3RhcnQpIHtcbiAgICAgICAgICAgICAgcmV0LmFwcGVuZChzdHJpbmcuc2xpY2UoYnVmU3RhcnQpLCBpIC0gYnVmU3RhcnQpOyAvLyDliY3jga7mloflrZfjgb7jgafjgpLnmbvpjLLjgZnjgotcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZlN0YXJ0ID0gaSArIDE7IC8vIOOCqOOCueOCseODvOODl++8iO+8kuaWh+Wtlynjga7mrKHjga7mloflrZfjgYvjgolcblxuICAgICAgICAgICAgaWYgKGkgPCBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgYzIgPSBzdHJpbmdbaV07XG5cbiAgICAgICAgICAgICAgc3dpdGNoIChjMikge1xuICAgICAgICAgICAgICAgIGNhc2UgJ1xcXFwnOlxuICAgICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnXFxcXCcpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnXCInOlxuICAgICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnXCInKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJy8nOlxuICAgICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnLycpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnYic6XG4gICAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICdcXGInKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2YnOlxuICAgICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnXFxmJyk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICduJzpcbiAgICAgICAgICAgICAgICAgIHJldC5leHBhbnNpb24oMSwgJ1xcbicpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncic6XG4gICAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICdcXHInKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3QnOlxuICAgICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnXFx0Jyk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd1JzpcbiAgICAgICAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gJ3BhcnNlIHN0cmluZy91bmljb3JkIGVzY2FwZSBub3Qgc3VwcG9ydGVkJztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSAncGFyc2Ugc3RyaW5nL2VzY2FwZSBlcnJvcic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9lcnJvciA9ICdwYXJzZSBzdHJpbmcvaWxsZWdhbCBlbmQnO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSlNPTuOBruOCquODluOCuOOCp+OCr+ODiOOCqOODrOODoeODs+ODiOOCkuODkeODvOOCueOBl+OBplZhbHVl44Kq44OW44K444Kn44Kv44OI44KS6L+U44GZXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYnVmZmVyICAgIEpTT07jgqjjg6zjg6Hjg7Pjg4jjga7jg5Djg4Pjg5XjgqFcbiAgICAgKiBAcGFyYW0gbGVuZ3RoICAgIOODkeODvOOCueOBmeOCi+mVt+OBlVxuICAgICAqIEBwYXJhbSBiZWdpbiAgICAg44OR44O844K544KS6ZaL5aeL44GZ44KL5L2N572uXG4gICAgICogQHBhcmFtIG91dEVuZFBvcyDjg5Hjg7zjgrnntYLkuobmmYLjga7kvY3nva5cbiAgICAgKiBAcmV0dXJuIOODkeODvOOCueOBi+OCieWPluW+l+OBl+OBn1ZhbHVl44Kq44OW44K444Kn44Kv44OIXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHBhcnNlT2JqZWN0KFxuICAgICAgYnVmZmVyOiBzdHJpbmcsXG4gICAgICBsZW5ndGg6IG51bWJlcixcbiAgICAgIGJlZ2luOiBudW1iZXIsXG4gICAgICBvdXRFbmRQb3M6IG51bWJlcltdXG4gICAgKTogVmFsdWUge1xuICAgICAgaWYgKHRoaXMuX2Vycm9yKSByZXR1cm4gbnVsbDtcbiAgICAgIGNvbnN0IHJldDogSnNvbk1hcCA9IG5ldyBKc29uTWFwKCk7XG5cbiAgICAgIC8vIEtleTogVmFsdWVcbiAgICAgIGxldCBrZXkgPSAnJztcbiAgICAgIGxldCBpOiBudW1iZXIgPSBiZWdpbjtcbiAgICAgIGxldCBjID0gJyc7XG4gICAgICBjb25zdCBsb2NhbFJldEVuZFBvczI6IG51bWJlcltdID0gQXJyYXkoMSk7XG4gICAgICBsZXQgb2sgPSBmYWxzZTtcblxuICAgICAgLy8gLCDjgYzntprjgY/pmZDjgorjg6vjg7zjg5dcbiAgICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgRk9SX0xPT1A6IGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjID0gYnVmZmVyW2ldO1xuXG4gICAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgICBjYXNlICdcIic6XG4gICAgICAgICAgICAgIGtleSA9IHRoaXMucGFyc2VTdHJpbmcoYnVmZmVyLCBsZW5ndGgsIGkgKyAxLCBsb2NhbFJldEVuZFBvczIpO1xuICAgICAgICAgICAgICBpZiAodGhpcy5fZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGkgPSBsb2NhbFJldEVuZFBvczJbMF07XG4gICAgICAgICAgICAgIG9rID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYnJlYWsgRk9SX0xPT1A7IC8vLS0gbG9vcOOBi+OCieWHuuOCi1xuICAgICAgICAgICAgY2FzZSAnfSc6IC8vIOmWieOBmOOCq+ODg+OCs1xuICAgICAgICAgICAgICBvdXRFbmRQb3NbMF0gPSBpICsgMTtcbiAgICAgICAgICAgICAgcmV0dXJuIHJldDsgLy8g56m6XG4gICAgICAgICAgICBjYXNlICc6JzpcbiAgICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBcImlsbGVnYWwgJzonIHBvc2l0aW9uXCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnXFxuJzpcbiAgICAgICAgICAgICAgdGhpcy5fbGluZUNvdW50Kys7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBicmVhazsgLy8g44K544Kt44OD44OX44GZ44KL5paH5a2XXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICB0aGlzLl9lcnJvciA9ICdrZXkgbm90IGZvdW5kJztcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIG9rID0gZmFsc2U7XG5cbiAgICAgICAgLy8gOiDjgpLjg4Hjgqfjg4Pjgq9cbiAgICAgICAgRk9SX0xPT1AyOiBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYyA9IGJ1ZmZlcltpXTtcblxuICAgICAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICAgICAgY2FzZSAnOic6XG4gICAgICAgICAgICAgIG9rID0gdHJ1ZTtcbiAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICBicmVhayBGT1JfTE9PUDI7XG4gICAgICAgICAgICBjYXNlICd9JzpcbiAgICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBcImlsbGVnYWwgJ30nIHBvc2l0aW9uXCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnXFxuJzpcbiAgICAgICAgICAgICAgdGhpcy5fbGluZUNvdW50Kys7XG4gICAgICAgICAgICAvLyBjYXNlICcgJzogY2FzZSAnXFx0JyA6IGNhc2UgJ1xccic6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBicmVhazsgLy8g44K544Kt44OD44OX44GZ44KL5paH5a2XXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgIHRoaXMuX2Vycm9yID0gXCInOicgbm90IGZvdW5kXCI7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDlgKTjgpLjg4Hjgqfjg4Pjgq9cbiAgICAgICAgY29uc3QgdmFsdWU6IFZhbHVlID0gdGhpcy5wYXJzZVZhbHVlKFxuICAgICAgICAgIGJ1ZmZlcixcbiAgICAgICAgICBsZW5ndGgsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBsb2NhbFJldEVuZFBvczJcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHRoaXMuX2Vycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpID0gbG9jYWxSZXRFbmRQb3MyWzBdO1xuXG4gICAgICAgIC8vIHJldC5wdXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIHJldC5wdXQoa2V5LCB2YWx1ZSk7XG5cbiAgICAgICAgRk9SX0xPT1AzOiBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYyA9IGJ1ZmZlcltpXTtcblxuICAgICAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICAgICAgY2FzZSAnLCc6XG4gICAgICAgICAgICAgIGJyZWFrIEZPUl9MT09QMztcbiAgICAgICAgICAgIGNhc2UgJ30nOlxuICAgICAgICAgICAgICBvdXRFbmRQb3NbMF0gPSBpICsgMTtcbiAgICAgICAgICAgICAgcmV0dXJuIHJldDsgLy8g5q2j5bi457WC5LqGXG4gICAgICAgICAgICBjYXNlICdcXG4nOlxuICAgICAgICAgICAgICB0aGlzLl9saW5lQ291bnQrKztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGJyZWFrOyAvLyDjgrnjgq3jg4Pjg5dcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fZXJyb3IgPSAnaWxsZWdhbCBlbmQgb2YgcGVyc2VPYmplY3QnO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5qyh44Gu44CMXCLjgI3jgb7jgafjga7mloflrZfliJfjgpLjg5Hjg7zjgrnjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0gYnVmZmVyICAgIEpTT07jgqjjg6zjg6Hjg7Pjg4jjga7jg5Djg4Pjg5XjgqFcbiAgICAgKiBAcGFyYW0gbGVuZ3RoICAgIOODkeODvOOCueOBmeOCi+mVt+OBlVxuICAgICAqIEBwYXJhbSBiZWdpbiAgICAg44OR44O844K544KS6ZaL5aeL44GZ44KL5L2N572uXG4gICAgICogQHBhcmFtIG91dEVuZFBvcyDjg5Hjg7zjgrnntYLkuobmmYLjga7kvY3nva5cbiAgICAgKiBAcmV0dXJuIOODkeODvOOCueOBi+OCieWPluW+l+OBl+OBn1ZhbHVl44Kq44OW44K444Kn44Kv44OIXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHBhcnNlQXJyYXkoXG4gICAgICBidWZmZXI6IHN0cmluZyxcbiAgICAgIGxlbmd0aDogbnVtYmVyLFxuICAgICAgYmVnaW46IG51bWJlcixcbiAgICAgIG91dEVuZFBvczogbnVtYmVyW11cbiAgICApOiBWYWx1ZSB7XG4gICAgICBpZiAodGhpcy5fZXJyb3IpIHJldHVybiBudWxsO1xuICAgICAgbGV0IHJldDogSnNvbkFycmF5ID0gbmV3IEpzb25BcnJheSgpO1xuXG4gICAgICAvLyBrZXkgOiB2YWx1ZVxuICAgICAgbGV0IGk6IG51bWJlciA9IGJlZ2luO1xuICAgICAgbGV0IGM6IHN0cmluZztcbiAgICAgIGNvbnN0IGxvY2FsUmV0RW5kcG9zMjogbnVtYmVyW10gPSBuZXcgQXJyYXkoMSk7XG5cbiAgICAgIC8vICwg44GM57aa44GP6ZmQ44KK44Or44O844OXXG4gICAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIDog44KS44OB44Kn44OD44KvXG4gICAgICAgIGNvbnN0IHZhbHVlOiBWYWx1ZSA9IHRoaXMucGFyc2VWYWx1ZShcbiAgICAgICAgICBidWZmZXIsXG4gICAgICAgICAgbGVuZ3RoLFxuICAgICAgICAgIGksXG4gICAgICAgICAgbG9jYWxSZXRFbmRwb3MyXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2Vycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaSA9IGxvY2FsUmV0RW5kcG9zMlswXTtcblxuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXQuYWRkKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZPUl9MT09QMzpcbiAgICAgICAgLy8gYm9vbGVhbiBicmVha2ZsYWcgPSBmYWxzZTtcbiAgICAgICAgRk9SX0xPT1A6IGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjID0gYnVmZmVyW2ldO1xuXG4gICAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgICBjYXNlICcsJzpcbiAgICAgICAgICAgICAgLy8gYnJlYWtmbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgLy8gYnJlYWs7IC8vIOasoeOBrktFWSwgVkFsVUXjgbhcbiAgICAgICAgICAgICAgYnJlYWsgRk9SX0xPT1A7XG4gICAgICAgICAgICBjYXNlICddJzpcbiAgICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gaSArIDE7XG4gICAgICAgICAgICAgIHJldHVybiByZXQ7IC8vIOe1guS6hlxuICAgICAgICAgICAgY2FzZSAnXFxuJzpcbiAgICAgICAgICAgICAgKyt0aGlzLl9saW5lQ291bnQ7XG4gICAgICAgICAgICAvL2Nhc2UgJyAnOiBjYXNlICdcXHQnOiBjYXNlICdcXHInOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgYnJlYWs7IC8vIOOCueOCreODg+ODl1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXQgPSB2b2lkIDA7XG4gICAgICB0aGlzLl9lcnJvciA9ICdpbGxlZ2FsIGVuZCBvZiBwYXJzZU9iamVjdCc7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBfZXJyb3I6IHN0cmluZzsgLy8g44OR44O844K55pmC44Gu44Ko44Op44O8XG4gICAgX2xpbmVDb3VudDogbnVtYmVyOyAvLyDjgqjjg6njg7zloLHlkYrjgavnlKjjgYTjgovooYzmlbDjgqvjgqbjg7Pjg4hcbiAgICBfcm9vdDogVmFsdWU7IC8vIOODkeODvOOCueOBleOCjOOBn+ODq+ODvOODiOimgee0oFxuICB9XG5cbiAgLyoqXG4gICAqIOODkeODvOOCueOBl+OBn0pTT07jga7opoHntKDjgpJmbG9hdOWApOOBqOOBl+OBpuaJseOBhlxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEpzb25GbG9hdCBleHRlbmRzIFZhbHVlIHtcbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih2OiBudW1iZXIpIHtcbiAgICAgIHN1cGVyKCk7XG5cbiAgICAgIHRoaXMuX3ZhbHVlID0gdjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZeOBrueorumhnuOBjOaVsOWApOWei+OBquOCiXRydWVcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNGbG9hdCgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXG4gICAgICovXG4gICAgcHVibGljIGdldFN0cmluZyhkZWZhdWx0VmFsdWU6IHN0cmluZywgaW5kZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgY29uc3Qgc3RyYnVmID0gJ1xcMCc7XG4gICAgICB0aGlzLl92YWx1ZSA9IHBhcnNlRmxvYXQoc3RyYnVmKTtcbiAgICAgIHRoaXMuX3N0cmluZ0J1ZmZlciA9IHN0cmJ1ZjtcblxuICAgICAgcmV0dXJuIHRoaXMuX3N0cmluZ0J1ZmZlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDopoHntKDjgpLmlbDlgKTlnovjgafov5TjgZkobnVtYmVyKVxuICAgICAqL1xuICAgIHB1YmxpYyB0b0ludChkZWZhdWx0VmFsdWUgPSAwKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh0aGlzLl92YWx1ZS50b1N0cmluZygpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDopoHntKDjgpLmlbDlgKTlnovjgafov5TjgZkobnVtYmVyKVxuICAgICAqL1xuICAgIHB1YmxpYyB0b0Zsb2F0KGRlZmF1bHRWYWx1ZSA9IDAuMCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5byV5pWw44Gu5YCk44Go562J44GX44GR44KM44GwdHJ1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBlcXVhbHModmFsdWU6IGNzbVN0cmluZyk6IGJvb2xlYW47XG4gICAgcHVibGljIGVxdWFscyh2YWx1ZTogc3RyaW5nKTogYm9vbGVhbjtcbiAgICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBudW1iZXIpOiBib29sZWFuO1xuICAgIHB1YmxpYyBlcXVhbHModmFsdWU6IGJvb2xlYW4pOiBib29sZWFuO1xuICAgIHB1YmxpYyBlcXVhbHModmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgICAgaWYgKCdudW1iZXInID09PSB0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgLy8gaW50XG4gICAgICAgIGlmIChNYXRoLnJvdW5kKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBmbG9hdFxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUgPT0gdGhpcy5fdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF92YWx1ZTogbnVtYmVyOyAvLyBKU09O6KaB57Sg44Gu5YCkXG4gIH1cblxuICAvKipcbiAgICog44OR44O844K544GX44GfSlNPTuOBruimgee0oOOCkuecn+WBveWApOOBqOOBl+OBpuaJseOBhlxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEpzb25Cb29sZWFuIGV4dGVuZHMgVmFsdWUge1xuICAgIC8qKlxuICAgICAqIFZhbHVl44Gu56iu6aGe44GM55yf5YG95YCk44Gq44KJdHJ1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBpc0Jvb2woKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDopoHntKDjgpLnnJ/lgb3lgKTjgafov5TjgZkoYm9vbGVhbilcbiAgICAgKi9cbiAgICBwdWJsaWMgdG9Cb29sZWFuKGRlZmF1bHRWYWx1ZSA9IGZhbHNlKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdGhpcy5fYm9vbFZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXG4gICAgICovXG4gICAgcHVibGljIGdldFN0cmluZyhkZWZhdWx0VmFsdWU6IHN0cmluZywgaW5kZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgdGhpcy5fc3RyaW5nQnVmZmVyID0gdGhpcy5fYm9vbFZhbHVlID8gJ3RydWUnIDogJ2ZhbHNlJztcblxuICAgICAgcmV0dXJuIHRoaXMuX3N0cmluZ0J1ZmZlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlvJXmlbDjga7lgKTjgajnrYnjgZfjgZHjgozjgbB0cnVlXG4gICAgICovXG4gICAgcHVibGljIGVxdWFscyh2YWx1ZTogY3NtU3RyaW5nKTogYm9vbGVhbjtcbiAgICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBzdHJpbmcpOiBib29sZWFuO1xuICAgIHB1YmxpYyBlcXVhbHModmFsdWU6IG51bWJlcik6IGJvb2xlYW47XG4gICAgcHVibGljIGVxdWFscyh2YWx1ZTogYm9vbGVhbik6IGJvb2xlYW47XG4gICAgcHVibGljIGVxdWFscyh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgICBpZiAoJ2Jvb2xlYW4nID09PSB0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09IHRoaXMuX2Jvb2xWYWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZeOBruWApOOBjOmdmeeahOOBquOCiXRydWUsIOmdmeeahOOBquOCieino+aUvuOBl+OBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBpc1N0YXRpYygpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih2OiBib29sZWFuKSB7XG4gICAgICBzdXBlcigpO1xuXG4gICAgICB0aGlzLl9ib29sVmFsdWUgPSB2O1xuICAgIH1cblxuICAgIHN0YXRpYyB0cnVlVmFsdWU6IEpzb25Cb29sZWFuOyAvLyB0cnVlXG4gICAgc3RhdGljIGZhbHNlVmFsdWU6IEpzb25Cb29sZWFuOyAvLyBmYWxzZVxuXG4gICAgcHJpdmF0ZSBfYm9vbFZhbHVlOiBib29sZWFuOyAvLyBKU09O6KaB57Sg44Gu5YCkXG4gIH1cblxuICAvKipcbiAgICog44OR44O844K544GX44GfSlNPTuOBruimgee0oOOCkuaWh+Wtl+WIl+OBqOOBl+OBpuaJseOBhlxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEpzb25TdHJpbmcgZXh0ZW5kcyBWYWx1ZSB7XG4gICAgLyoqXG4gICAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHM6IHN0cmluZyk7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHM6IGNzbVN0cmluZyk7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHM6IGFueSkge1xuICAgICAgc3VwZXIoKTtcblxuICAgICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2Ygcykge1xuICAgICAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBzO1xuICAgICAgfVxuXG4gICAgICBpZiAocyBpbnN0YW5jZW9mIGNzbVN0cmluZykge1xuICAgICAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBzLnM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsdWXjga7nqK7poZ7jgYzmloflrZfliJfjgarjgol0cnVlXG4gICAgICovXG4gICAgcHVibGljIGlzU3RyaW5nKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6KaB57Sg44KS5paH5a2X5YiX44Gn6L+U44GZKGNzbVN0cmluZ+WeiylcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZTogc3RyaW5nLCBpbmRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gdGhpcy5fc3RyaW5nQnVmZmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOW8leaVsOOBruWApOOBqOetieOBl+OBkeOCjOOBsHRydWVcbiAgICAgKi9cbiAgICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBjc21TdHJpbmcpOiBib29sZWFuO1xuICAgIHB1YmxpYyBlcXVhbHModmFsdWU6IHN0cmluZyk6IGJvb2xlYW47XG4gICAgcHVibGljIGVxdWFscyh2YWx1ZTogbnVtYmVyKTogYm9vbGVhbjtcbiAgICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBib29sZWFuKTogYm9vbGVhbjtcbiAgICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgICAgIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXIgPT0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIGNzbVN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RyaW5nQnVmZmVyID09IHZhbHVlLnM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSlNPTuODkeODvOOCueaZguOBruOCqOODqeODvOe1kOaenOOAguaWh+Wtl+WIl+Wei+OBruOCiOOBhuOBq+OBteOCi+OBvuOBhlxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEpzb25FcnJvciBleHRlbmRzIEpzb25TdHJpbmcge1xuICAgIC8qKlxuICAgICAqIFZhbHVl44Gu5YCk44GM6Z2Z55qE44Gq44KJdHJ1ZeOAgemdmeeahOOBquOCieino+aUvuOBl+OBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBpc1N0YXRpYygpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLl9pc1N0YXRpYztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgqjjg6njg7zmg4XloLHjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKHM6IHN0cmluZyk6IFZhbHVlIHtcbiAgICAgIHRoaXMuX3N0cmluZ0J1ZmZlciA9IHM7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoczogY3NtU3RyaW5nIHwgc3RyaW5nLCBpc1N0YXRpYzogYm9vbGVhbikge1xuICAgICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2Ygcykge1xuICAgICAgICBzdXBlcihzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1cGVyKHMpO1xuICAgICAgfVxuICAgICAgdGhpcy5faXNTdGF0aWMgPSBpc1N0YXRpYztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZeOBrueorumhnuOBjOOCqOODqeODvOWApOOBquOCiXRydWVcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNFcnJvcigpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfaXNTdGF0aWM6IGJvb2xlYW47IC8vIOmdmeeahOOBqlZhbHVl44GL44Gp44GG44GLXG4gIH1cblxuICAvKipcbiAgICog44OR44O844K544GX44GfSlNPTuOBruimgee0oOOCkk5VTEzlgKTjgajjgZfjgabmjIHjgaRcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBKc29uTnVsbHZhbHVlIGV4dGVuZHMgVmFsdWUge1xuICAgIC8qKlxuICAgICAqIFZhbHVl44Gu56iu6aGe44GMTlVMTOWApOOBquOCiXRydWVcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNOdWxsKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6KaB57Sg44KS5paH5a2X5YiX44Gn6L+U44GZKGNzbVN0cmluZ+WeiylcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZTogc3RyaW5nLCBpbmRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gdGhpcy5fc3RyaW5nQnVmZmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFZhbHVl44Gu5YCk44GM6Z2Z55qE44Gq44KJdHJ1ZSwg6Z2Z55qE44Gq44KJ6Kej5pS+44GX44Gq44GEXG4gICAgICovXG4gICAgcHVibGljIGlzU3RhdGljKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoKTtcblxuICAgICAgdGhpcy5fc3RyaW5nQnVmZmVyID0gJ051bGxWYWx1ZSc7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODkeODvOOCueOBl+OBn0pTT07jga7opoHntKDjgpLphY3liJfjgajjgZfjgabmjIHjgaRcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBKc29uQXJyYXkgZXh0ZW5kcyBWYWx1ZSB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIHRoaXMuX2FycmF5ID0gbmV3IGNzbVZlY3RvcjxWYWx1ZT4oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpdGU6IGNzbVZlY3Rvcl9pdGVyYXRvcjxWYWx1ZT4gPSB0aGlzLl9hcnJheS5iZWdpbigpO1xuICAgICAgICBpdGUubm90RXF1YWwodGhpcy5fYXJyYXkuZW5kKCkpO1xuICAgICAgICBpdGUucHJlSW5jcmVtZW50KClcbiAgICAgICkge1xuICAgICAgICBsZXQgdjogVmFsdWUgPSBpdGUucHRyKCk7XG5cbiAgICAgICAgaWYgKHYgJiYgIXYuaXNTdGF0aWMoKSkge1xuICAgICAgICAgIHYgPSB2b2lkIDA7XG4gICAgICAgICAgdiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZeOBrueorumhnuOBjOmFjeWIl+OBquOCiXRydWVcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNBcnJheSgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOa3u+Wtl+a8lOeul+WtkFtpbmRleF1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VmFsdWVCeUluZGV4KGluZGV4OiBudW1iZXIpOiBWYWx1ZSB7XG4gICAgICBpZiAoaW5kZXggPCAwIHx8IHRoaXMuX2FycmF5LmdldFNpemUoKSA8PSBpbmRleCkge1xuICAgICAgICByZXR1cm4gVmFsdWUuZXJyb3JWYWx1ZS5zZXRFcnJvck5vdEZvckNsaWVudENhbGwoXG4gICAgICAgICAgQ1NNX0pTT05fRVJST1JfSU5ERVhfT0ZfQk9VTkRTXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHY6IFZhbHVlID0gdGhpcy5fYXJyYXkuYXQoaW5kZXgpO1xuXG4gICAgICBpZiAodiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBWYWx1ZS5udWxsVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOa3u+Wtl+a8lOeul+WtkFtzdHJpbmcgfCBjc21TdHJpbmddXG4gICAgICovXG4gICAgcHVibGljIGdldFZhbHVlQnlTdHJpbmcoczogc3RyaW5nIHwgY3NtU3RyaW5nKTogVmFsdWUge1xuICAgICAgcmV0dXJuIFZhbHVlLmVycm9yVmFsdWUuc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKFxuICAgICAgICBDU01fSlNPTl9FUlJPUl9UWVBFX01JU01BVENIXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXG4gICAgICovXG4gICAgcHVibGljIGdldFN0cmluZyhkZWZhdWx0VmFsdWU6IHN0cmluZywgaW5kZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgY29uc3Qgc3RyaW5nQnVmZmVyOiBzdHJpbmcgPSBpbmRlbnQgKyAnW1xcbic7XG5cbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpdGU6IGNzbVZlY3Rvcl9pdGVyYXRvcjxWYWx1ZT4gPSB0aGlzLl9hcnJheS5iZWdpbigpO1xuICAgICAgICBpdGUubm90RXF1YWwodGhpcy5fYXJyYXkuZW5kKCkpO1xuICAgICAgICBpdGUuaW5jcmVtZW50KClcbiAgICAgICkge1xuICAgICAgICBjb25zdCB2OiBWYWx1ZSA9IGl0ZS5wdHIoKTtcbiAgICAgICAgdGhpcy5fc3RyaW5nQnVmZmVyICs9IGluZGVudCArICcnICsgdi5nZXRTdHJpbmcoaW5kZW50ICsgJyAnKSArICdcXG4nO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBzdHJpbmdCdWZmZXIgKyBpbmRlbnQgKyAnXVxcbic7XG5cbiAgICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6YWN5YiX6KaB57Sg44KS6L+95Yqg44GZ44KLXG4gICAgICogQHBhcmFtIHYg6L+95Yqg44GZ44KL6KaB57SgXG4gICAgICovXG4gICAgcHVibGljIGFkZCh2OiBWYWx1ZSk6IHZvaWQge1xuICAgICAgdGhpcy5fYXJyYXkucHVzaEJhY2sodik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6KaB57Sg44KS44Kz44Oz44OG44OK44Gn6L+U44GZKGNzbVZlY3RvcjxWYWx1ZT4pXG4gICAgICovXG4gICAgcHVibGljIGdldFZlY3RvcihkZWZhdWx0VmFsdWU6IGNzbVZlY3RvcjxWYWx1ZT4gPSBudWxsKTogY3NtVmVjdG9yPFZhbHVlPiB7XG4gICAgICByZXR1cm4gdGhpcy5fYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6KaB57Sg44Gu5pWw44KS6L+U44GZXG4gICAgICovXG4gICAgcHVibGljIGdldFNpemUoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9hcnJheS5nZXRTaXplKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfYXJyYXk6IGNzbVZlY3RvcjxWYWx1ZT47IC8vIEpTT07opoHntKDjga7lgKRcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Gu6KaB57Sg44KS44Oe44OD44OX44Go44GX44Gm5oyB44GkXG4gICAqL1xuICBleHBvcnQgY2xhc3MgSnNvbk1hcCBleHRlbmRzIFZhbHVlIHtcbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcigpO1xuICAgICAgdGhpcy5fbWFwID0gbmV3IGNzbU1hcDxzdHJpbmcsIFZhbHVlPigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgICAqL1xuICAgIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgICAgY29uc3QgaXRlOiBjc21NYXBfaXRlcmF0b3I8c3RyaW5nLCBWYWx1ZT4gPSB0aGlzLl9tYXAuYmVnaW4oKTtcblxuICAgICAgd2hpbGUgKGl0ZS5ub3RFcXVhbCh0aGlzLl9tYXAuZW5kKCkpKSB7XG4gICAgICAgIGxldCB2OiBWYWx1ZSA9IGl0ZS5wdHIoKS5zZWNvbmQ7XG5cbiAgICAgICAgaWYgKHYgJiYgIXYuaXNTdGF0aWMoKSkge1xuICAgICAgICAgIHYgPSB2b2lkIDA7XG4gICAgICAgICAgdiA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpdGUucHJlSW5jcmVtZW50KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsdWXjga7lgKTjgYxNYXDlnovjgarjgol0cnVlXG4gICAgICovXG4gICAgcHVibGljIGlzTWFwKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5re75a2X5ryU566X5a2QW3N0cmluZyB8IGNzbVN0cmluZ11cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VmFsdWVCeVN0cmluZyhzOiBzdHJpbmcgfCBjc21TdHJpbmcpOiBWYWx1ZSB7XG4gICAgICBpZiAocyBpbnN0YW5jZW9mIGNzbVN0cmluZykge1xuICAgICAgICBjb25zdCByZXQ6IFZhbHVlID0gdGhpcy5fbWFwLmdldFZhbHVlKHMucyk7XG4gICAgICAgIGlmIChyZXQgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBWYWx1ZS5udWxsVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cblxuICAgICAgZm9yIChcbiAgICAgICAgbGV0IGl0ZXI6IGNzbU1hcF9pdGVyYXRvcjxzdHJpbmcsIFZhbHVlPiA9IHRoaXMuX21hcC5iZWdpbigpO1xuICAgICAgICBpdGVyLm5vdEVxdWFsKHRoaXMuX21hcC5lbmQoKSk7XG4gICAgICAgIGl0ZXIucHJlSW5jcmVtZW50KClcbiAgICAgICkge1xuICAgICAgICBpZiAoaXRlci5wdHIoKS5maXJzdCA9PSBzKSB7XG4gICAgICAgICAgaWYgKGl0ZXIucHRyKCkuc2Vjb25kID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBWYWx1ZS5udWxsVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBpdGVyLnB0cigpLnNlY29uZDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gVmFsdWUubnVsbFZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOa3u+Wtl+a8lOeul+WtkFtpbmRleF1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VmFsdWVCeUluZGV4KGluZGV4OiBudW1iZXIpOiBWYWx1ZSB7XG4gICAgICByZXR1cm4gVmFsdWUuZXJyb3JWYWx1ZS5zZXRFcnJvck5vdEZvckNsaWVudENhbGwoXG4gICAgICAgIENTTV9KU09OX0VSUk9SX1RZUEVfTUlTTUFUQ0hcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6KaB57Sg44KS5paH5a2X5YiX44Gn6L+U44GZKGNzbVN0cmluZ+WeiylcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZTogc3RyaW5nLCBpbmRlbnQ6IHN0cmluZykge1xuICAgICAgdGhpcy5fc3RyaW5nQnVmZmVyID0gaW5kZW50ICsgJ3tcXG4nO1xuXG4gICAgICBjb25zdCBpdGU6IGNzbU1hcF9pdGVyYXRvcjxzdHJpbmcsIFZhbHVlPiA9IHRoaXMuX21hcC5iZWdpbigpO1xuICAgICAgd2hpbGUgKGl0ZS5ub3RFcXVhbCh0aGlzLl9tYXAuZW5kKCkpKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGl0ZS5wdHIoKS5maXJzdDtcbiAgICAgICAgY29uc3QgdjogVmFsdWUgPSBpdGUucHRyKCkuc2Vjb25kO1xuXG4gICAgICAgIHRoaXMuX3N0cmluZ0J1ZmZlciArPVxuICAgICAgICAgIGluZGVudCArICcgJyArIGtleSArICcgOiAnICsgdi5nZXRTdHJpbmcoaW5kZW50ICsgJyAgICcpICsgJyBcXG4nO1xuICAgICAgICBpdGUucHJlSW5jcmVtZW50KCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3N0cmluZ0J1ZmZlciArPSBpbmRlbnQgKyAnfVxcbic7XG5cbiAgICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6KaB57Sg44KSTWFw5Z6L44Gn6L+U44GZXG4gICAgICovXG4gICAgcHVibGljIGdldE1hcChkZWZhdWx0VmFsdWU/OiBjc21NYXA8c3RyaW5nLCBWYWx1ZT4pOiBjc21NYXA8c3RyaW5nLCBWYWx1ZT4ge1xuICAgICAgcmV0dXJuIHRoaXMuX21hcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNYXDjgavopoHntKDjgpLov73liqDjgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgcHV0KGtleTogc3RyaW5nLCB2OiBWYWx1ZSk6IHZvaWQge1xuICAgICAgdGhpcy5fbWFwLnNldFZhbHVlKGtleSwgdik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWFw44GL44KJ44Kt44O844Gu44Oq44K544OI44KS5Y+W5b6X44GZ44KLXG4gICAgICovXG4gICAgcHVibGljIGdldEtleXMoKTogY3NtVmVjdG9yPHN0cmluZz4ge1xuICAgICAgaWYgKCF0aGlzLl9rZXlzKSB7XG4gICAgICAgIHRoaXMuX2tleXMgPSBuZXcgY3NtVmVjdG9yPHN0cmluZz4oKTtcblxuICAgICAgICBjb25zdCBpdGU6IGNzbU1hcF9pdGVyYXRvcjxzdHJpbmcsIFZhbHVlPiA9IHRoaXMuX21hcC5iZWdpbigpO1xuXG4gICAgICAgIHdoaWxlIChpdGUubm90RXF1YWwodGhpcy5fbWFwLmVuZCgpKSkge1xuICAgICAgICAgIGNvbnN0IGtleTogc3RyaW5nID0gaXRlLnB0cigpLmZpcnN0O1xuICAgICAgICAgIHRoaXMuX2tleXMucHVzaEJhY2soa2V5KTtcbiAgICAgICAgICBpdGUucHJlSW5jcmVtZW50KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9rZXlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1hcOOBruimgee0oOaVsOOCkuWPluW+l+OBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRTaXplKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fa2V5cy5nZXRTaXplKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfbWFwOiBjc21NYXA8c3RyaW5nLCBWYWx1ZT47IC8vIEpTT07opoHntKDjga7lgKRcbiAgICBwcml2YXRlIF9rZXlzOiBjc21WZWN0b3I8c3RyaW5nPjsgLy8gSlNPTuimgee0oOOBruWApFxuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMb2dMZXZlbCB9IGZyb20gJy4uL0ZyYW1ld29yay9zcmMvbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJ1xuXG4vKipcbiAqIFNhbXBsZSBBcHDjgafkvb/nlKjjgZnjgovlrprmlbBcbiAqL1xuLy8g55S76Z2iXG5leHBvcnQgY29uc3QgVmlld01heFNjYWxlID0gMi4wO1xuZXhwb3J0IGNvbnN0IFZpZXdNaW5TY2FsZSA9IDAuODtcblxuZXhwb3J0IGNvbnN0IFZpZXdMb2dpY2FsTGVmdCA9IC0xLjA7XG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxSaWdodCA9IDEuMDtcblxuZXhwb3J0IGNvbnN0IFZpZXdMb2dpY2FsTWF4TGVmdCA9IC0yLjA7XG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxNYXhSaWdodCA9IDIuMDtcbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbE1heEJvdHRvbSA9IC0yLjA7XG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxNYXhUb3AgPSAyLjA7XG5cbi8vIOebuOWvvuODkeOCuVxuZXhwb3J0IGNvbnN0IFJlc291cmNlc1BhdGggPSAnLi9SZXNvdXJjZXMvJztcblxuLy8g44Oi44OH44Or44Gu5b6M44KN44Gr44GC44KL6IOM5pmv44Gu55S75YOP44OV44Kh44Kk44OrXG5leHBvcnQgY29uc3QgQmFja0ltYWdlTmFtZSA9ICdiYWNrX2NsYXNzX25vcm1hbC5wbmcnO1xuXG4vLyDmra/ou4pcbmV4cG9ydCBjb25zdCBHZWFySW1hZ2VOYW1lID0gJ2ljb25fZ2Vhci5wbmcnO1xuXG4vLyDntYLkuobjg5zjgr/jg7NcbmV4cG9ydCBjb25zdCBQb3dlckltYWdlTmFtZSA9ICdDbG9zZU5vcm1hbC5wbmcnO1xuXG4vLyDjg6Ljg4fjg6vlrprnvqktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIOODouODh+ODq+OCkumFjee9ruOBl+OBn+ODh+OCo+ODrOOCr+ODiOODquWQjeOBrumFjeWIl1xuLy8g44OH44Kj44Os44Kv44OI44Oq5ZCN44GobW9kZWwzLmpzb27jga7lkI3liY3jgpLkuIDoh7TjgZXjgZvjgabjgYrjgY/jgZPjgahcbi8vIGV4cG9ydCBjb25zdCBNb2RlbERpcjogc3RyaW5nW10gPSBbJ0hhcnUnLCAnSGl5b3JpJywgJ01hcmsnLCAnTmF0b3JpJywgJ1JpY2UnXTtcbmV4cG9ydCBsZXQgTW9kZWxEaXI6IHN0cmluZ1tdID0gWydIaXlvcmknLCAnSGFydScsICdSaWNlJ107XG5leHBvcnQgY29uc3QgTW9kZWxEaXJTaXplOiBudW1iZXIgPSBNb2RlbERpci5sZW5ndGg7XG5cbi8vIOWklumDqOWumue+qeODleOCoeOCpOODq++8iGpzb27vvInjgajlkIjjgo/jgZvjgotcbmV4cG9ydCBjb25zdCBNb3Rpb25Hcm91cElkbGUgPSAnSWRsZSc7IC8vIOOCouOCpOODieODquODs+OCsFxuZXhwb3J0IGNvbnN0IE1vdGlvbkdyb3VwVGFwQm9keSA9ICdUYXBCb2R5JzsgLy8g5L2T44KS44K/44OD44OX44GX44Gf44Go44GNXG5cbi8vIOWklumDqOWumue+qeODleOCoeOCpOODq++8iGpzb27vvInjgajlkIjjgo/jgZvjgotcbmV4cG9ydCBjb25zdCBIaXRBcmVhTmFtZUhlYWQgPSAnSGVhZCc7XG5leHBvcnQgY29uc3QgSGl0QXJlYU5hbWVCb2R5ID0gJ0JvZHknO1xuXG4vLyDjg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqblrprmlbBcbmV4cG9ydCBjb25zdCBQcmlvcml0eU5vbmUgPSAwO1xuZXhwb3J0IGNvbnN0IFByaW9yaXR5SWRsZSA9IDE7XG5leHBvcnQgY29uc3QgUHJpb3JpdHlOb3JtYWwgPSAyO1xuZXhwb3J0IGNvbnN0IFByaW9yaXR5Rm9yY2UgPSAzO1xuXG4vLyDjg4fjg5Djg4PjgrDnlKjjg63jgrDjga7ooajnpLrjgqrjg5fjgrfjg6fjg7NcbmV4cG9ydCBjb25zdCBEZWJ1Z0xvZ0VuYWJsZSA9IHRydWU7XG5leHBvcnQgY29uc3QgRGVidWdUb3VjaExvZ0VuYWJsZSA9IGZhbHNlO1xuXG4vLyBGcmFtZXdvcmvjgYvjgonlh7rlipvjgZnjgovjg63jgrDjga7jg6zjg5njg6voqK3lrppcbmV4cG9ydCBjb25zdCBDdWJpc21Mb2dnaW5nTGV2ZWw6IExvZ0xldmVsID0gTG9nTGV2ZWwuTG9nTGV2ZWxfVmVyYm9zZTtcblxuLy8g44OH44OV44Kp44Or44OI44Gu44Os44Oz44OA44O844K/44O844Ky44OD44OI44K144Kk44K6XG5leHBvcnQgY29uc3QgUmVuZGVyVGFyZ2V0V2lkdGggPSAxOTAwO1xuZXhwb3J0IGNvbnN0IFJlbmRlclRhcmdldEhlaWdodCA9IDEwMDA7XG5cbi8vIOWklumDqOS8oOWFpeWKqOaAgeWPguaVsFxuZXhwb3J0IGNsYXNzIGxhcHBkZWZpbmVTZXQge1xuICAgIHB1YmxpYyBzdGF0aWMgc2V0TW9kZWxEaXIobW9kZWxEaXI6QXJyYXk8c3RyaW5nPik6IHZvaWQge1xuICAgICAgICBNb2RlbERpciA9IG1vZGVsRGlyLmxlbmd0aD4wID8gbW9kZWxEaXIgOiBNb2RlbERpclxuICAgIH1cbn0iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIC8qKlxuICAgKiA0eDTjga7ooYzliJdcbiAgICpcbiAgICogNHg06KGM5YiX44Gu5L6/5Yip44Kv44Op44K544CCXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtTWF0cml4NDQge1xuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMuX3RyID0gbmV3IEZsb2F0MzJBcnJheSgxNik7IC8vIDQgKiA044Gu44K144Kk44K6XG4gICAgICB0aGlzLmxvYWRJZGVudGl0eSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWPl+OBkeWPluOBo+OBn++8kuOBpOOBruihjOWIl+OBruS5l+eul+OCkuihjOOBhuOAglxuICAgICAqXG4gICAgICogQHBhcmFtIGEg6KGM5YiXYVxuICAgICAqIEBwYXJhbSBiIOihjOWIl2JcbiAgICAgKiBAcmV0dXJuIOS5l+eul+e1kOaenOOBruihjOWIl1xuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgbXVsdGlwbHkoXG4gICAgICBhOiBGbG9hdDMyQXJyYXksXG4gICAgICBiOiBGbG9hdDMyQXJyYXksXG4gICAgICBkc3Q6IEZsb2F0MzJBcnJheVxuICAgICk6IHZvaWQge1xuICAgICAgY29uc3QgYzogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMFxuICAgICAgXSk7XG5cbiAgICAgIGNvbnN0IG4gPSA0O1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG47ICsraikge1xuICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgbjsgKytrKSB7XG4gICAgICAgICAgICBjW2ogKyBpICogNF0gKz0gYVtrICsgaSAqIDRdICogYltqICsgayAqIDRdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgICAgZHN0W2ldID0gY1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDljZjkvY3ooYzliJfjgavliJ3mnJ/ljJbjgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9hZElkZW50aXR5KCk6IHZvaWQge1xuICAgICAgY29uc3QgYzogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgIDEuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAxLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMS4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDEuMFxuICAgICAgXSk7XG5cbiAgICAgIHRoaXMuc2V0TWF0cml4KGMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOihjOWIl+OCkuioreWumlxuICAgICAqXG4gICAgICogQHBhcmFtIHRyIDE25YCL44Gu5rWu5YuV5bCP5pWw54K55pWw44Gn6KGo44GV44KM44KLNHg044Gu6KGM5YiXXG4gICAgICovXG4gICAgcHVibGljIHNldE1hdHJpeCh0cjogRmxvYXQzMkFycmF5KTogdm9pZCB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgICAgdGhpcy5fdHJbaV0gPSB0cltpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDooYzliJfjgpLmta7li5XlsI/mlbDngrnmlbDjga7phY3liJfjgaflj5blvpdcbiAgICAgKlxuICAgICAqIEByZXR1cm4gMTblgIvjga7mta7li5XlsI/mlbDngrnmlbDjgafooajjgZXjgozjgos0eDTjga7ooYzliJdcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0QXJyYXkoKTogRmxvYXQzMkFycmF5IHtcbiAgICAgIHJldHVybiB0aGlzLl90cjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBY6Lu444Gu5ouh5aSn546H44KS5Y+W5b6XXG4gICAgICogQHJldHVybiBY6Lu444Gu5ouh5aSn546HXG4gICAgICovXG4gICAgcHVibGljIGdldFNjYWxlWCgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX3RyWzBdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFnou7jjga7mi6HlpKfnjofjgpLlj5blvpfjgZnjgotcbiAgICAgKlxuICAgICAqIEByZXR1cm4gWei7uOOBruaLoeWkp+eOh1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRTY2FsZVkoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl90cls1XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBY6Lu444Gu56e75YuV6YeP44KS5Y+W5b6XXG4gICAgICogQHJldHVybiBY6Lu444Gu56e75YuV6YePXG4gICAgICovXG4gICAgcHVibGljIGdldFRyYW5zbGF0ZVgoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl90clsxMl07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogWei7uOOBruenu+WLlemHj+OCkuWPluW+l1xuICAgICAqIEByZXR1cm4gWei7uOOBruenu+WLlemHj1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRUcmFuc2xhdGVZKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fdHJbMTNdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFjou7jjga7lgKTjgpLnj77lnKjjga7ooYzliJfjgafoqIjnrpdcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzcmMgWOi7uOOBruWApFxuICAgICAqIEByZXR1cm4g54++5Zyo44Gu6KGM5YiX44Gn6KiI566X44GV44KM44GfWOi7uOOBruWApFxuICAgICAqL1xuICAgIHB1YmxpYyB0cmFuc2Zvcm1YKHNyYzogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl90clswXSAqIHNyYyArIHRoaXMuX3RyWzEyXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBZ6Lu444Gu5YCk44KS54++5Zyo44Gu6KGM5YiX44Gn6KiI566XXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3JjIFnou7jjga7lgKRcbiAgICAgKiBAcmV0dXJuIOePvuWcqOOBruihjOWIl+OBp+ioiOeul+OBleOCjOOBn1nou7jjga7lgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgdHJhbnNmb3JtWShzcmM6IG51bWJlcik6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fdHJbNV0gKiBzcmMgKyB0aGlzLl90clsxM107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogWOi7uOOBruWApOOCkuePvuWcqOOBruihjOWIl+OBp+mAhuioiOeul1xuICAgICAqL1xuICAgIHB1YmxpYyBpbnZlcnRUcmFuc2Zvcm1YKHNyYzogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiAoc3JjIC0gdGhpcy5fdHJbMTJdKSAvIHRoaXMuX3RyWzBdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFnou7jjga7lgKTjgpLnj77lnKjjga7ooYzliJfjgafpgIboqIjnrpdcbiAgICAgKi9cbiAgICBwdWJsaWMgaW52ZXJ0VHJhbnNmb3JtWShzcmM6IG51bWJlcik6IG51bWJlciB7XG4gICAgICByZXR1cm4gKHNyYyAtIHRoaXMuX3RyWzEzXSkgLyB0aGlzLl90cls1XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDnj77lnKjjga7ooYzliJfjga7kvY3nva7jgpLotbfngrnjgavjgZfjgabnp7vli5VcbiAgICAgKlxuICAgICAqIOePvuWcqOOBruihjOWIl+OBruS9jee9ruOCkui1t+eCueOBq+OBl+OBpuebuOWvvueahOOBq+enu+WLleOBmeOCi+OAglxuICAgICAqXG4gICAgICogQHBhcmFtIHggWOi7uOOBruenu+WLlemHj1xuICAgICAqIEBwYXJhbSB5IFnou7jjga7np7vli5Xph49cbiAgICAgKi9cbiAgICBwdWJsaWMgdHJhbnNsYXRlUmVsYXRpdmUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIGNvbnN0IHRyMTogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgIDEuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAxLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMS4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIDAuMCxcbiAgICAgICAgMS4wXG4gICAgICBdKTtcblxuICAgICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIxLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOePvuWcqOOBruihjOWIl+OBruS9jee9ruOCkuenu+WLlVxuICAgICAqXG4gICAgICog54++5Zyo44Gu6KGM5YiX44Gu5L2N572u44KS5oyH5a6a44GX44Gf5L2N572u44G456e75YuV44GZ44KLXG4gICAgICpcbiAgICAgKiBAcGFyYW0geCBY6Lu444Gu56e75YuV6YePXG4gICAgICogQHBhcmFtIHkgeei7uOOBruenu+WLlemHj1xuICAgICAqL1xuICAgIHB1YmxpYyB0cmFuc2xhdGUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX3RyWzEyXSA9IHg7XG4gICAgICB0aGlzLl90clsxM10gPSB5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOePvuWcqOOBruihjOWIl+OBrljou7jjga7kvY3nva7jgpLmjIflrprjgZfjgZ/kvY3nva7jgbjnp7vli5XjgZnjgotcbiAgICAgKlxuICAgICAqIEBwYXJhbSB4IFjou7jjga7np7vli5Xph49cbiAgICAgKi9cbiAgICBwdWJsaWMgdHJhbnNsYXRlWCh4OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX3RyWzEyXSA9IHg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog54++5Zyo44Gu6KGM5YiX44GuWei7uOOBruS9jee9ruOCkuaMh+WumuOBl+OBn+S9jee9ruOBuOenu+WLleOBmeOCi1xuICAgICAqXG4gICAgICogQHBhcmFtIHkgWei7uOOBruenu+WLlemHj1xuICAgICAqL1xuICAgIHB1YmxpYyB0cmFuc2xhdGVZKHk6IG51bWJlcik6IHZvaWQge1xuICAgICAgdGhpcy5fdHJbMTNdID0geTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDnj77lnKjjga7ooYzliJfjga7mi6HlpKfnjofjgpLnm7jlr77nmoTjgavoqK3lrprjgZnjgotcbiAgICAgKlxuICAgICAqIEBwYXJhbSB4IFjou7jjga7mi6HlpKfnjodcbiAgICAgKiBAcGFyYW0geSBZ6Lu444Gu5ouh5aSn546HXG4gICAgICovXG4gICAgcHVibGljIHNjYWxlUmVsYXRpdmUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIGNvbnN0IHRyMTogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgIHgsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgeSxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAxLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMS4wXG4gICAgICBdKTtcblxuICAgICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIxLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOePvuWcqOOBruihjOWIl+OBruaLoeWkp+eOh+OCkuaMh+WumuOBl+OBn+WAjeeOh+OBq+ioreWumuOBmeOCi1xuICAgICAqXG4gICAgICogQHBhcmFtIHggWOi7uOOBruaLoeWkp+eOh1xuICAgICAqIEBwYXJhbSB5IFnou7jjga7mi6HlpKfnjodcbiAgICAgKi9cbiAgICBwdWJsaWMgc2NhbGUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX3RyWzBdID0geDtcbiAgICAgIHRoaXMuX3RyWzVdID0geTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDnj77lnKjjga7ooYzliJfjgavooYzliJfjgpLkuZfnrpdcbiAgICAgKlxuICAgICAqIEBwYXJhbSBtIOihjOWIl1xuICAgICAqL1xuICAgIHB1YmxpYyBtdWx0aXBseUJ5TWF0cml4KG06IEN1YmlzbU1hdHJpeDQ0KTogdm9pZCB7XG4gICAgICBDdWJpc21NYXRyaXg0NC5tdWx0aXBseShtLmdldEFycmF5KCksIHRoaXMuX3RyLCB0aGlzLl90cik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kq44OW44K444Kn44Kv44OI44Gu44Kz44OU44O844KS55Sf5oiQ44GZ44KLXG4gICAgICovXG4gICAgcHVibGljIGNsb25lKCk6IEN1YmlzbU1hdHJpeDQ0IHtcbiAgICAgIGNvbnN0IGNsb25lTWF0cml4OiBDdWJpc21NYXRyaXg0NCA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNsb25lTWF0cml4Ll90cltpXSA9IHRoaXMuX3RyW2ldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2xvbmVNYXRyaXg7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF90cjogRmxvYXQzMkFycmF5OyAvLyA0eDTooYzliJfjg4fjg7zjgr9cbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICog5paH5a2X5YiX44Kv44Op44K544CCXG4gICAqL1xuICBleHBvcnQgY2xhc3MgY3NtU3RyaW5nIHtcbiAgICAvKipcbiAgICAgKiDmloflrZfliJfjgpLlvozmlrnjgavov73liqDjgZnjgotcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjIOi/veWKoOOBmeOCi+aWh+Wtl+WIl1xuICAgICAqIEByZXR1cm4g5pu05paw44GV44KM44Gf5paH5a2X5YiXXG4gICAgICovXG4gICAgcHVibGljIGFwcGVuZChjOiBzdHJpbmcsIGxlbmd0aD86IG51bWJlcik6IGNzbVN0cmluZyB7XG4gICAgICB0aGlzLnMgKz0gbGVuZ3RoICE9PSB1bmRlZmluZWQgPyBjLnN1YnN0cigwLCBsZW5ndGgpIDogYztcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5paH5a2X44K144Kk44K644KS5ouh5by144GX44Gm5paH5a2X44KS5Z+L44KB44KLXG4gICAgICogQHBhcmFtIGxlbmd0aCAgICDmi6HlvLXjgZnjgovmloflrZfmlbBcbiAgICAgKiBAcGFyYW0gdiAgICAgICAgIOWfi+OCgeOCi+aWh+Wtl1xuICAgICAqIEByZXR1cm4g5pu05paw44GV44KM44Gf5paH5a2X5YiXXG4gICAgICovXG4gICAgcHVibGljIGV4cGFuc2lvbihsZW5ndGg6IG51bWJlciwgdjogc3RyaW5nKTogY3NtU3RyaW5nIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5hcHBlbmQodik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOaWh+Wtl+WIl+OBrumVt+OBleOCkuODkOOCpOODiOaVsOOBp+WPluW+l+OBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRCeXRlcygpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLnMpLnJlcGxhY2UoLyUuLi9nLCAneCcpLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmloflrZfliJfjga7plbfjgZXjgpLov5TjgZlcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TGVuZ3RoKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5zLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmloflrZfliJfmr5TovIMgPFxuICAgICAqIEBwYXJhbSBzIOavlOi8g+OBmeOCi+aWh+Wtl+WIl1xuICAgICAqIEByZXR1cm4gdHJ1ZTogICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44KI44KK5bCP44GV44GEXG4gICAgICogQHJldHVybiBmYWxzZTogICDmr5TovIPjgZnjgovmloflrZfliJfjgojjgorlpKfjgY3jgYRcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNMZXNzKHM6IGNzbVN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMucyA8IHMucztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmloflrZfliJfmr5TovIMgPlxuICAgICAqIEBwYXJhbSBzIOavlOi8g+OBmeOCi+aWh+Wtl+WIl1xuICAgICAqIEByZXR1cm4gdHJ1ZTogICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44KI44KK5aSn44GN44GEXG4gICAgICogQHJldHVybiBmYWxzZTogICDmr5TovIPjgZnjgovmloflrZfliJfjgojjgorlsI/jgZXjgYRcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNHcmVhdChzOiBjc21TdHJpbmcpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLnMgPiBzLnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5paH5a2X5YiX5q+U6LyDID09XG4gICAgICogQHBhcmFtIHMg5q+U6LyD44GZ44KL5paH5a2X5YiXXG4gICAgICogQHJldHVybiB0cnVlOiAgICDmr5TovIPjgZnjgovmloflrZfliJfjgajnrYnjgZfjgYRcbiAgICAgKiBAcmV0dXJuIGZhbHNlOiAgIOavlOi8g+OBmeOCi+aWh+Wtl+WIl+OBqOeVsOOBquOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBpc0VxdWFsKHM6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMucyA9PSBzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOaWh+Wtl+WIl+OBjOepuuOBi+OBqeOBhuOBi1xuICAgICAqIEByZXR1cm4gdHJ1ZTog56m644Gu5paH5a2X5YiXXG4gICAgICogQHJldHVybiBmYWxzZTog5YCk44GM6Kit5a6a44GV44KM44Gm44GE44KLXG4gICAgICovXG4gICAgcHVibGljIGlzRW1wdHkoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdGhpcy5zLmxlbmd0aCA9PSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihzOiBzdHJpbmcpIHtcbiAgICAgIHRoaXMucyA9IHM7XG4gICAgfVxuXG4gICAgczogc3RyaW5nO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21Mb2dEZWJ1ZyB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWRlYnVnJztcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICogS2V5LVZhbHVl44Gu44Oa44Ki44KS5a6a576p44GZ44KL44Kv44Op44K5XG4gICAqIGNzbU1hcOOCr+ODqeOCueOBruWGhemDqOODh+ODvOOCv+OBp+S9v+eUqOOBmeOCi+OAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIGNzbVBhaXI8X0tleVQsIF9WYWxUPiB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICogQHBhcmFtIGtleSBLZXnjgajjgZfjgabjgrvjg4Pjg4jjgZnjgovlgKRcbiAgICAgKiBAcGFyYW0gdmFsdWUgVmFsdWXjgajjgZfjgabjgrvjg4Pjg4jjgZnjgovlgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3Ioa2V5PzogX0tleVQsIHZhbHVlPzogX1ZhbFQpIHtcbiAgICAgIHRoaXMuZmlyc3QgPSBrZXkgPT0gdW5kZWZpbmVkID8gbnVsbCA6IGtleTtcblxuICAgICAgdGhpcy5zZWNvbmQgPSB2YWx1ZSA9PSB1bmRlZmluZWQgPyBudWxsIDogdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIGZpcnN0OiBfS2V5VDsgLy8ga2V544Go44GX44Gm55So44GE44KL5aSJ5pWwXG4gICAgcHVibGljIHNlY29uZDogX1ZhbFQ7IC8vIHZhbHVl44Go44GX44Gm55So44GE44KL5aSJ5pWwXG4gIH1cblxuICAvKipcbiAgICog44Oe44OD44OX5Z6LXG4gICAqL1xuICBleHBvcnQgY2xhc3MgY3NtTWFwPF9LZXlULCBfVmFsVD4ge1xuICAgIC8qKlxuICAgICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqIEBwYXJhbSBzaXplIOWIneacn+WMluaZgueCueOBp+eiuuS/neOBmeOCi+OCteOCpOOCulxuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihzaXplPzogbnVtYmVyKSB7XG4gICAgICBpZiAoc2l6ZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHNpemUgPCAxKSB7XG4gICAgICAgICAgdGhpcy5fa2V5VmFsdWVzID0gW107XG4gICAgICAgICAgdGhpcy5fZHVtbXlWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fa2V5VmFsdWVzID0gbmV3IEFycmF5KHNpemUpO1xuICAgICAgICAgIHRoaXMuX3NpemUgPSBzaXplO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9rZXlWYWx1ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5fZHVtbXlWYWx1ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3NpemUgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODh+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHB1YmxpYyByZWxlYXNlKCkge1xuICAgICAgdGhpcy5jbGVhcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCreODvOOCkui/veWKoOOBmeOCi1xuICAgICAqIEBwYXJhbSBrZXkg5paw44Gf44Gr6L+95Yqg44GZ44KL44Kt44O8XG4gICAgICovXG4gICAgcHVibGljIGFwcGVuZEtleShrZXk6IF9LZXlUKTogdm9pZCB7XG4gICAgICAvLyDmlrDjgZfjgY9LZXkvVmFsdWXjga7jg5rjgqLjgpLkvZzjgotcbiAgICAgIHRoaXMucHJlcGFyZUNhcGFjaXR5KHRoaXMuX3NpemUgKyAxLCBmYWxzZSk7IC8vIDHjgaTku6XkuIrlhaXjgovpmpnplpPjgpLkvZzjgotcbiAgICAgIC8vIOaWsOOBl+OBhGtleS92YWx1ZeOBruOCpOODs+ODh+ODg+OCr+OCueOBr19zaXplXG5cbiAgICAgIHRoaXMuX2tleVZhbHVlc1t0aGlzLl9zaXplXSA9IG5ldyBjc21QYWlyPF9LZXlULCBfVmFsVD4oa2V5KTtcbiAgICAgIHRoaXMuX3NpemUgKz0gMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmt7vlrZfmvJTnrpflrZBba2V5XeOBruOCquODvOODkOODvOODreODvOODiShnZXQpXG4gICAgICogQHBhcmFtIGtleSDmt7vlrZfjgYvjgonnibnlrprjgZXjgozjgotWYWx1ZeWApFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRWYWx1ZShrZXk6IF9LZXlUKTogX1ZhbFQge1xuICAgICAgbGV0IGZvdW5kID0gLTE7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fc2l6ZTsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzLl9rZXlWYWx1ZXNbaV0uZmlyc3QgPT0ga2V5KSB7XG4gICAgICAgICAgZm91bmQgPSBpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmb3VuZCA+PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9rZXlWYWx1ZXNbZm91bmRdLnNlY29uZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYXBwZW5kS2V5KGtleSk7IC8vIOaWsOimj+OCreODvOOCkui/veWKoFxuICAgICAgICByZXR1cm4gdGhpcy5fa2V5VmFsdWVzW3RoaXMuX3NpemUgLSAxXS5zZWNvbmQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5re75a2X5ryU566X5a2QW2tleV3jga7jgqrjg7zjg5Djg7zjg63jg7zjg4koc2V0KVxuICAgICAqIEBwYXJhbSBrZXkg5re75a2X44GL44KJ54m55a6a44GV44KM44KLVmFsdWXlgKRcbiAgICAgKiBAcGFyYW0gdmFsdWUg5Luj5YWl44GZ44KLVmFsdWXlgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0VmFsdWUoa2V5OiBfS2V5VCwgdmFsdWU6IF9WYWxUKTogdm9pZCB7XG4gICAgICBsZXQgZm91bmQgPSAtMTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9zaXplOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXMuX2tleVZhbHVlc1tpXS5maXJzdCA9PSBrZXkpIHtcbiAgICAgICAgICBmb3VuZCA9IGk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZvdW5kID49IDApIHtcbiAgICAgICAgdGhpcy5fa2V5VmFsdWVzW2ZvdW5kXS5zZWNvbmQgPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYXBwZW5kS2V5KGtleSk7IC8vIOaWsOimj+OCreODvOOCkui/veWKoFxuICAgICAgICB0aGlzLl9rZXlWYWx1ZXNbdGhpcy5fc2l6ZSAtIDFdLnNlY29uZCA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOW8leaVsOOBp+a4oeOBl+OBn0tleeOCkuaMgeOBpOimgee0oOOBjOWtmOWcqOOBmeOCi+OBi1xuICAgICAqIEBwYXJhbSBrZXkg5a2Y5Zyo44KS56K66KqN44GZ44KLa2V5XG4gICAgICogQHJldHVybiB0cnVlIOW8leaVsOOBp+a4oeOBl+OBn2tleeOCkuaMgeOBpOimgee0oOOBjOWtmOWcqOOBmeOCi1xuICAgICAqIEByZXR1cm4gZmFsc2Ug5byV5pWw44Gn5rih44GX44Gfa2V544KS5oyB44Gk6KaB57Sg44GM5a2Y5Zyo44GX44Gq44GEXG4gICAgICovXG4gICAgcHVibGljIGlzRXhpc3Qoa2V5OiBfS2V5VCk6IGJvb2xlYW4ge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9zaXplOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXMuX2tleVZhbHVlc1tpXS5maXJzdCA9PSBrZXkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGtleVZhbHVl44Gu44Od44Kk44Oz44K/44KS5YWo44Gm6Kej5pS+44GZ44KLXG4gICAgICovXG4gICAgcHVibGljIGNsZWFyKCk6IHZvaWQge1xuICAgICAgdGhpcy5fa2V5VmFsdWVzID0gdm9pZCAwO1xuICAgICAgdGhpcy5fa2V5VmFsdWVzID0gbnVsbDtcbiAgICAgIHRoaXMuX2tleVZhbHVlcyA9IFtdO1xuXG4gICAgICB0aGlzLl9zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjg4bjg4rjga7jgrXjgqTjgrrjgpLlj5blvpfjgZnjgotcbiAgICAgKlxuICAgICAqIEByZXR1cm4g44Kz44Oz44OG44OK44Gu44K144Kk44K6XG4gICAgICovXG4gICAgcHVibGljIGdldFNpemUoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9zaXplO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+ODs+ODhuODiuOBruOCreODo+ODkeOCt+ODhuOCo+OCkueiuuS/neOBmeOCi1xuICAgICAqIEBwYXJhbSBuZXdTaXplIOaWsOOBn+OBquOCreODo+ODkeOCt+ODhuOCo+OAguW8leaVsOOBruWApOOBjOePvuWcqOOBruOCteOCpOOCuuacqua6gOOBruWgtOWQiOOBr+S9leOCguOBl+OBquOBhOOAglxuICAgICAqIEBwYXJhbSBmaXRUb1NpemUgdHJ1ZeOBquOCieaMh+WumuOBl+OBn+OCteOCpOOCuuOBq+WQiOOCj+OBm+OCi+OAgmZhbHNl44Gq44KJ44K144Kk44K644KSMuWAjeeiuuS/neOBl+OBpuOBiuOBj+OAglxuICAgICAqL1xuICAgIHB1YmxpYyBwcmVwYXJlQ2FwYWNpdHkobmV3U2l6ZTogbnVtYmVyLCBmaXRUb1NpemU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgIGlmIChuZXdTaXplID4gdGhpcy5fa2V5VmFsdWVzLmxlbmd0aCkge1xuICAgICAgICBpZiAodGhpcy5fa2V5VmFsdWVzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgaWYgKCFmaXRUb1NpemUgJiYgbmV3U2l6ZSA8IGNzbU1hcC5EZWZhdWx0U2l6ZSlcbiAgICAgICAgICAgIG5ld1NpemUgPSBjc21NYXAuRGVmYXVsdFNpemU7XG4gICAgICAgICAgdGhpcy5fa2V5VmFsdWVzLmxlbmd0aCA9IG5ld1NpemU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFmaXRUb1NpemUgJiYgbmV3U2l6ZSA8IHRoaXMuX2tleVZhbHVlcy5sZW5ndGggKiAyKVxuICAgICAgICAgICAgbmV3U2l6ZSA9IHRoaXMuX2tleVZhbHVlcy5sZW5ndGggKiAyO1xuICAgICAgICAgIHRoaXMuX2tleVZhbHVlcy5sZW5ndGggPSBuZXdTaXplO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44OG44OK44Gu5YWI6aCt6KaB57Sg44KS6L+U44GZXG4gICAgICovXG4gICAgcHVibGljIGJlZ2luKCk6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4ge1xuICAgICAgY29uc3QgaXRlOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+ID0gbmV3IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4odGhpcywgMCk7XG4gICAgICByZXR1cm4gaXRlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+ODs+ODhuODiuOBrue1guerr+imgee0oOOCkui/lOOBmVxuICAgICAqL1xuICAgIHB1YmxpYyBlbmQoKTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiB7XG4gICAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4gPSBuZXcgaXRlcmF0b3I8X0tleVQsIF9WYWxUPihcbiAgICAgICAgdGhpcyxcbiAgICAgICAgdGhpcy5fc2l6ZVxuICAgICAgKTsgLy8g57WC5LqGXG4gICAgICByZXR1cm4gaXRlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+ODs+ODhuODiuOBi+OCieimgee0oOOCkuWJiumZpOOBmeOCi1xuICAgICAqXG4gICAgICogQHBhcmFtIGl0ZSDliYrpmaTjgZnjgovopoHntKBcbiAgICAgKi9cbiAgICBwdWJsaWMgZXJhc2UoaXRlOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiB7XG4gICAgICBjb25zdCBpbmRleDogbnVtYmVyID0gaXRlLl9pbmRleDtcbiAgICAgIGlmIChpbmRleCA8IDAgfHwgdGhpcy5fc2l6ZSA8PSBpbmRleCkge1xuICAgICAgICByZXR1cm4gaXRlOyAvLyDliYrpmaTnr4Tlm7LlpJZcbiAgICAgIH1cblxuICAgICAgLy8g5YmK6ZmkXG4gICAgICB0aGlzLl9rZXlWYWx1ZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIC0tdGhpcy5fc2l6ZTtcblxuICAgICAgY29uc3QgaXRlMjogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiA9IG5ldyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KFxuICAgICAgICB0aGlzLFxuICAgICAgICBpbmRleFxuICAgICAgKTsgLy8g57WC5LqGXG4gICAgICByZXR1cm4gaXRlMjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjg4bjg4rjga7lgKTjgpIzMuODk+ODg+ODiOespuWPt+S7mOOBjeaVtOaVsOWei+OBp+ODgOODs+ODl+OBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBkdW1wQXNJbnQoKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3NpemU7IGkrKykge1xuICAgICAgICBDdWJpc21Mb2dEZWJ1ZygnezB9ICwnLCB0aGlzLl9rZXlWYWx1ZXNbaV0pO1xuICAgICAgICBDdWJpc21Mb2dEZWJ1ZygnXFxuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBEZWZhdWx0U2l6ZSA9IDEwOyAvLyDjgrPjg7Pjg4bjg4rjga7liJ3mnJ/ljJbjga7jg4fjg5Xjgqnjg6vjg4jjgrXjgqTjgrpcbiAgICBwdWJsaWMgX2tleVZhbHVlczogY3NtUGFpcjxfS2V5VCwgX1ZhbFQ+W107IC8vIGtleS12YWx1ZeODmuOCouOBrumFjeWIl1xuICAgIHB1YmxpYyBfZHVtbXlWYWx1ZTogX1ZhbFQ7IC8vIOepuuOBruWApOOCkui/lOOBmeeCuuOBruODgOODn+ODvFxuICAgIHB1YmxpYyBfc2l6ZTogbnVtYmVyOyAvLyDjgrPjg7Pjg4bjg4rjga7opoHntKDmlbBcbiAgfVxuXG4gIC8qKlxuICAgKiBjc21NYXA8VD7jga7jgqTjg4bjg6zjg7zjgr9cbiAgICovXG4gIGV4cG9ydCBjbGFzcyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih2PzogY3NtTWFwPF9LZXlULCBfVmFsVD4sIGlkeD86IG51bWJlcikge1xuICAgICAgdGhpcy5fbWFwID0gdiAhPSB1bmRlZmluZWQgPyB2IDogbmV3IGNzbU1hcDxfS2V5VCwgX1ZhbFQ+KCk7XG5cbiAgICAgIHRoaXMuX2luZGV4ID0gaWR4ICE9IHVuZGVmaW5lZCA/IGlkeCA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogPea8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQoaXRlOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiB7XG4gICAgICB0aGlzLl9pbmRleCA9IGl0ZS5faW5kZXg7XG4gICAgICB0aGlzLl9tYXAgPSBpdGUuX21hcDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWJjee9ruOBjSsr5ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXG4gICAgICovXG4gICAgcHVibGljIHByZUluY3JlbWVudCgpOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgICAgICsrdGhpcy5faW5kZXg7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDliY3nva7jgY0tLea8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxuICAgICAqL1xuICAgIHB1YmxpYyBwcmVEZWNyZW1lbnQoKTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiB7XG4gICAgICAtLXRoaXMuX2luZGV4O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5b6M572u44GNKyvmvJTnrpflrZDjga7jgqrjg7zjg5Djg7zjg63jg7zjg4lcbiAgICAgKi9cbiAgICBwdWJsaWMgaW5jcmVtZW50KCk6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4ge1xuICAgICAgY29uc3QgaXRlb2xkID0gbmV3IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4odGhpcy5fbWFwLCB0aGlzLl9pbmRleCsrKTsgLy8g5Y+k44GE5YCk44KS5L+d5a2YXG4gICAgICB0aGlzLl9tYXAgPSBpdGVvbGQuX21hcDtcbiAgICAgIHRoaXMuX2luZGV4ID0gaXRlb2xkLl9pbmRleDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOW+jOe9ruOBjS0t5ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXG4gICAgICovXG4gICAgcHVibGljIGRlY3JlbWVudCgpOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgICAgIGNvbnN0IGl0ZW9sZCA9IG5ldyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KHRoaXMuX21hcCwgdGhpcy5faW5kZXgpOyAvLyDlj6TjgYTlgKTjgpLkv53lrZhcbiAgICAgIHRoaXMuX21hcCA9IGl0ZW9sZC5fbWFwO1xuICAgICAgdGhpcy5faW5kZXggPSBpdGVvbGQuX2luZGV4O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogKua8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxuICAgICAqL1xuICAgIHB1YmxpYyBwdHIoKTogY3NtUGFpcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgICAgIHJldHVybiB0aGlzLl9tYXAuX2tleVZhbHVlc1t0aGlzLl9pbmRleF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIT3mvJTnrpdcbiAgICAgKi9cbiAgICBwdWJsaWMgbm90RXF1YWwoaXRlOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdGhpcy5faW5kZXggIT0gaXRlLl9pbmRleCB8fCB0aGlzLl9tYXAgIT0gaXRlLl9tYXA7XG4gICAgfVxuXG4gICAgX2luZGV4OiBudW1iZXI7IC8vIOOCs+ODs+ODhuODiuOBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgIF9tYXA6IGNzbU1hcDxfS2V5VCwgX1ZhbFQ+OyAvLyDjgrPjg7Pjg4bjg4pcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1hdGggfSBmcm9tICcuLi9tYXRoL2N1YmlzbW1hdGgnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vdGlvbnF1ZXVlZW50cnkgfSBmcm9tICcuL2N1YmlzbW1vdGlvbnF1ZXVlZW50cnknO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDU01fQVNTRVJUIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtZGVidWcnO1xuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XG5pbXBvcnQgY3NtU3RyaW5nID0gY3Ntc3RyaW5nLmNzbVN0cmluZztcbmltcG9ydCBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gY3ViaXNtbW90aW9ucXVldWVlbnRyeS5DdWJpc21Nb3Rpb25RdWV1ZUVudHJ5O1xuaW1wb3J0IEN1YmlzbU1vZGVsID0gY3ViaXNtbW9kZWwuQ3ViaXNtTW9kZWw7XG5pbXBvcnQgQ3ViaXNtTWF0aCA9IGN1YmlzbW1hdGguQ3ViaXNtTWF0aDtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKiog44Oi44O844K344On44Oz5YaN55Sf57WC5LqG44Kz44O844Or44OQ44OD44Kv6Zai5pWw5a6a576pICovXG4gIGV4cG9ydCB0eXBlIEZpbmlzaGVkTW90aW9uQ2FsbGJhY2sgPSAoc2VsZjogQUN1YmlzbU1vdGlvbikgPT4gdm9pZDtcblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu5oq96LGh5Z+65bqV44Kv44Op44K5XG4gICAqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruaKveixoeWfuuW6leOCr+ODqeOCueOAgk1vdGlvblF1ZXVlTWFuYWdlcuOBq+OCiOOBo+OBpuODouODvOOCt+ODp+ODs+OBruWGjeeUn+OCkueuoeeQhuOBmeOCi+OAglxuICAgKi9cbiAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFDdWJpc21Nb3Rpb24ge1xuICAgIC8qKlxuICAgICAqIOOCpOODs+OCueOCv+ODs+OCueOBruegtOajhFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZGVsZXRlKG1vdGlvbjogQUN1YmlzbU1vdGlvbik6IHZvaWQge1xuICAgICAgbW90aW9uLnJlbGVhc2UoKTtcbiAgICAgIG1vdGlvbiA9IHZvaWQgMDtcbiAgICAgIG1vdGlvbiA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5fZmFkZUluU2Vjb25kcyA9IC0xLjA7XG4gICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9IC0xLjA7XG4gICAgICB0aGlzLl93ZWlnaHQgPSAxLjA7XG4gICAgICB0aGlzLl9vZmZzZXRTZWNvbmRzID0gMC4wOyAvLyDlho3nlJ/jga7plovlp4vmmYLliLtcbiAgICAgIHRoaXMuX2ZpcmVkRXZlbnRWYWx1ZXMgPSBuZXcgY3NtVmVjdG9yPGNzbVN0cmluZz4oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICAgIHRoaXMuX3dlaWdodCA9IDAuMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr9cbiAgICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXG4gICAgICogQHBhcmFtIG1vdGlvblF1ZXVlRW50cnkgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2Vy44Gn566h55CG44GV44KM44Gm44GE44KL44Oi44O844K344On44OzXG4gICAgICogQHBhcmFtIHVzZXJUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGVQYXJhbWV0ZXJzKFxuICAgICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgICAgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeSxcbiAgICAgIHVzZXJUaW1lU2Vjb25kczogbnVtYmVyXG4gICAgKTogdm9pZCB7XG4gICAgICBpZiAoIW1vdGlvblF1ZXVlRW50cnkuaXNBdmFpbGFibGUoKSB8fCBtb3Rpb25RdWV1ZUVudHJ5LmlzRmluaXNoZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghbW90aW9uUXVldWVFbnRyeS5pc1N0YXJ0ZWQoKSkge1xuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldElzU3RhcnRlZCh0cnVlKTtcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRTdGFydFRpbWUodXNlclRpbWVTZWNvbmRzIC0gdGhpcy5fb2Zmc2V0U2Vjb25kcyk7IC8vIOODouODvOOCt+ODp+ODs+OBrumWi+Wni+aZguWIu+OCkuiomOmMslxuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldEZhZGVJblN0YXJ0VGltZSh1c2VyVGltZVNlY29uZHMpOyAvLyDjg5Xjgqfjg7zjg4njgqTjg7Pjga7plovlp4vmmYLliLtcblxuICAgICAgICBjb25zdCBkdXJhdGlvbjogbnVtYmVyID0gdGhpcy5nZXREdXJhdGlvbigpO1xuXG4gICAgICAgIGlmIChtb3Rpb25RdWV1ZUVudHJ5LmdldEVuZFRpbWUoKSA8IDApIHtcbiAgICAgICAgICAvLyDplovlp4vjgZfjgabjgYTjgarjgYTjgYbjgaHjgavntYLkuoboqK3lrprjgZfjgabjgYTjgovloLTlkIjjgYzjgYLjgovjgIJcbiAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldEVuZFRpbWUoXG4gICAgICAgICAgICBkdXJhdGlvbiA8PSAwID8gLTEgOiBtb3Rpb25RdWV1ZUVudHJ5LmdldFN0YXJ0VGltZSgpICsgZHVyYXRpb25cbiAgICAgICAgICApO1xuICAgICAgICAgIC8vIGR1cmF0aW9uID09IC0xIOOBruWgtOWQiOOBr+ODq+ODvOODl+OBmeOCi1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxldCBmYWRlV2VpZ2h0OiBudW1iZXIgPSB0aGlzLl93ZWlnaHQ7IC8vIOePvuWcqOOBruWApOOBqOaOm+OBkeWQiOOCj+OBm+OCi+WJsuWQiFxuXG4gICAgICAvLy0tLS0g44OV44Kn44O844OJ44Kk44Oz44O744Ki44Km44OI44Gu5Yem55CGIC0tLS1cbiAgICAgIC8vIOWNmOe0lOOBquOCteOCpOODs+mWouaVsOOBp+OCpOODvOOCuOODs+OCsOOBmeOCi1xuICAgICAgY29uc3QgZmFkZUluOiBudW1iZXIgPVxuICAgICAgICB0aGlzLl9mYWRlSW5TZWNvbmRzID09IDAuMFxuICAgICAgICAgID8gMS4wXG4gICAgICAgICAgOiBDdWJpc21NYXRoLmdldEVhc2luZ1NpbmUoXG4gICAgICAgICAgICAgICh1c2VyVGltZVNlY29uZHMgLSBtb3Rpb25RdWV1ZUVudHJ5LmdldEZhZGVJblN0YXJ0VGltZSgpKSAvXG4gICAgICAgICAgICAgICAgdGhpcy5fZmFkZUluU2Vjb25kc1xuICAgICAgICAgICAgKTtcblxuICAgICAgY29uc3QgZmFkZU91dDogbnVtYmVyID1cbiAgICAgICAgdGhpcy5fZmFkZU91dFNlY29uZHMgPT0gMC4wIHx8IG1vdGlvblF1ZXVlRW50cnkuZ2V0RW5kVGltZSgpIDwgMC4wXG4gICAgICAgICAgPyAxLjBcbiAgICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZShcbiAgICAgICAgICAgICAgKG1vdGlvblF1ZXVlRW50cnkuZ2V0RW5kVGltZSgpIC0gdXNlclRpbWVTZWNvbmRzKSAvXG4gICAgICAgICAgICAgICAgdGhpcy5fZmFkZU91dFNlY29uZHNcbiAgICAgICAgICAgICk7XG5cbiAgICAgIGZhZGVXZWlnaHQgPSBmYWRlV2VpZ2h0ICogZmFkZUluICogZmFkZU91dDtcblxuICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRTdGF0ZSh1c2VyVGltZVNlY29uZHMsIGZhZGVXZWlnaHQpO1xuXG4gICAgICBDU01fQVNTRVJUKDAuMCA8PSBmYWRlV2VpZ2h0ICYmIGZhZGVXZWlnaHQgPD0gMS4wKTtcblxuICAgICAgLy8tLS0tIOWFqOOBpuOBruODkeODqeODoeODvOOCv0lE44KS44Or44O844OX44GZ44KLIC0tLS1cbiAgICAgIHRoaXMuZG9VcGRhdGVQYXJhbWV0ZXJzKFxuICAgICAgICBtb2RlbCxcbiAgICAgICAgdXNlclRpbWVTZWNvbmRzLFxuICAgICAgICBmYWRlV2VpZ2h0LFxuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5XG4gICAgICApO1xuXG4gICAgICAvLyDlvozlh6bnkIZcbiAgICAgIC8vIOe1guS6huaZguWIu+OCkumBjuOBjuOBn+OCiee1guS6huODleODqeOCsOOCkueri+OBpuOCiyhDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIpXG4gICAgICBpZiAoXG4gICAgICAgIG1vdGlvblF1ZXVlRW50cnkuZ2V0RW5kVGltZSgpID4gMCAmJlxuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LmdldEVuZFRpbWUoKSA8IHVzZXJUaW1lU2Vjb25kc1xuICAgICAgKSB7XG4gICAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0SXNGaW5pc2hlZCh0cnVlKTsgLy8g57WC5LqGXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OV44Kn44O844OJ44Kk44Oz44Gu5pmC6ZaT44KS6Kit5a6a44GZ44KLXG4gICAgICogQHBhcmFtIGZhZGVJblNlY29uZHMg44OV44Kn44O844OJ44Kk44Oz44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0RmFkZUluVGltZShmYWRlSW5TZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX2ZhZGVJblNlY29uZHMgPSBmYWRlSW5TZWNvbmRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODleOCp+ODvOODieOCouOCpuODiOOBruaZgumWk+OCkuioreWumuOBmeOCi1xuICAgICAqIEBwYXJhbSBmYWRlT3V0U2Vjb25kcyDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRGYWRlT3V0VGltZShmYWRlT3V0U2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9IGZhZGVPdXRTZWNvbmRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk+OBruWPluW+l1xuICAgICAqIEByZXR1cm4g44OV44Kn44O844OJ44Ki44Km44OI44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RmFkZU91dFRpbWUoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9mYWRlT3V0U2Vjb25kcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpPjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCpOODs+OBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIGdldEZhZGVJblRpbWUoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9mYWRlSW5TZWNvbmRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+mBqeeUqOOBrumHjeOBv+OBruioreWumlxuICAgICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/77yIMC4wIC0gMS4w77yJXG4gICAgICovXG4gICAgcHVibGljIHNldFdlaWdodCh3ZWlnaHQ6IG51bWJlcik6IHZvaWQge1xuICAgICAgdGhpcy5fd2VpZ2h0ID0gd2VpZ2h0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+mBqeeUqOOBrumHjeOBv+OBruWPluW+l1xuICAgICAqIEByZXR1cm4g6YeN44G/77yIMC4wIC0gMS4w77yJXG4gICAgICovXG4gICAgcHVibGljIGdldFdlaWdodCgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX3dlaWdodDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7plbfjgZXjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBrumVt+OBlVvnp5JdXG4gICAgICpcbiAgICAgKiBAbm90ZSDjg6vjg7zjg5fjga7mmYLjga/jgIwtMeOAjeOAglxuICAgICAqICAgICAgIOODq+ODvOODl+OBp+OBquOBhOWgtOWQiOOBr+OAgeOCquODvOODkOODvOODqeOCpOODieOBmeOCi+OAglxuICAgICAqICAgICAgIOato+OBruWApOOBruaZguOBr+WPluW+l+OBleOCjOOCi+aZgumWk+OBp+e1guS6huOBmeOCi+OAglxuICAgICAqICAgICAgIOOAjC0x44CN44Gu5pmC44Gv5aSW6YOo44GL44KJ5YGc5q2i5ZG95Luk44GM44Gq44GE6ZmQ44KK57WC44KP44KJ44Gq44GE5Yem55CG44Go44Gq44KL44CCXG4gICAgICovXG4gICAgcHVibGljIGdldER1cmF0aW9uKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gLTEuMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jg6vjg7zjg5cx5Zue5YiG44Gu6ZW344GV44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7jg6vjg7zjg5fkuIDlm57liIbjga7plbfjgZVb56eSXVxuICAgICAqXG4gICAgICogQG5vdGUg44Or44O844OX44GX44Gq44GE5aC05ZCI44Gv44CBZ2V0RHVyYXRpb24oKeOBqOWQjOOBmOWApOOCkui/lOOBmVxuICAgICAqICAgICAgIOODq+ODvOODl+S4gOWbnuWIhuOBrumVt+OBleOBjOWumue+qeOBp+OBjeOBquOBhOWgtOWQiCjjg5fjg63jgrDjg6njg6DnmoTjgavli5XjgY3ntprjgZHjgovjgrXjg5bjgq/jg6njgrnjgarjgakp44Gu5aC05ZCI44Gv44CMLTHjgI3jgpLov5TjgZlcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TG9vcER1cmF0aW9uKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gLTEuMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/jga7plovlp4vmmYLliLvjga7oqK3lrppcbiAgICAgKiBAcGFyYW0gb2Zmc2V0U2Vjb25kcyDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/jga7plovlp4vmmYLliLtb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRPZmZzZXRUaW1lKG9mZnNldFNlY29uZHM6IG51bWJlcik6IHZvaWQge1xuICAgICAgdGhpcy5fb2Zmc2V0U2Vjb25kcyA9IG9mZnNldFNlY29uZHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/5pu05pawXG4gICAgICpcbiAgICAgKiDjgqTjg5njg7Pjg4jnmbrngavjga7jg4Hjgqfjg4Pjgq/jgIJcbiAgICAgKiDlhaXlipvjgZnjgovmmYLplpPjga/lkbzjgbDjgozjgovjg6Ljg7zjgrfjg6fjg7Pjgr/jgqTjg5/jg7PjgrDjgpLvvJDjgajjgZfjgZ/np5LmlbDjgafooYzjgYbjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBiZWZvcmVDaGVja1RpbWVTZWNvbmRzIOWJjeWbnuOBruOCpOODmeODs+ODiOODgeOCp+ODg+OCr+aZgumWk1vnp5JdXG4gICAgICogQHBhcmFtIG1vdGlvblRpbWVTZWNvbmRzIOS7iuWbnuOBruWGjeeUn+aZgumWk1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIGdldEZpcmVkRXZlbnQoXG4gICAgICBiZWZvcmVDaGVja1RpbWVTZWNvbmRzOiBudW1iZXIsXG4gICAgICBtb3Rpb25UaW1lU2Vjb25kczogbnVtYmVyXG4gICAgKTogY3NtVmVjdG9yPGNzbVN0cmluZz4ge1xuICAgICAgcmV0dXJuIHRoaXMuX2ZpcmVkRXZlbnRWYWx1ZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44KS5pu05paw44GX44Gm44CB44Oi44OH44Or44Gr44OR44Op44Oh44O844K/5YCk44KS5Y+N5pig44GZ44KLXG4gICAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xuICAgICAqIEBwYXJhbSB1c2VyVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cbiAgICAgKiBAcGFyYW0gd2VpZ2h0IOODouODvOOCt+ODp+ODs+OBrumHjeOBv1xuICAgICAqIEBwYXJhbSBtb3Rpb25RdWV1ZUVudHJ5IEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcuOBp+euoeeQhuOBleOCjOOBpuOBhOOCi+ODouODvOOCt+ODp+ODs1xuICAgICAqIEByZXR1cm4gdHJ1ZSDjg6Ljg4fjg6vjgbjjg5Hjg6njg6Hjg7zjgr/lgKTjga7lj43mmKDjgYLjgopcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOODouODh+ODq+OBuOOBruODkeODqeODoeODvOOCv+WApOOBruWPjeaYoOOBquOBl++8iOODouODvOOCt+ODp+ODs+OBruWkieWMluOBquOBl++8iVxuICAgICAqL1xuICAgIHB1YmxpYyBhYnN0cmFjdCBkb1VwZGF0ZVBhcmFtZXRlcnMoXG4gICAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXG4gICAgICB1c2VyVGltZVNlY29uZHM6IG51bWJlcixcbiAgICAgIHdlaWdodDogbnVtYmVyLFxuICAgICAgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeVxuICAgICk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/jga7nmbvpjLJcbiAgICAgKlxuICAgICAqIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huOCs+ODvOODq+ODkOODg+OCr+OCkueZu+mMsuOBmeOCi+OAglxuICAgICAqIGlzRmluaXNoZWTjg5Xjg6njgrDjgpLoqK3lrprjgZnjgovjgr/jgqTjg5/jg7PjgrDjgaflkbzjgbPlh7rjgZXjgozjgovjgIJcbiAgICAgKiDku6XkuIvjga7nirbmhYvjga7pmpvjgavjga/lkbzjgbPlh7rjgZXjgozjgarjgYQ6XG4gICAgICogICAxLiDlho3nlJ/kuK3jga7jg6Ljg7zjgrfjg6fjg7PjgYzjgIzjg6vjg7zjg5fjgI3jgajjgZfjgaboqK3lrprjgZXjgozjgabjgYTjgovjgajjgY1cbiAgICAgKiAgIDIuIOOCs+ODvOODq+ODkOODg+OCr+OBjOeZu+mMsuOBleOCjOOBpuOBhOOBquOBhOaZglxuICAgICAqXG4gICAgICogQHBhcmFtIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huOCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRGaW5pc2hlZE1vdGlvbkhhbmRsZXIgPSAoXG4gICAgICBvbkZpbmlzaGVkTW90aW9uSGFuZGxlcjogRmluaXNoZWRNb3Rpb25DYWxsYmFja1xuICAgICkgPT4gKHRoaXMuX29uRmluaXNoZWRNb3Rpb24gPSBvbkZpbmlzaGVkTW90aW9uSGFuZGxlcik7XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/jga7lj5blvpdcbiAgICAgKlxuICAgICAqIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huOCs+ODvOODq+ODkOODg+OCr+OCkuWPluW+l+OBmeOCi+OAglxuICAgICAqXG4gICAgICogQHJldHVybiDnmbvpjLLjgZXjgozjgabjgYTjgovjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RmluaXNoZWRNb3Rpb25IYW5kbGVyID0gKCkgPT4gdGhpcy5fb25GaW5pc2hlZE1vdGlvbjtcblxuICAgIHB1YmxpYyBfZmFkZUluU2Vjb25kczogbnVtYmVyOyAvLyDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgIHB1YmxpYyBfZmFkZU91dFNlY29uZHM6IG51bWJlcjsgLy8g44OV44Kn44O844OJ44Ki44Km44OI44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgICBwdWJsaWMgX3dlaWdodDogbnVtYmVyOyAvLyDjg6Ljg7zjgrfjg6fjg7Pjga7ph43jgb9cbiAgICBwdWJsaWMgX29mZnNldFNlY29uZHM6IG51bWJlcjsgLy8g44Oi44O844K344On44Oz5YaN55Sf44Gu6ZaL5aeL5pmC6ZaTW+enkl1cblxuICAgIHB1YmxpYyBfZmlyZWRFdmVudFZhbHVlczogY3NtVmVjdG9yPGNzbVN0cmluZz47XG5cbiAgICAvLyDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICBwdWJsaWMgX29uRmluaXNoZWRNb3Rpb24/OiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtdmVjdG9yMiB9IGZyb20gJy4vY3ViaXNtdmVjdG9yMic7XG5pbXBvcnQgQ3ViaXNtVmVjdG9yMiA9IGN1YmlzbXZlY3RvcjIuQ3ViaXNtVmVjdG9yMjtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICog5pWw5YCk6KiI566X44Gq44Gp44Gr5L2/55So44GZ44KL44Om44O844OG44Kj44Oq44OG44Kj44Kv44Op44K5XG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtTWF0aCB7XG4gICAgLyoqXG4gICAgICog56ys5LiA5byV5pWw44Gu5YCk44KS5pyA5bCP5YCk44Go5pyA5aSn5YCk44Gu56+E5Zuy44Gr5Y+O44KB44Gf5YCk44KS6L+U44GZXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUg5Y+O44KB44KJ44KM44KL5YCkXG4gICAgICogQHBhcmFtIG1pbiAgIOevhOWbsuOBruacgOWwj+WApFxuICAgICAqIEBwYXJhbSBtYXggICDnr4Tlm7Ljga7mnIDlpKflgKRcbiAgICAgKiBAcmV0dXJuIOacgOWwj+WApOOBqOacgOWkp+WApOOBruevhOWbsuOBq+WPjuOCgeOBn+WApFxuICAgICAqL1xuICAgIHN0YXRpYyByYW5nZSh2YWx1ZTogbnVtYmVyLCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgaWYgKHZhbHVlIDwgbWluKSB7XG4gICAgICAgIHZhbHVlID0gbWluO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSA+IG1heCkge1xuICAgICAgICB2YWx1ZSA9IG1heDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCteOCpOODs+mWouaVsOOBruWApOOCkuaxguOCgeOCi1xuICAgICAqXG4gICAgICogQHBhcmFtIHgg6KeS5bqm5YCk77yI44Op44K444Ki44Oz77yJXG4gICAgICogQHJldHVybiDjgrXjgqTjg7PplqLmlbBzaW4oeCnjga7lgKRcbiAgICAgKi9cbiAgICBzdGF0aWMgc2luKHg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICByZXR1cm4gTWF0aC5zaW4oeCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44K144Kk44Oz6Zai5pWw44Gu5YCk44KS5rGC44KB44KLXG4gICAgICpcbiAgICAgKiBAcGFyYW0geCDop5LluqblgKQo44Op44K444Ki44OzKVxuICAgICAqIEByZXR1cm4g44Kz44K144Kk44Oz6Zai5pWwY29zKHgp44Gu5YCkXG4gICAgICovXG4gICAgc3RhdGljIGNvcyh4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIE1hdGguY29zKHgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWApOOBrue1tuWvvuWApOOCkuaxguOCgeOCi1xuICAgICAqXG4gICAgICogQHBhcmFtIHgg57W25a++5YCk44KS5rGC44KB44KL5YCkXG4gICAgICogQHJldHVybiDlgKTjga7ntbblr77lgKRcbiAgICAgKi9cbiAgICBzdGF0aWMgYWJzKHg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICByZXR1cm4gTWF0aC5hYnMoeCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5bmz5pa55qC5KOODq+ODvOODiCnjgpLmsYLjgoHjgotcbiAgICAgKiBAcGFyYW0geCAtPiDlubPmlrnmoLnjgpLmsYLjgoHjgovlgKRcbiAgICAgKiBAcmV0dXJuIOWApOOBruW5s+aWueaguVxuICAgICAqL1xuICAgIHN0YXRpYyBzcXJ0KHg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICByZXR1cm4gTWF0aC5zcXJ0KHgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCpOODvOOCuOODs+OCsOWHpueQhuOBleOCjOOBn+OCteOCpOODs+OCkuaxguOCgeOCi1xuICAgICAqIOODleOCp+ODvOODieOCpOODs+ODu+OCouOCpuODiOaZguOBruOCpOODvOOCuOODs+OCsOOBq+WIqeeUqOOBp+OBjeOCi1xuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIOOCpOODvOOCuOODs+OCsOOCkuihjOOBhuWApFxuICAgICAqIEByZXR1cm4g44Kk44O844K444Oz44Kw5Yem55CG44GV44KM44Gf44K144Kk44Oz5YCkXG4gICAgICovXG4gICAgc3RhdGljIGdldEVhc2luZ1NpbmUodmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgICBpZiAodmFsdWUgPCAwLjApIHtcbiAgICAgICAgcmV0dXJuIDAuMDtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPiAxLjApIHtcbiAgICAgICAgcmV0dXJuIDEuMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIDAuNSAtIDAuNSAqIHRoaXMuY29zKHZhbHVlICogTWF0aC5QSSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5aSn44GN44GE5pa544Gu5YCk44KS6L+U44GZXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGVmdCDlt6bovrrjga7lgKRcbiAgICAgKiBAcGFyYW0gcmlnaHQg5Y+z6L6644Gu5YCkXG4gICAgICogQHJldHVybiDlpKfjgY3jgYTmlrnjga7lgKRcbiAgICAgKi9cbiAgICBzdGF0aWMgbWF4KGxlZnQ6IG51bWJlciwgcmlnaHQ6IG51bWJlcik6IG51bWJlciB7XG4gICAgICByZXR1cm4gbGVmdCA+IHJpZ2h0ID8gbGVmdCA6IHJpZ2h0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWwj+OBleOBhOaWueOBruWApOOCkui/lOOBmVxuICAgICAqXG4gICAgICogQHBhcmFtIGxlZnQgIOW3pui+uuOBruWApFxuICAgICAqIEBwYXJhbSByaWdodCDlj7Povrrjga7lgKRcbiAgICAgKiBAcmV0dXJuIOWwj+OBleOBhOaWueOBruWApFxuICAgICAqL1xuICAgIHN0YXRpYyBtaW4obGVmdDogbnVtYmVyLCByaWdodDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiBsZWZ0ID4gcmlnaHQgPyByaWdodCA6IGxlZnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6KeS5bqm5YCk44KS44Op44K444Ki44Oz5YCk44Gr5aSJ5o+b44GZ44KLXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGVncmVlcyAgIOinkuW6puWApFxuICAgICAqIEByZXR1cm4g6KeS5bqm5YCk44GL44KJ5aSJ5o+b44GX44Gf44Op44K444Ki44Oz5YCkXG4gICAgICovXG4gICAgc3RhdGljIGRlZ3JlZXNUb1JhZGlhbihkZWdyZWVzOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIChkZWdyZWVzIC8gMTgwLjApICogTWF0aC5QSTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6njgrjjgqLjg7PlgKTjgpLop5LluqblgKTjgavlpInmj5vjgZnjgotcbiAgICAgKlxuICAgICAqIEBwYXJhbSByYWRpYW4gICAg44Op44K444Ki44Oz5YCkXG4gICAgICogQHJldHVybiDjg6njgrjjgqLjg7PlgKTjgYvjgonlpInmj5vjgZfjgZ/op5LluqblgKRcbiAgICAgKi9cbiAgICBzdGF0aWMgcmFkaWFuVG9EZWdyZWVzKHJhZGlhbjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiAocmFkaWFuICogMTgwLjApIC8gTWF0aC5QSTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDvvJLjgaTjga7jg5njgq/jg4jjg6vjgYvjgonjg6njgrjjgqLjg7PlgKTjgpLmsYLjgoHjgotcbiAgICAgKlxuICAgICAqIEBwYXJhbSBmcm9tICDlp4vngrnjg5njgq/jg4jjg6tcbiAgICAgKiBAcGFyYW0gdG8gICAg57WC54K544OZ44Kv44OI44OrXG4gICAgICogQHJldHVybiDjg6njgrjjgqLjg7PlgKTjgYvjgonmsYLjgoHjgZ/mlrnlkJHjg5njgq/jg4jjg6tcbiAgICAgKi9cbiAgICBzdGF0aWMgZGlyZWN0aW9uVG9SYWRpYW4oZnJvbTogQ3ViaXNtVmVjdG9yMiwgdG86IEN1YmlzbVZlY3RvcjIpOiBudW1iZXIge1xuICAgICAgY29uc3QgcTE6IG51bWJlciA9IE1hdGguYXRhbjIodG8ueSwgdG8ueCk7XG4gICAgICBjb25zdCBxMjogbnVtYmVyID0gTWF0aC5hdGFuMihmcm9tLnksIGZyb20ueCk7XG5cbiAgICAgIGxldCByZXQ6IG51bWJlciA9IHExIC0gcTI7XG5cbiAgICAgIHdoaWxlIChyZXQgPCAtTWF0aC5QSSkge1xuICAgICAgICByZXQgKz0gTWF0aC5QSSAqIDIuMDtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKHJldCA+IE1hdGguUEkpIHtcbiAgICAgICAgcmV0IC09IE1hdGguUEkgKiAyLjA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog77yS44Gk44Gu44OZ44Kv44OI44Or44GL44KJ6KeS5bqm5YCk44KS5rGC44KB44KLXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZnJvbSAg5aeL54K544OZ44Kv44OI44OrXG4gICAgICogQHBhcmFtIHRvICAgIOe1gueCueODmeOCr+ODiOODq1xuICAgICAqIEByZXR1cm4g6KeS5bqm5YCk44GL44KJ5rGC44KB44Gf5pa55ZCR44OZ44Kv44OI44OrXG4gICAgICovXG4gICAgc3RhdGljIGRpcmVjdGlvblRvRGVncmVlcyhmcm9tOiBDdWJpc21WZWN0b3IyLCB0bzogQ3ViaXNtVmVjdG9yMik6IG51bWJlciB7XG4gICAgICBjb25zdCByYWRpYW46IG51bWJlciA9IHRoaXMuZGlyZWN0aW9uVG9SYWRpYW4oZnJvbSwgdG8pO1xuICAgICAgbGV0IGRlZ3JlZTogbnVtYmVyID0gdGhpcy5yYWRpYW5Ub0RlZ3JlZXMocmFkaWFuKTtcblxuICAgICAgaWYgKHRvLnggLSBmcm9tLnggPiAwLjApIHtcbiAgICAgICAgZGVncmVlID0gLWRlZ3JlZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRlZ3JlZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6njgrjjgqLjg7PlgKTjgpLmlrnlkJHjg5njgq/jg4jjg6vjgavlpInmj5vjgZnjgovjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0b3RhbEFuZ2xlICAgIOODqeOCuOOCouODs+WApFxuICAgICAqIEByZXR1cm4g44Op44K444Ki44Oz5YCk44GL44KJ5aSJ5o+b44GX44Gf5pa55ZCR44OZ44Kv44OI44OrXG4gICAgICovXG5cbiAgICBzdGF0aWMgcmFkaWFuVG9EaXJlY3Rpb24odG90YWxBbmdsZTogbnVtYmVyKTogQ3ViaXNtVmVjdG9yMiB7XG4gICAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigpO1xuXG4gICAgICByZXQueCA9IHRoaXMuc2luKHRvdGFsQW5nbGUpO1xuICAgICAgcmV0LnkgPSB0aGlzLmNvcyh0b3RhbEFuZ2xlKTtcblxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge31cbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICogMuasoeWFg+ODmeOCr+ODiOODq+Wei1xuICAgKlxuICAgKiAy5qyh5YWD44OZ44Kv44OI44Or5Z6L44Gu5qmf6IO944KS5o+Q5L6b44GZ44KL44CCXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtVmVjdG9yMiB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyB4PzogbnVtYmVyLCBwdWJsaWMgeT86IG51bWJlcikge1xuICAgICAgdGhpcy54ID0geCA9PSB1bmRlZmluZWQgPyAwLjAgOiB4O1xuXG4gICAgICB0aGlzLnkgPSB5ID09IHVuZGVmaW5lZCA/IDAuMCA6IHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OZ44Kv44OI44Or44Gu5Yqg566XXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmVjdG9yMiDliqDnrpfjgZnjgovjg5njgq/jg4jjg6vlgKRcbiAgICAgKiBAcmV0dXJuIOWKoOeul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgYWRkKHZlY3RvcjI6IEN1YmlzbVZlY3RvcjIpOiBDdWJpc21WZWN0b3IyIHtcbiAgICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICAgIHJldC54ID0gdGhpcy54ICsgdmVjdG9yMi54O1xuICAgICAgcmV0LnkgPSB0aGlzLnkgKyB2ZWN0b3IyLnk7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODmeOCr+ODiOODq+OBrua4m+eul1xuICAgICAqXG4gICAgICogQHBhcmFtIHZlY3RvcjIg5rib566X44GZ44KL44OZ44Kv44OI44Or5YCkXG4gICAgICogQHJldHVybiDmuJvnrpfntZDmnpwg44OZ44Kv44OI44Or5YCkXG4gICAgICovXG4gICAgcHVibGljIHN1YnN0cmFjdCh2ZWN0b3IyOiBDdWJpc21WZWN0b3IyKTogQ3ViaXNtVmVjdG9yMiB7XG4gICAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgICByZXQueCA9IHRoaXMueCAtIHZlY3RvcjIueDtcbiAgICAgIHJldC55ID0gdGhpcy55IC0gdmVjdG9yMi55O1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5njgq/jg4jjg6vjga7kuZfnrpdcbiAgICAgKlxuICAgICAqIEBwYXJhbSB2ZWN0b3IyIOS5l+eul+OBmeOCi+ODmeOCr+ODiOODq+WApFxuICAgICAqIEByZXR1cm4g5LmX566X57WQ5p6cIOODmeOCr+ODiOODq+WApFxuICAgICAqL1xuICAgIHB1YmxpYyBtdWx0aXBseSh2ZWN0b3IyOiBDdWJpc21WZWN0b3IyKTogQ3ViaXNtVmVjdG9yMiB7XG4gICAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgICByZXQueCA9IHRoaXMueCAqIHZlY3RvcjIueDtcbiAgICAgIHJldC55ID0gdGhpcy55ICogdmVjdG9yMi55O1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5njgq/jg4jjg6vjga7kuZfnrpco44K544Kr44Op44O8KVxuICAgICAqXG4gICAgICogQHBhcmFtIHNjYWxhciDkuZfnrpfjgZnjgovjgrnjgqvjg6njg7zlgKRcbiAgICAgKiBAcmV0dXJuIOS5l+eul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgbXVsdGlwbHlCeVNjYWxlcihzY2FsYXI6IG51bWJlcik6IEN1YmlzbVZlY3RvcjIge1xuICAgICAgcmV0dXJuIHRoaXMubXVsdGlwbHkobmV3IEN1YmlzbVZlY3RvcjIoc2NhbGFyLCBzY2FsYXIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5njgq/jg4jjg6vjga7pmaTnrpdcbiAgICAgKlxuICAgICAqIEBwYXJhbSB2ZWN0b3IyIOmZpOeul+OBmeOCi+ODmeOCr+ODiOODq+WApFxuICAgICAqIEByZXR1cm4g6Zmk566X57WQ5p6cIOODmeOCr+ODiOODq+WApFxuICAgICAqL1xuICAgIHB1YmxpYyBkaXZpc2lvbih2ZWN0b3IyOiBDdWJpc21WZWN0b3IyKTogQ3ViaXNtVmVjdG9yMiB7XG4gICAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgICByZXQueCA9IHRoaXMueCAvIHZlY3RvcjIueDtcbiAgICAgIHJldC55ID0gdGhpcy55IC8gdmVjdG9yMi55O1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5njgq/jg4jjg6vjga7pmaTnrpco44K544Kr44Op44O8KVxuICAgICAqXG4gICAgICogQHBhcmFtIHNjYWxhciDpmaTnrpfjgZnjgovjgrnjgqvjg6njg7zlgKRcbiAgICAgKiBAcmV0dXJuIOmZpOeul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgZGl2aXNpb25CeVNjYWxhcihzY2FsYXI6IG51bWJlcik6IEN1YmlzbVZlY3RvcjIge1xuICAgICAgcmV0dXJuIHRoaXMuZGl2aXNpb24obmV3IEN1YmlzbVZlY3RvcjIoc2NhbGFyLCBzY2FsYXIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5njgq/jg4jjg6vjga7plbfjgZXjgpLlj5blvpfjgZnjgotcbiAgICAgKlxuICAgICAqIEByZXR1cm4g44OZ44Kv44OI44Or44Gu6ZW344GVXG4gICAgICovXG4gICAgcHVibGljIGdldExlbmd0aCgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODmeOCr+ODiOODq+OBrui3nembouOBruWPluW+l1xuICAgICAqXG4gICAgICogQHBhcmFtIGEg54K5XG4gICAgICogQHJldHVybiDjg5njgq/jg4jjg6vjga7ot53pm6JcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RGlzdGFuY2VXaXRoKGE6IEN1YmlzbVZlY3RvcjIpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIE1hdGguc3FydChcbiAgICAgICAgKHRoaXMueCAtIGEueCkgKiAodGhpcy54IC0gYS54KSArICh0aGlzLnkgLSBhLnkpICogKHRoaXMueSAtIGEueSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OJ44OD44OI56mN44Gu6KiI566XXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYSDlgKRcbiAgICAgKiBAcmV0dXJuIOe1kOaenFxuICAgICAqL1xuICAgIHB1YmxpYyBkb3QoYTogQ3ViaXNtVmVjdG9yMik6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy54ICogYS54ICsgdGhpcy55ICogYS55O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOato+imj+WMluOBrumBqeeUqFxuICAgICAqL1xuICAgIHB1YmxpYyBub3JtYWxpemUoKTogdm9pZCB7XG4gICAgICBjb25zdCBsZW5ndGg6IG51bWJlciA9IE1hdGgucG93KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSwgMC41KTtcblxuICAgICAgdGhpcy54ID0gdGhpcy54IC8gbGVuZ3RoO1xuICAgICAgdGhpcy55ID0gdGhpcy55IC8gbGVuZ3RoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOetieOBl+OBleOBrueiuuiqje+8iOetieOBl+OBhOOBi++8n++8iVxuICAgICAqXG4gICAgICog5YCk44GM562J44GX44GE44GL77yfXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmhzIOeiuuiqjeOBmeOCi+WApFxuICAgICAqIEByZXR1cm4gdHJ1ZSDlgKTjga/nrYnjgZfjgYRcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOWApOOBr+etieOBl+OBj+OBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBpc0VxdWFsKHJoczogQ3ViaXNtVmVjdG9yMik6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMueCA9PSByaHMueCAmJiB0aGlzLnkgPT0gcmhzLnk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog562J44GX44GV44Gu56K66KqN77yI562J44GX44GP44Gq44GE44GL77yf77yJXG4gICAgICpcbiAgICAgKiDlgKTjgYznrYnjgZfjgY/jgarjgYTjgYvvvJ9cbiAgICAgKlxuICAgICAqIEBwYXJhbSByaHMg56K66KqN44GZ44KL5YCkXG4gICAgICogQHJldHVybiB0cnVlIOWApOOBr+etieOBl+OBj+OBquOBhFxuICAgICAqIEByZXR1cm4gZmFsc2Ug5YCk44Gv562J44GX44GEXG4gICAgICovXG4gICAgcHVibGljIGlzTm90RXF1YWwocmhzOiBDdWJpc21WZWN0b3IyKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gIXRoaXMuaXNFcXVhbChyaHMpO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuLyoqXG4gKiDjg5fjg6njg4Pjg4jjg5Xjgqnjg7zjg6Dkvp3lrZjmqZ/og73jgpLmir3osaHljJbjgZnjgosgQ3ViaXNtIFBsYXRmb3JtIEFic3RyYWN0aW9uIExheWVyLlxuICpcbiAqIOODleOCoeOCpOODq+iqreOBv+i+vOOBv+OChOaZguWIu+WPluW+l+etieOBruODl+ODqeODg+ODiOODleOCqeODvOODoOOBq+S+neWtmOOBmeOCi+mWouaVsOOCkuOBvuOBqOOCgeOCi+OAglxuICovXG5leHBvcnQgY2xhc3MgTEFwcFBhbCB7XG4gIC8qKlxuICAgKiDjg5XjgqHjgqTjg6vjgpLjg5DjgqTjg4jjg4fjg7zjgr/jgajjgZfjgaboqq3jgb/jgZPjgoBcbiAgICpcbiAgICogQHBhcmFtIGZpbGVQYXRoIOiqreOBv+i+vOOBv+WvvuixoeODleOCoeOCpOODq+OBruODkeOCuVxuICAgKiBAcmV0dXJuXG4gICAqIHtcbiAgICogICAgICBidWZmZXIsICAg6Kqt44G/6L6844KT44Gg44OQ44Kk44OI44OH44O844K/XG4gICAqICAgICAgc2l6ZSAgICAgICAg44OV44Kh44Kk44Or44K144Kk44K6XG4gICAqIH1cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgbG9hZEZpbGVBc0J5dGVzKFxuICAgIGZpbGVQYXRoOiBzdHJpbmcsXG4gICAgY2FsbGJhY2s6IChhcnJheUJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcikgPT4gdm9pZFxuICApOiB2b2lkIHtcbiAgICBmZXRjaChmaWxlUGF0aClcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXG4gICAgICAudGhlbihhcnJheUJ1ZmZlciA9PiBjYWxsYmFjayhhcnJheUJ1ZmZlciwgYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+ODq+OCv+aZgumWk++8iOWJjeWbnuODleODrOODvOODoOOBqOOBruW3ruWIhu+8ieOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODh+ODq+OCv+aZgumWk1ttc11cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0RGVsdGFUaW1lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuc19kZWx0YVRpbWU7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHVwZGF0ZVRpbWUoKTogdm9pZCB7XG4gICAgdGhpcy5zX2N1cnJlbnRGcmFtZSA9IERhdGUubm93KCk7XG4gICAgdGhpcy5zX2RlbHRhVGltZSA9ICh0aGlzLnNfY3VycmVudEZyYW1lIC0gdGhpcy5zX2xhc3RGcmFtZSkgLyAxMDAwO1xuICAgIHRoaXMuc19sYXN0RnJhbWUgPSB0aGlzLnNfY3VycmVudEZyYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIOODoeODg+OCu+ODvOOCuOOCkuWHuuWKm+OBmeOCi1xuICAgKiBAcGFyYW0gbWVzc2FnZSDmloflrZfliJdcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcHJpbnRNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICB9XG5cbiAgc3RhdGljIGxhc3RVcGRhdGUgPSBEYXRlLm5vdygpO1xuXG4gIHN0YXRpYyBzX2N1cnJlbnRGcmFtZSA9IDAuMDtcbiAgc3RhdGljIHNfbGFzdEZyYW1lID0gMC4wO1xuICBzdGF0aWMgc19kZWx0YVRpbWUgPSAwLjA7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzEzX187IiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1hdHJpeDQ0IH0gZnJvbSAnLi4vbWF0aC9jdWJpc21tYXRyaXg0NCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgQ3ViaXNtTW9kZWwgPSBjdWJpc21tb2RlbC5DdWJpc21Nb2RlbDtcbmltcG9ydCBDdWJpc21NYXRyaXg0NCA9IGN1YmlzbW1hdHJpeDQ0LkN1YmlzbU1hdHJpeDQ0O1xuXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vmj4/nlLvjgpLlh6bnkIbjgZnjgovjg6zjg7Pjg4Djg6lcbiAgICpcbiAgICog44K144OW44Kv44Op44K544Gr55Kw5aKD5L6d5a2Y44Gu5o+P55S75ZG95Luk44KS6KiY6L+w44GZ44KL44CCXG4gICAqL1xuICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgQ3ViaXNtUmVuZGVyZXIge1xuICAgIC8qKlxuICAgICAqIOODrOODs+ODgOODqeOBruOCpOODs+OCueOCv+ODs+OCueOCkueUn+aIkOOBl+OBpuWPluW+l+OBmeOCi1xuICAgICAqXG4gICAgICogQHJldHVybiDjg6zjg7Pjg4Djg6njga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpOiBDdWJpc21SZW5kZXJlciB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6zjg7Pjg4Djg6njga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLop6PmlL7jgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGRlbGV0ZShyZW5kZXJlcjogQ3ViaXNtUmVuZGVyZXIpOiB2b2lkIHtcbiAgICAgIHJlbmRlcmVyID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6zjg7Pjg4Djg6njga7liJ3mnJ/ljJblh6bnkIbjgpLlrp/ooYzjgZnjgotcbiAgICAgKiDlvJXmlbDjgavmuKHjgZfjgZ/jg6Ljg4fjg6vjgYvjgonjg6zjg7Pjg4Djg6njga7liJ3mnJ/ljJblh6bnkIbjgavlv4XopoHjgarmg4XloLHjgpLlj5bjgorlh7rjgZnjgZPjgajjgYzjgafjgY3jgotcbiAgICAgKiBAcGFyYW0gbW9kZWwg44Oi44OH44Or44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAgICovXG4gICAgcHVibGljIGluaXRpYWxpemUobW9kZWw6IEN1YmlzbU1vZGVsKTogdm9pZCB7XG4gICAgICB0aGlzLl9tb2RlbCA9IG1vZGVsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODh+ODq+OCkuaPj+eUu+OBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBkcmF3TW9kZWwoKTogdm9pZCB7XG4gICAgICBpZiAodGhpcy5nZXRNb2RlbCgpID09IG51bGwpIHJldHVybjtcblxuICAgICAgdGhpcy5kb0RyYXdNb2RlbCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJfjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICAgKiDphY3liJfjga/opIfoo73jgZXjgozjgovjga7jgafjgIHlhYPjga7phY3liJfjga/lpJbjgafnoLTmo4TjgZfjgaboia/jgYRcbiAgICAgKiBAcGFyYW0gbWF0cml4NDQgTW9kZWwtVmlldy1Qcm9qZWN0aW9uIOihjOWIl1xuICAgICAqL1xuICAgIHB1YmxpYyBzZXRNdnBNYXRyaXgobWF0cml4NDQ6IEN1YmlzbU1hdHJpeDQ0KTogdm9pZCB7XG4gICAgICB0aGlzLl9tdnBNYXRyaXg0eDQuc2V0TWF0cml4KG1hdHJpeDQ0LmdldEFycmF5KCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJfjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcmV0dXJuIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJdcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TXZwTWF0cml4KCk6IEN1YmlzbU1hdHJpeDQ0IHtcbiAgICAgIHJldHVybiB0aGlzLl9tdnBNYXRyaXg0eDQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44OH44Or44Gu6Imy44KS44K744OD44OI44GZ44KLXG4gICAgICog5ZCE6ImyMC4wfjEuMOOBrumWk+OBp+aMh+WumuOBmeOCi++8iDEuMOOBjOaomea6luOBrueKtuaFi++8iVxuICAgICAqIEBwYXJhbSByZWQg6LWk44OB44Oj44Oz44ON44Or44Gu5YCkXG4gICAgICogQHBhcmFtIGdyZWVuIOe3keODgeODo+ODs+ODjeODq+OBruWApFxuICAgICAqIEBwYXJhbSBibHVlIOmdkuODgeODo+ODs+ODjeODq+OBruWApFxuICAgICAqIEBwYXJhbSBhbHBoYSDOseODgeODo+ODs+ODjeODq+OBruWApFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRNb2RlbENvbG9yKFxuICAgICAgcmVkOiBudW1iZXIsXG4gICAgICBncmVlbjogbnVtYmVyLFxuICAgICAgYmx1ZTogbnVtYmVyLFxuICAgICAgYWxwaGE6IG51bWJlclxuICAgICk6IHZvaWQge1xuICAgICAgaWYgKHJlZCA8IDAuMCkge1xuICAgICAgICByZWQgPSAwLjA7XG4gICAgICB9IGVsc2UgaWYgKHJlZCA+IDEuMCkge1xuICAgICAgICByZWQgPSAxLjA7XG4gICAgICB9XG5cbiAgICAgIGlmIChncmVlbiA8IDAuMCkge1xuICAgICAgICBncmVlbiA9IDAuMDtcbiAgICAgIH0gZWxzZSBpZiAoZ3JlZW4gPiAxLjApIHtcbiAgICAgICAgZ3JlZW4gPSAxLjA7XG4gICAgICB9XG5cbiAgICAgIGlmIChibHVlIDwgMC4wKSB7XG4gICAgICAgIGJsdWUgPSAwLjA7XG4gICAgICB9IGVsc2UgaWYgKGJsdWUgPiAxLjApIHtcbiAgICAgICAgYmx1ZSA9IDEuMDtcbiAgICAgIH1cblxuICAgICAgaWYgKGFscGhhIDwgMC4wKSB7XG4gICAgICAgIGFscGhhID0gMC4wO1xuICAgICAgfSBlbHNlIGlmIChhbHBoYSA+IDEuMCkge1xuICAgICAgICBhbHBoYSA9IDEuMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fbW9kZWxDb2xvci5SID0gcmVkO1xuICAgICAgdGhpcy5fbW9kZWxDb2xvci5HID0gZ3JlZW47XG4gICAgICB0aGlzLl9tb2RlbENvbG9yLkIgPSBibHVlO1xuICAgICAgdGhpcy5fbW9kZWxDb2xvci5BID0gYWxwaGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44OH44Or44Gu6Imy44KS5Y+W5b6X44GZ44KLXG4gICAgICog5ZCE6ImyMC4wfjEuMOOBrumWk+OBp+aMh+WumuOBmeOCiygxLjDjgYzmqJnmupbjga7nirbmhYspXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIFJHQkHjga7jgqvjg6njg7zmg4XloLFcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TW9kZWxDb2xvcigpOiBDdWJpc21UZXh0dXJlQ29sb3Ige1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5fbW9kZWxDb2xvcikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOS5l+eul+a4iOOBv86x44Gu5pyJ5Yq544O754Sh5Yq544KS44K744OD44OI44GZ44KLXG4gICAgICog5pyJ5Yq544Gr44GZ44KL44Gq44KJdHJ1ZeOAgeeEoeWKueOBq+OBmeOCi+OBquOCiWZhbHNl44KS44K744OD44OI44GZ44KLXG4gICAgICovXG4gICAgcHVibGljIHNldElzUHJlbXVsdGlwbGllZEFscGhhKGVuYWJsZTogYm9vbGVhbik6IHZvaWQge1xuICAgICAgdGhpcy5faXNQcmVtdWx0aXBsaWVkQWxwaGEgPSBlbmFibGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5LmX566X5riI44G/zrHjga7mnInlirnjg7vnhKHlirnjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcmV0dXJuIHRydWUg5LmX566X5riI44G/44GuzrHmnInlirlcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOS5l+eul+a4iOOBv+OBrs6x54Sh5Yq5XG4gICAgICovXG4gICAgcHVibGljIGlzUHJlbXVsdGlwbGllZEFscGhhKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMuX2lzUHJlbXVsdGlwbGllZEFscGhhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCq+ODquODs+OCsO+8iOeJh+mdouaPj+eUu++8ieOBruacieWKueODu+eEoeWKueOCkuOCu+ODg+ODiOOBmeOCi+OAglxuICAgICAqIOacieWKueOBq+OBmeOCi+OBquOCiXRydWXjgIHnhKHlirnjgavjgZnjgovjgarjgolmYWxzZeOCkuOCu+ODg+ODiOOBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBzZXRJc0N1bGxpbmcoY3VsbGluZzogYm9vbGVhbik6IHZvaWQge1xuICAgICAgdGhpcy5faXNDdWxsaW5nID0gY3VsbGluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgqvjg6rjg7PjgrDvvIjniYfpnaLmj4/nlLvvvInjga7mnInlirnjg7vnhKHlirnjgpLlj5blvpfjgZnjgovjgIJcbiAgICAgKiBAcmV0dXJuIHRydWUg44Kr44Oq44Oz44Kw5pyJ5Yq5XG4gICAgICogQHJldHVybiBmYWxzZSDjgqvjg6rjg7PjgrDnhKHlirlcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNDdWxsaW5nKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMuX2lzQ3VsbGluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4bjgq/jgrnjg4Hjg6Pjga7nlbDmlrnmgKfjg5XjgqPjg6vjgr/jg6rjg7PjgrDjga7jg5Hjg6njg6Hjg7zjgr/jgpLjgrvjg4Pjg4jjgZnjgotcbiAgICAgKiDjg5Hjg6njg6Hjg7zjgr/lgKTjga7lvbHpn7/luqbjga/jg6zjg7Pjg4Djg6njga7lrp/oo4Xjgavkvp3lrZjjgZnjgotcbiAgICAgKiBAcGFyYW0gbiDjg5Hjg6njg6Hjg7zjgr/jga7lgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0QW5pc290cm9weShuOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX2FuaXNvcnRvcHkgPSBuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODhuOCr+OCueODgeODo+OBrueVsOaWueaAp+ODleOCo+ODq+OCv+ODquODs+OCsOOBruODkeODqeODoeODvOOCv+OCkuOCu+ODg+ODiOOBmeOCi1xuICAgICAqIEByZXR1cm4g55Ww5pa55oCn44OV44Kj44Or44K/44Oq44Oz44Kw44Gu44OR44Op44Oh44O844K/XG4gICAgICovXG4gICAgcHVibGljIGdldEFuaXNvdHJvcHkoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9hbmlzb3J0b3B5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODrOODs+ODgOODquODs+OCsOOBmeOCi+ODouODh+ODq+OCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g44Os44Oz44OA44Oq44Oz44Kw44GZ44KL44Oi44OH44OrXG4gICAgICovXG4gICAgcHVibGljIGdldE1vZGVsKCk6IEN1YmlzbU1vZGVsIHtcbiAgICAgIHJldHVybiB0aGlzLl9tb2RlbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoKSB7XG4gICAgICB0aGlzLl9pc0N1bGxpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2lzUHJlbXVsdGlwbGllZEFscGhhID0gZmFsc2U7XG4gICAgICB0aGlzLl9hbmlzb3J0b3B5ID0gMC4wO1xuICAgICAgdGhpcy5fbW9kZWwgPSBudWxsO1xuICAgICAgdGhpcy5fbW9kZWxDb2xvciA9IG5ldyBDdWJpc21UZXh0dXJlQ29sb3IoKTtcblxuICAgICAgLy8g5Y2Y5L2N6KGM5YiX44Gr5Yid5pyf5YyWXG4gICAgICB0aGlzLl9tdnBNYXRyaXg0eDQgPSBuZXcgQ3ViaXNtTWF0cml4NDQoKTtcbiAgICAgIHRoaXMuX212cE1hdHJpeDR4NC5sb2FkSWRlbnRpdHkoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg4fjg6vmj4/nlLvjga7lrp/oo4VcbiAgICAgKi9cbiAgICBwdWJsaWMgYWJzdHJhY3QgZG9EcmF3TW9kZWwoKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIOaPj+eUu+OCquODluOCuOOCp+OCr+ODiO+8iOOCouODvOODiOODoeODg+OCt+ODpe+8ieOCkuaPj+eUu+OBmeOCi1xuICAgICAqIOODneODquOCtOODs+ODoeODg+OCt+ODpeOBqOODhuOCr+OCueODgeODo+eVquWPt+OCkuOCu+ODg+ODiOOBp+a4oeOBmeOAglxuICAgICAqIEBwYXJhbSB0ZXh0dXJlTm8g5o+P55S744GZ44KL44OG44Kv44K544OB44Oj55Wq5Y+3XG4gICAgICogQHBhcmFtIGluZGV4Q291bnQg5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAgICogQHBhcmFtIHZlcnRleENvdW50IOODneODquOCtOODs+ODoeODg+OCt+ODpeOBrumggueCueaVsFxuICAgICAqIEBwYXJhbSBpbmRleEFycmF5IOODneODquOCtOODs+ODoeODg+OCt+ODpemggueCueOBruOCpOODs+ODh+ODg+OCr+OCuemFjeWIl1xuICAgICAqIEBwYXJhbSB2ZXJ0ZXhBcnJheSDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7poILngrnphY3liJdcbiAgICAgKiBAcGFyYW0gdXZBcnJheSB1dumFjeWIl1xuICAgICAqIEBwYXJhbSBvcGFjaXR5IOS4jemAj+aYjuW6plxuICAgICAqIEBwYXJhbSBjb2xvckJsZW5kTW9kZSDjgqvjg6njg7zjg5bjg6zjg7Pjg4fjgqPjg7PjgrDjga7jgr/jgqTjg5dcbiAgICAgKiBAcGFyYW0gaW52ZXJ0ZWRNYXNrIOODnuOCueOCr+S9v+eUqOaZguOBruODnuOCueOCr+OBruWPjei7ouS9v+eUqFxuICAgICAqL1xuICAgIHB1YmxpYyBhYnN0cmFjdCBkcmF3TWVzaChcbiAgICAgIHRleHR1cmVObzogbnVtYmVyLFxuICAgICAgaW5kZXhDb3VudDogbnVtYmVyLFxuICAgICAgdmVydGV4Q291bnQ6IG51bWJlcixcbiAgICAgIGluZGV4QXJyYXk6IFVpbnQxNkFycmF5LFxuICAgICAgdmVydGV4QXJyYXk6IEZsb2F0MzJBcnJheSxcbiAgICAgIHV2QXJyYXk6IEZsb2F0MzJBcnJheSxcbiAgICAgIG9wYWNpdHk6IG51bWJlcixcbiAgICAgIGNvbG9yQmxlbmRNb2RlOiBDdWJpc21CbGVuZE1vZGUsXG4gICAgICBpbnZlcnRlZE1hc2s6IGJvb2xlYW5cbiAgICApOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICog44Os44Oz44OA44Op44GM5L+d5oyB44GZ44KL6Z2Z55qE44Gq44Oq44K944O844K544KS6ZaL5pS+44GZ44KLXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBzdGF0aWNSZWxlYXNlOiBGdW5jdGlvbjtcblxuICAgIHByb3RlY3RlZCBfbXZwTWF0cml4NHg0OiBDdWJpc21NYXRyaXg0NDsgLy8gTW9kZWwtVmlldy1Qcm9qZWN0aW9uIOihjOWIl1xuICAgIHByb3RlY3RlZCBfbW9kZWxDb2xvcjogQ3ViaXNtVGV4dHVyZUNvbG9yOyAvLyDjg6Ljg4fjg6voh6rkvZPjga7jgqvjg6njg7zvvIhSR0JB77yJXG4gICAgcHJvdGVjdGVkIF9pc0N1bGxpbmc6IGJvb2xlYW47IC8vIOOCq+ODquODs+OCsOOBjOacieWKueOBquOCiXRydWVcbiAgICBwcm90ZWN0ZWQgX2lzUHJlbXVsdGlwbGllZEFscGhhOiBib29sZWFuOyAvLyDkuZfnrpfmuIjjgb/OseOBquOCiXRydWVcbiAgICBwcm90ZWN0ZWQgX2FuaXNvcnRvcHk6IGFueTsgLy8g44OG44Kv44K544OB44Oj44Gu55Ww5pa55oCn44OV44Kj44Or44K/44Oq44Oz44Kw44Gu44OR44Op44Oh44O844K/XG4gICAgcHJvdGVjdGVkIF9tb2RlbDogQ3ViaXNtTW9kZWw7IC8vIOODrOODs+ODgOODquODs+OCsOWvvuixoeOBruODouODh+ODq1xuICB9XG5cbiAgZXhwb3J0IGVudW0gQ3ViaXNtQmxlbmRNb2RlIHtcbiAgICBDdWJpc21CbGVuZE1vZGVfTm9ybWFsID0gMCwgLy8g6YCa5bi4XG4gICAgQ3ViaXNtQmxlbmRNb2RlX0FkZGl0aXZlID0gMSwgLy8g5Yqg566XXG4gICAgQ3ViaXNtQmxlbmRNb2RlX011bHRpcGxpY2F0aXZlID0gMiAvLyDkuZfnrpdcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4bjgq/jgrnjg4Hjg6Pjga7oibLjgpJSR0JB44Gn5omx44GG44Gf44KB44Gu44Kv44Op44K5XG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtVGV4dHVyZUNvbG9yIHtcbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMuUiA9IDEuMDtcbiAgICAgIHRoaXMuRyA9IDEuMDtcbiAgICAgIHRoaXMuQiA9IDEuMDtcbiAgICAgIHRoaXMuQSA9IDEuMDtcbiAgICB9XG5cbiAgICBSOiBudW1iZXI7IC8vIOi1pOODgeODo+ODs+ODjeODq1xuICAgIEc6IG51bWJlcjsgLy8g57eR44OB44Oj44Oz44ON44OrXG4gICAgQjogbnVtYmVyOyAvLyDpnZLjg4Hjg6Pjg7Pjg43jg6tcbiAgICBBOiBudW1iZXI7IC8vIM6x44OB44Oj44Oz44ON44OrXG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tYXRyaXg0NCB9IGZyb20gJy4uL0ZyYW1ld29yay9zcmMvbWF0aC9jdWJpc21tYXRyaXg0NCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtdmVjdG9yIH0gZnJvbSAnLi4vRnJhbWV3b3JrL3NyYy90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgYWN1YmlzbW1vdGlvbiB9IGZyb20gJy4uL0ZyYW1ld29yay9zcmMvbW90aW9uL2FjdWJpc21tb3Rpb24nO1xuaW1wb3J0IENzbV9jc21WZWN0b3IgPSBjc212ZWN0b3IuY3NtVmVjdG9yO1xuaW1wb3J0IENzbV9DdWJpc21NYXRyaXg0NCA9IGN1YmlzbW1hdHJpeDQ0LkN1YmlzbU1hdHJpeDQ0O1xuaW1wb3J0IEFDdWJpc21Nb3Rpb24gPSBhY3ViaXNtbW90aW9uLkFDdWJpc21Nb3Rpb247XG5cbmltcG9ydCB7IExBcHBNb2RlbCB9IGZyb20gJy4vbGFwcG1vZGVsJztcbmltcG9ydCB7IExBcHBQYWwgfSBmcm9tICcuL2xhcHBwYWwnO1xuaW1wb3J0IHsgY2FudmFzIH0gZnJvbSAnLi9sYXBwZGVsZWdhdGUnO1xuaW1wb3J0ICogYXMgTEFwcERlZmluZSBmcm9tICcuL2xhcHBkZWZpbmUnO1xuXG5leHBvcnQgbGV0IHNfaW5zdGFuY2U6IExBcHBMaXZlMkRNYW5hZ2VyID0gbnVsbDtcblxuLyoqXG4gKiDjgrXjg7Pjg5fjg6vjgqLjg5fjg6rjgrHjg7zjgrfjg6fjg7PjgavjgYrjgYTjgaZDdWJpc21Nb2RlbOOCkueuoeeQhuOBmeOCi+OCr+ODqeOCuVxuICog44Oi44OH44Or55Sf5oiQ44Go56C05qOE44CB44K/44OD44OX44Kk44OZ44Oz44OI44Gu5Yem55CG44CB44Oi44OH44Or5YiH44KK5pu/44GI44KS6KGM44GG44CCXG4gKiDnrqHnkIbmoLfmnKzlupTnlKjnqIvluo/kuK3nmoRDdWJpc21Nb2RlbOeahOexu1xuICog6L+b6KGM5qih5Z6L55Sf5oiQ5ZKM5bqf5byD44CB5oq95aS05LqL5Lu255qE5aSE55CG44CB5qih5Z6L5YiH5o2i44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBMQXBwTGl2ZTJETWFuYWdlciB7XG4gIC8qKlxuICAgKiDjgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrnvvIjjgrfjg7PjgrDjg6vjg4jjg7PvvInjgpLov5TjgZnjgIJcbiAgICog44Kk44Oz44K544K/44Oz44K544GM55Sf5oiQ44GV44KM44Gm44GE44Gq44GE5aC05ZCI44Gv5YaF6YOo44Gn44Kk44Oz44K544K/44Oz44K544KS55Sf5oiQ44GZ44KL44CCXG4gICAqXG4gICAqIEByZXR1cm4g44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6IExBcHBMaXZlMkRNYW5hZ2VyIHtcbiAgICBpZiAoc19pbnN0YW5jZSA9PSBudWxsKSB7XG4gICAgICBzX2luc3RhbmNlID0gbmV3IExBcHBMaXZlMkRNYW5hZ2VyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNfaW5zdGFuY2U7XG4gIH1cblxuICAvKipcbiAgICog44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K577yI44K344Oz44Kw44Or44OI44Oz77yJ44KS6Kej5pS+44GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJlbGVhc2VJbnN0YW5jZSgpOiB2b2lkIHtcbiAgICBpZiAoc19pbnN0YW5jZSAhPSBudWxsKSB7XG4gICAgICBzX2luc3RhbmNlID0gdm9pZCAwO1xuICAgIH1cblxuICAgIHNfaW5zdGFuY2UgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOePvuWcqOOBruOCt+ODvOODs+OBp+S/neaMgeOBl+OBpuOBhOOCi+ODouODh+ODq+OCkui/lOOBmeOAglxuICAgKlxuICAgKiBAcGFyYW0gbm8g44Oi44OH44Or44Oq44K544OI44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g44Oi44OH44Or44Gu44Kk44Oz44K544K/44Oz44K544KS6L+U44GZ44CC44Kk44Oz44OH44OD44Kv44K55YCk44GM56+E5Zuy5aSW44Gu5aC05ZCI44GvTlVMTOOCkui/lOOBmeOAglxuICAgKi9cbiAgcHVibGljIGdldE1vZGVsKG5vOiBudW1iZXIpOiBMQXBwTW9kZWwge1xuICAgIGlmIChubyA8IHRoaXMuX21vZGVscy5nZXRTaXplKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tb2RlbHMuYXQobm8pO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOePvuWcqOOBruOCt+ODvOODs+OBp+S/neaMgeOBl+OBpuOBhOOCi+OBmeOBueOBpuOBruODouODh+ODq+OCkuino+aUvuOBmeOCi1xuICAgKi9cbiAgcHVibGljIHJlbGVhc2VBbGxNb2RlbCgpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vZGVscy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgdGhpcy5fbW9kZWxzLmF0KGkpLnJlbGVhc2UoKTtcbiAgICAgIHRoaXMuX21vZGVscy5zZXQoaSwgbnVsbCk7XG4gICAgfVxuXG4gICAgdGhpcy5fbW9kZWxzLmNsZWFyKCk7XG4gIH1cblxuICAvKipcbiAgICog55S76Z2i44KS44OJ44Op44OD44Kw44GX44Gf5pmC44Gu5Yem55CGXG4gICAqXG4gICAqIEBwYXJhbSB4IOeUu+mdouOBrljluqfmqJlcbiAgICogQHBhcmFtIHkg55S76Z2i44GuWeW6p+aomVxuICAgKi9cbiAgcHVibGljIG9uRHJhZyh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbW9kZWxzLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICBjb25zdCBtb2RlbDogTEFwcE1vZGVsID0gdGhpcy5nZXRNb2RlbChpKTtcblxuICAgICAgaWYgKG1vZGVsKSB7XG4gICAgICAgIG1vZGVsLnNldERyYWdnaW5nKHgsIHkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDnlLvpnaLjgpLjgr/jg4Pjg5fjgZfjgZ/mmYLjga7lh6bnkIZcbiAgICpcbiAgICogQHBhcmFtIHgg55S76Z2i44GuWOW6p+aomVxuICAgKiBAcGFyYW0geSDnlLvpnaLjga5Z5bqn5qiZXG4gICAqL1xuICBwdWJsaWMgb25UYXAoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoTEFwcERlZmluZS5EZWJ1Z0xvZ0VuYWJsZSkge1xuICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoXG4gICAgICAgIGBbQVBQXXRhcCBwb2ludDoge3g6ICR7eC50b0ZpeGVkKDIpfSB5OiAke3kudG9GaXhlZCgyKX19YFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vZGVscy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgaWYgKHRoaXMuX21vZGVscy5hdChpKS5oaXRUZXN0KExBcHBEZWZpbmUuSGl0QXJlYU5hbWVIZWFkLCB4LCB5KSkge1xuICAgICAgICBpZiAoTEFwcERlZmluZS5EZWJ1Z0xvZ0VuYWJsZSkge1xuICAgICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKFxuICAgICAgICAgICAgYFtBUFBdaGl0IGFyZWE6IFske0xBcHBEZWZpbmUuSGl0QXJlYU5hbWVIZWFkfV1gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9tb2RlbHMuYXQoaSkuc2V0UmFuZG9tRXhwcmVzc2lvbigpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl9tb2RlbHMuYXQoaSkuaGl0VGVzdChMQXBwRGVmaW5lLkhpdEFyZWFOYW1lQm9keSwgeCwgeSkpIHtcbiAgICAgICAgaWYgKExBcHBEZWZpbmUuRGVidWdMb2dFbmFibGUpIHtcbiAgICAgICAgICBMQXBwUGFsLnByaW50TWVzc2FnZShcbiAgICAgICAgICAgIGBbQVBQXWhpdCBhcmVhOiBbJHtMQXBwRGVmaW5lLkhpdEFyZWFOYW1lQm9keX1dYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbW9kZWxzXG4gICAgICAgICAgLmF0KGkpXG4gICAgICAgICAgLnN0YXJ0UmFuZG9tTW90aW9uKFxuICAgICAgICAgICAgTEFwcERlZmluZS5Nb3Rpb25Hcm91cFRhcEJvZHksXG4gICAgICAgICAgICBMQXBwRGVmaW5lLlByaW9yaXR5Tm9ybWFsLFxuICAgICAgICAgICAgdGhpcy5fZmluaXNoZWRNb3Rpb25cbiAgICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDnlLvpnaLjgpLmm7TmlrDjgZnjgovjgajjgY3jga7lh6bnkIZcbiAgICog44Oi44OH44Or44Gu5pu05paw5Yem55CG5Y+K44Gz5o+P55S75Yem55CG44KS6KGM44GGXG4gICAqL1xuICBwdWJsaWMgb25VcGRhdGUoKTogdm9pZCB7XG4gICAgbGV0IHByb2plY3Rpb246IENzbV9DdWJpc21NYXRyaXg0NCA9IG5ldyBDc21fQ3ViaXNtTWF0cml4NDQoKTtcblxuICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gY2FudmFzO1xuICAgIHByb2plY3Rpb24uc2NhbGUoMS4wLCB3aWR0aCAvIGhlaWdodCk7XG5cbiAgICBpZiAodGhpcy5fdmlld01hdHJpeCAhPSBudWxsKSB7XG4gICAgICBwcm9qZWN0aW9uLm11bHRpcGx5QnlNYXRyaXgodGhpcy5fdmlld01hdHJpeCk7XG4gICAgfVxuXG4gICAgY29uc3Qgc2F2ZVByb2plY3Rpb246IENzbV9DdWJpc21NYXRyaXg0NCA9IHByb2plY3Rpb24uY2xvbmUoKTtcbiAgICBjb25zdCBtb2RlbENvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbHMuZ2V0U2l6ZSgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb2RlbENvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IG1vZGVsOiBMQXBwTW9kZWwgPSB0aGlzLmdldE1vZGVsKGkpO1xuICAgICAgcHJvamVjdGlvbiA9IHNhdmVQcm9qZWN0aW9uLmNsb25lKCk7XG5cbiAgICAgIG1vZGVsLnVwZGF0ZSgpO1xuICAgICAgbW9kZWwuZHJhdyhwcm9qZWN0aW9uKTsgLy8g5Y+C54Wn5rih44GX44Gq44Gu44GncHJvamVjdGlvbuOBr+WkieizquOBmeOCi+OAglxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDmrKHjga7jgrfjg7zjg7PjgavliIfjgorjgYvjgYjjgotcbiAgICog44K144Oz44OX44Or44Ki44OX44Oq44Kx44O844K344On44Oz44Gn44Gv44Oi44OH44Or44K744OD44OI44Gu5YiH44KK5pu/44GI44KS6KGM44GG44CCXG4gICAqL1xuICBwdWJsaWMgbmV4dFNjZW5lKCk6IHZvaWQge1xuICAgIGNvbnN0IG5vOiBudW1iZXIgPSAodGhpcy5fc2NlbmVJbmRleCArIDEpICUgTEFwcERlZmluZS5Nb2RlbERpclNpemU7XG4gICAgdGhpcy5jaGFuZ2VTY2VuZShubyk7XG4gIH1cblxuICAvKipcbiAgICog44K344O844Oz44KS5YiH44KK5pu/44GI44KLXG4gICAqIOOCteODs+ODl+ODq+OCouODl+ODquOCseODvOOCt+ODp+ODs+OBp+OBr+ODouODh+ODq+OCu+ODg+ODiOOBruWIh+OCiuabv+OBiOOCkuihjOOBhuOAglxuICAgKiDovazmjaLplZzlpLRcbiAgICog5Zyo5qC35pys5bqU55So56iL5bqP5Lit5YiH5o2i5qih5Z6L6ZuG44CCXG4gICAqL1xuICBwdWJsaWMgY2hhbmdlU2NlbmUoaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3NjZW5lSW5kZXggPSBpbmRleDtcbiAgICBpZiAoTEFwcERlZmluZS5EZWJ1Z0xvZ0VuYWJsZSkge1xuICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoYFtBUFBdbW9kZWwgaW5kZXg6ICR7dGhpcy5fc2NlbmVJbmRleH1gKTtcbiAgICB9XG5cbiAgICAvLyBNb2RlbERpcltd44Gr5L+d5oyB44GX44Gf44OH44Kj44Os44Kv44OI44Oq5ZCN44GL44KJXG4gICAgLy8gbW9kZWwzLmpzb27jga7jg5HjgrnjgpLmsbrlrprjgZnjgovjgIJcbiAgICAvLyDjg4fjgqPjg6zjgq/jg4jjg6rlkI3jgahtb2RlbDMuanNvbuOBruWQjeWJjeOCkuS4gOiHtOOBleOBm+OBpuOBiuOBj+OBk+OBqOOAglxuICAgIGNvbnN0IG1vZGVsOiBzdHJpbmcgPSBMQXBwRGVmaW5lLk1vZGVsRGlyW2luZGV4XTtcbiAgICBjb25zdCBtb2RlbFBhdGg6IHN0cmluZyA9IExBcHBEZWZpbmUuUmVzb3VyY2VzUGF0aCArIG1vZGVsICsgJy8nO1xuICAgIGNvbnNvbGUubG9nKFwiTEFwcERlZmluZS5SZXNvdXJjZXNQYXRoXCIsTEFwcERlZmluZS5SZXNvdXJjZXNQYXRoKVxuICAgIGNvbnNvbGUubG9nKFwibW9kZWxcIixtb2RlbClcbiAgICBsZXQgbW9kZWxKc29uTmFtZTogc3RyaW5nID0gTEFwcERlZmluZS5Nb2RlbERpcltpbmRleF07XG4gICAgbW9kZWxKc29uTmFtZSArPSAnLm1vZGVsMy5qc29uJztcblxuICAgIHRoaXMucmVsZWFzZUFsbE1vZGVsKCk7XG4gICAgdGhpcy5fbW9kZWxzLnB1c2hCYWNrKG5ldyBMQXBwTW9kZWwoKSk7XG4gICAgdGhpcy5fbW9kZWxzLmF0KDApLmxvYWRBc3NldHMobW9kZWxQYXRoLCBtb2RlbEpzb25OYW1lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3ZpZXdNYXRyaXggPSBuZXcgQ3NtX0N1YmlzbU1hdHJpeDQ0KCk7XG4gICAgdGhpcy5fbW9kZWxzID0gbmV3IENzbV9jc21WZWN0b3I8TEFwcE1vZGVsPigpO1xuICAgIHRoaXMuX3NjZW5lSW5kZXggPSAwO1xuICAgIHRoaXMuY2hhbmdlU2NlbmUodGhpcy5fc2NlbmVJbmRleCk7XG4gIH1cblxuICBfdmlld01hdHJpeDogQ3NtX0N1YmlzbU1hdHJpeDQ0OyAvLyDjg6Ljg4fjg6vmj4/nlLvjgavnlKjjgYTjgot2aWV36KGM5YiXXG4gIF9tb2RlbHM6IENzbV9jc21WZWN0b3I8TEFwcE1vZGVsPjsgLy8g44Oi44OH44Or44Kk44Oz44K544K/44Oz44K544Gu44Kz44Oz44OG44OKXG4gIF9zY2VuZUluZGV4OiBudW1iZXI7IC8vIOihqOekuuOBmeOCi+OCt+ODvOODs+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAvLyDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjga7jgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgX2ZpbmlzaGVkTW90aW9uID0gKHNlbGY6IEFDdWJpc21Nb3Rpb24pOiB2b2lkID0+IHtcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgnTW90aW9uIEZpbmlzaGVkOicpO1xuICAgIGNvbnNvbGUubG9nKHNlbGYpO1xuICB9O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGFjdWJpc21tb3Rpb24gfSBmcm9tICcuL2FjdWJpc21tb3Rpb24nO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vdGlvbnF1ZXVlZW50cnkgfSBmcm9tICcuL2N1YmlzbW1vdGlvbnF1ZXVlZW50cnknO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc21zdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgY3NtU3RyaW5nID0gY3Ntc3RyaW5nLmNzbVN0cmluZztcbmltcG9ydCBDdWJpc21Nb2RlbCA9IGN1YmlzbW1vZGVsLkN1YmlzbU1vZGVsO1xuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XG5pbXBvcnQgaXRlcmF0b3IgPSBjc212ZWN0b3IuaXRlcmF0b3I7XG5pbXBvcnQgQ3ViaXNtTW90aW9uUXVldWVFbnRyeSA9IGN1YmlzbW1vdGlvbnF1ZXVlZW50cnkuQ3ViaXNtTW90aW9uUXVldWVFbnRyeTtcbmltcG9ydCBBQ3ViaXNtTW90aW9uID0gYWN1YmlzbW1vdGlvbi5BQ3ViaXNtTW90aW9uO1xuXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/jga7nrqHnkIZcbiAgICpcbiAgICog44Oi44O844K344On44Oz5YaN55Sf44Gu566h55CG55So44Kv44Op44K544CCQ3ViaXNtTW90aW9u44Oi44O844K344On44Oz44Gq44GpQUN1YmlzbU1vdGlvbuOBruOCteODluOCr+ODqeOCueOCkuWGjeeUn+OBmeOCi+OBn+OCgeOBq+S9v+eUqOOBmeOCi+OAglxuICAgKlxuICAgKiBAbm90ZSDlho3nlJ/kuK3jgavliKXjga7jg6Ljg7zjgrfjg6fjg7PjgYwgU3RhcnRNb3Rpb24oKeOBleOCjOOBn+WgtOWQiOOBr+OAgeaWsOOBl+OBhOODouODvOOCt+ODp+ODs+OBq+a7keOCieOBi+OBq+WkieWMluOBl+aXp+ODouODvOOCt+ODp+ODs+OBr+S4reaWreOBmeOCi+OAglxuICAgKiAgICAgICDooajmg4XnlKjjg6Ljg7zjgrfjg6fjg7PjgIHkvZPnlKjjg6Ljg7zjgrfjg6fjg7PjgarjganjgpLliIbjgZHjgabjg6Ljg7zjgrfjg6fjg7PljJbjgZfjgZ/loLTlkIjjgarjganjgIFcbiAgICogICAgICAg6KSH5pWw44Gu44Oi44O844K344On44Oz44KS5ZCM5pmC44Gr5YaN55Sf44GV44Gb44KL5aC05ZCI44Gv44CB6KSH5pWw44GuQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2Vy44Kk44Oz44K544K/44Oz44K544KS5L2/55So44GZ44KL44CCXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyIHtcbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgPSAwLjA7XG4gICAgICB0aGlzLl9ldmVudENhbGxCYWNrID0gbnVsbDtcbiAgICAgIHRoaXMuX2V2ZW50Q3VzdG9tRGF0YSA9IG51bGw7XG4gICAgICB0aGlzLl9tb3Rpb25zID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5PigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODh+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb3Rpb25zLmdldFNpemUoKTsgKytpKSB7XG4gICAgICAgIGlmICh0aGlzLl9tb3Rpb25zLmF0KGkpKSB7XG4gICAgICAgICAgdGhpcy5fbW90aW9ucy5hdChpKS5yZWxlYXNlKCk7XG4gICAgICAgICAgdGhpcy5fbW90aW9ucy5zZXQoaSwgdm9pZCAwKTtcbiAgICAgICAgICB0aGlzLl9tb3Rpb25zLnNldChpLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9tb3Rpb25zID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmjIflrprjgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjga7plovlp4tcbiAgICAgKlxuICAgICAqIOaMh+WumuOBl+OBn+ODouODvOOCt+ODp+ODs+OCkumWi+Wni+OBmeOCi+OAguWQjOOBmOOCv+OCpOODl+OBruODouODvOOCt+ODp+ODs+OBjOaXouOBq+OBguOCi+WgtOWQiOOBr+OAgeaXouWtmOOBruODouODvOOCt+ODp+ODs+OBq+e1guS6huODleODqeOCsOOCkueri+OBpuOAgeODleOCp+ODvOODieOCouOCpuODiOOCkumWi+Wni+OBleOBm+OCi+OAglxuICAgICAqXG4gICAgICogQHBhcmFtICAgbW90aW9uICAgICAgICAgIOmWi+Wni+OBmeOCi+ODouODvOOCt+ODp+ODs1xuICAgICAqIEBwYXJhbSAgIGF1dG9EZWxldGUgICAgICDlho3nlJ/jgYzntYLkuobjgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLliYrpmaTjgZnjgovjgarjgokgdHJ1ZVxuICAgICAqIEBwYXJhbSAgIHVzZXJUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxuICAgICAqIEByZXR1cm4gICAgICAgICAgICAgICAgICAgICAg6ZaL5aeL44GX44Gf44Oi44O844K344On44Oz44Gu6K2Y5Yil55Wq5Y+344KS6L+U44GZ44CC5YCL5Yil44Gu44Oi44O844K344On44Oz44GM57WC5LqG44GX44Gf44GL5ZCm44GL44KS5Yik5a6a44GZ44KLSXNGaW5pc2hlZCgp44Gu5byV5pWw44Gn5L2/55So44GZ44KL44CC6ZaL5aeL44Gn44GN44Gq44GE5pmC44Gv44CMLTHjgI1cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhcnRNb3Rpb24oXG4gICAgICBtb3Rpb246IEFDdWJpc21Nb3Rpb24sXG4gICAgICBhdXRvRGVsZXRlOiBib29sZWFuLFxuICAgICAgdXNlclRpbWVTZWNvbmRzOiBudW1iZXJcbiAgICApOiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlIHtcbiAgICAgIGlmIChtb3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gSW52YWxpZE1vdGlvblF1ZXVlRW50cnlIYW5kbGVWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgbGV0IG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSBudWxsO1xuXG4gICAgICAvLyDml6Ljgavjg6Ljg7zjgrfjg6fjg7PjgYzjgYLjgozjgbDntYLkuobjg5Xjg6njgrDjgpLnq4vjgabjgotcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbW90aW9ucy5nZXRTaXplKCk7ICsraSkge1xuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5ID0gdGhpcy5fbW90aW9ucy5hdChpKTtcbiAgICAgICAgaWYgKG1vdGlvblF1ZXVlRW50cnkgPT0gbnVsbCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbW90aW9uUXVldWVFbnRyeS5zdGFydEZhZGVvdXQoXG4gICAgICAgICAgbW90aW9uUXVldWVFbnRyeS5fbW90aW9uLmdldEZhZGVPdXRUaW1lKCksXG4gICAgICAgICAgdXNlclRpbWVTZWNvbmRzXG4gICAgICAgICk7IC8vIOODleOCp+ODvOODieOCouOCpuODiOOCkumWi+Wni+OBl+e1guS6huOBmeOCi1xuICAgICAgfVxuXG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5ID0gbmV3IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkoKTsgLy8g57WC5LqG5pmC44Gr56C05qOE44GZ44KLXG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5Ll9hdXRvRGVsZXRlID0gYXV0b0RlbGV0ZTtcbiAgICAgIG1vdGlvblF1ZXVlRW50cnkuX21vdGlvbiA9IG1vdGlvbjtcblxuICAgICAgdGhpcy5fbW90aW9ucy5wdXNoQmFjayhtb3Rpb25RdWV1ZUVudHJ5KTtcblxuICAgICAgcmV0dXJuIG1vdGlvblF1ZXVlRW50cnkuX21vdGlvblF1ZXVlRW50cnlIYW5kbGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5YWo44Gm44Gu44Oi44O844K344On44Oz44Gu57WC5LqG44Gu56K66KqNXG4gICAgICogQHJldHVybiB0cnVlIOWFqOOBpue1guS6huOBl+OBpuOBhOOCi1xuICAgICAqIEByZXR1cm4gZmFsc2Ug57WC5LqG44GX44Gm44GE44Gq44GEXG4gICAgICovXG4gICAgcHVibGljIGlzRmluaXNoZWQoKTogYm9vbGVhbiB7XG4gICAgICAvLyAtLS0tLS0tIOWHpueQhuOCkuihjOOBhiAtLS0tLS0tXG4gICAgICAvLyDml6Ljgavjg6Ljg7zjgrfjg6fjg7PjgYzjgYLjgozjgbDntYLkuobjg5Xjg6njgrDjgpLnq4vjgabjgotcblxuICAgICAgZm9yIChcbiAgICAgICAgbGV0IGl0ZTogaXRlcmF0b3I8Q3ViaXNtTW90aW9uUXVldWVFbnRyeT4gPSB0aGlzLl9tb3Rpb25zLmJlZ2luKCk7XG4gICAgICAgIGl0ZS5ub3RFcXVhbCh0aGlzLl9tb3Rpb25zLmVuZCgpKTtcblxuICAgICAgKSB7XG4gICAgICAgIGxldCBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gaXRlLnB0cigpO1xuXG4gICAgICAgIGlmIChtb3Rpb25RdWV1ZUVudHJ5ID09IG51bGwpIHtcbiAgICAgICAgICBpdGUgPSB0aGlzLl9tb3Rpb25zLmVyYXNlKGl0ZSk7IC8vIOWJiumZpFxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbW90aW9uOiBBQ3ViaXNtTW90aW9uID0gbW90aW9uUXVldWVFbnRyeS5fbW90aW9uO1xuXG4gICAgICAgIGlmIChtb3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkucmVsZWFzZSgpO1xuICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkgPSB2b2lkIDA7XG4gICAgICAgICAgbW90aW9uUXVldWVFbnRyeSA9IG51bGw7XG4gICAgICAgICAgaXRlID0gdGhpcy5fbW90aW9ucy5lcmFzZShpdGUpOyAvLyDliYrpmaRcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIC0tLS0tIOe1guS6hua4iOOBv+OBruWHpueQhuOBjOOBguOCjOOBsOWJiumZpOOBmeOCiyAtLS0tLS1cbiAgICAgICAgaWYgKCFtb3Rpb25RdWV1ZUVudHJ5LmlzRmluaXNoZWQoKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGUucHJlSW5jcmVtZW50KCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5oyH5a6a44GX44Gf44Oi44O844K344On44Oz44Gu57WC5LqG44Gu56K66KqNXG4gICAgICogQHBhcmFtIG1vdGlvblF1ZXVlRW50cnlOdW1iZXIg44Oi44O844K344On44Oz44Gu6K2Y5Yil55Wq5Y+3XG4gICAgICogQHJldHVybiB0cnVlIOWFqOOBpue1guS6huOBl+OBpuOBhOOCi1xuICAgICAqIEByZXR1cm4gZmFsc2Ug57WC5LqG44GX44Gm44GE44Gq44GEXG4gICAgICovXG4gICAgcHVibGljIGlzRmluaXNoZWRCeUhhbmRsZShcbiAgICAgIG1vdGlvblF1ZXVlRW50cnlOdW1iZXI6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGVcbiAgICApOiBib29sZWFuIHtcbiAgICAgIC8vIOaXouOBq+ODouODvOOCt+ODp+ODs+OBjOOBguOCjOOBsOe1guS6huODleODqeOCsOOCkueri+OBpuOCi1xuICAgICAgZm9yIChcbiAgICAgICAgbGV0IGl0ZTogaXRlcmF0b3I8Q3ViaXNtTW90aW9uUXVldWVFbnRyeT4gPSB0aGlzLl9tb3Rpb25zLmJlZ2luKCk7XG4gICAgICAgIGl0ZS5ub3RFcXVhbCh0aGlzLl9tb3Rpb25zLmVuZCgpKTtcbiAgICAgICAgaXRlLmluY3JlbWVudCgpXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeSA9IGl0ZS5wdHIoKTtcblxuICAgICAgICBpZiAobW90aW9uUXVldWVFbnRyeSA9PSBudWxsKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgbW90aW9uUXVldWVFbnRyeS5fbW90aW9uUXVldWVFbnRyeUhhbmRsZSA9PSBtb3Rpb25RdWV1ZUVudHJ5TnVtYmVyICYmXG4gICAgICAgICAgIW1vdGlvblF1ZXVlRW50cnkuaXNGaW5pc2hlZCgpXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5YWo44Gm44Gu44Oi44O844K344On44Oz44KS5YGc5q2i44GZ44KLXG4gICAgICovXG4gICAgcHVibGljIHN0b3BBbGxNb3Rpb25zKCk6IHZvaWQge1xuICAgICAgLy8gLS0tLS0tLSDlh6bnkIbjgpLooYzjgYYgLS0tLS0tLVxuICAgICAgLy8g5pei44Gr44Oi44O844K344On44Oz44GM44GC44KM44Gw57WC5LqG44OV44Op44Kw44KS56uL44Gm44KLXG5cbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpdGU6IGl0ZXJhdG9yPEN1YmlzbU1vdGlvblF1ZXVlRW50cnk+ID0gdGhpcy5fbW90aW9ucy5iZWdpbigpO1xuICAgICAgICBpdGUubm90RXF1YWwodGhpcy5fbW90aW9ucy5lbmQoKSk7XG5cbiAgICAgICkge1xuICAgICAgICBsZXQgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeSA9IGl0ZS5wdHIoKTtcblxuICAgICAgICBpZiAobW90aW9uUXVldWVFbnRyeSA9PSBudWxsKSB7XG4gICAgICAgICAgaXRlID0gdGhpcy5fbW90aW9ucy5lcmFzZShpdGUpO1xuXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAtLS0tLSDntYLkuobmuIjjgb/jga7lh6bnkIbjgYzjgYLjgozjgbDliYrpmaTjgZnjgosgLS0tLS0tXG4gICAgICAgIG1vdGlvblF1ZXVlRW50cnkucmVsZWFzZSgpO1xuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5ID0gdm9pZCAwO1xuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5ID0gbnVsbDtcbiAgICAgICAgaXRlID0gdGhpcy5fbW90aW9ucy5lcmFzZShpdGUpOyAvLyDliYrpmaRcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgICAgICog5oyH5a6a44GX44GfQ3ViaXNtTW90aW9uUXVldWVFbnRyeeOBruWPluW+l1xuXG4gICAgICAgICAqIEBwYXJhbSAgIG1vdGlvblF1ZXVlRW50cnlOdW1iZXIgIOODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt1xuICAgICAgICAgKiBAcmV0dXJuICDmjIflrprjgZfjgZ9DdWJpc21Nb3Rpb25RdWV1ZUVudHJ5XG4gICAgICAgICAqIEByZXR1cm4gIG51bGwgICDopovjgaTjgYvjgonjgarjgYvjgaPjgZ9cbiAgICAgICAgICovXG4gICAgcHVibGljIGdldEN1YmlzbU1vdGlvblF1ZXVlRW50cnkoXG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5TnVtYmVyOiBhbnlcbiAgICApOiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5IHtcbiAgICAgIC8vLS0tLS0tLSDlh6bnkIbjgpLooYzjgYYgLS0tLS0tLVxuICAgICAgLy8g5pei44Gr44Oi44O844K344On44Oz44GM44GC44KM44Gw57WC5LqG44OV44Op44Kw44KS56uL44Gm44KLXG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgaXRlOiBpdGVyYXRvcjxDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5PiA9IHRoaXMuX21vdGlvbnMuYmVnaW4oKTtcbiAgICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX21vdGlvbnMuZW5kKCkpO1xuICAgICAgICBpdGUucHJlSW5jcmVtZW50KClcbiAgICAgICkge1xuICAgICAgICBjb25zdCBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gaXRlLnB0cigpO1xuXG4gICAgICAgIGlmIChtb3Rpb25RdWV1ZUVudHJ5ID09IG51bGwpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5Ll9tb3Rpb25RdWV1ZUVudHJ5SGFuZGxlID09IG1vdGlvblF1ZXVlRW50cnlOdW1iZXJcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIG1vdGlvblF1ZXVlRW50cnk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kk44OZ44Oz44OI44KS5Y+X44GR5Y+W44KLQ2FsbGJhY2vjga7nmbvpjLJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjYWxsYmFjayDjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICAgKiBAcGFyYW0gY3VzdG9tRGF0YSDjgrPjg7zjg6vjg5Djg4Pjgq/jgavov5TjgZXjgozjgovjg4fjg7zjgr9cbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0RXZlbnRDYWxsYmFjayhcbiAgICAgIGNhbGxiYWNrOiBDdWJpc21Nb3Rpb25FdmVudEZ1bmN0aW9uLFxuICAgICAgY3VzdG9tRGF0YTogYW55ID0gbnVsbFxuICAgICk6IHZvaWQge1xuICAgICAgdGhpcy5fZXZlbnRDYWxsQmFjayA9IGNhbGxiYWNrO1xuICAgICAgdGhpcy5fZXZlbnRDdXN0b21EYXRhID0gY3VzdG9tRGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7PjgpLmm7TmlrDjgZfjgabjgIHjg6Ljg4fjg6vjgavjg5Hjg6njg6Hjg7zjgr/lgKTjgpLlj43mmKDjgZnjgovjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIG1vZGVsICAg5a++6LGh44Gu44Oi44OH44OrXG4gICAgICogQHBhcmFtICAgdXNlclRpbWVTZWNvbmRzICAg44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cbiAgICAgKiBAcmV0dXJuICB0cnVlICAgIOODouODh+ODq+OBuOODkeODqeODoeODvOOCv+WApOOBruWPjeaYoOOBguOCilxuICAgICAqIEByZXR1cm4gIGZhbHNlICAg44Oi44OH44Or44G444OR44Op44Oh44O844K/5YCk44Gu5Y+N5pig44Gq44GXKOODouODvOOCt+ODp+ODs+OBruWkieWMluOBquOBlylcbiAgICAgKi9cbiAgICBwdWJsaWMgZG9VcGRhdGVNb3Rpb24oXG4gICAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXG4gICAgICB1c2VyVGltZVNlY29uZHM6IG51bWJlclxuICAgICk6IGJvb2xlYW4ge1xuICAgICAgbGV0IHVwZGF0ZWQgPSBmYWxzZTtcblxuICAgICAgLy8gLS0tLS0tLSDlh6bnkIbjgpLooYzjgYYgLS0tLS0tLS1cbiAgICAgIC8vIOaXouOBq+ODouODvOOCt+ODp+ODs+OBjOOBguOCjOOBsOe1guS6huODleODqeOCsOOCkueri+OBpuOCi1xuXG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgaXRlOiBpdGVyYXRvcjxDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5PiA9IHRoaXMuX21vdGlvbnMuYmVnaW4oKTtcbiAgICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX21vdGlvbnMuZW5kKCkpO1xuXG4gICAgICApIHtcbiAgICAgICAgbGV0IG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSBpdGUucHRyKCk7XG5cbiAgICAgICAgaWYgKG1vdGlvblF1ZXVlRW50cnkgPT0gbnVsbCkge1xuICAgICAgICAgIGl0ZSA9IHRoaXMuX21vdGlvbnMuZXJhc2UoaXRlKTsgLy8g5YmK6ZmkXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtb3Rpb246IEFDdWJpc21Nb3Rpb24gPSBtb3Rpb25RdWV1ZUVudHJ5Ll9tb3Rpb247XG5cbiAgICAgICAgaWYgKG1vdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgbW90aW9uUXVldWVFbnRyeS5yZWxlYXNlKCk7XG4gICAgICAgICAgbW90aW9uUXVldWVFbnRyeSA9IHZvaWQgMDtcbiAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5ID0gbnVsbDtcbiAgICAgICAgICBpdGUgPSB0aGlzLl9tb3Rpb25zLmVyYXNlKGl0ZSk7IC8vIOWJiumZpFxuXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAtLS0tLS0g5YCk44KS5Y+N5pig44GZ44KLIC0tLS0tLVxuICAgICAgICBtb3Rpb24udXBkYXRlUGFyYW1ldGVycyhtb2RlbCwgbW90aW9uUXVldWVFbnRyeSwgdXNlclRpbWVTZWNvbmRzKTtcbiAgICAgICAgdXBkYXRlZCA9IHRydWU7XG5cbiAgICAgICAgLy8gLS0tLS0tIOODpuODvOOCtuODiOODquOCrOODvOOCpOODmeODs+ODiOOCkuaknOafu+OBmeOCiyAtLS0tXG4gICAgICAgIGNvbnN0IGZpcmVkTGlzdDogY3NtVmVjdG9yPGNzbVN0cmluZz4gPSBtb3Rpb24uZ2V0RmlyZWRFdmVudChcbiAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LmdldExhc3RDaGVja0V2ZW50VGltZSgpIC1cbiAgICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkuZ2V0U3RhcnRUaW1lKCksXG4gICAgICAgICAgdXNlclRpbWVTZWNvbmRzIC0gbW90aW9uUXVldWVFbnRyeS5nZXRTdGFydFRpbWUoKVxuICAgICAgICApO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlyZWRMaXN0LmdldFNpemUoKTsgKytpKSB7XG4gICAgICAgICAgdGhpcy5fZXZlbnRDYWxsQmFjayh0aGlzLCBmaXJlZExpc3QuYXQoaSksIHRoaXMuX2V2ZW50Q3VzdG9tRGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldExhc3RDaGVja0V2ZW50VGltZSh1c2VyVGltZVNlY29uZHMpO1xuXG4gICAgICAgIC8vIC0tLS0tLSDntYLkuobmuIjjgb/jga7lh6bnkIbjgYzjgYLjgozjgbDliYrpmaTjgZnjgosgLS0tLS0tXG4gICAgICAgIGlmIChtb3Rpb25RdWV1ZUVudHJ5LmlzRmluaXNoZWQoKSkge1xuICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkucmVsZWFzZSgpO1xuICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkgPSB2b2lkIDA7XG4gICAgICAgICAgbW90aW9uUXVldWVFbnRyeSA9IG51bGw7XG4gICAgICAgICAgaXRlID0gdGhpcy5fbW90aW9ucy5lcmFzZShpdGUpOyAvLyDliYrpmaRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGUucHJlSW5jcmVtZW50KCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVwZGF0ZWQ7XG4gICAgfVxuICAgIF91c2VyVGltZVNlY29uZHM6IG51bWJlcjsgLy8g44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cblxuICAgIF9tb3Rpb25zOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uUXVldWVFbnRyeT47IC8vIOODouODvOOCt+ODp+ODs1xuICAgIF9ldmVudENhbGxCYWNrOiBDdWJpc21Nb3Rpb25FdmVudEZ1bmN0aW9uOyAvLyDjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICBfZXZlbnRDdXN0b21EYXRhOiBhbnk7IC8vIOOCs+ODvOODq+ODkOODg+OCr+OBq+aIu+OBleOCjOOCi+ODh+ODvOOCv1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODmeODs+ODiOOBruOCs+ODvOODq+ODkOODg+OCr+mWouaVsOOCkuWumue+qVxuICAgKlxuICAgKiDjgqTjg5njg7Pjg4jjga7jgrPjg7zjg6vjg5Djg4Pjgq/jgavnmbvpjLLjgafjgY3jgovplqLmlbDjga7lnovmg4XloLFcbiAgICogQHBhcmFtIGNhbGxlciAgICAgICAg55m654Gr44GX44Gf44Kk44OZ44Oz44OI44KS5YaN55Sf44GV44Gb44GfQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyXG4gICAqIEBwYXJhbSBldmVudFZhbHVlICAgIOeZuueBq+OBl+OBn+OCpOODmeODs+ODiOOBruaWh+Wtl+WIl+ODh+ODvOOCv1xuICAgKiBAcGFyYW0gY3VzdG9tRGF0YSAgIOOCs+ODvOODq+ODkOODg+OCr+OBq+i/lOOBleOCjOOCi+eZu+mMsuaZguOBq+aMh+WumuOBleOCjOOBn+ODh+ODvOOCv1xuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBDdWJpc21Nb3Rpb25FdmVudEZ1bmN0aW9uIHtcbiAgICAoXG4gICAgICBjYWxsZXI6IEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcixcbiAgICAgIGV2ZW50VmFsdWU6IGNzbVN0cmluZyxcbiAgICAgIGN1c3RvbURhdGE6IGFueVxuICAgICk6IHZvaWQ7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu6K2Y5Yil55Wq5Y+3XG4gICAqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt+OBruWumue+qVxuICAgKi9cbiAgZXhwb3J0IGRlY2xhcmUgdHlwZSBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlID0gYW55O1xuICBleHBvcnQgY29uc3QgSW52YWxpZE1vdGlvblF1ZXVlRW50cnlIYW5kbGVWYWx1ZTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSA9IC0xO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21pZCB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCBDdWJpc21JZEhhbmRsZSA9IGN1YmlzbWlkLkN1YmlzbUlkSGFuZGxlO1xuaW1wb3J0IEN1YmlzbU1vZGVsID0gY3ViaXNtbW9kZWwuQ3ViaXNtTW9kZWw7XG5pbXBvcnQgY3NtVmVjdG9yID0gY3NtdmVjdG9yLmNzbVZlY3RvcjtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICog5ZG85ZC45qmf6IO9XG4gICAqXG4gICAqIOWRvOWQuOapn+iDveOCkuaPkOS+m+OBmeOCi+OAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbUJyZWF0aCB7XG4gICAgLyoqXG4gICAgICog44Kk44Oz44K544K/44Oz44K544Gu5L2c5oiQXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKTogQ3ViaXNtQnJlYXRoIHtcbiAgICAgIHJldHVybiBuZXcgQ3ViaXNtQnJlYXRoKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kk44Oz44K544K/44Oz44K544Gu56C05qOEXG4gICAgICogQHBhcmFtIGluc3RhbmNlIOWvvuixoeOBrkN1YmlzbUJyZWF0aFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZGVsZXRlKGluc3RhbmNlOiBDdWJpc21CcmVhdGgpOiB2b2lkIHtcbiAgICAgIGlmIChpbnN0YW5jZSAhPSBudWxsKSB7XG4gICAgICAgIGluc3RhbmNlID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlkbzlkLjjga7jg5Hjg6njg6Hjg7zjgr/jga7ntJDjgaXjgZFcbiAgICAgKiBAcGFyYW0gYnJlYXRoUGFyYW1ldGVycyDlkbzlkLjjgpLntJDjgaXjgZHjgZ/jgYTjg5Hjg6njg6Hjg7zjgr/jga7jg6rjgrnjg4hcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0UGFyYW1ldGVycyhcbiAgICAgIGJyZWF0aFBhcmFtZXRlcnM6IGNzbVZlY3RvcjxCcmVhdGhQYXJhbWV0ZXJEYXRhPlxuICAgICk6IHZvaWQge1xuICAgICAgdGhpcy5fYnJlYXRoUGFyYW1ldGVycyA9IGJyZWF0aFBhcmFtZXRlcnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5ZG85ZC444Gr57SQ44Gl44GE44Gm44GE44KL44OR44Op44Oh44O844K/44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDlkbzlkLjjgavntJDjgaXjgYTjgabjgYTjgovjg5Hjg6njg6Hjg7zjgr/jga7jg6rjgrnjg4hcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UGFyYW1ldGVycygpOiBjc21WZWN0b3I8QnJlYXRoUGFyYW1ldGVyRGF0YT4ge1xuICAgICAgcmV0dXJuIHRoaXMuX2JyZWF0aFBhcmFtZXRlcnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/44Gu5pu05pawXG4gICAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xuICAgICAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZVBhcmFtZXRlcnMoXG4gICAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXG4gICAgICBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXJcbiAgICApOiB2b2lkIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRUaW1lICs9IGRlbHRhVGltZVNlY29uZHM7XG5cbiAgICAgIGNvbnN0IHQ6IG51bWJlciA9IHRoaXMuX2N1cnJlbnRUaW1lICogMi4wICogMy4xNDE1OTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9icmVhdGhQYXJhbWV0ZXJzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICAgIGNvbnN0IGRhdGE6IEJyZWF0aFBhcmFtZXRlckRhdGEgPSB0aGlzLl9icmVhdGhQYXJhbWV0ZXJzLmF0KGkpO1xuXG4gICAgICAgIG1vZGVsLmFkZFBhcmFtZXRlclZhbHVlQnlJZChcbiAgICAgICAgICBkYXRhLnBhcmFtZXRlcklkLFxuICAgICAgICAgIGRhdGEub2Zmc2V0ICsgZGF0YS5wZWFrICogTWF0aC5zaW4odCAvIGRhdGEuY3ljbGUpLFxuICAgICAgICAgIGRhdGEud2VpZ2h0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5fY3VycmVudFRpbWUgPSAwLjA7XG4gICAgfVxuXG4gICAgX2JyZWF0aFBhcmFtZXRlcnM6IGNzbVZlY3RvcjxCcmVhdGhQYXJhbWV0ZXJEYXRhPjsgLy8g5ZG85ZC444Gr44Gy44KC44Gl44GE44Gm44GE44KL44OR44Op44Oh44O844K/44Gu44Oq44K544OIXG4gICAgX2N1cnJlbnRUaW1lOiBudW1iZXI7IC8vIOepjeeul+aZgumWk1vnp5JdXG4gIH1cblxuICAvKipcbiAgICog5ZG85ZC444Gu44OR44Op44Oh44O844K/5oOF5aCxXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQnJlYXRoUGFyYW1ldGVyRGF0YSB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICogQHBhcmFtIHBhcmFtZXRlcklkICAg5ZG85ZC444KS44Gy44KC44Gl44GR44KL44OR44Op44Oh44O844K/SURcbiAgICAgKiBAcGFyYW0gb2Zmc2V0ICAgICAgICDlkbzlkLjjgpLmraPlvKbms6LjgajjgZfjgZ/jgajjgY3jga7jgIHms6Ljga7jgqrjg5Xjgrvjg4Pjg4hcbiAgICAgKiBAcGFyYW0gcGVhayAgICAgICAgICDlkbzlkLjjgpLmraPlvKbms6LjgajjgZfjgZ/jgajjgY3jga7jgIHms6Ljga7pq5jjgZVcbiAgICAgKiBAcGFyYW0gY3ljbGUgICAgICAgICDlkbzlkLjjgpLmraPlvKbms6LjgajjgZfjgZ/jgajjgY3jga7jgIHms6Ljga7lkajmnJ9cbiAgICAgKiBAcGFyYW0gd2VpZ2h0ICAgICAgICDjg5Hjg6njg6Hjg7zjgr/jgbjjga7ph43jgb9cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgIHBhcmFtZXRlcklkPzogQ3ViaXNtSWRIYW5kbGUsXG4gICAgICBvZmZzZXQ/OiBudW1iZXIsXG4gICAgICBwZWFrPzogbnVtYmVyLFxuICAgICAgY3ljbGU/OiBudW1iZXIsXG4gICAgICB3ZWlnaHQ/OiBudW1iZXJcbiAgICApIHtcbiAgICAgIHRoaXMucGFyYW1ldGVySWQgPSBwYXJhbWV0ZXJJZCA9PSB1bmRlZmluZWQgPyBudWxsIDogcGFyYW1ldGVySWQ7XG4gICAgICB0aGlzLm9mZnNldCA9IG9mZnNldCA9PSB1bmRlZmluZWQgPyAwLjAgOiBvZmZzZXQ7XG4gICAgICB0aGlzLnBlYWsgPSBwZWFrID09IHVuZGVmaW5lZCA/IDAuMCA6IHBlYWs7XG4gICAgICB0aGlzLmN5Y2xlID0gY3ljbGUgPT0gdW5kZWZpbmVkID8gMC4wIDogY3ljbGU7XG4gICAgICB0aGlzLndlaWdodCA9IHdlaWdodCA9PSB1bmRlZmluZWQgPyAwLjAgOiB3ZWlnaHQ7XG4gICAgfVxuXG4gICAgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlOyAvLyDlkbzlkLjjgpLjgbLjgoLjgaXjgZHjgovjg5Hjg6njg6Hjg7zjgr9JRFxcXG4gICAgb2Zmc2V0OiBudW1iZXI7IC8vIOWRvOWQuOOCkuato+W8puazouOBqOOBl+OBn+OBqOOBjeOBruOAgeazouOBruOCquODleOCu+ODg+ODiFxuICAgIHBlYWs6IG51bWJlcjsgLy8g5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu6auY44GVXG4gICAgY3ljbGU6IG51bWJlcjsgLy8g5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu5ZGo5pyfXG4gICAgd2VpZ2h0OiBudW1iZXI7IC8vIOODkeODqeODoeODvOOCv+OBuOOBrumHjeOBv1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtdmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGljdWJpc21tb2RlbHNldHRpbmcgfSBmcm9tICcuLi9pY3ViaXNtbW9kZWxzZXR0aW5nJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21pZCB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcbmltcG9ydCBDdWJpc21Nb2RlbCA9IGN1YmlzbW1vZGVsLkN1YmlzbU1vZGVsO1xuaW1wb3J0IEN1YmlzbUlkSGFuZGxlID0gY3ViaXNtaWQuQ3ViaXNtSWRIYW5kbGU7XG5pbXBvcnQgSUN1YmlzbU1vZGVsU2V0dGluZyA9IGljdWJpc21tb2RlbHNldHRpbmcuSUN1YmlzbU1vZGVsU2V0dGluZztcbmltcG9ydCBjc21WZWN0b3IgPSBjc212ZWN0b3IuY3NtVmVjdG9yO1xuXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIC8qKlxuICAgKiDoh6rli5Xjgb7jgbDjgZ/jgY3mqZ/og71cbiAgICpcbiAgICog6Ieq5YuV44G+44Gw44Gf44GN5qmf6IO944KS5o+Q5L6b44GZ44KL44CCXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtRXllQmxpbmsge1xuICAgIC8qKlxuICAgICAqIOOCpOODs+OCueOCv+ODs+OCueOCkuS9nOaIkOOBmeOCi1xuICAgICAqIEBwYXJhbSBtb2RlbFNldHRpbmcg44Oi44OH44Or44Gu6Kit5a6a5oOF5aCxXG4gICAgICogQHJldHVybiDkvZzmiJDjgZXjgozjgZ/jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICAgKiBAbm90ZSDlvJXmlbDjgYxOVUxM44Gu5aC05ZCI44CB44OR44Op44Oh44O844K/SUTjgYzoqK3lrprjgZXjgozjgabjgYTjgarjgYTnqbrjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLkvZzmiJDjgZnjgovjgIJcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShcbiAgICAgIG1vZGVsU2V0dGluZzogSUN1YmlzbU1vZGVsU2V0dGluZyA9IG51bGxcbiAgICApOiBDdWJpc21FeWVCbGluayB7XG4gICAgICByZXR1cm4gbmV3IEN1YmlzbUV5ZUJsaW5rKG1vZGVsU2V0dGluZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kk44Oz44K544K/44Oz44K544Gu56C05qOEXG4gICAgICogQHBhcmFtIGV5ZUJsaW5rIOWvvuixoeOBrkN1YmlzbUV5ZUJsaW5rXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBkZWxldGUoZXllQmxpbms6IEN1YmlzbUV5ZUJsaW5rKTogdm9pZCB7XG4gICAgICBpZiAoZXllQmxpbmsgIT0gbnVsbCkge1xuICAgICAgICBleWVCbGluayA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44G+44Gw44Gf44GN44Gu6ZaT6ZqU44Gu6Kit5a6aXG4gICAgICogQHBhcmFtIGJsaW5raW5nSW50ZXJ2YWwg44G+44Gw44Gf44GN44Gu6ZaT6ZqU44Gu5pmC6ZaTW+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0QmxpbmtpbmdJbnRlcnZhbChibGlua2luZ0ludGVydmFsOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX2JsaW5raW5nSW50ZXJ2YWxTZWNvbmRzID0gYmxpbmtpbmdJbnRlcnZhbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgb7jgbDjgZ/jgY3jga7jg6Ljg7zjgrfjg6fjg7Pjga7oqbPntLDoqK3lrppcbiAgICAgKiBAcGFyYW0gY2xvc2luZyAgIOOBvuOBtuOBn+OCkumWieOBmOOCi+WLleS9nOOBruaJgOimgeaZgumWk1vnp5JdXG4gICAgICogQHBhcmFtIGNsb3NlZCAgICDjgb7jgbbjgZ/jgpLplonjgZjjgabjgYTjgovli5XkvZzjga7miYDopoHmmYLplpNb56eSXVxuICAgICAqIEBwYXJhbSBvcGVuaW5nICAg44G+44G244Gf44KS6ZaL44GP5YuV5L2c44Gu5omA6KaB5pmC6ZaTW+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0QmxpbmtpbmdTZXR0aW5nKFxuICAgICAgY2xvc2luZzogbnVtYmVyLFxuICAgICAgY2xvc2VkOiBudW1iZXIsXG4gICAgICBvcGVuaW5nOiBudW1iZXJcbiAgICApOiB2b2lkIHtcbiAgICAgIHRoaXMuX2Nsb3NpbmdTZWNvbmRzID0gY2xvc2luZztcbiAgICAgIHRoaXMuX2Nsb3NlZFNlY29uZHMgPSBjbG9zZWQ7XG4gICAgICB0aGlzLl9vcGVuaW5nU2Vjb25kcyA9IG9wZW5pbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44G+44Gw44Gf44GN44GV44Gb44KL44OR44Op44Oh44O844K/SUTjga7jg6rjgrnjg4jjga7oqK3lrppcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVySWRzIOODkeODqeODoeODvOOCv+OBrklE44Gu44Oq44K544OIXG4gICAgICovXG4gICAgcHVibGljIHNldFBhcmFtZXRlcklkcyhwYXJhbWV0ZXJJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4pOiB2b2lkIHtcbiAgICAgIHRoaXMuX3BhcmFtZXRlcklkcyA9IHBhcmFtZXRlcklkcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgb7jgbDjgZ/jgY3jgZXjgZvjgovjg5Hjg6njg6Hjg7zjgr9JROOBruODquOCueODiOOBruWPluW+l1xuICAgICAqIEByZXR1cm4g44OR44Op44Oh44O844K/SUTjga7jg6rjgrnjg4hcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UGFyYW1ldGVySWRzKCk6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4ge1xuICAgICAgcmV0dXJuIHRoaXMuX3BhcmFtZXRlcklkcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr/jga7mm7TmlrBcbiAgICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXG4gICAgICogQHBhcmFtIGRlbHRhVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaTW+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgdXBkYXRlUGFyYW1ldGVycyhcbiAgICAgIG1vZGVsOiBDdWJpc21Nb2RlbCxcbiAgICAgIGRlbHRhVGltZVNlY29uZHM6IG51bWJlclxuICAgICk6IHZvaWQge1xuICAgICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzICs9IGRlbHRhVGltZVNlY29uZHM7XG4gICAgICBsZXQgcGFyYW1ldGVyVmFsdWU6IG51bWJlcjtcbiAgICAgIGxldCB0ID0gMC4wO1xuXG4gICAgICBzd2l0Y2ggKHRoaXMuX2JsaW5raW5nU3RhdGUpIHtcbiAgICAgICAgY2FzZSBFeWVTdGF0ZS5FeWVTdGF0ZV9DbG9zaW5nOlxuICAgICAgICAgIHQgPVxuICAgICAgICAgICAgKHRoaXMuX3VzZXJUaW1lU2Vjb25kcyAtIHRoaXMuX3N0YXRlU3RhcnRUaW1lU2Vjb25kcykgL1xuICAgICAgICAgICAgdGhpcy5fY2xvc2luZ1NlY29uZHM7XG5cbiAgICAgICAgICBpZiAodCA+PSAxLjApIHtcbiAgICAgICAgICAgIHQgPSAxLjA7XG4gICAgICAgICAgICB0aGlzLl9ibGlua2luZ1N0YXRlID0gRXllU3RhdGUuRXllU3RhdGVfQ2xvc2VkO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVTdGFydFRpbWVTZWNvbmRzID0gdGhpcy5fdXNlclRpbWVTZWNvbmRzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhcmFtZXRlclZhbHVlID0gMS4wIC0gdDtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEV5ZVN0YXRlLkV5ZVN0YXRlX0Nsb3NlZDpcbiAgICAgICAgICB0ID1cbiAgICAgICAgICAgICh0aGlzLl91c2VyVGltZVNlY29uZHMgLSB0aGlzLl9zdGF0ZVN0YXJ0VGltZVNlY29uZHMpIC9cbiAgICAgICAgICAgIHRoaXMuX2Nsb3NlZFNlY29uZHM7XG5cbiAgICAgICAgICBpZiAodCA+PSAxLjApIHtcbiAgICAgICAgICAgIHRoaXMuX2JsaW5raW5nU3RhdGUgPSBFeWVTdGF0ZS5FeWVTdGF0ZV9PcGVuaW5nO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVTdGFydFRpbWVTZWNvbmRzID0gdGhpcy5fdXNlclRpbWVTZWNvbmRzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhcmFtZXRlclZhbHVlID0gMC4wO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgRXllU3RhdGUuRXllU3RhdGVfT3BlbmluZzpcbiAgICAgICAgICB0ID1cbiAgICAgICAgICAgICh0aGlzLl91c2VyVGltZVNlY29uZHMgLSB0aGlzLl9zdGF0ZVN0YXJ0VGltZVNlY29uZHMpIC9cbiAgICAgICAgICAgIHRoaXMuX29wZW5pbmdTZWNvbmRzO1xuXG4gICAgICAgICAgaWYgKHQgPj0gMS4wKSB7XG4gICAgICAgICAgICB0ID0gMS4wO1xuICAgICAgICAgICAgdGhpcy5fYmxpbmtpbmdTdGF0ZSA9IEV5ZVN0YXRlLkV5ZVN0YXRlX0ludGVydmFsO1xuICAgICAgICAgICAgdGhpcy5fbmV4dEJsaW5raW5nVGltZSA9IHRoaXMuZGV0ZXJtaW5OZXh0QmxpbmtpbmdUaW1pbmcoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZSA9IHQ7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBFeWVTdGF0ZS5FeWVTdGF0ZV9JbnRlcnZhbDpcbiAgICAgICAgICBpZiAodGhpcy5fbmV4dEJsaW5raW5nVGltZSA8IHRoaXMuX3VzZXJUaW1lU2Vjb25kcykge1xuICAgICAgICAgICAgdGhpcy5fYmxpbmtpbmdTdGF0ZSA9IEV5ZVN0YXRlLkV5ZVN0YXRlX0Nsb3Npbmc7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZVN0YXJ0VGltZVNlY29uZHMgPSB0aGlzLl91c2VyVGltZVNlY29uZHM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGFyYW1ldGVyVmFsdWUgPSAxLjA7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBFeWVTdGF0ZS5FeWVTdGF0ZV9GaXJzdDpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aGlzLl9ibGlua2luZ1N0YXRlID0gRXllU3RhdGUuRXllU3RhdGVfSW50ZXJ2YWw7XG4gICAgICAgICAgdGhpcy5fbmV4dEJsaW5raW5nVGltZSA9IHRoaXMuZGV0ZXJtaW5OZXh0QmxpbmtpbmdUaW1pbmcoKTtcblxuICAgICAgICAgIHBhcmFtZXRlclZhbHVlID0gMS4wO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoIUN1YmlzbUV5ZUJsaW5rLkNsb3NlSWZaZXJvKSB7XG4gICAgICAgIHBhcmFtZXRlclZhbHVlID0gLXBhcmFtZXRlclZhbHVlO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3BhcmFtZXRlcklkcy5nZXRTaXplKCk7ICsraSkge1xuICAgICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQodGhpcy5fcGFyYW1ldGVySWRzLmF0KGkpLCBwYXJhbWV0ZXJWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICogQHBhcmFtIG1vZGVsU2V0dGluZyDjg6Ljg4fjg6vjga7oqK3lrprmg4XloLFcbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IobW9kZWxTZXR0aW5nOiBJQ3ViaXNtTW9kZWxTZXR0aW5nKSB7XG4gICAgICB0aGlzLl9ibGlua2luZ1N0YXRlID0gRXllU3RhdGUuRXllU3RhdGVfRmlyc3Q7XG4gICAgICB0aGlzLl9uZXh0QmxpbmtpbmdUaW1lID0gMC4wO1xuICAgICAgdGhpcy5fc3RhdGVTdGFydFRpbWVTZWNvbmRzID0gMC4wO1xuICAgICAgdGhpcy5fYmxpbmtpbmdJbnRlcnZhbFNlY29uZHMgPSA0LjA7XG4gICAgICB0aGlzLl9jbG9zaW5nU2Vjb25kcyA9IDAuMTtcbiAgICAgIHRoaXMuX2Nsb3NlZFNlY29uZHMgPSAwLjA1O1xuICAgICAgdGhpcy5fb3BlbmluZ1NlY29uZHMgPSAwLjE1O1xuICAgICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzID0gMC4wO1xuICAgICAgdGhpcy5fcGFyYW1ldGVySWRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4oKTtcblxuICAgICAgaWYgKG1vZGVsU2V0dGluZyA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb2RlbFNldHRpbmcuZ2V0RXllQmxpbmtQYXJhbWV0ZXJDb3VudCgpOyArK2kpIHtcbiAgICAgICAgdGhpcy5fcGFyYW1ldGVySWRzLnB1c2hCYWNrKG1vZGVsU2V0dGluZy5nZXRFeWVCbGlua1BhcmFtZXRlcklkKGkpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmrKHjga7nnqzjgY3jga7jgr/jgqTjg5/jg7PjgrDjga7msbrlrppcbiAgICAgKlxuICAgICAqIEByZXR1cm4g5qyh44Gu44G+44Gw44Gf44GN44KS6KGM44GG5pmC5Yi7W+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgZGV0ZXJtaW5OZXh0QmxpbmtpbmdUaW1pbmcoKTogbnVtYmVyIHtcbiAgICAgIGNvbnN0IHI6IG51bWJlciA9IE1hdGgucmFuZG9tKCk7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgKyByICogKDIuMCAqIHRoaXMuX2JsaW5raW5nSW50ZXJ2YWxTZWNvbmRzIC0gMS4wKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBfYmxpbmtpbmdTdGF0ZTogbnVtYmVyOyAvLyDnj77lnKjjga7nirbmhYtcbiAgICBfcGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+OyAvLyDmk43kvZzlr77osaHjga7jg5Hjg6njg6Hjg7zjgr/jga5JROOBruODquOCueODiFxuICAgIF9uZXh0QmxpbmtpbmdUaW1lOiBudW1iZXI7IC8vIOasoeOBruOBvuOBsOOBn+OBjeOBruaZguWIu1vnp5JdXG4gICAgX3N0YXRlU3RhcnRUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDnj77lnKjjga7nirbmhYvjgYzplovlp4vjgZfjgZ/mmYLliLtb56eSXVxuICAgIF9ibGlua2luZ0ludGVydmFsU2Vjb25kczogbnVtYmVyOyAvLyDjgb7jgbDjgZ/jgY3jga7plpPpmpRb56eSXVxuICAgIF9jbG9zaW5nU2Vjb25kczogbnVtYmVyOyAvLyDjgb7jgbbjgZ/jgpLplonjgZjjgovli5XkvZzjga7miYDopoHmmYLplpNb56eSXVxuICAgIF9jbG9zZWRTZWNvbmRzOiBudW1iZXI7IC8vIOOBvuOBtuOBn+OCkumWieOBmOOBpuOBhOOCi+WLleS9nOOBruaJgOimgeaZgumWk1vnp5JdXG4gICAgX29wZW5pbmdTZWNvbmRzOiBudW1iZXI7IC8vIOOBvuOBtuOBn+OCkumWi+OBj+WLleS9nOOBruaJgOimgeaZgumWk1vnp5JdXG4gICAgX3VzZXJUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxuXG4gICAgLyoqXG4gICAgICogSUTjgafmjIflrprjgZXjgozjgZ/nm67jga7jg5Hjg6njg6Hjg7zjgr/jgYzjgIEw44Gu44Go44GN44Gr6ZaJ44GY44KL44Gq44KJIHRydWUg44CBMeOBruaZguOBq+mWieOBmOOCi+OBquOCiSBmYWxzZSDjgIJcbiAgICAgKi9cbiAgICBzdGF0aWMgcmVhZG9ubHkgQ2xvc2VJZlplcm86IGJvb2xlYW4gPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOBvuOBsOOBn+OBjeOBrueKtuaFi1xuICAgKlxuICAgKiDjgb7jgbDjgZ/jgY3jga7nirbmhYvjgpLooajjgZnliJfmjJnlnotcbiAgICovXG4gIGV4cG9ydCBlbnVtIEV5ZVN0YXRlIHtcbiAgICBFeWVTdGF0ZV9GaXJzdCA9IDAsIC8vIOWIneacn+eKtuaFi1xuICAgIEV5ZVN0YXRlX0ludGVydmFsLCAvLyDjgb7jgbDjgZ/jgY3jgZfjgabjgYTjgarjgYTnirbmhYtcbiAgICBFeWVTdGF0ZV9DbG9zaW5nLCAvLyDjgb7jgbbjgZ/jgYzplonjgZjjgabjgYTjgY/pgJTkuK3jga7nirbmhYtcbiAgICBFeWVTdGF0ZV9DbG9zZWQsIC8vIOOBvuOBtuOBn+OBjOmWieOBmOOBpuOBhOOCi+eKtuaFi1xuICAgIEV5ZVN0YXRlX09wZW5pbmcgLy8g44G+44G244Gf44GM6ZaL44GE44Gm44GE44GP6YCU5Lit44Gu54q25oWLXG4gIH1cbn1cbiIsImltcG9ydCB7IExBcHBEZWxlZ2F0ZSB9IGZyb20gJy4vbGFwcGRlbGVnYXRlJztcclxuaW1wb3J0IHsgbGFwcGRlZmluZVNldCB9IGZyb20gJy4vbGFwcGRlZmluZSc7XHJcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xyXG5cclxuZnVuY3Rpb24gUmVhY3RMaXZlMmQocHJvcHMpIHtcclxuICAgIGxldCBjYW52YXNTdHlsZSA9IHtcclxuICAgICAgICBwb3NpdGlvbiA6ICdyZWxhdGl2ZScsXHJcbiAgICAgICAgdG9wOiBwcm9wcy50b3AgPyBwcm9wcy50b3AgOiAnJyxcclxuICAgICAgICByaWdodDogcHJvcHMucmlnaHQgPyBwcm9wcy5yaWdodCA6ICcwJyxcclxuICAgICAgICBib3R0b206IHByb3BzLmJvdHRvbSA/IHByb3BzLmJvdHRvbSA6ICcwJyxcclxuICAgICAgICBsZWZ0OiBwcm9wcy5sZWZ0ID8gcHJvcHMubGVmdCA6ICcnXHJcbiAgICB9XHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZygncHJvcHMnLCBwcm9wcylcclxuICAgICAgICBcclxuICAgICAgICBwcm9wcy5Nb2RlbExpc3QgPyBsYXBwZGVmaW5lU2V0LnNldE1vZGVsRGlyKHByb3BzLk1vZGVsTGlzdCkgOiBsYXBwZGVmaW5lU2V0LnNldE1vZGVsRGlyKFtdKVxyXG5cclxuICAgICAgICBcclxuICAgICAgICBpZiAoTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuaW5pdGlhbGl6ZSgpID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLnJ1bigpO1xyXG5cclxuXHJcbiAgICAgICAgd2luZG93Lm9uYmVmb3JldW5sb2FkID0gKCkgPT4gTEFwcERlbGVnYXRlLnJlbGVhc2VJbnN0YW5jZSgpO1xyXG5cclxuICAgIH0sIFtdKTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPGNhbnZhc1xyXG4gICAgICAgICAgICAgICAgaWQ9XCJsaXZlMmRcIlxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e2NhbnZhc1N0eWxlfVxyXG4gICAgICAgICAgICAgICAgd2lkdGg9e3Byb3BzLndpZHRoID8gcHJvcHMud2lkdGggOiAnMzAwJ31cclxuICAgICAgICAgICAgICAgIGhlaWdodD17cHJvcHMuaGVpZ2h0ID8gcHJvcHMuaGVpZ2h0IDogJzQwMCd9XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJsaXZlMmRcIlxyXG4gICAgICAgICAgICA+PC9jYW52YXM+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJlYWN0TGl2ZTJkIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gIOODreOCsOWHuuWKm+mWouaVsOOBruioreWumlxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLy0tLS0tLS0tLS0g44Ot44Kw5Ye65Yqb44Os44OZ44OrIOmBuOaKnumgheebriDlrprnvqkgLS0tLS0tLS0tLVxuLy8g6Kmz57Sw44Ot44Kw5Ye65Yqb6Kit5a6aXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTF9WRVJCT1NFID0gMDtcbi8vIOODh+ODkOODg+OCsOODreOCsOWHuuWKm+ioreWumlxuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUxfREVCVUcgPSAxO1xuLy8gSW5mb+ODreOCsOWHuuWKm+ioreWumlxuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUxfSU5GTyA9IDI7XG4vLyDorablkYrjg63jgrDlh7rlipvoqK3lrppcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMX1dBUk5JTkcgPSAzO1xuLy8g44Ko44Op44O844Ot44Kw5Ye65Yqb6Kit5a6aXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTF9FUlJPUiA9IDQ7XG4vLyDjg63jgrDlh7rlipvjgqrjg5XoqK3lrppcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMX09GRiA9IDU7XG5cbi8qKlxuICog44Ot44Kw5Ye65Yqb44Os44OZ44Or6Kit5a6a44CCXG4gKlxuICog5by35Yi255qE44Gr44Ot44Kw5Ye65Yqb44Os44OZ44Or44KS5aSJ44GI44KL5pmC44Gr5a6a576p44KS5pyJ5Yq544Gr44GZ44KL44CCXG4gKiBDU01fTE9HX0xFVkVMX1ZFUkJPU0Ug772eIENTTV9MT0dfTEVWRUxfT0ZGIOOCkumBuOaKnuOBmeOCi+OAglxuICovXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTDogbnVtYmVyID0gQ1NNX0xPR19MRVZFTF9WRVJCT1NFO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21pZCB9IGZyb20gJy4vY3ViaXNtaWQnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcbmltcG9ydCBjc21TdHJpbmcgPSBjc21zdHJpbmcuY3NtU3RyaW5nO1xuaW1wb3J0IEN1YmlzbUlkID0gY3ViaXNtaWQuQ3ViaXNtSWQ7XG5pbXBvcnQgY3NtVmVjdG9yID0gY3NtdmVjdG9yLmNzbVZlY3RvcjtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICogSUTlkI3jga7nrqHnkIZcbiAgICpcbiAgICogSUTlkI3jgpLnrqHnkIbjgZnjgovjgIJcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21JZE1hbmFnZXIge1xuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMuX2lkcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtSWQ+KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAgICovXG4gICAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2lkcy5nZXRTaXplKCk7ICsraSkge1xuICAgICAgICB0aGlzLl9pZHMuc2V0KGksIHZvaWQgMCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9pZHMgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElE5ZCN44KS44Oq44K544OI44GL44KJ55m76YyyXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWRzIElE5ZCN44Oq44K544OIXG4gICAgICogQHBhcmFtIGNvdW50IElE44Gu5YCL5pWwXG4gICAgICovXG4gICAgcHVibGljIHJlZ2lzdGVySWRzKGlkczogc3RyaW5nW10gfCBjc21TdHJpbmdbXSk6IHZvaWQge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5yZWdpc3RlcklkKGlkc1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSUTlkI3jgpLnmbvpjLJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpZCBJROWQjVxuICAgICAqL1xuICAgIHB1YmxpYyByZWdpc3RlcklkKGlkOiBzdHJpbmcgfCBjc21TdHJpbmcpOiBDdWJpc21JZCB7XG4gICAgICBsZXQgcmVzdWx0OiBDdWJpc21JZCA9IG51bGw7XG5cbiAgICAgIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgaWQpIHtcbiAgICAgICAgaWYgKChyZXN1bHQgPSB0aGlzLmZpbmRJZChpZCkpICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0ID0gbmV3IEN1YmlzbUlkKGlkKTtcbiAgICAgICAgdGhpcy5faWRzLnB1c2hCYWNrKHJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RlcklkKGlkLnMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElE5ZCN44GL44KJSUTjgpLlj5blvpfjgZnjgotcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpZCBJROWQjVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRJZChpZDogY3NtU3RyaW5nIHwgc3RyaW5nKTogQ3ViaXNtSWQge1xuICAgICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJJZChpZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSUTlkI3jgYvjgolJROOBrueiuuiqjVxuICAgICAqXG4gICAgICogQHJldHVybiB0cnVlIOWtmOWcqOOBmeOCi1xuICAgICAqIEByZXR1cm4gZmFsc2Ug5a2Y5Zyo44GX44Gq44GEXG4gICAgICovXG4gICAgcHVibGljIGlzRXhpc3QoaWQ6IGNzbVN0cmluZyB8IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgaWYgKCdzdHJpbmcnID09IHR5cGVvZiBpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5maW5kSWQoaWQpICE9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5pc0V4aXN0KGlkLnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElE5ZCN44GL44KJSUTjgpLmpJzntKLjgZnjgovjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpZCBJROWQjVxuICAgICAqIEByZXR1cm4g55m76Yyy44GV44KM44Gm44GE44KLSUTjgILjgarjgZHjgozjgbBOVUxM44CCXG4gICAgICovXG4gICAgcHJpdmF0ZSBmaW5kSWQoaWQ6IHN0cmluZyk6IEN1YmlzbUlkIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5faWRzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzLl9pZHNcbiAgICAgICAgICAgIC5hdChpKVxuICAgICAgICAgICAgLmdldFN0cmluZygpXG4gICAgICAgICAgICAuaXNFcXVhbChpZClcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2lkcy5hdChpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9pZHM6IGNzbVZlY3RvcjxDdWJpc21JZD47IC8vIOeZu+mMsuOBleOCjOOBpuOBhOOCi0lE44Gu44Oq44K544OIXG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc21zdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgY3NtU3RyaW5nID0gY3Ntc3RyaW5nLmNzbVN0cmluZztcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICog44OR44Op44Oh44O844K/5ZCN44O744OR44O844OE5ZCN44O7RHJhd2FibGXlkI3jgpLkv53mjIFcbiAgICpcbiAgICog44OR44Op44Oh44O844K/5ZCN44O744OR44O844OE5ZCN44O7RHJhd2FibGXlkI3jgpLkv53mjIHjgZnjgovjgq/jg6njgrnjgIJcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21JZCB7XG4gICAgLyoqXG4gICAgICogSUTlkI3jgpLlj5blvpfjgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0U3RyaW5nKCk6IGNzbVN0cmluZyB7XG4gICAgICByZXR1cm4gdGhpcy5faWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGlkOiBzdHJpbmcgfCBjc21TdHJpbmcpIHtcbiAgICAgIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuX2lkID0gbmV3IGNzbVN0cmluZyhpZCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faWQgPSBpZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpZOOCkuavlOi8g1xuICAgICAqIEBwYXJhbSBjIOavlOi8g+OBmeOCi2lkXG4gICAgICogQHJldHVybiDlkIzjgZjjgarjgonjgbB0cnVlLOeVsOOBquOBo+OBpuOBhOOCjOOBsGZhbHNl44KS6L+U44GZXG4gICAgICovXG4gICAgcHVibGljIGlzRXF1YWwoYzogc3RyaW5nIHwgY3NtU3RyaW5nIHwgQ3ViaXNtSWQpOiBib29sZWFuIHtcbiAgICAgIGlmICh0eXBlb2YgYyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkLmlzRXF1YWwoYyk7XG4gICAgICB9IGVsc2UgaWYgKGMgaW5zdGFuY2VvZiBjc21TdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkLmlzRXF1YWwoYy5zKTtcbiAgICAgIH0gZWxzZSBpZiAoYyBpbnN0YW5jZW9mIEN1YmlzbUlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZC5pc0VxdWFsKGMuX2lkLnMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGlk44KS5q+U6LyDXG4gICAgICogQHBhcmFtIGMg5q+U6LyD44GZ44KLaWRcbiAgICAgKiBAcmV0dXJuIOWQjOOBmOOBquOCieOBsHRydWUs55Ww44Gq44Gj44Gm44GE44KM44GwZmFsc2XjgpLov5TjgZlcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNOb3RFcXVhbChjOiBzdHJpbmcgfCBjc21TdHJpbmcgfCBDdWJpc21JZCk6IGJvb2xlYW4ge1xuICAgICAgaWYgKHR5cGVvZiBjID09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5faWQuaXNFcXVhbChjKTtcbiAgICAgIH0gZWxzZSBpZiAoYyBpbnN0YW5jZW9mIGNzbVN0cmluZykge1xuICAgICAgICByZXR1cm4gIXRoaXMuX2lkLmlzRXF1YWwoYy5zKTtcbiAgICAgIH0gZWxzZSBpZiAoYyBpbnN0YW5jZW9mIEN1YmlzbUlkKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5faWQuaXNFcXVhbChjLl9pZC5zKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9pZDogY3NtU3RyaW5nOyAvLyBJROWQjVxuICB9XG5cbiAgZXhwb3J0IGRlY2xhcmUgdHlwZSBDdWJpc21JZEhhbmRsZSA9IEN1YmlzbUlkO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbU1hdHJpeDQ0IH0gZnJvbSAnLi4vRnJhbWV3b3JrL3NyYy9tYXRoL2N1YmlzbW1hdHJpeDQ0JztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc212aWV3bWF0cml4IH0gZnJvbSAnLi4vRnJhbWV3b3JrL3NyYy9tYXRoL2N1YmlzbXZpZXdtYXRyaXgnO1xuaW1wb3J0IENzbV9DdWJpc21WaWV3TWF0cml4ID0gY3ViaXNtdmlld21hdHJpeC5DdWJpc21WaWV3TWF0cml4O1xuaW1wb3J0IENzbV9DdWJpc21NYXRyaXg0NCA9IGN1YmlzbU1hdHJpeDQ0LkN1YmlzbU1hdHJpeDQ0O1xuaW1wb3J0IHsgVG91Y2hNYW5hZ2VyIH0gZnJvbSAnLi90b3VjaG1hbmFnZXInO1xuaW1wb3J0IHsgTEFwcExpdmUyRE1hbmFnZXIgfSBmcm9tICcuL2xhcHBsaXZlMmRtYW5hZ2VyJztcbmltcG9ydCB7IExBcHBEZWxlZ2F0ZSwgY2FudmFzLCBnbCB9IGZyb20gJy4vbGFwcGRlbGVnYXRlJztcbmltcG9ydCB7IExBcHBTcHJpdGUgfSBmcm9tICcuL2xhcHBzcHJpdGUnO1xuaW1wb3J0IHsgVGV4dHVyZUluZm8gfSBmcm9tICcuL2xhcHB0ZXh0dXJlbWFuYWdlcic7XG5pbXBvcnQgeyBMQXBwUGFsIH0gZnJvbSAnLi9sYXBwcGFsJztcbmltcG9ydCAqIGFzIExBcHBEZWZpbmUgZnJvbSAnLi9sYXBwZGVmaW5lJztcblxuLyoqXG4gKiDmj4/nlLvjgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIExBcHBWaWV3IHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fcHJvZ3JhbUlkID0gbnVsbDtcbiAgICB0aGlzLl9iYWNrID0gbnVsbDtcbiAgICB0aGlzLl9nZWFyID0gbnVsbDtcblxuICAgIC8vIOOCv+ODg+ODgemWouS/guOBruOCpOODmeODs+ODiOeuoeeQhlxuICAgIHRoaXMuX3RvdWNoTWFuYWdlciA9IG5ldyBUb3VjaE1hbmFnZXIoKTtcblxuICAgIC8vIOODh+ODkOOCpOOCueW6p+aomeOBi+OCieOCueOCr+ODquODvOODs+W6p+aomeOBq+WkieaPm+OBmeOCi+OBn+OCgeOBrlxuICAgIHRoaXMuX2RldmljZVRvU2NyZWVuID0gbmV3IENzbV9DdWJpc21NYXRyaXg0NCgpO1xuXG4gICAgLy8g55S76Z2i44Gu6KGo56S644Gu5ouh5aSn57iu5bCP44KE56e75YuV44Gu5aSJ5o+b44KS6KGM44GG6KGM5YiXXG4gICAgdGhpcy5fdmlld01hdHJpeCA9IG5ldyBDc21fQ3ViaXNtVmlld01hdHJpeCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWIneacn+WMluOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIGluaXRpYWxpemUoKTogdm9pZCB7XG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBjYW52YXM7XG5cbiAgICBjb25zdCByYXRpbzogbnVtYmVyID0gaGVpZ2h0IC8gd2lkdGg7XG4gICAgY29uc3QgbGVmdDogbnVtYmVyID0gTEFwcERlZmluZS5WaWV3TG9naWNhbExlZnQ7XG4gICAgY29uc3QgcmlnaHQ6IG51bWJlciA9IExBcHBEZWZpbmUuVmlld0xvZ2ljYWxSaWdodDtcbiAgICBjb25zdCBib3R0b206IG51bWJlciA9IC1yYXRpbztcbiAgICBjb25zdCB0b3A6IG51bWJlciA9IHJhdGlvO1xuXG4gICAgdGhpcy5fdmlld01hdHJpeC5zZXRTY3JlZW5SZWN0KGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCk7IC8vIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+eUu+mdouOBruevhOWbsuOAgiBY44Gu5bem56uv44CBWOOBruWPs+err+OAgVnjga7kuIvnq6/jgIFZ44Gu5LiK56uvXG5cbiAgICBjb25zdCBzY3JlZW5XOiBudW1iZXIgPSBNYXRoLmFicyhsZWZ0IC0gcmlnaHQpO1xuICAgIHRoaXMuX2RldmljZVRvU2NyZWVuLnNjYWxlUmVsYXRpdmUoc2NyZWVuVyAvIHdpZHRoLCAtc2NyZWVuVyAvIHdpZHRoKTtcbiAgICB0aGlzLl9kZXZpY2VUb1NjcmVlbi50cmFuc2xhdGVSZWxhdGl2ZSgtd2lkdGggKiAwLjUsIC1oZWlnaHQgKiAwLjUpO1xuXG4gICAgLy8g6KGo56S656+E5Zuy44Gu6Kit5a6aXG4gICAgdGhpcy5fdmlld01hdHJpeC5zZXRNYXhTY2FsZShMQXBwRGVmaW5lLlZpZXdNYXhTY2FsZSk7IC8vIOmZkOeVjOaLoeW8teeOh1xuICAgIHRoaXMuX3ZpZXdNYXRyaXguc2V0TWluU2NhbGUoTEFwcERlZmluZS5WaWV3TWluU2NhbGUpOyAvLyDpmZDnlYznuK7lsI/njodcblxuICAgIC8vIOihqOekuuOBp+OBjeOCi+acgOWkp+evhOWbslxuICAgIHRoaXMuX3ZpZXdNYXRyaXguc2V0TWF4U2NyZWVuUmVjdChcbiAgICAgIExBcHBEZWZpbmUuVmlld0xvZ2ljYWxNYXhMZWZ0LFxuICAgICAgTEFwcERlZmluZS5WaWV3TG9naWNhbE1heFJpZ2h0LFxuICAgICAgTEFwcERlZmluZS5WaWV3TG9naWNhbE1heEJvdHRvbSxcbiAgICAgIExBcHBEZWZpbmUuVmlld0xvZ2ljYWxNYXhUb3BcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOino+aUvuOBmeOCi1xuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgdGhpcy5fdmlld01hdHJpeCA9IG51bGw7XG4gICAgdGhpcy5fdG91Y2hNYW5hZ2VyID0gbnVsbDtcbiAgICB0aGlzLl9kZXZpY2VUb1NjcmVlbiA9IG51bGw7XG5cbiAgICB0aGlzLl9nZWFyLnJlbGVhc2UoKTtcbiAgICB0aGlzLl9nZWFyID0gbnVsbDtcblxuICAgIHRoaXMuX2JhY2sucmVsZWFzZSgpO1xuICAgIHRoaXMuX2JhY2sgPSBudWxsO1xuXG4gICAgZ2wuZGVsZXRlUHJvZ3JhbSh0aGlzLl9wcm9ncmFtSWQpO1xuICAgIHRoaXMuX3Byb2dyYW1JZCA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog5o+P55S744GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgcmVuZGVyKCk6IHZvaWQge1xuICAgIGdsLnVzZVByb2dyYW0odGhpcy5fcHJvZ3JhbUlkKTtcblxuICAgIGlmICh0aGlzLl9iYWNrKSB7XG4gICAgICB0aGlzLl9iYWNrLnJlbmRlcih0aGlzLl9wcm9ncmFtSWQpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZ2Vhcikge1xuICAgICAgdGhpcy5fZ2Vhci5yZW5kZXIodGhpcy5fcHJvZ3JhbUlkKTtcbiAgICB9XG5cbiAgICBnbC5mbHVzaCgpO1xuXG4gICAgY29uc3QgbGl2ZTJETWFuYWdlcjogTEFwcExpdmUyRE1hbmFnZXIgPSBMQXBwTGl2ZTJETWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXG4gICAgbGl2ZTJETWFuYWdlci5vblVwZGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeUu+WDj+OBruWIneacn+WMluOCkuihjOOBhuOAglxuICAgKi9cbiAgcHVibGljIGluaXRpYWxpemVTcHJpdGUoKTogdm9pZCB7XG4gICAgY29uc3Qgd2lkdGg6IG51bWJlciA9IGNhbnZhcy53aWR0aDtcbiAgICBjb25zdCBoZWlnaHQ6IG51bWJlciA9IGNhbnZhcy5oZWlnaHQ7XG5cbiAgICBjb25zdCB0ZXh0dXJlTWFuYWdlciA9IExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLmdldFRleHR1cmVNYW5hZ2VyKCk7XG4gICAgY29uc3QgcmVzb3VyY2VzUGF0aCA9IExBcHBEZWZpbmUuUmVzb3VyY2VzUGF0aDtcblxuICAgIGxldCBpbWFnZU5hbWUgPSAnJztcblxuICAgIC8vIOS4jeWKoOi9veeUu+W4g++8jOeUqOS6juWBmueci+adv+WomFxuXG4gICAgLy8gLy8g6IOM5pmv55S75YOP5Yid5pyf5YyWXG4gICAgLy8gaW1hZ2VOYW1lID0gTEFwcERlZmluZS5CYWNrSW1hZ2VOYW1lO1xuXG4gICAgLy8gLy8g6Z2e5ZCM5pyf44Gq44Gu44Gn44Kz44O844Or44OQ44OD44Kv6Zai5pWw44KS5L2c5oiQXG4gICAgLy8gY29uc3QgaW5pdEJhY2tHcm91bmRUZXh0dXJlID0gKHRleHR1cmVJbmZvOiBUZXh0dXJlSW5mbyk6IHZvaWQgPT4ge1xuICAgIC8vICAgY29uc3QgeDogbnVtYmVyID0gd2lkdGggKiAwLjU7XG4gICAgLy8gICBjb25zdCB5OiBudW1iZXIgPSBoZWlnaHQgKiAwLjU7XG5cbiAgICAvLyAgIGNvbnN0IGZ3aWR0aCA9IHRleHR1cmVJbmZvLndpZHRoICogMi4wO1xuICAgIC8vICAgY29uc3QgZmhlaWdodCA9IGhlaWdodCAqIDAuOTU7XG4gICAgLy8gICB0aGlzLl9iYWNrID0gbmV3IExBcHBTcHJpdGUoeCwgeSwgZndpZHRoLCBmaGVpZ2h0LCB0ZXh0dXJlSW5mby5pZCk7XG4gICAgLy8gfTtcblxuICAgIC8vIHRleHR1cmVNYW5hZ2VyLmNyZWF0ZVRleHR1cmVGcm9tUG5nRmlsZShcbiAgICAvLyAgIHJlc291cmNlc1BhdGggKyBpbWFnZU5hbWUsXG4gICAgLy8gICBmYWxzZSxcbiAgICAvLyAgIGluaXRCYWNrR3JvdW5kVGV4dHVyZVxuICAgIC8vICk7XG5cbiAgICAvLyAvLyDmra/ou4rnlLvlg4/liJ3mnJ/ljJZcbiAgICAvLyBpbWFnZU5hbWUgPSBMQXBwRGVmaW5lLkdlYXJJbWFnZU5hbWU7XG4gICAgLy8gY29uc3QgaW5pdEdlYXJUZXh0dXJlID0gKHRleHR1cmVJbmZvOiBUZXh0dXJlSW5mbyk6IHZvaWQgPT4ge1xuICAgIC8vICAgY29uc3QgeCA9IHdpZHRoIC0gdGV4dHVyZUluZm8ud2lkdGggKiAwLjU7XG4gICAgLy8gICBjb25zdCB5ID0gaGVpZ2h0IC0gdGV4dHVyZUluZm8uaGVpZ2h0ICogMC41O1xuICAgIC8vICAgY29uc3QgZndpZHRoID0gdGV4dHVyZUluZm8ud2lkdGg7XG4gICAgLy8gICBjb25zdCBmaGVpZ2h0ID0gdGV4dHVyZUluZm8uaGVpZ2h0O1xuICAgIC8vICAgdGhpcy5fZ2VhciA9IG5ldyBMQXBwU3ByaXRlKHgsIHksIGZ3aWR0aCwgZmhlaWdodCwgdGV4dHVyZUluZm8uaWQpO1xuICAgIC8vIH07XG5cbiAgICAvLyB0ZXh0dXJlTWFuYWdlci5jcmVhdGVUZXh0dXJlRnJvbVBuZ0ZpbGUoXG4gICAgLy8gICByZXNvdXJjZXNQYXRoICsgaW1hZ2VOYW1lLFxuICAgIC8vICAgZmFsc2UsXG4gICAgLy8gICBpbml0R2VhclRleHR1cmVcbiAgICAvLyApO1xuXG4gICAgLy8gLy8g44K344Kn44O844OA44O844KS5L2c5oiQXG4gICAgLy8gaWYgKHRoaXMuX3Byb2dyYW1JZCA9PSBudWxsKSB7XG4gICAgLy8gICB0aGlzLl9wcm9ncmFtSWQgPSBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5jcmVhdGVTaGFkZXIoKTtcbiAgICAvLyB9XG4gIH1cblxuICAvKipcbiAgICog44K/44OD44OB44GV44KM44Gf5pmC44Gr5ZG844Gw44KM44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBwb2ludFgg44K544Kv44Oq44O844OzWOW6p+aomVxuICAgKiBAcGFyYW0gcG9pbnRZIOOCueOCr+ODquODvOODs1nluqfmqJlcbiAgICovXG4gIHB1YmxpYyBvblRvdWNoZXNCZWdhbihwb2ludFg6IG51bWJlciwgcG9pbnRZOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl90b3VjaE1hbmFnZXIudG91Y2hlc0JlZ2FuKHBvaW50WCwgcG9pbnRZKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgr/jg4Pjg4HjgZfjgabjgYTjgovjgajjgY3jgavjg53jgqTjg7Pjgr/jgYzli5XjgYTjgZ/jgonlkbzjgbDjgozjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIHBvaW50WCDjgrnjgq/jg6rjg7zjg7NY5bqn5qiZXG4gICAqIEBwYXJhbSBwb2ludFkg44K544Kv44Oq44O844OzWeW6p+aomVxuICAgKi9cbiAgcHVibGljIG9uVG91Y2hlc01vdmVkKHBvaW50WDogbnVtYmVyLCBwb2ludFk6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHZpZXdYOiBudW1iZXIgPSB0aGlzLnRyYW5zZm9ybVZpZXdYKHRoaXMuX3RvdWNoTWFuYWdlci5nZXRYKCkpO1xuICAgIGNvbnN0IHZpZXdZOiBudW1iZXIgPSB0aGlzLnRyYW5zZm9ybVZpZXdZKHRoaXMuX3RvdWNoTWFuYWdlci5nZXRZKCkpO1xuXG4gICAgdGhpcy5fdG91Y2hNYW5hZ2VyLnRvdWNoZXNNb3ZlZChwb2ludFgsIHBvaW50WSk7XG5cbiAgICBjb25zdCBsaXZlMkRNYW5hZ2VyOiBMQXBwTGl2ZTJETWFuYWdlciA9IExBcHBMaXZlMkRNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgbGl2ZTJETWFuYWdlci5vbkRyYWcodmlld1gsIHZpZXdZKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgr/jg4Pjg4HjgYzntYLkuobjgZfjgZ/jgonlkbzjgbDjgozjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIHBvaW50WCDjgrnjgq/jg6rjg7zjg7NY5bqn5qiZXG4gICAqIEBwYXJhbSBwb2ludFkg44K544Kv44Oq44O844OzWeW6p+aomVxuICAgKi9cbiAgcHVibGljIG9uVG91Y2hlc0VuZGVkKHBvaW50WDogbnVtYmVyLCBwb2ludFk6IG51bWJlcik6IHZvaWQge1xuICAgIC8vIOOCv+ODg+ODgee1guS6hlxuICAgIGNvbnN0IGxpdmUyRE1hbmFnZXI6IExBcHBMaXZlMkRNYW5hZ2VyID0gTEFwcExpdmUyRE1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICBsaXZlMkRNYW5hZ2VyLm9uRHJhZygwLjAsIDAuMCk7XG5cbiAgICB7XG4gICAgICAvLyDjgrfjg7PjgrDjg6vjgr/jg4Pjg5dcbiAgICAgIGNvbnN0IHg6IG51bWJlciA9IHRoaXMuX2RldmljZVRvU2NyZWVuLnRyYW5zZm9ybVgoXG4gICAgICAgIHRoaXMuX3RvdWNoTWFuYWdlci5nZXRYKClcbiAgICAgICk7IC8vIOirlueQhuW6p+aomeWkieaPm+OBl+OBn+W6p+aomeOCkuWPluW+l+OAglxuICAgICAgY29uc3QgeTogbnVtYmVyID0gdGhpcy5fZGV2aWNlVG9TY3JlZW4udHJhbnNmb3JtWShcbiAgICAgICAgdGhpcy5fdG91Y2hNYW5hZ2VyLmdldFkoKVxuICAgICAgKTsgLy8g6KuW55CG5bqn5qiZ5aSJ5YyW44GX44Gf5bqn5qiZ44KS5Y+W5b6X44CCXG5cbiAgICAgIGlmIChMQXBwRGVmaW5lLkRlYnVnVG91Y2hMb2dFbmFibGUpIHtcbiAgICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoYFtBUFBddG91Y2hlc0VuZGVkIHg6ICR7eH0geTogJHt5fWApO1xuICAgICAgfVxuICAgICAgbGl2ZTJETWFuYWdlci5vblRhcCh4LCB5KTtcblxuICAgICAgLy8g5q2v6LuK44Gr44K/44OD44OX44GX44Gf44GLXG4gICAgICAvLyBpZiAodGhpcy5fZ2Vhci5pc0hpdChwb2ludFgsIHBvaW50WSkpIHtcbiAgICAgIC8vICAgbGl2ZTJETWFuYWdlci5uZXh0U2NlbmUoKTtcbiAgICAgIC8vIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogWOW6p+aomeOCklZpZXfluqfmqJnjgavlpInmj5vjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIGRldmljZVgg44OH44OQ44Kk44K5WOW6p+aomVxuICAgKi9cbiAgcHVibGljIHRyYW5zZm9ybVZpZXdYKGRldmljZVg6IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3Qgc2NyZWVuWDogbnVtYmVyID0gdGhpcy5fZGV2aWNlVG9TY3JlZW4udHJhbnNmb3JtWChkZXZpY2VYKTsgLy8g6KuW55CG5bqn5qiZ5aSJ5o+b44GX44Gf5bqn5qiZ44KS5Y+W5b6X44CCXG4gICAgcmV0dXJuIHRoaXMuX3ZpZXdNYXRyaXguaW52ZXJ0VHJhbnNmb3JtWChzY3JlZW5YKTsgLy8g5ouh5aSn44CB57iu5bCP44CB56e75YuV5b6M44Gu5YCk44CCXG4gIH1cblxuICAvKipcbiAgICogWeW6p+aomeOCklZpZXfluqfmqJnjgavlpInmj5vjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIGRldmljZVkg44OH44OQ44Kk44K5WeW6p+aomVxuICAgKi9cbiAgcHVibGljIHRyYW5zZm9ybVZpZXdZKGRldmljZVk6IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3Qgc2NyZWVuWTogbnVtYmVyID0gdGhpcy5fZGV2aWNlVG9TY3JlZW4udHJhbnNmb3JtWShkZXZpY2VZKTsgLy8g6KuW55CG5bqn5qiZ5aSJ5o+b44GX44Gf5bqn5qiZ44KS5Y+W5b6X44CCXG4gICAgcmV0dXJuIHRoaXMuX3ZpZXdNYXRyaXguaW52ZXJ0VHJhbnNmb3JtWShzY3JlZW5ZKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBY5bqn5qiZ44KSU2NyZWVu5bqn5qiZ44Gr5aSJ5o+b44GZ44KL44CCXG4gICAqIEBwYXJhbSBkZXZpY2VYIOODh+ODkOOCpOOCuVjluqfmqJlcbiAgICovXG4gIHB1YmxpYyB0cmFuc2Zvcm1TY3JlZW5YKGRldmljZVg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2RldmljZVRvU2NyZWVuLnRyYW5zZm9ybVgoZGV2aWNlWCk7XG4gIH1cblxuICAvKipcbiAgICogWeW6p+aomeOCklNjcmVlbuW6p+aomeOBq+WkieaPm+OBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gZGV2aWNlWSDjg4fjg5DjgqTjgrlZ5bqn5qiZXG4gICAqL1xuICBwdWJsaWMgdHJhbnNmb3JtU2NyZWVuWShkZXZpY2VZOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kZXZpY2VUb1NjcmVlbi50cmFuc2Zvcm1ZKGRldmljZVkpO1xuICB9XG5cbiAgX3RvdWNoTWFuYWdlcjogVG91Y2hNYW5hZ2VyOyAvLyDjgr/jg4Pjg4Hjg57jg43jg7zjgrjjg6Pjg7xcbiAgX2RldmljZVRvU2NyZWVuOiBDc21fQ3ViaXNtTWF0cml4NDQ7IC8vIOODh+ODkOOCpOOCueOBi+OCieOCueOCr+ODquODvOODs+OBuOOBruihjOWIl1xuICBfdmlld01hdHJpeDogQ3NtX0N1YmlzbVZpZXdNYXRyaXg7IC8vIHZpZXdNYXRyaXhcbiAgX3Byb2dyYW1JZDogV2ViR0xQcm9ncmFtOyAvLyDjgrfjgqfjg7zjg4BJRFxuICBfYmFjazogTEFwcFNwcml0ZTsgLy8g6IOM5pmv55S75YOPXG4gIF9nZWFyOiBMQXBwU3ByaXRlOyAvLyDjgq7jgqLnlLvlg49cbiAgX2NoYW5nZU1vZGVsOiBib29sZWFuOyAvLyDjg6Ljg4fjg6vliIfjgormm7/jgYjjg5Xjg6njgrBcbiAgX2lzQ2xpY2s6IGJvb2xlYW47IC8vIOOCr+ODquODg+OCr+S4rVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1hdHJpeDQ0IH0gZnJvbSAnLi9jdWJpc21tYXRyaXg0NCc7XG5pbXBvcnQgQ3ViaXNtTWF0cml4NDQgPSBjdWJpc21tYXRyaXg0NC5DdWJpc21NYXRyaXg0NDtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICog44Kr44Oh44Op44Gu5L2N572u5aSJ5pu044Gr5L2/44GG44Go5L6/5Yip44GqNHg06KGM5YiXXG4gICAqXG4gICAqIOOCq+ODoeODqeOBruS9jee9ruWkieabtOOBq+S9v+OBhuOBqOS+v+WIqeOBqjR4NOihjOWIl+OBruOCr+ODqeOCueOAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbVZpZXdNYXRyaXggZXh0ZW5kcyBDdWJpc21NYXRyaXg0NCB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIHRoaXMuX3NjcmVlbkxlZnQgPSAwLjA7XG4gICAgICB0aGlzLl9zY3JlZW5SaWdodCA9IDAuMDtcbiAgICAgIHRoaXMuX3NjcmVlblRvcCA9IDAuMDtcbiAgICAgIHRoaXMuX3NjcmVlbkJvdHRvbSA9IDAuMDtcbiAgICAgIHRoaXMuX21heExlZnQgPSAwLjA7XG4gICAgICB0aGlzLl9tYXhSaWdodCA9IDAuMDtcbiAgICAgIHRoaXMuX21heFRvcCA9IDAuMDtcbiAgICAgIHRoaXMuX21heEJvdHRvbSA9IDAuMDtcbiAgICAgIHRoaXMuX21heFNjYWxlID0gMC4wO1xuICAgICAgdGhpcy5fbWluU2NhbGUgPSAwLjA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog56e75YuV44KS6Kq/5pW0XG4gICAgICpcbiAgICAgKiBAcGFyYW0geCBY6Lu444Gu56e75YuV6YePXG4gICAgICogQHBhcmFtIHkgWei7uOOBruenu+WLlemHj1xuICAgICAqL1xuICAgIHB1YmxpYyBhZGp1c3RUcmFuc2xhdGUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIGlmICh0aGlzLl90clswXSAqIHRoaXMuX21heExlZnQgKyAodGhpcy5fdHJbMTJdICsgeCkgPiB0aGlzLl9zY3JlZW5MZWZ0KSB7XG4gICAgICAgIHggPSB0aGlzLl9zY3JlZW5MZWZ0IC0gdGhpcy5fdHJbMF0gKiB0aGlzLl9tYXhMZWZ0IC0gdGhpcy5fdHJbMTJdO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuX3RyWzBdICogdGhpcy5fbWF4UmlnaHQgKyAodGhpcy5fdHJbMTJdICsgeCkgPFxuICAgICAgICB0aGlzLl9zY3JlZW5SaWdodFxuICAgICAgKSB7XG4gICAgICAgIHggPSB0aGlzLl9zY3JlZW5SaWdodCAtIHRoaXMuX3RyWzBdICogdGhpcy5fbWF4UmlnaHQgLSB0aGlzLl90clsxMl07XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl90cls1XSAqIHRoaXMuX21heFRvcCArICh0aGlzLl90clsxM10gKyB5KSA8IHRoaXMuX3NjcmVlblRvcCkge1xuICAgICAgICB5ID0gdGhpcy5fc2NyZWVuVG9wIC0gdGhpcy5fdHJbNV0gKiB0aGlzLl9tYXhUb3AgLSB0aGlzLl90clsxM107XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5fdHJbNV0gKiB0aGlzLl9tYXhCb3R0b20gKyAodGhpcy5fdHJbMTNdICsgeSkgPlxuICAgICAgICB0aGlzLl9zY3JlZW5Cb3R0b21cbiAgICAgICkge1xuICAgICAgICB5ID0gdGhpcy5fc2NyZWVuQm90dG9tIC0gdGhpcy5fdHJbNV0gKiB0aGlzLl9tYXhCb3R0b20gLSB0aGlzLl90clsxM107XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRyMTogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgIDEuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAxLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMS4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIDAuMCxcbiAgICAgICAgMS4wXG4gICAgICBdKTtcblxuICAgICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIxLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOaLoeWkp+eOh+OCkuiqv+aVtFxuICAgICAqXG4gICAgICogQHBhcmFtIGN4IOaLoeWkp+OCkuihjOOBhljou7jjga7kuK3lv4PkvY3nva5cbiAgICAgKiBAcGFyYW0gY3kg5ouh5aSn44KS6KGM44GGWei7uOOBruS4reW/g+S9jee9rlxuICAgICAqIEBwYXJhbSBzY2FsZSDmi6HlpKfnjodcbiAgICAgKi9cbiAgICBwdWJsaWMgYWRqdXN0U2NhbGUoY3g6IG51bWJlciwgY3k6IG51bWJlciwgc2NhbGU6IG51bWJlcik6IHZvaWQge1xuICAgICAgY29uc3QgbWF4U2NhbGU6IG51bWJlciA9IHRoaXMuZ2V0TWF4U2NhbGUoKTtcbiAgICAgIGNvbnN0IG1pblNjYWxlOiBudW1iZXIgPSB0aGlzLmdldE1pblNjYWxlKCk7XG5cbiAgICAgIGNvbnN0IHRhcmdldFNjYWxlID0gc2NhbGUgKiB0aGlzLl90clswXTtcblxuICAgICAgaWYgKHRhcmdldFNjYWxlIDwgbWluU2NhbGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RyWzBdID4gMC4wKSB7XG4gICAgICAgICAgc2NhbGUgPSBtaW5TY2FsZSAvIHRoaXMuX3RyWzBdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRhcmdldFNjYWxlID4gbWF4U2NhbGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RyWzBdID4gMC4wKSB7XG4gICAgICAgICAgc2NhbGUgPSBtYXhTY2FsZSAvIHRoaXMuX3RyWzBdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRyMTogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgIDEuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAxLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMS4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIGN4LFxuICAgICAgICBjeSxcbiAgICAgICAgMC4wLFxuICAgICAgICAxLjBcbiAgICAgIF0pO1xuXG4gICAgICBjb25zdCB0cjI6IEZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgICBzY2FsZSxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICBzY2FsZSxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAxLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMS4wXG4gICAgICBdKTtcblxuICAgICAgY29uc3QgdHIzOiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgICAgMS4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDEuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAxLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgLWN4LFxuICAgICAgICAtY3ksXG4gICAgICAgIDAuMCxcbiAgICAgICAgMS4wXG4gICAgICBdKTtcblxuICAgICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIzLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICAgICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIyLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICAgICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIxLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+mkiueUn+OBruevhOWbsuOBruioreWumlxuICAgICAqXG4gICAgICogQHBhcmFtIGxlZnQgICAgICDlt6bovrrjga5Y6Lu444Gu5L2N572uXG4gICAgICogQHBhcmFtIHJpZ2h0ICAgICDlj7Povrrjga5Y6Lu444Gu5L2N572uXG4gICAgICogQHBhcmFtIGJvdHRvbSAgICDkuIvovrrjga5Z6Lu444Gu5L2N572uXG4gICAgICogQHBhcmFtIHRvcCAgICAgICDkuIrovrrjga5Z6Lu444Gu5L2N572uXG4gICAgICovXG4gICAgcHVibGljIHNldFNjcmVlblJlY3QoXG4gICAgICBsZWZ0OiBudW1iZXIsXG4gICAgICByaWdodDogbnVtYmVyLFxuICAgICAgYm90dG9tOiBudW1iZXIsXG4gICAgICB0b3A6IG51bWJlclxuICAgICk6IHZvaWQge1xuICAgICAgdGhpcy5fc2NyZWVuTGVmdCA9IGxlZnQ7XG4gICAgICB0aGlzLl9zY3JlZW5SaWdodCA9IHJpZ2h0O1xuICAgICAgdGhpcy5fc2NyZWVuQm90dG9tID0gYm90dG9tO1xuICAgICAgdGhpcy5fc2NyZWVuVG9wID0gdG9wO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeS4iuOBruenu+WLleWPr+iDveevhOWbsuOBruioreWumlxuICAgICAqIEBwYXJhbSBsZWZ0ICAgICAg5bem6L6644GuWOi7uOOBruS9jee9rlxuICAgICAqIEBwYXJhbSByaWdodCAgICAg5Y+z6L6644GuWOi7uOOBruS9jee9rlxuICAgICAqIEBwYXJhbSBib3R0b20gICAg5LiL6L6644GuWei7uOOBruS9jee9rlxuICAgICAqIEBwYXJhbSB0b3AgICAgICAg5LiK6L6644GuWei7uOOBruS9jee9rlxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRNYXhTY3JlZW5SZWN0KFxuICAgICAgbGVmdDogbnVtYmVyLFxuICAgICAgcmlnaHQ6IG51bWJlcixcbiAgICAgIGJvdHRvbTogbnVtYmVyLFxuICAgICAgdG9wOiBudW1iZXJcbiAgICApOiB2b2lkIHtcbiAgICAgIHRoaXMuX21heExlZnQgPSBsZWZ0O1xuICAgICAgdGhpcy5fbWF4UmlnaHQgPSByaWdodDtcbiAgICAgIHRoaXMuX21heFRvcCA9IHRvcDtcbiAgICAgIHRoaXMuX21heEJvdHRvbSA9IGJvdHRvbTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmnIDlpKfmi6HlpKfnjofjga7oqK3lrppcbiAgICAgKiBAcGFyYW0gbWF4U2NhbGUg5pyA5aSn5ouh5aSn546HXG4gICAgICovXG4gICAgcHVibGljIHNldE1heFNjYWxlKG1heFNjYWxlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX21heFNjYWxlID0gbWF4U2NhbGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5pyA5bCP5ouh5aSn546H44Gu6Kit5a6aXG4gICAgICogQHBhcmFtIG1pblNjYWxlIOacgOWwj+aLoeWkp+eOh1xuICAgICAqL1xuICAgIHB1YmxpYyBzZXRNaW5TY2FsZShtaW5TY2FsZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0aGlzLl9taW5TY2FsZSA9IG1pblNjYWxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOacgOWkp+aLoeWkp+eOh+OBruWPluW+l1xuICAgICAqIEByZXR1cm4g5pyA5aSn5ouh5aSn546HXG4gICAgICovXG4gICAgcHVibGljIGdldE1heFNjYWxlKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fbWF4U2NhbGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5pyA5bCP5ouh5aSn546H44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDmnIDlsI/mi6HlpKfnjodcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TWluU2NhbGUoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9taW5TY2FsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmi6HlpKfnjofjgYzmnIDlpKfjgavjgarjgaPjgabjgYTjgovjgYvjgpLnorroqo3jgZnjgotcbiAgICAgKlxuICAgICAqIEByZXR1cm4gdHJ1ZSDmi6HlpKfnjofjga/mnIDlpKdcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOaLoeWkp+eOh+OBr+acgOWkp+OBp+OBr+OBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBpc01heFNjYWxlKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0U2NhbGVYKCkgPj0gdGhpcy5fbWF4U2NhbGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5ouh5aSn546H44GM5pyA5bCP44Gr44Gq44Gj44Gm44GE44KL44GL44KS56K66KqN44GZ44KLXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHRydWUg5ouh5aSn546H44Gv5pyA5bCPXG4gICAgICogQHJldHVybiBmYWxzZSDmi6HlpKfnjofjga/mnIDlsI/jgafjga/jgarjgYRcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNNaW5TY2FsZSgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFNjYWxlWCgpIDw9IHRoaXMuX21pblNjYWxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeOBruW3pui+uuOBru+8uOi7uOS9jee9ruOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ44Gu5bem6L6644GuWOi7uOS9jee9rlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRTY3JlZW5MZWZ0KCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fc2NyZWVuTGVmdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7lj7Povrrjga7vvLjou7jkvY3nva7jgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcmV0dXJuIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeOBruWPs+i+uuOBrljou7jkvY3nva5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0U2NyZWVuUmlnaHQoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9zY3JlZW5SaWdodDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7kuIvovrrjga5Z6Lu45L2N572u44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHJldHVybiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7kuIvovrrjga5Z6Lu45L2N572uXG4gICAgICovXG4gICAgcHVibGljIGdldFNjcmVlbkJvdHRvbSgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX3NjcmVlbkJvdHRvbTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7kuIrovrrjga5Z6Lu45L2N572u44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHJldHVybiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7kuIrovrrjga5Z6Lu45L2N572uXG4gICAgICovXG4gICAgcHVibGljIGdldFNjcmVlblRvcCgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX3NjcmVlblRvcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlt6bovrrjga5Y6Lu45L2N572u44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDlt6bovrrjga5Y6Lu45L2N572u44Gu5pyA5aSn5YCkXG4gICAgICovXG4gICAgcHVibGljIGdldE1heExlZnQoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9tYXhMZWZ0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWPs+i+uuOBrljou7jkvY3nva7jga7mnIDlpKflgKTjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOWPs+i+uuOBrljou7jkvY3nva7jga7mnIDlpKflgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TWF4UmlnaHQoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9tYXhSaWdodDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDkuIvovrrjga5Z6Lu45L2N572u44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDkuIvovrrjga5Z6Lu45L2N572u44Gu5pyA5aSn5YCkXG4gICAgICovXG4gICAgcHVibGljIGdldE1heEJvdHRvbSgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX21heEJvdHRvbTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDkuIrovrrjga5Z6Lu45L2N572u44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDkuIrovrrjga5Z6Lu45L2N572u44Gu5pyA5aSn5YCkXG4gICAgICovXG4gICAgcHVibGljIGdldE1heFRvcCgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX21heFRvcDtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9zY3JlZW5MZWZ0OiBudW1iZXI7IC8vIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeS4iuOBruevhOWbsu+8iOW3pui+uljou7jkvY3nva7vvIlcbiAgICBwcml2YXRlIF9zY3JlZW5SaWdodDogbnVtYmVyOyAvLyDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnkuIrjga7nr4Tlm7LvvIjlj7PovrpY6Lu45L2N572u77yJXG4gICAgcHJpdmF0ZSBfc2NyZWVuVG9wOiBudW1iZXI7IC8vIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeS4iuOBruevhOWbsu+8iOS4iui+ulnou7jkvY3nva7vvIlcbiAgICBwcml2YXRlIF9zY3JlZW5Cb3R0b206IG51bWJlcjsgLy8g44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ5LiK44Gu56+E5Zuy77yI5LiL6L66Wei7uOS9jee9ru+8iVxuICAgIHByaXZhdGUgX21heExlZnQ6IG51bWJlcjsgLy8g6KuW55CG5bqn5qiZ5LiK44Gu56e75YuV5Y+v6IO956+E5Zuy77yI5bem6L66WOi7uOS9jee9ru+8iVxuICAgIHByaXZhdGUgX21heFJpZ2h0OiBudW1iZXI7IC8vIOirlueQhuW6p+aomeS4iuOBruenu+WLleWPr+iDveevhOWbsu+8iOWPs+i+uljou7jkvY3nva7vvIlcbiAgICBwcml2YXRlIF9tYXhUb3A6IG51bWJlcjsgLy8g6KuW55CG5bqn5qiZ5LiK44Gu56e75YuV5Y+v6IO956+E5Zuy77yI5LiK6L66Wei7uOS9jee9ru+8iVxuICAgIHByaXZhdGUgX21heEJvdHRvbTogbnVtYmVyOyAvLyDoq5bnkIbluqfmqJnkuIrjga7np7vli5Xlj6/og73nr4Tlm7LvvIjkuIvovrpZ6Lu45L2N572u77yJXG4gICAgcHJpdmF0ZSBfbWF4U2NhbGU6IG51bWJlcjsgLy8g5ouh5aSn546H44Gu5pyA5aSn5YCkXG4gICAgcHJpdmF0ZSBfbWluU2NhbGU6IG51bWJlcjsgLy8g5ouh5aSn546H44Gu5pyA5bCP5YCkXG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmV4cG9ydCBjbGFzcyBUb3VjaE1hbmFnZXIge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9zdGFydFggPSAwLjA7XG4gICAgdGhpcy5fc3RhcnRZID0gMC4wO1xuICAgIHRoaXMuX2xhc3RYID0gMC4wO1xuICAgIHRoaXMuX2xhc3RZID0gMC4wO1xuICAgIHRoaXMuX2xhc3RYMSA9IDAuMDtcbiAgICB0aGlzLl9sYXN0WTEgPSAwLjA7XG4gICAgdGhpcy5fbGFzdFgyID0gMC4wO1xuICAgIHRoaXMuX2xhc3RZMiA9IDAuMDtcbiAgICB0aGlzLl9sYXN0VG91Y2hEaXN0YW5jZSA9IDAuMDtcbiAgICB0aGlzLl9kZWx0YVggPSAwLjA7XG4gICAgdGhpcy5fZGVsdGFZID0gMC4wO1xuICAgIHRoaXMuX3NjYWxlID0gMS4wO1xuICAgIHRoaXMuX3RvdWNoU2luZ2xlID0gZmFsc2U7XG4gICAgdGhpcy5fZmxpcEF2YWlsYWJsZSA9IGZhbHNlO1xuICB9XG5cbiAgcHVibGljIGdldENlbnRlclgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdFg7XG4gIH1cblxuICBwdWJsaWMgZ2V0Q2VudGVyWSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WTtcbiAgfVxuXG4gIHB1YmxpYyBnZXREZWx0YVgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZGVsdGFYO1xuICB9XG5cbiAgcHVibGljIGdldERlbHRhWSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kZWx0YVk7XG4gIH1cblxuICBwdWJsaWMgZ2V0U3RhcnRYKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0WDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTdGFydFkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnRZO1xuICB9XG5cbiAgcHVibGljIGdldFNjYWxlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3NjYWxlO1xuICB9XG5cbiAgcHVibGljIGdldFgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdFg7XG4gIH1cblxuICBwdWJsaWMgZ2V0WSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRYMSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WDE7XG4gIH1cblxuICBwdWJsaWMgZ2V0WTEoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdFkxO1xuICB9XG5cbiAgcHVibGljIGdldFgyKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RYMjtcbiAgfVxuXG4gIHB1YmxpYyBnZXRZMigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WTI7XG4gIH1cblxuICBwdWJsaWMgaXNTaW5nbGVUb3VjaCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fdG91Y2hTaW5nbGU7XG4gIH1cblxuICBwdWJsaWMgaXNGbGlja0F2YWlsYWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZmxpcEF2YWlsYWJsZTtcbiAgfVxuXG4gIHB1YmxpYyBkaXNhYmxlRmxpY2soKTogdm9pZCB7XG4gICAgdGhpcy5fZmxpcEF2YWlsYWJsZSA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCv+ODg+ODgemWi+Wni+aZguOCpOODmeODs+ODiFxuICAgKiBAcGFyYW0gZGV2aWNlWCDjgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5444Gu5YCkXG4gICAqIEBwYXJhbSBkZXZpY2VZIOOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnnjga7lgKRcbiAgICovXG4gIHB1YmxpYyB0b3VjaGVzQmVnYW4oZGV2aWNlWDogbnVtYmVyLCBkZXZpY2VZOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9sYXN0WCA9IGRldmljZVg7XG4gICAgdGhpcy5fbGFzdFkgPSBkZXZpY2VZO1xuICAgIHRoaXMuX3N0YXJ0WCA9IGRldmljZVg7XG4gICAgdGhpcy5fc3RhcnRZID0gZGV2aWNlWTtcbiAgICB0aGlzLl9sYXN0VG91Y2hEaXN0YW5jZSA9IC0xLjA7XG4gICAgdGhpcy5fZmxpcEF2YWlsYWJsZSA9IHRydWU7XG4gICAgdGhpcy5fdG91Y2hTaW5nbGUgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOODieODqeODg+OCsOaZguOBruOCpOODmeODs+ODiFxuICAgKiBAcGFyYW0gZGV2aWNlWCDjgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5444Gu5YCkXG4gICAqIEBwYXJhbSBkZXZpY2VZIOOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnnjga7lgKRcbiAgICovXG4gIHB1YmxpYyB0b3VjaGVzTW92ZWQoZGV2aWNlWDogbnVtYmVyLCBkZXZpY2VZOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9sYXN0WCA9IGRldmljZVg7XG4gICAgdGhpcy5fbGFzdFkgPSBkZXZpY2VZO1xuICAgIHRoaXMuX2xhc3RUb3VjaERpc3RhbmNlID0gLTEuMDtcbiAgICB0aGlzLl90b3VjaFNpbmdsZSA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICog44OV44Oq44OD44Kv44Gu6Led6Zui5ris5a6aXG4gICAqIEByZXR1cm4g44OV44Oq44OD44Kv6Led6ZuiXG4gICAqL1xuICBwdWJsaWMgZ2V0RmxpY2tEaXN0YW5jZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZURpc3RhbmNlKFxuICAgICAgdGhpcy5fc3RhcnRYLFxuICAgICAgdGhpcy5fc3RhcnRZLFxuICAgICAgdGhpcy5fbGFzdFgsXG4gICAgICB0aGlzLl9sYXN0WVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog54K577yR44GL44KJ54K577yS44G444Gu6Led6Zui44KS5rGC44KB44KLXG4gICAqXG4gICAqIEBwYXJhbSB4MSDvvJHjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5444Gu5YCkXG4gICAqIEBwYXJhbSB5MSDvvJHjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5544Gu5YCkXG4gICAqIEBwYXJhbSB4MiDvvJLjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5444Gu5YCkXG4gICAqIEBwYXJhbSB5MiDvvJLjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5544Gu5YCkXG4gICAqL1xuICBwdWJsaWMgY2FsY3VsYXRlRGlzdGFuY2UoXG4gICAgeDE6IG51bWJlcixcbiAgICB5MTogbnVtYmVyLFxuICAgIHgyOiBudW1iZXIsXG4gICAgeTI6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLnNxcnQoKHgxIC0geDIpICogKHgxIC0geDIpICsgKHkxIC0geTIpICogKHkxIC0geTIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDvvJLjgaTnm67jga7lgKTjgYvjgonjgIHnp7vli5Xph4/jgpLmsYLjgoHjgovjgIJcbiAgICog6YGV44GG5pa55ZCR44Gu5aC05ZCI44Gv56e75YuV6YeP77yQ44CC5ZCM44GY5pa55ZCR44Gu5aC05ZCI44Gv44CB57W25a++5YCk44GM5bCP44GV44GE5pa544Gu5YCk44KS5Y+C54Wn44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSB2MSDvvJHjgaTnm67jga7np7vli5Xph49cbiAgICogQHBhcmFtIHYyIO+8kuOBpOebruOBruenu+WLlemHj1xuICAgKlxuICAgKiBAcmV0dXJuIOWwj+OBleOBhOaWueOBruenu+WLlemHj1xuICAgKi9cbiAgcHVibGljIGNhbGN1bGF0ZU1vdmluZ0Ftb3VudCh2MTogbnVtYmVyLCB2MjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAodjEgPiAwLjAgIT0gdjIgPiAwLjApIHtcbiAgICAgIHJldHVybiAwLjA7XG4gICAgfVxuXG4gICAgY29uc3Qgc2lnbjogbnVtYmVyID0gdjEgPiAwLjAgPyAxLjAgOiAtMS4wO1xuICAgIGNvbnN0IGFic29sdXRlVmFsdWUxID0gTWF0aC5hYnModjEpO1xuICAgIGNvbnN0IGFic29sdXRlVmFsdWUyID0gTWF0aC5hYnModjIpO1xuICAgIHJldHVybiAoXG4gICAgICBzaWduICogKGFic29sdXRlVmFsdWUxIDwgYWJzb2x1dGVWYWx1ZTIgPyBhYnNvbHV0ZVZhbHVlMSA6IGFic29sdXRlVmFsdWUyKVxuICAgICk7XG4gIH1cblxuICBfc3RhcnRZOiBudW1iZXI7IC8vIOOCv+ODg+ODgeOCkumWi+Wni+OBl+OBn+aZguOBrnjjga7lgKRcbiAgX3N0YXJ0WDogbnVtYmVyOyAvLyDjgr/jg4Pjg4HjgpLplovlp4vjgZfjgZ/mmYLjga5544Gu5YCkXG4gIF9sYXN0WDogbnVtYmVyOyAvLyDjgrfjg7PjgrDjg6vjgr/jg4Pjg4HmmYLjga5444Gu5YCkXG4gIF9sYXN0WTogbnVtYmVyOyAvLyDjgrfjg7PjgrDjg6vjgr/jg4Pjg4HmmYLjga5544Gu5YCkXG4gIF9sYXN0WDE6IG51bWJlcjsgLy8g44OA44OW44Or44K/44OD44OB5pmC44Gu5LiA44Gk55uu44GueOOBruWApFxuICBfbGFzdFkxOiBudW1iZXI7IC8vIOODgOODluODq+OCv+ODg+ODgeaZguOBruS4gOOBpOebruOBrnnjga7lgKRcbiAgX2xhc3RYMjogbnVtYmVyOyAvLyDjg4Djg5bjg6vjgr/jg4Pjg4HmmYLjga7kuozjgaTnm67jga5444Gu5YCkXG4gIF9sYXN0WTI6IG51bWJlcjsgLy8g44OA44OW44Or44K/44OD44OB5pmC44Gu5LqM44Gk55uu44GueeOBruWApFxuICBfbGFzdFRvdWNoRGlzdGFuY2U6IG51bWJlcjsgLy8gMuacrOS7peS4iuOBp+OCv+ODg+ODgeOBl+OBn+OBqOOBjeOBruaMh+OBrui3nembolxuICBfZGVsdGFYOiBudW1iZXI7IC8vIOWJjeWbnuOBruWApOOBi+OCieS7iuWbnuOBruWApOOBuOOBrnjjga7np7vli5Xot53pm6LjgIJcbiAgX2RlbHRhWTogbnVtYmVyOyAvLyDliY3lm57jga7lgKTjgYvjgonku4rlm57jga7lgKTjgbjjga5544Gu56e75YuV6Led6Zui44CCXG4gIF9zY2FsZTogbnVtYmVyOyAvLyDjgZPjga7jg5Xjg6zjg7zjg6DjgafmjpvjgZHlkIjjgo/jgZvjgovmi6HlpKfnjofjgILmi6HlpKfmk43kvZzkuK3ku6XlpJbjga8x44CCXG4gIF90b3VjaFNpbmdsZTogYm9vbGVhbjsgLy8g44K344Oz44Kw44Or44K/44OD44OB5pmC44GvdHJ1ZVxuICBfZmxpcEF2YWlsYWJsZTogYm9vbGVhbjsgLy8g44OV44Oq44OD44OX44GM5pyJ5Yq544GL44Gp44GG44GLXG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgbGl2ZTJkY3ViaXNtZnJhbWV3b3JrIH0gZnJvbSAnLi4vRnJhbWV3b3JrL3NyYy9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkIH0gZnJvbSAnLi4vRnJhbWV3b3JrL3NyYy9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtdXNlcm1vZGVsIH0gZnJvbSAnLi4vRnJhbWV3b3JrL3NyYy9tb2RlbC9jdWJpc211c2VybW9kZWwnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGljdWJpc21tb2RlbHNldHRpbmcgfSBmcm9tICcuLi9GcmFtZXdvcmsvc3JjL2ljdWJpc21tb2RlbHNldHRpbmcnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsc2V0dGluZ2pzb24gfSBmcm9tICcuLi9GcmFtZXdvcmsvc3JjL2N1YmlzbW1vZGVsc2V0dGluZ2pzb24nO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWRlZmF1bHRwYXJhbWV0ZXJpZCB9IGZyb20gJy4uL0ZyYW1ld29yay9zcmMvY3ViaXNtZGVmYXVsdHBhcmFtZXRlcmlkJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBhY3ViaXNtbW90aW9uIH0gZnJvbSAnLi4vRnJhbWV3b3JrL3NyYy9tb3Rpb24vYWN1YmlzbW1vdGlvbic7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtZXllYmxpbmsgfSBmcm9tICcuLi9GcmFtZXdvcmsvc3JjL2VmZmVjdC9jdWJpc21leWVibGluayc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtYnJlYXRoIH0gZnJvbSAnLi4vRnJhbWV3b3JrL3NyYy9lZmZlY3QvY3ViaXNtYnJlYXRoJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3IgfSBmcm9tICcuLi9GcmFtZXdvcmsvc3JjL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc21tYXAgfSBmcm9tICcuLi9GcmFtZXdvcmsvc3JjL3R5cGUvY3NtbWFwJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tYXRyaXg0NCB9IGZyb20gJy4uL0ZyYW1ld29yay9zcmMvbWF0aC9jdWJpc21tYXRyaXg0NCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW90aW9uIH0gZnJvbSAnLi4vRnJhbWV3b3JrL3NyYy9tb3Rpb24vY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXIgfSBmcm9tICcuLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXInO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXN0cmluZyB9IGZyb20gJy4uL0ZyYW1ld29yay9zcmMvdHlwZS9jc21zdHJpbmcnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXJlY3QgfSBmcm9tICcuLi9GcmFtZXdvcmsvc3JjL3R5cGUvY3NtcmVjdGYnO1xuaW1wb3J0IHsgQ3ViaXNtTG9nSW5mbyB9IGZyb20gJy4uL0ZyYW1ld29yay9zcmMvdXRpbHMvY3ViaXNtZGVidWcnO1xuaW1wb3J0IGNzbVJlY3QgPSBjc21yZWN0LmNzbVJlY3Q7XG5pbXBvcnQgY3NtU3RyaW5nID0gY3Ntc3RyaW5nLmNzbVN0cmluZztcbmltcG9ydCBJbnZhbGlkTW90aW9uUXVldWVFbnRyeUhhbmRsZVZhbHVlID0gY3ViaXNtbW90aW9ucXVldWVtYW5hZ2VyLkludmFsaWRNb3Rpb25RdWV1ZUVudHJ5SGFuZGxlVmFsdWU7XG5pbXBvcnQgQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSA9IGN1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlci5DdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlO1xuaW1wb3J0IEN1YmlzbU1vdGlvbiA9IGN1YmlzbW1vdGlvbi5DdWJpc21Nb3Rpb247XG5pbXBvcnQgQ3ViaXNtTWF0cml4NDQgPSBjdWJpc21tYXRyaXg0NC5DdWJpc21NYXRyaXg0NDtcbmltcG9ydCBjc21NYXAgPSBjc21tYXAuY3NtTWFwO1xuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XG5pbXBvcnQgQ3ViaXNtQnJlYXRoID0gY3ViaXNtYnJlYXRoLkN1YmlzbUJyZWF0aDtcbmltcG9ydCBCcmVhdGhQYXJhbWV0ZXJEYXRhID0gY3ViaXNtYnJlYXRoLkJyZWF0aFBhcmFtZXRlckRhdGE7XG5pbXBvcnQgQ3ViaXNtRXllQmxpbmsgPSBjdWJpc21leWVibGluay5DdWJpc21FeWVCbGluaztcbmltcG9ydCBBQ3ViaXNtTW90aW9uID0gYWN1YmlzbW1vdGlvbi5BQ3ViaXNtTW90aW9uO1xuaW1wb3J0IEZpbmlzaGVkTW90aW9uQ2FsbGJhY2sgPSBhY3ViaXNtbW90aW9uLkZpbmlzaGVkTW90aW9uQ2FsbGJhY2s7XG5pbXBvcnQgQ3ViaXNtRnJhbWV3b3JrID0gbGl2ZTJkY3ViaXNtZnJhbWV3b3JrLkN1YmlzbUZyYW1ld29yaztcbmltcG9ydCBDdWJpc21JZEhhbmRsZSA9IGN1YmlzbWlkLkN1YmlzbUlkSGFuZGxlO1xuaW1wb3J0IEN1YmlzbVVzZXJNb2RlbCA9IGN1YmlzbXVzZXJtb2RlbC5DdWJpc21Vc2VyTW9kZWw7XG5pbXBvcnQgSUN1YmlzbU1vZGVsU2V0dGluZyA9IGljdWJpc21tb2RlbHNldHRpbmcuSUN1YmlzbU1vZGVsU2V0dGluZztcbmltcG9ydCBDdWJpc21Nb2RlbFNldHRpbmdKc29uID0gY3ViaXNtbW9kZWxzZXR0aW5nanNvbi5DdWJpc21Nb2RlbFNldHRpbmdKc29uO1xuaW1wb3J0IEN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZCA9IGN1YmlzbWRlZmF1bHRwYXJhbWV0ZXJpZDtcblxuaW1wb3J0IHsgTEFwcFBhbCB9IGZyb20gJy4vbGFwcHBhbCc7XG5pbXBvcnQgeyBnbCwgY2FudmFzLCBmcmFtZUJ1ZmZlciwgTEFwcERlbGVnYXRlIH0gZnJvbSAnLi9sYXBwZGVsZWdhdGUnO1xuaW1wb3J0IHsgVGV4dHVyZUluZm8gfSBmcm9tICcuL2xhcHB0ZXh0dXJlbWFuYWdlcic7XG5pbXBvcnQgKiBhcyBMQXBwRGVmaW5lIGZyb20gJy4vbGFwcGRlZmluZSc7XG5pbXBvcnQgJ3doYXR3Zy1mZXRjaCc7XG5cbmVudW0gTG9hZFN0ZXAge1xuICBMb2FkQXNzZXRzLFxuICBMb2FkTW9kZWwsXG4gIFdhaXRMb2FkTW9kZWwsXG4gIExvYWRFeHByZXNzaW9uLFxuICBXYWl0TG9hZEV4cHJlc3Npb24sXG4gIExvYWRQaHlzaWNzLFxuICBXYWl0TG9hZFBoeXNpY3MsXG4gIExvYWRQb3NlLFxuICBXYWl0TG9hZFBvc2UsXG4gIFNldHVwRXllQmxpbmssXG4gIFNldHVwQnJlYXRoLFxuICBMb2FkVXNlckRhdGEsXG4gIFdhaXRMb2FkVXNlckRhdGEsXG4gIFNldHVwRXllQmxpbmtJZHMsXG4gIFNldHVwTGlwU3luY0lkcyxcbiAgU2V0dXBMYXlvdXQsXG4gIExvYWRNb3Rpb24sXG4gIFdhaXRMb2FkTW90aW9uLFxuICBDb21wbGV0ZUluaXRpYWxpemUsXG4gIENvbXBsZXRlU2V0dXBNb2RlbCxcbiAgTG9hZFRleHR1cmUsXG4gIFdhaXRMb2FkVGV4dHVyZSxcbiAgQ29tcGxldGVTZXR1cFxufVxuXG4vKipcbiAqIOODpuODvOOCtuODvOOBjOWun+mam+OBq+S9v+eUqOOBmeOCi+ODouODh+ODq+OBruWun+ijheOCr+ODqeOCuTxicj5cbiAqIOODouODh+ODq+eUn+aIkOOAgeapn+iDveOCs+ODs+ODneODvOODjeODs+ODiOeUn+aIkOOAgeabtOaWsOWHpueQhuOBqOODrOODs+ODgOODquODs+OCsOOBruWRvOOBs+WHuuOBl+OCkuihjOOBhuOAglxuICovXG5leHBvcnQgY2xhc3MgTEFwcE1vZGVsIGV4dGVuZHMgQ3ViaXNtVXNlck1vZGVsIHtcbiAgLyoqXG4gICAqIG1vZGVsMy5qc29u44GM572u44GL44KM44Gf44OH44Kj44Os44Kv44OI44Oq44Go44OV44Kh44Kk44Or44OR44K544GL44KJ44Oi44OH44Or44KS55Sf5oiQ44GZ44KLXG4gICAqIEBwYXJhbSBkaXJcbiAgICogQHBhcmFtIGZpbGVOYW1lXG4gICAqL1xuICBwdWJsaWMgbG9hZEFzc2V0cyhkaXI6IHN0cmluZywgZmlsZU5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnNvbGUubG9nKCdkaXInLGRpcilcbiAgICB0aGlzLl9tb2RlbEhvbWVEaXIgPSBkaXI7XG4gICAgZmV0Y2goYCR7dGhpcy5fbW9kZWxIb21lRGlyfS8ke2ZpbGVOYW1lfWApXG4gICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5hcnJheUJ1ZmZlcigpKVxuICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICBjb25zdCBzZXR0aW5nOiBJQ3ViaXNtTW9kZWxTZXR0aW5nID0gbmV3IEN1YmlzbU1vZGVsU2V0dGluZ0pzb24oXG4gICAgICAgICAgYXJyYXlCdWZmZXIsXG4gICAgICAgICAgYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aFxuICAgICAgICApO1xuXG4gICAgICAgIC8vIOOCueODhuODvOODiOOCkuabtOaWsFxuICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRNb2RlbDtcblxuICAgICAgICAvLyDntZDmnpzjgpLkv53lrZhcbiAgICAgICAgdGhpcy5zZXR1cE1vZGVsKHNldHRpbmcpO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogbW9kZWwzLmpzb27jgYvjgonjg6Ljg4fjg6vjgpLnlJ/miJDjgZnjgovjgIJcbiAgICogbW9kZWwzLmpzb27jga7oqJjov7DjgavlvpPjgaPjgabjg6Ljg4fjg6vnlJ/miJDjgIHjg6Ljg7zjgrfjg6fjg7PjgIHniannkIbmvJTnrpfjgarjganjga7jgrPjg7Pjg53jg7zjg43jg7Pjg4jnlJ/miJDjgpLooYzjgYbjgIJcbiAgICpcbiAgICogQHBhcmFtIHNldHRpbmcgSUN1YmlzbU1vZGVsU2V0dGluZ+OBruOCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgcHJpdmF0ZSBzZXR1cE1vZGVsKHNldHRpbmc6IElDdWJpc21Nb2RlbFNldHRpbmcpOiB2b2lkIHtcbiAgICB0aGlzLl91cGRhdGluZyA9IHRydWU7XG4gICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgIHRoaXMuX21vZGVsU2V0dGluZyA9IHNldHRpbmc7XG5cbiAgICAvLyBDdWJpc21Nb2RlbFxuICAgIGlmICh0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW9kZWxGaWxlTmFtZSgpICE9ICcnKSB7XG4gICAgICBjb25zdCBtb2RlbEZpbGVOYW1lID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vZGVsRmlsZU5hbWUoKTtcblxuICAgICAgZmV0Y2goYCR7dGhpcy5fbW9kZWxIb21lRGlyfS8ke21vZGVsRmlsZU5hbWV9YClcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgIHRoaXMubG9hZE1vZGVsKGFycmF5QnVmZmVyKTtcbiAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRFeHByZXNzaW9uO1xuXG4gICAgICAgICAgLy8gY2FsbGJhY2tcbiAgICAgICAgICBsb2FkQ3ViaXNtRXhwcmVzc2lvbigpO1xuICAgICAgICB9KTtcblxuICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZE1vZGVsO1xuICAgIH0gZWxzZSB7XG4gICAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgnTW9kZWwgZGF0YSBkb2VzIG5vdCBleGlzdC4nKTtcbiAgICB9XG5cbiAgICAvLyBFeHByZXNzaW9uXG4gICAgY29uc3QgbG9hZEN1YmlzbUV4cHJlc3Npb24gPSAoKTogdm9pZCA9PiB7XG4gICAgICBpZiAodGhpcy5fbW9kZWxTZXR0aW5nLmdldEV4cHJlc3Npb25Db3VudCgpID4gMCkge1xuICAgICAgICBjb25zdCBjb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldEV4cHJlc3Npb25Db3VudCgpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb25OYW1lID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldEV4cHJlc3Npb25OYW1lKGkpO1xuICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb25GaWxlTmFtZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRFeHByZXNzaW9uRmlsZU5hbWUoXG4gICAgICAgICAgICBpXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0vJHtleHByZXNzaW9uRmlsZU5hbWV9YClcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXG4gICAgICAgICAgICAudGhlbihhcnJheUJ1ZmZlciA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IG1vdGlvbjogQUN1YmlzbU1vdGlvbiA9IHRoaXMubG9hZEV4cHJlc3Npb24oXG4gICAgICAgICAgICAgICAgYXJyYXlCdWZmZXIsXG4gICAgICAgICAgICAgICAgYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCxcbiAgICAgICAgICAgICAgICBleHByZXNzaW9uTmFtZVxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgIGlmICh0aGlzLl9leHByZXNzaW9ucy5nZXRWYWx1ZShleHByZXNzaW9uTmFtZSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIEFDdWJpc21Nb3Rpb24uZGVsZXRlKFxuICAgICAgICAgICAgICAgICAgdGhpcy5fZXhwcmVzc2lvbnMuZ2V0VmFsdWUoZXhwcmVzc2lvbk5hbWUpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9leHByZXNzaW9ucy5zZXRWYWx1ZShleHByZXNzaW9uTmFtZSwgbnVsbCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aGlzLl9leHByZXNzaW9ucy5zZXRWYWx1ZShleHByZXNzaW9uTmFtZSwgbW90aW9uKTtcblxuICAgICAgICAgICAgICB0aGlzLl9leHByZXNzaW9uQ291bnQrKztcblxuICAgICAgICAgICAgICBpZiAodGhpcy5fZXhwcmVzc2lvbkNvdW50ID49IGNvdW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkUGh5c2ljcztcblxuICAgICAgICAgICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgbG9hZEN1YmlzbVBoeXNpY3MoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZEV4cHJlc3Npb247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRQaHlzaWNzO1xuXG4gICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgIGxvYWRDdWJpc21QaHlzaWNzKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFBoeXNpY3NcbiAgICBjb25zdCBsb2FkQ3ViaXNtUGh5c2ljcyA9ICgpOiB2b2lkID0+IHtcbiAgICAgIGlmICh0aGlzLl9tb2RlbFNldHRpbmcuZ2V0UGh5c2ljc0ZpbGVOYW1lKCkgIT0gJycpIHtcbiAgICAgICAgY29uc3QgcGh5c2ljc0ZpbGVOYW1lID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldFBoeXNpY3NGaWxlTmFtZSgpO1xuXG4gICAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0vJHtwaHlzaWNzRmlsZU5hbWV9YClcbiAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5hcnJheUJ1ZmZlcigpKVxuICAgICAgICAgIC50aGVuKGFycmF5QnVmZmVyID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9hZFBoeXNpY3MoYXJyYXlCdWZmZXIsIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRQb3NlO1xuXG4gICAgICAgICAgICAvLyBjYWxsYmFja1xuICAgICAgICAgICAgbG9hZEN1YmlzbVBvc2UoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZFBoeXNpY3M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRQb3NlO1xuXG4gICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgIGxvYWRDdWJpc21Qb3NlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFBvc2VcbiAgICBjb25zdCBsb2FkQ3ViaXNtUG9zZSA9ICgpOiB2b2lkID0+IHtcbiAgICAgIGlmICh0aGlzLl9tb2RlbFNldHRpbmcuZ2V0UG9zZUZpbGVOYW1lKCkgIT0gJycpIHtcbiAgICAgICAgY29uc3QgcG9zZUZpbGVOYW1lID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldFBvc2VGaWxlTmFtZSgpO1xuXG4gICAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0vJHtwb3NlRmlsZU5hbWV9YClcbiAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5hcnJheUJ1ZmZlcigpKVxuICAgICAgICAgIC50aGVuKGFycmF5QnVmZmVyID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9hZFBvc2UoYXJyYXlCdWZmZXIsIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLlNldHVwRXllQmxpbms7XG5cbiAgICAgICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgICAgICBzZXR1cEV5ZUJsaW5rKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuV2FpdExvYWRQb3NlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5TZXR1cEV5ZUJsaW5rO1xuXG4gICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgIHNldHVwRXllQmxpbmsoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRXllQmxpbmtcbiAgICBjb25zdCBzZXR1cEV5ZUJsaW5rID0gKCk6IHZvaWQgPT4ge1xuICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRFeWVCbGlua1BhcmFtZXRlckNvdW50KCkgPiAwKSB7XG4gICAgICAgIHRoaXMuX2V5ZUJsaW5rID0gQ3ViaXNtRXllQmxpbmsuY3JlYXRlKHRoaXMuX21vZGVsU2V0dGluZyk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuU2V0dXBCcmVhdGg7XG4gICAgICB9XG5cbiAgICAgIC8vIGNhbGxiYWNrXG4gICAgICBzZXR1cEJyZWF0aCgpO1xuICAgIH07XG5cbiAgICAvLyBCcmVhdGhcbiAgICBjb25zdCBzZXR1cEJyZWF0aCA9ICgpOiB2b2lkID0+IHtcbiAgICAgIHRoaXMuX2JyZWF0aCA9IEN1YmlzbUJyZWF0aC5jcmVhdGUoKTtcblxuICAgICAgY29uc3QgYnJlYXRoUGFyYW1ldGVyczogY3NtVmVjdG9yPEJyZWF0aFBhcmFtZXRlckRhdGE+ID0gbmV3IGNzbVZlY3RvcigpO1xuICAgICAgYnJlYXRoUGFyYW1ldGVycy5wdXNoQmFjayhcbiAgICAgICAgbmV3IEJyZWF0aFBhcmFtZXRlckRhdGEodGhpcy5faWRQYXJhbUFuZ2xlWCwgMC4wLCAxNS4wLCA2LjUzNDUsIDAuNSlcbiAgICAgICk7XG4gICAgICBicmVhdGhQYXJhbWV0ZXJzLnB1c2hCYWNrKFxuICAgICAgICBuZXcgQnJlYXRoUGFyYW1ldGVyRGF0YSh0aGlzLl9pZFBhcmFtQW5nbGVZLCAwLjAsIDguMCwgMy41MzQ1LCAwLjUpXG4gICAgICApO1xuICAgICAgYnJlYXRoUGFyYW1ldGVycy5wdXNoQmFjayhcbiAgICAgICAgbmV3IEJyZWF0aFBhcmFtZXRlckRhdGEodGhpcy5faWRQYXJhbUFuZ2xlWiwgMC4wLCAxMC4wLCA1LjUzNDUsIDAuNSlcbiAgICAgICk7XG4gICAgICBicmVhdGhQYXJhbWV0ZXJzLnB1c2hCYWNrKFxuICAgICAgICBuZXcgQnJlYXRoUGFyYW1ldGVyRGF0YSh0aGlzLl9pZFBhcmFtQm9keUFuZ2xlWCwgMC4wLCA0LjAsIDE1LjUzNDUsIDAuNSlcbiAgICAgICk7XG4gICAgICBicmVhdGhQYXJhbWV0ZXJzLnB1c2hCYWNrKFxuICAgICAgICBuZXcgQnJlYXRoUGFyYW1ldGVyRGF0YShcbiAgICAgICAgICBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgICAgICBDdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1CcmVhdGhcbiAgICAgICAgICApLFxuICAgICAgICAgIDAuMCxcbiAgICAgICAgICAwLjUsXG4gICAgICAgICAgMy4yMzQ1LFxuICAgICAgICAgIDAuNVxuICAgICAgICApXG4gICAgICApO1xuXG4gICAgICB0aGlzLl9icmVhdGguc2V0UGFyYW1ldGVycyhicmVhdGhQYXJhbWV0ZXJzKTtcbiAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuTG9hZFVzZXJEYXRhO1xuXG4gICAgICAvLyBjYWxsYmFja1xuICAgICAgbG9hZFVzZXJEYXRhKCk7XG4gICAgfTtcblxuICAgIC8vIFVzZXJEYXRhXG4gICAgY29uc3QgbG9hZFVzZXJEYXRhID0gKCk6IHZvaWQgPT4ge1xuICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRVc2VyRGF0YUZpbGUoKSAhPSAnJykge1xuICAgICAgICBjb25zdCB1c2VyRGF0YUZpbGUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0VXNlckRhdGFGaWxlKCk7XG5cbiAgICAgICAgZmV0Y2goYCR7dGhpcy5fbW9kZWxIb21lRGlyfS8ke3VzZXJEYXRhRmlsZX1gKVxuICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXG4gICAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgICAgdGhpcy5sb2FkVXNlckRhdGEoYXJyYXlCdWZmZXIsIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLlNldHVwRXllQmxpbmtJZHM7XG5cbiAgICAgICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgICAgICBzZXR1cEV5ZUJsaW5rSWRzKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZFVzZXJEYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5TZXR1cEV5ZUJsaW5rSWRzO1xuXG4gICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgIHNldHVwRXllQmxpbmtJZHMoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRXllQmxpbmtJZHNcbiAgICBjb25zdCBzZXR1cEV5ZUJsaW5rSWRzID0gKCk6IHZvaWQgPT4ge1xuICAgICAgY29uc3QgZXllQmxpbmtJZENvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0RXllQmxpbmtQYXJhbWV0ZXJDb3VudCgpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV5ZUJsaW5rSWRDb3VudDsgKytpKSB7XG4gICAgICAgIHRoaXMuX2V5ZUJsaW5rSWRzLnB1c2hCYWNrKFxuICAgICAgICAgIHRoaXMuX21vZGVsU2V0dGluZy5nZXRFeWVCbGlua1BhcmFtZXRlcklkKGkpXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuU2V0dXBMaXBTeW5jSWRzO1xuXG4gICAgICAvLyBjYWxsYmFja1xuICAgICAgc2V0dXBMaXBTeW5jSWRzKCk7XG4gICAgfTtcblxuICAgIC8vIExpcFN5bmNJZHNcbiAgICBjb25zdCBzZXR1cExpcFN5bmNJZHMgPSAoKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCBsaXBTeW5jSWRDb3VudCA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRMaXBTeW5jUGFyYW1ldGVyQ291bnQoKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXBTeW5jSWRDb3VudDsgKytpKSB7XG4gICAgICAgIHRoaXMuX2xpcFN5bmNJZHMucHVzaEJhY2sodGhpcy5fbW9kZWxTZXR0aW5nLmdldExpcFN5bmNQYXJhbWV0ZXJJZChpKSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLlNldHVwTGF5b3V0O1xuXG4gICAgICAvLyBjYWxsYmFja1xuICAgICAgc2V0dXBMYXlvdXQoKTtcbiAgICB9O1xuXG4gICAgLy8gTGF5b3V0XG4gICAgY29uc3Qgc2V0dXBMYXlvdXQgPSAoKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCBsYXlvdXQ6IGNzbU1hcDxzdHJpbmcsIG51bWJlcj4gPSBuZXcgY3NtTWFwPHN0cmluZywgbnVtYmVyPigpO1xuICAgICAgdGhpcy5fbW9kZWxTZXR0aW5nLmdldExheW91dE1hcChsYXlvdXQpO1xuICAgICAgdGhpcy5fbW9kZWxNYXRyaXguc2V0dXBGcm9tTGF5b3V0KGxheW91dCk7XG4gICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRNb3Rpb247XG5cbiAgICAgIC8vIGNhbGxiYWNrXG4gICAgICBsb2FkQ3ViaXNtTW90aW9uKCk7XG4gICAgfTtcblxuICAgIC8vIE1vdGlvblxuICAgIGNvbnN0IGxvYWRDdWJpc21Nb3Rpb24gPSAoKTogdm9pZCA9PiB7XG4gICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLldhaXRMb2FkTW90aW9uO1xuICAgICAgdGhpcy5fbW9kZWwuc2F2ZVBhcmFtZXRlcnMoKTtcbiAgICAgIHRoaXMuX2FsbE1vdGlvbkNvdW50ID0gMDtcbiAgICAgIHRoaXMuX21vdGlvbkNvdW50ID0gMDtcbiAgICAgIGNvbnN0IGdyb3VwOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgICBjb25zdCBtb3Rpb25Hcm91cENvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uR3JvdXBDb3VudCgpO1xuXG4gICAgICAvLyDjg6Ljg7zjgrfjg6fjg7Pjga7nt4/mlbDjgpLmsYLjgoHjgotcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW90aW9uR3JvdXBDb3VudDsgaSsrKSB7XG4gICAgICAgIGdyb3VwW2ldID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkdyb3VwTmFtZShpKTtcbiAgICAgICAgdGhpcy5fYWxsTW90aW9uQ291bnQgKz0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkNvdW50KGdyb3VwW2ldKTtcbiAgICAgIH1cblxuICAgICAgLy8g44Oi44O844K344On44Oz44Gu6Kqt44G/6L6844G/XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1vdGlvbkdyb3VwQ291bnQ7IGkrKykge1xuICAgICAgICB0aGlzLnByZUxvYWRNb3Rpb25Hcm91cChncm91cFtpXSk7XG4gICAgICB9XG5cbiAgICAgIC8vIOODouODvOOCt+ODp+ODs+OBjOOBquOBhOWgtOWQiFxuICAgICAgaWYgKG1vdGlvbkdyb3VwQ291bnQgPT0gMCkge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRUZXh0dXJlO1xuXG4gICAgICAgIC8vIOWFqOOBpuOBruODouODvOOCt+ODp+ODs+OCkuWBnOatouOBmeOCi1xuICAgICAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyLnN0b3BBbGxNb3Rpb25zKCk7XG5cbiAgICAgICAgdGhpcy5fdXBkYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlUmVuZGVyZXIoKTtcbiAgICAgICAgdGhpcy5zZXR1cFRleHR1cmVzKCk7XG4gICAgICAgIHRoaXMuZ2V0UmVuZGVyZXIoKS5zdGFydFVwKGdsKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIOODhuOCr+OCueODgeODo+ODpuODi+ODg+ODiOOBq+ODhuOCr+OCueODgeODo+OCkuODreODvOODieOBmeOCi1xuICAgKi9cbiAgcHJpdmF0ZSBzZXR1cFRleHR1cmVzKCk6IHZvaWQge1xuICAgIC8vIGlQaG9uZeOBp+OBruOCouODq+ODleOCoeWTgeizquWQkeS4iuOBruOBn+OCgVR5cGVzY3JpcHTjgafjga9wcmVtdWx0aXBsaWVkQWxwaGHjgpLmjqHnlKhcbiAgICBjb25zdCB1c2VQcmVtdWx0aXBseSA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5fc3RhdGUgPT0gTG9hZFN0ZXAuTG9hZFRleHR1cmUpIHtcbiAgICAgIC8vIOODhuOCr+OCueODgeODo+iqreOBv+i+vOOBv+eUqFxuICAgICAgY29uc3QgdGV4dHVyZUNvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0VGV4dHVyZUNvdW50KCk7XG5cbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBtb2RlbFRleHR1cmVOdW1iZXIgPSAwO1xuICAgICAgICBtb2RlbFRleHR1cmVOdW1iZXIgPCB0ZXh0dXJlQ291bnQ7XG4gICAgICAgIG1vZGVsVGV4dHVyZU51bWJlcisrXG4gICAgICApIHtcbiAgICAgICAgLy8g44OG44Kv44K544OB44Oj5ZCN44GM56m65paH5a2X44Gg44Gj44Gf5aC05ZCI44Gv44Ot44O844OJ44O744OQ44Kk44Oz44OJ5Yem55CG44KS44K544Kt44OD44OXXG4gICAgICAgIGlmICh0aGlzLl9tb2RlbFNldHRpbmcuZ2V0VGV4dHVyZUZpbGVOYW1lKG1vZGVsVGV4dHVyZU51bWJlcikgPT0gJycpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnZ2V0VGV4dHVyZUZpbGVOYW1lIG51bGwnKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdlYkdM44Gu44OG44Kv44K544OB44Oj44Om44OL44OD44OI44Gr44OG44Kv44K544OB44Oj44KS44Ot44O844OJ44GZ44KLXG4gICAgICAgIGxldCB0ZXh0dXJlUGF0aCA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRUZXh0dXJlRmlsZU5hbWUoXG4gICAgICAgICAgbW9kZWxUZXh0dXJlTnVtYmVyXG4gICAgICAgICk7XG4gICAgICAgIHRleHR1cmVQYXRoID0gdGhpcy5fbW9kZWxIb21lRGlyICsgdGV4dHVyZVBhdGg7XG5cbiAgICAgICAgLy8g44Ot44O844OJ5a6M5LqG5pmC44Gr5ZG844Gz5Ye644GZ44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gICAgICAgIGNvbnN0IG9uTG9hZCA9ICh0ZXh0dXJlSW5mbzogVGV4dHVyZUluZm8pOiB2b2lkID0+IHtcbiAgICAgICAgICB0aGlzLmdldFJlbmRlcmVyKCkuYmluZFRleHR1cmUobW9kZWxUZXh0dXJlTnVtYmVyLCB0ZXh0dXJlSW5mby5pZCk7XG5cbiAgICAgICAgICB0aGlzLl90ZXh0dXJlQ291bnQrKztcblxuICAgICAgICAgIGlmICh0aGlzLl90ZXh0dXJlQ291bnQgPj0gdGV4dHVyZUNvdW50KSB7XG4gICAgICAgICAgICAvLyDjg63jg7zjg4nlrozkuoZcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuQ29tcGxldGVTZXR1cDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8g6Kqt44G/6L6844G/XG4gICAgICAgIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpXG4gICAgICAgICAgLmdldFRleHR1cmVNYW5hZ2VyKClcbiAgICAgICAgICAuY3JlYXRlVGV4dHVyZUZyb21QbmdGaWxlKHRleHR1cmVQYXRoLCB1c2VQcmVtdWx0aXBseSwgb25Mb2FkKTtcbiAgICAgICAgdGhpcy5nZXRSZW5kZXJlcigpLnNldElzUHJlbXVsdGlwbGllZEFscGhhKHVzZVByZW11bHRpcGx5KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZFRleHR1cmU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODrOODs+ODgOODqeOCkuWGjeani+evieOBmeOCi1xuICAgKi9cbiAgcHVibGljIHJlbG9hZFJlbmRlcmVyKCk6IHZvaWQge1xuICAgIHRoaXMuZGVsZXRlUmVuZGVyZXIoKTtcbiAgICB0aGlzLmNyZWF0ZVJlbmRlcmVyKCk7XG4gICAgdGhpcy5zZXR1cFRleHR1cmVzKCk7XG4gIH1cblxuICAvKipcbiAgICog5pu05pawXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9zdGF0ZSAhPSBMb2FkU3RlcC5Db21wbGV0ZVNldHVwKSByZXR1cm47XG5cbiAgICBjb25zdCBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIgPSBMQXBwUGFsLmdldERlbHRhVGltZSgpO1xuICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyArPSBkZWx0YVRpbWVTZWNvbmRzO1xuXG4gICAgdGhpcy5fZHJhZ01hbmFnZXIudXBkYXRlKGRlbHRhVGltZVNlY29uZHMpO1xuICAgIHRoaXMuX2RyYWdYID0gdGhpcy5fZHJhZ01hbmFnZXIuZ2V0WCgpO1xuICAgIHRoaXMuX2RyYWdZID0gdGhpcy5fZHJhZ01hbmFnZXIuZ2V0WSgpO1xuXG4gICAgLy8g44Oi44O844K344On44Oz44Gr44KI44KL44OR44Op44Oh44O844K/5pu05paw44Gu5pyJ54ShXG4gICAgbGV0IG1vdGlvblVwZGF0ZWQgPSBmYWxzZTtcblxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB0aGlzLl9tb2RlbC5sb2FkUGFyYW1ldGVycygpOyAvLyDliY3lm57jgrvjg7zjg5bjgZXjgozjgZ/nirbmhYvjgpLjg63jg7zjg4lcbiAgICBpZiAodGhpcy5fbW90aW9uTWFuYWdlci5pc0ZpbmlzaGVkKCkpIHtcbiAgICAgIC8vIOODouODvOOCt+ODp+ODs+OBruWGjeeUn+OBjOOBquOBhOWgtOWQiOOAgeW+heapn+ODouODvOOCt+ODp+ODs+OBruS4reOBi+OCieODqeODs+ODgOODoOOBp+WGjeeUn+OBmeOCi1xuICAgICAgdGhpcy5zdGFydFJhbmRvbU1vdGlvbihcbiAgICAgICAgTEFwcERlZmluZS5Nb3Rpb25Hcm91cElkbGUsXG4gICAgICAgIExBcHBEZWZpbmUuUHJpb3JpdHlJZGxlXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBtb3Rpb25VcGRhdGVkID0gdGhpcy5fbW90aW9uTWFuYWdlci51cGRhdGVNb3Rpb24oXG4gICAgICAgIHRoaXMuX21vZGVsLFxuICAgICAgICBkZWx0YVRpbWVTZWNvbmRzXG4gICAgICApOyAvLyDjg6Ljg7zjgrfjg6fjg7PjgpLmm7TmlrBcbiAgICB9XG4gICAgdGhpcy5fbW9kZWwuc2F2ZVBhcmFtZXRlcnMoKTsgLy8g54q25oWL44KS5L+d5a2YXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLy8g44G+44Gw44Gf44GNXG4gICAgaWYgKCFtb3Rpb25VcGRhdGVkKSB7XG4gICAgICBpZiAodGhpcy5fZXllQmxpbmsgIT0gbnVsbCkge1xuICAgICAgICAvLyDjg6HjgqTjg7Pjg6Ljg7zjgrfjg6fjg7Pjga7mm7TmlrDjgYzjgarjgYTjgajjgY1cbiAgICAgICAgdGhpcy5fZXllQmxpbmsudXBkYXRlUGFyYW1ldGVycyh0aGlzLl9tb2RlbCwgZGVsdGFUaW1lU2Vjb25kcyk7IC8vIOebruODkeODgVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9leHByZXNzaW9uTWFuYWdlciAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlci51cGRhdGVNb3Rpb24odGhpcy5fbW9kZWwsIGRlbHRhVGltZVNlY29uZHMpOyAvLyDooajmg4Xjgafjg5Hjg6njg6Hjg7zjgr/mm7TmlrDvvIjnm7jlr77lpInljJbvvIlcbiAgICB9XG5cbiAgICAvLyDjg4njg6njg4PjgrDjgavjgojjgovlpInljJZcbiAgICAvLyDjg4njg6njg4PjgrDjgavjgojjgovpoZTjga7lkJHjgY3jga7oqr/mlbRcbiAgICB0aGlzLl9tb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQodGhpcy5faWRQYXJhbUFuZ2xlWCwgdGhpcy5fZHJhZ1ggKiAzMCk7IC8vIC0zMOOBi+OCiTMw44Gu5YCk44KS5Yqg44GI44KLXG4gICAgdGhpcy5fbW9kZWwuYWRkUGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX2lkUGFyYW1BbmdsZVksIHRoaXMuX2RyYWdZICogMzApO1xuICAgIHRoaXMuX21vZGVsLmFkZFBhcmFtZXRlclZhbHVlQnlJZChcbiAgICAgIHRoaXMuX2lkUGFyYW1BbmdsZVosXG4gICAgICB0aGlzLl9kcmFnWCAqIHRoaXMuX2RyYWdZICogLTMwXG4gICAgKTtcblxuICAgIC8vIOODieODqeODg+OCsOOBq+OCiOOCi+S9k+OBruWQkeOBjeOBruiqv+aVtFxuICAgIHRoaXMuX21vZGVsLmFkZFBhcmFtZXRlclZhbHVlQnlJZChcbiAgICAgIHRoaXMuX2lkUGFyYW1Cb2R5QW5nbGVYLFxuICAgICAgdGhpcy5fZHJhZ1ggKiAxMFxuICAgICk7IC8vIC0xMOOBi+OCiTEw44Gu5YCk44KS5Yqg44GI44KLXG5cbiAgICAvLyDjg4njg6njg4PjgrDjgavjgojjgovnm67jga7lkJHjgY3jga7oqr/mlbRcbiAgICB0aGlzLl9tb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQodGhpcy5faWRQYXJhbUV5ZUJhbGxYLCB0aGlzLl9kcmFnWCk7IC8vIC0x44GL44KJMeOBruWApOOCkuWKoOOBiOOCi1xuICAgIHRoaXMuX21vZGVsLmFkZFBhcmFtZXRlclZhbHVlQnlJZCh0aGlzLl9pZFBhcmFtRXllQmFsbFksIHRoaXMuX2RyYWdZKTtcblxuICAgIC8vIOWRvOWQuOOBquOBqVxuICAgIGlmICh0aGlzLl9icmVhdGggIT0gbnVsbCkge1xuICAgICAgdGhpcy5fYnJlYXRoLnVwZGF0ZVBhcmFtZXRlcnModGhpcy5fbW9kZWwsIGRlbHRhVGltZVNlY29uZHMpO1xuICAgIH1cblxuICAgIC8vIOeJqeeQhua8lOeul+OBruioreWumlxuICAgIGlmICh0aGlzLl9waHlzaWNzICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX3BoeXNpY3MuZXZhbHVhdGUodGhpcy5fbW9kZWwsIGRlbHRhVGltZVNlY29uZHMpO1xuICAgIH1cblxuICAgIC8vIOODquODg+ODl+OCt+ODs+OCr+OBruioreWumlxuICAgIGlmICh0aGlzLl9saXBzeW5jKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IDA7IC8vIOODquOCouODq+OCv+OCpOODoOOBp+ODquODg+ODl+OCt+ODs+OCr+OCkuihjOOBhuWgtOWQiOOAgeOCt+OCueODhuODoOOBi+OCiemfs+mHj+OCkuWPluW+l+OBl+OBpuOAgTB+MeOBruevhOWbsuOBp+WApOOCkuWFpeWKm+OBl+OBvuOBmeOAglxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2xpcFN5bmNJZHMuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgICAgdGhpcy5fbW9kZWwuYWRkUGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX2xpcFN5bmNJZHMuYXQoaSksIHZhbHVlLCAwLjgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIOODneODvOOCuuOBruioreWumlxuICAgIGlmICh0aGlzLl9wb3NlICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX3Bvc2UudXBkYXRlUGFyYW1ldGVycyh0aGlzLl9tb2RlbCwgZGVsdGFUaW1lU2Vjb25kcyk7XG4gICAgfVxuXG4gICAgdGhpcy5fbW9kZWwudXBkYXRlKCk7XG4gIH1cblxuICAvKipcbiAgICog5byV5pWw44Gn5oyH5a6a44GX44Gf44Oi44O844K344On44Oz44Gu5YaN55Sf44KS6ZaL5aeL44GZ44KLXG4gICAqIEBwYXJhbSBncm91cCDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5flkI1cbiAgICogQHBhcmFtIG5vIOOCsOODq+ODvOODl+WGheOBrueVquWPt1xuICAgKiBAcGFyYW0gcHJpb3JpdHkg5YSq5YWI5bqmXG4gICAqIEBwYXJhbSBvbkZpbmlzaGVkTW90aW9uSGFuZGxlciDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobmmYLjgavlkbzjgbPlh7rjgZXjgozjgovjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICogQHJldHVybiDplovlp4vjgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjga7orZjliKXnlarlj7fjgpLov5TjgZnjgILlgIvliKXjga7jg6Ljg7zjgrfjg6fjg7PjgYzntYLkuobjgZfjgZ/jgYvlkKbjgYvjgpLliKTlrprjgZnjgotpc0ZpbmlzaGVkKCnjga7lvJXmlbDjgafkvb/nlKjjgZnjgovjgILplovlp4vjgafjgY3jgarjgYTmmYLjga9bLTFdXG4gICAqL1xuICBwdWJsaWMgc3RhcnRNb3Rpb24oXG4gICAgZ3JvdXA6IHN0cmluZyxcbiAgICBubzogbnVtYmVyLFxuICAgIHByaW9yaXR5OiBudW1iZXIsXG4gICAgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXI/OiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrXG4gICk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUge1xuICAgIGlmIChwcmlvcml0eSA9PSBMQXBwRGVmaW5lLlByaW9yaXR5Rm9yY2UpIHtcbiAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIuc2V0UmVzZXJ2ZVByaW9yaXR5KHByaW9yaXR5KTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLl9tb3Rpb25NYW5hZ2VyLnJlc2VydmVNb3Rpb24ocHJpb3JpdHkpKSB7XG4gICAgICBpZiAodGhpcy5fZGVidWdNb2RlKSB7XG4gICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKFwiW0FQUF1jYW4ndCBzdGFydCBtb3Rpb24uXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEludmFsaWRNb3Rpb25RdWV1ZUVudHJ5SGFuZGxlVmFsdWU7XG4gICAgfVxuXG4gICAgY29uc3QgbW90aW9uRmlsZU5hbWUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmlsZU5hbWUoZ3JvdXAsIG5vKTtcblxuICAgIC8vIGV4KSBpZGxlXzBcbiAgICBjb25zdCBuYW1lID0gYCR7Z3JvdXB9XyR7bm99YDtcbiAgICBsZXQgbW90aW9uOiBDdWJpc21Nb3Rpb24gPSB0aGlzLl9tb3Rpb25zLmdldFZhbHVlKG5hbWUpIGFzIEN1YmlzbU1vdGlvbjtcbiAgICBsZXQgYXV0b0RlbGV0ZSA9IGZhbHNlO1xuXG4gICAgaWYgKG1vdGlvbiA9PSBudWxsKSB7XG4gICAgICBmZXRjaChgJHt0aGlzLl9tb2RlbEhvbWVEaXJ9LyR7bW90aW9uRmlsZU5hbWV9YClcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgIG1vdGlvbiA9IHRoaXMubG9hZE1vdGlvbihcbiAgICAgICAgICAgIGFycmF5QnVmZmVyLFxuICAgICAgICAgICAgYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBvbkZpbmlzaGVkTW90aW9uSGFuZGxlclxuICAgICAgICAgICk7XG4gICAgICAgICAgbGV0IGZhZGVUaW1lOiBudW1iZXIgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmFkZUluVGltZVZhbHVlKFxuICAgICAgICAgICAgZ3JvdXAsXG4gICAgICAgICAgICBub1xuICAgICAgICAgICk7XG5cbiAgICAgICAgICBpZiAoZmFkZVRpbWUgPj0gMC4wKSB7XG4gICAgICAgICAgICBtb3Rpb24uc2V0RmFkZUluVGltZShmYWRlVGltZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmFkZVRpbWUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmFkZU91dFRpbWVWYWx1ZShncm91cCwgbm8pO1xuICAgICAgICAgIGlmIChmYWRlVGltZSA+PSAwLjApIHtcbiAgICAgICAgICAgIG1vdGlvbi5zZXRGYWRlT3V0VGltZShmYWRlVGltZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbW90aW9uLnNldEVmZmVjdElkcyh0aGlzLl9leWVCbGlua0lkcywgdGhpcy5fbGlwU3luY0lkcyk7XG4gICAgICAgICAgYXV0b0RlbGV0ZSA9IHRydWU7IC8vIOe1guS6huaZguOBq+ODoeODouODquOBi+OCieWJiumZpFxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbW90aW9uLnNldEZpbmlzaGVkTW90aW9uSGFuZGxlcihvbkZpbmlzaGVkTW90aW9uSGFuZGxlcik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2RlYnVnTW9kZSkge1xuICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoYFtBUFBdc3RhcnQgbW90aW9uOiBbJHtncm91cH1fJHtub31gKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX21vdGlvbk1hbmFnZXIuc3RhcnRNb3Rpb25Qcmlvcml0eShcbiAgICAgIG1vdGlvbixcbiAgICAgIGF1dG9EZWxldGUsXG4gICAgICBwcmlvcml0eVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog44Op44Oz44OA44Og44Gr6YG444Gw44KM44Gf44Oi44O844K344On44Oz44Gu5YaN55Sf44KS6ZaL5aeL44GZ44KL44CCXG4gICAqIEBwYXJhbSBncm91cCDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5flkI1cbiAgICogQHBhcmFtIHByaW9yaXR5IOWEquWFiOW6plxuICAgKiBAcGFyYW0gb25GaW5pc2hlZE1vdGlvbkhhbmRsZXIg44Oi44O844K344On44Oz5YaN55Sf57WC5LqG5pmC44Gr5ZG844Gz5Ye644GV44KM44KL44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gICAqIEByZXR1cm4g6ZaL5aeL44GX44Gf44Oi44O844K344On44Oz44Gu6K2Y5Yil55Wq5Y+344KS6L+U44GZ44CC5YCL5Yil44Gu44Oi44O844K344On44Oz44GM57WC5LqG44GX44Gf44GL5ZCm44GL44KS5Yik5a6a44GZ44KLaXNGaW5pc2hlZCgp44Gu5byV5pWw44Gn5L2/55So44GZ44KL44CC6ZaL5aeL44Gn44GN44Gq44GE5pmC44GvWy0xXVxuICAgKi9cbiAgcHVibGljIHN0YXJ0UmFuZG9tTW90aW9uKFxuICAgIGdyb3VwOiBzdHJpbmcsXG4gICAgcHJpb3JpdHk6IG51bWJlcixcbiAgICBvbkZpbmlzaGVkTW90aW9uSGFuZGxlcj86IEZpbmlzaGVkTW90aW9uQ2FsbGJhY2tcbiAgKTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSB7XG4gICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25Db3VudChncm91cCkgPT0gMCkge1xuICAgICAgcmV0dXJuIEludmFsaWRNb3Rpb25RdWV1ZUVudHJ5SGFuZGxlVmFsdWU7XG4gICAgfVxuXG4gICAgY29uc3Qgbm86IG51bWJlciA9IE1hdGguZmxvb3IoXG4gICAgICBNYXRoLnJhbmRvbSgpICogdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkNvdW50KGdyb3VwKVxuICAgICk7XG5cbiAgICByZXR1cm4gdGhpcy5zdGFydE1vdGlvbihncm91cCwgbm8sIHByaW9yaXR5LCBvbkZpbmlzaGVkTW90aW9uSGFuZGxlcik7XG4gIH1cblxuICAvKipcbiAgICog5byV5pWw44Gn5oyH5a6a44GX44Gf6KGo5oOF44Oi44O844K344On44Oz44KS44K744OD44OI44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSBleHByZXNzaW9uSWQg6KGo5oOF44Oi44O844K344On44Oz44GuSURcbiAgICovXG4gIHB1YmxpYyBzZXRFeHByZXNzaW9uKGV4cHJlc3Npb25JZDogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3QgbW90aW9uOiBBQ3ViaXNtTW90aW9uID0gdGhpcy5fZXhwcmVzc2lvbnMuZ2V0VmFsdWUoZXhwcmVzc2lvbklkKTtcblxuICAgIGlmICh0aGlzLl9kZWJ1Z01vZGUpIHtcbiAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKGBbQVBQXWV4cHJlc3Npb246IFske2V4cHJlc3Npb25JZH1dYCk7XG4gICAgfVxuXG4gICAgaWYgKG1vdGlvbiAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlci5zdGFydE1vdGlvblByaW9yaXR5KFxuICAgICAgICBtb3Rpb24sXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBMQXBwRGVmaW5lLlByaW9yaXR5Rm9yY2VcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLl9kZWJ1Z01vZGUpIHtcbiAgICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoYFtBUFBdZXhwcmVzc2lvblske2V4cHJlc3Npb25JZH1dIGlzIG51bGxgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Op44Oz44OA44Og44Gr6YG444Gw44KM44Gf6KGo5oOF44Oi44O844K344On44Oz44KS44K744OD44OI44GZ44KLXG4gICAqL1xuICBwdWJsaWMgc2V0UmFuZG9tRXhwcmVzc2lvbigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fZXhwcmVzc2lvbnMuZ2V0U2l6ZSgpID09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBubzogbnVtYmVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5fZXhwcmVzc2lvbnMuZ2V0U2l6ZSgpKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fZXhwcmVzc2lvbnMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIGlmIChpID09IG5vKSB7XG4gICAgICAgIGNvbnN0IG5hbWU6IHN0cmluZyA9IHRoaXMuX2V4cHJlc3Npb25zLl9rZXlWYWx1ZXNbaV0uZmlyc3Q7XG4gICAgICAgIHRoaXMuc2V0RXhwcmVzc2lvbihuYW1lKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg5njg7Pjg4jjga7nmbrngavjgpLlj5fjgZHlj5bjgotcbiAgICovXG4gIHB1YmxpYyBtb3Rpb25FdmVudEZpcmVkKGV2ZW50VmFsdWU6IGNzbVN0cmluZyk6IHZvaWQge1xuICAgIEN1YmlzbUxvZ0luZm8oJ3swfSBpcyBmaXJlZCBvbiBMQXBwTW9kZWwhIScsIGV2ZW50VmFsdWUucyk7XG4gIH1cblxuICAvKipcbiAgICog5b2T44Gf44KK5Yik5a6a44OG44K544OIXG4gICAqIOaMh+Wumu+8qe+8pOOBrumggueCueODquOCueODiOOBi+OCieefqeW9ouOCkuioiOeul+OBl+OAgeW6p+aomeOCkuOBjOefqeW9ouevhOWbsuWGheOBi+WIpOWumuOBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gaGl0QXJlbmFOYW1lICDlvZPjgZ/jgorliKTlrprjgpLjg4bjgrnjg4jjgZnjgovlr77osaHjga5JRFxuICAgKiBAcGFyYW0geCAgICAgICAgICAgICDliKTlrprjgpLooYzjgYZY5bqn5qiZXG4gICAqIEBwYXJhbSB5ICAgICAgICAgICAgIOWIpOWumuOCkuihjOOBhlnluqfmqJlcbiAgICovXG4gIHB1YmxpYyBoaXRUZXN0KGhpdEFyZW5hTmFtZTogc3RyaW5nLCB4OiBudW1iZXIsIHk6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIC8vIOmAj+aYjuaZguOBr+W9k+OBn+OCiuWIpOWumueEoeOBl+OAglxuICAgIGlmICh0aGlzLl9vcGFjaXR5IDwgMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IGNvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0SGl0QXJlYXNDb3VudCgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5fbW9kZWxTZXR0aW5nLmdldEhpdEFyZWFOYW1lKGkpID09IGhpdEFyZW5hTmFtZSkge1xuICAgICAgICBjb25zdCBkcmF3SWQ6IEN1YmlzbUlkSGFuZGxlID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldEhpdEFyZWFJZChpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNIaXQoZHJhd0lkLCB4LCB5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44OH44O844K/44KS44Kw44Or44O844OX5ZCN44GL44KJ5LiA5ous44Gn44Ot44O844OJ44GZ44KL44CCXG4gICAqIOODouODvOOCt+ODp+ODs+ODh+ODvOOCv+OBruWQjeWJjeOBr+WGhemDqOOBp01vZGVsU2V0dGluZ+OBi+OCieWPluW+l+OBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gZ3JvdXAg44Oi44O844K344On44Oz44OH44O844K/44Gu44Kw44Or44O844OX5ZCNXG4gICAqL1xuICBwdWJsaWMgcHJlTG9hZE1vdGlvbkdyb3VwKGdyb3VwOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25Db3VudChncm91cCk7IGkrKykge1xuICAgICAgY29uc3QgbW90aW9uRmlsZU5hbWUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmlsZU5hbWUoZ3JvdXAsIGkpO1xuXG4gICAgICAvLyBleCkgaWRsZV8wXG4gICAgICBjb25zdCBuYW1lID0gYCR7Z3JvdXB9XyR7aX1gO1xuICAgICAgaWYgKHRoaXMuX2RlYnVnTW9kZSkge1xuICAgICAgICBMQXBwUGFsLnByaW50TWVzc2FnZShcbiAgICAgICAgICBgW0FQUF1sb2FkIG1vdGlvbjogJHttb3Rpb25GaWxlTmFtZX0gPT4gWyR7bmFtZX1dYFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBmZXRjaChgJHt0aGlzLl9tb2RlbEhvbWVEaXJ9LyR7bW90aW9uRmlsZU5hbWV9YClcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgIGNvbnN0IHRtcE1vdGlvbjogQ3ViaXNtTW90aW9uID0gdGhpcy5sb2FkTW90aW9uKFxuICAgICAgICAgICAgYXJyYXlCdWZmZXIsXG4gICAgICAgICAgICBhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoLFxuICAgICAgICAgICAgbmFtZVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBsZXQgZmFkZVRpbWUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmFkZUluVGltZVZhbHVlKGdyb3VwLCBpKTtcbiAgICAgICAgICBpZiAoZmFkZVRpbWUgPj0gMC4wKSB7XG4gICAgICAgICAgICB0bXBNb3Rpb24uc2V0RmFkZUluVGltZShmYWRlVGltZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmFkZVRpbWUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmFkZU91dFRpbWVWYWx1ZShncm91cCwgaSk7XG4gICAgICAgICAgaWYgKGZhZGVUaW1lID49IDAuMCkge1xuICAgICAgICAgICAgdG1wTW90aW9uLnNldEZhZGVPdXRUaW1lKGZhZGVUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdG1wTW90aW9uLnNldEVmZmVjdElkcyh0aGlzLl9leWVCbGlua0lkcywgdGhpcy5fbGlwU3luY0lkcyk7XG5cbiAgICAgICAgICBpZiAodGhpcy5fbW90aW9ucy5nZXRWYWx1ZShuYW1lKSAhPSBudWxsKSB7XG4gICAgICAgICAgICBBQ3ViaXNtTW90aW9uLmRlbGV0ZSh0aGlzLl9tb3Rpb25zLmdldFZhbHVlKG5hbWUpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9tb3Rpb25zLnNldFZhbHVlKG5hbWUsIHRtcE1vdGlvbik7XG5cbiAgICAgICAgICB0aGlzLl9tb3Rpb25Db3VudCsrO1xuICAgICAgICAgIGlmICh0aGlzLl9tb3Rpb25Db3VudCA+PSB0aGlzLl9hbGxNb3Rpb25Db3VudCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkVGV4dHVyZTtcblxuICAgICAgICAgICAgLy8g5YWo44Gm44Gu44Oi44O844K344On44Oz44KS5YGc5q2i44GZ44KLXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyLnN0b3BBbGxNb3Rpb25zKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3VwZGF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUmVuZGVyZXIoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0dXBUZXh0dXJlcygpO1xuICAgICAgICAgICAgdGhpcy5nZXRSZW5kZXJlcigpLnN0YXJ0VXAoZ2wpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOBmeOBueOBpuOBruODouODvOOCt+ODp+ODs+ODh+ODvOOCv+OCkuino+aUvuOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIHJlbGVhc2VNb3Rpb25zKCk6IHZvaWQge1xuICAgIHRoaXMuX21vdGlvbnMuY2xlYXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlhajjgabjga7ooajmg4Xjg4fjg7zjgr/jgpLop6PmlL7jgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlRXhwcmVzc2lvbnMoKTogdm9pZCB7XG4gICAgdGhpcy5fZXhwcmVzc2lvbnMuY2xlYXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjgpLmj4/nlLvjgZnjgovlh6bnkIbjgILjg6Ljg4fjg6vjgpLmj4/nlLvjgZnjgovnqbrplpPjga5WaWV3LVByb2plY3Rpb27ooYzliJfjgpLmuKHjgZnjgIJcbiAgICovXG4gIHB1YmxpYyBkb0RyYXcoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX21vZGVsID09IG51bGwpIHJldHVybjtcblxuICAgIC8vIOOCreODo+ODs+ODkOOCueOCteOCpOOCuuOCkua4oeOBmVxuICAgIGNvbnN0IHZpZXdwb3J0OiBudW1iZXJbXSA9IFswLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHRdO1xuXG4gICAgdGhpcy5nZXRSZW5kZXJlcigpLnNldFJlbmRlclN0YXRlKGZyYW1lQnVmZmVyLCB2aWV3cG9ydCk7XG4gICAgdGhpcy5nZXRSZW5kZXJlcigpLmRyYXdNb2RlbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OCkuaPj+eUu+OBmeOCi+WHpueQhuOAguODouODh+ODq+OCkuaPj+eUu+OBmeOCi+epuumWk+OBrlZpZXctUHJvamVjdGlvbuihjOWIl+OCkua4oeOBmeOAglxuICAgKi9cbiAgcHVibGljIGRyYXcobWF0cml4OiBDdWJpc21NYXRyaXg0NCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9tb2RlbCA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8g5ZCE6Kqt44G/6L6844G/57WC5LqG5b6MXG4gICAgaWYgKHRoaXMuX3N0YXRlID09IExvYWRTdGVwLkNvbXBsZXRlU2V0dXApIHtcbiAgICAgIG1hdHJpeC5tdWx0aXBseUJ5TWF0cml4KHRoaXMuX21vZGVsTWF0cml4KTtcblxuICAgICAgdGhpcy5nZXRSZW5kZXJlcigpLnNldE12cE1hdHJpeChtYXRyaXgpO1xuXG4gICAgICB0aGlzLmRvRHJhdygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5fbW9kZWxTZXR0aW5nID0gbnVsbDtcbiAgICB0aGlzLl9tb2RlbEhvbWVEaXIgPSBudWxsO1xuICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyA9IDAuMDtcblxuICAgIHRoaXMuX2V5ZUJsaW5rSWRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4oKTtcbiAgICB0aGlzLl9saXBTeW5jSWRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4oKTtcblxuICAgIHRoaXMuX21vdGlvbnMgPSBuZXcgY3NtTWFwPHN0cmluZywgQUN1YmlzbU1vdGlvbj4oKTtcbiAgICB0aGlzLl9leHByZXNzaW9ucyA9IG5ldyBjc21NYXA8c3RyaW5nLCBBQ3ViaXNtTW90aW9uPigpO1xuXG4gICAgdGhpcy5faGl0QXJlYSA9IG5ldyBjc21WZWN0b3I8Y3NtUmVjdD4oKTtcbiAgICB0aGlzLl91c2VyQXJlYSA9IG5ldyBjc21WZWN0b3I8Y3NtUmVjdD4oKTtcblxuICAgIHRoaXMuX2lkUGFyYW1BbmdsZVggPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICBDdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1BbmdsZVhcbiAgICApO1xuICAgIHRoaXMuX2lkUGFyYW1BbmdsZVkgPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICBDdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1BbmdsZVlcbiAgICApO1xuICAgIHRoaXMuX2lkUGFyYW1BbmdsZVogPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICBDdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1BbmdsZVpcbiAgICApO1xuICAgIHRoaXMuX2lkUGFyYW1FeWVCYWxsWCA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgIEN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUV5ZUJhbGxYXG4gICAgKTtcbiAgICB0aGlzLl9pZFBhcmFtRXllQmFsbFkgPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICBDdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1FeWVCYWxsWVxuICAgICk7XG4gICAgdGhpcy5faWRQYXJhbUJvZHlBbmdsZVggPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICBDdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Cb2R5QW5nbGVYXG4gICAgKTtcblxuICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuTG9hZEFzc2V0cztcbiAgICB0aGlzLl9leHByZXNzaW9uQ291bnQgPSAwO1xuICAgIHRoaXMuX3RleHR1cmVDb3VudCA9IDA7XG4gICAgdGhpcy5fbW90aW9uQ291bnQgPSAwO1xuICAgIHRoaXMuX2FsbE1vdGlvbkNvdW50ID0gMDtcbiAgfVxuXG4gIF9tb2RlbFNldHRpbmc6IElDdWJpc21Nb2RlbFNldHRpbmc7IC8vIOODouODh+ODq+OCu+ODg+ODhuOCo+ODs+OCsOaDheWgsVxuICBfbW9kZWxIb21lRGlyOiBzdHJpbmc7IC8vIOODouODh+ODq+OCu+ODg+ODhuOCo+ODs+OCsOOBjOe9ruOBi+OCjOOBn+ODh+OCo+ODrOOCr+ODiOODqlxuICBfdXNlclRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOODh+ODq+OCv+aZgumWk+OBruepjeeul+WApFvnp5JdXG5cbiAgX2V5ZUJsaW5rSWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+OyAvLyDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgZ/nnqzjgY3mqZ/og73nlKjjg5Hjg6njg6Hjg7zjgr9JRFxuICBfbGlwU3luY0lkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPjsgLy8g44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gf44Oq44OD44OX44K344Oz44Kv5qmf6IO955So44OR44Op44Oh44O844K/SURcblxuICBfbW90aW9uczogY3NtTWFwPHN0cmluZywgQUN1YmlzbU1vdGlvbj47IC8vIOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODouODvOOCt+ODp+ODs+OBruODquOCueODiFxuICBfZXhwcmVzc2lvbnM6IGNzbU1hcDxzdHJpbmcsIEFDdWJpc21Nb3Rpb24+OyAvLyDoqq3jgb/ovrzjgb7jgozjgabjgYTjgovooajmg4Xjga7jg6rjgrnjg4hcblxuICBfaGl0QXJlYTogY3NtVmVjdG9yPGNzbVJlY3Q+O1xuICBfdXNlckFyZWE6IGNzbVZlY3Rvcjxjc21SZWN0PjtcblxuICBfaWRQYXJhbUFuZ2xlWDogQ3ViaXNtSWRIYW5kbGU7IC8vIOODkeODqeODoeODvOOCv0lEOiBQYXJhbUFuZ2xlWFxuICBfaWRQYXJhbUFuZ2xlWTogQ3ViaXNtSWRIYW5kbGU7IC8vIOODkeODqeODoeODvOOCv0lEOiBQYXJhbUFuZ2xlWVxuICBfaWRQYXJhbUFuZ2xlWjogQ3ViaXNtSWRIYW5kbGU7IC8vIOODkeODqeODoeODvOOCv0lEOiBQYXJhbUFuZ2xlWlxuICBfaWRQYXJhbUV5ZUJhbGxYOiBDdWJpc21JZEhhbmRsZTsgLy8g44OR44Op44Oh44O844K/SUQ6IFBhcmFtRXllQmFsbFhcbiAgX2lkUGFyYW1FeWVCYWxsWTogQ3ViaXNtSWRIYW5kbGU7IC8vIOODkeODqeODoeODvOOCv0lEOiBQYXJhbUV5ZUJBbGxZXG4gIF9pZFBhcmFtQm9keUFuZ2xlWDogQ3ViaXNtSWRIYW5kbGU7IC8vIOODkeODqeODoeODvOOCv0lEOiBQYXJhbUJvZHlBbmdsZVhcblxuICBfc3RhdGU6IG51bWJlcjsgLy8g54++5Zyo44Gu44K544OG44O844K/44K5566h55CG55SoXG4gIF9leHByZXNzaW9uQ291bnQ6IG51bWJlcjsgLy8g6KGo5oOF44OH44O844K/44Kr44Km44Oz44OIXG4gIF90ZXh0dXJlQ291bnQ6IG51bWJlcjsgLy8g44OG44Kv44K544OB44Oj44Kr44Km44Oz44OIXG4gIF9tb3Rpb25Db3VudDogbnVtYmVyOyAvLyDjg6Ljg7zjgrfjg6fjg7Pjg4fjg7zjgr/jgqvjgqbjg7Pjg4hcbiAgX2FsbE1vdGlvbkNvdW50OiBudW1iZXI7IC8vIOODouODvOOCt+ODp+ODs+e3j+aVsFxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW90aW9ubWFuYWdlciB9IGZyb20gJy4uL21vdGlvbi9jdWJpc21tb3Rpb25tYW5hZ2VyJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc210YXJnZXRwb2ludCB9IGZyb20gJy4uL21hdGgvY3ViaXNtdGFyZ2V0cG9pbnQnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsbWF0cml4IH0gZnJvbSAnLi4vbWF0aC9jdWJpc21tb2RlbG1hdHJpeCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9jIH0gZnJvbSAnLi9jdWJpc21tb2MnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsIH0gZnJvbSAnLi9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgYWN1YmlzbW1vdGlvbiB9IGZyb20gJy4uL21vdGlvbi9hY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb3Rpb24gfSBmcm9tICcuLi9tb3Rpb24vY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21leHByZXNzaW9ubW90aW9uIH0gZnJvbSAnLi4vbW90aW9uL2N1YmlzbWV4cHJlc3Npb25tb3Rpb24nO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbXBvc2UgfSBmcm9tICcuLi9lZmZlY3QvY3ViaXNtcG9zZSc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWx1c2VyZGF0YSB9IGZyb20gJy4vY3ViaXNtbW9kZWx1c2VyZGF0YSc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtcGh5c2ljcyB9IGZyb20gJy4uL3BoeXNpY3MvY3ViaXNtcGh5c2ljcyc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtaWQgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3Ntc3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlciB9IGZyb20gJy4uL21vdGlvbi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXInO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWJyZWF0aCB9IGZyb20gJy4uL2VmZmVjdC9jdWJpc21icmVhdGgnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWV5ZWJsaW5rIH0gZnJvbSAnLi4vZWZmZWN0L2N1YmlzbWV5ZWJsaW5rJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21yZW5kZXJlcl93ZWJnbCB9IGZyb20gJy4uL3JlbmRlcmluZy9jdWJpc21yZW5kZXJlcl93ZWJnbCc7XG5pbXBvcnQgeyBDdWJpc21Mb2dFcnJvciwgQ3ViaXNtTG9nSW5mbyB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWRlYnVnJztcbmltcG9ydCBDdWJpc21SZW5kZXJlcl9XZWJHTCA9IGN1YmlzbXJlbmRlcmVyX3dlYmdsLkN1YmlzbVJlbmRlcmVyX1dlYkdMO1xuaW1wb3J0IEN1YmlzbUV5ZUJsaW5rID0gY3ViaXNtZXllYmxpbmsuQ3ViaXNtRXllQmxpbms7XG5pbXBvcnQgQ3ViaXNtQnJlYXRoID0gY3ViaXNtYnJlYXRoLkN1YmlzbUJyZWF0aDtcbmltcG9ydCBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIgPSBjdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXIuQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyO1xuaW1wb3J0IGNzbVN0cmluZyA9IGNzbXN0cmluZy5jc21TdHJpbmc7XG5pbXBvcnQgQ29uc3RhbnQgPSBjdWJpc21mcmFtZXdvcmsuQ29uc3RhbnQ7XG5pbXBvcnQgQ3ViaXNtSWRIYW5kbGUgPSBjdWJpc21pZC5DdWJpc21JZEhhbmRsZTtcbmltcG9ydCBDdWJpc21QaHlzaWNzID0gY3ViaXNtcGh5c2ljcy5DdWJpc21QaHlzaWNzO1xuaW1wb3J0IEN1YmlzbU1vZGVsVXNlckRhdGEgPSBjdWJpc21tb2RlbHVzZXJkYXRhLkN1YmlzbU1vZGVsVXNlckRhdGE7XG5pbXBvcnQgQ3ViaXNtUG9zZSA9IGN1YmlzbXBvc2UuQ3ViaXNtUG9zZTtcbmltcG9ydCBDdWJpc21FeHByZXNzaW9uTW90aW9uID0gY3ViaXNtZXhwcmVzc2lvbm1vdGlvbi5DdWJpc21FeHByZXNzaW9uTW90aW9uO1xuaW1wb3J0IEN1YmlzbU1vdGlvbiA9IGN1YmlzbW1vdGlvbi5DdWJpc21Nb3Rpb247XG5pbXBvcnQgQUN1YmlzbU1vdGlvbiA9IGFjdWJpc21tb3Rpb24uQUN1YmlzbU1vdGlvbjtcbmltcG9ydCBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrID0gYWN1YmlzbW1vdGlvbi5GaW5pc2hlZE1vdGlvbkNhbGxiYWNrO1xuaW1wb3J0IEN1YmlzbU1vZGVsID0gY3ViaXNtbW9kZWwuQ3ViaXNtTW9kZWw7XG5pbXBvcnQgQ3ViaXNtTW9jID0gY3ViaXNtbW9jLkN1YmlzbU1vYztcbmltcG9ydCBDdWJpc21Nb2RlbE1hdHJpeCA9IGN1YmlzbW1vZGVsbWF0cml4LkN1YmlzbU1vZGVsTWF0cml4O1xuaW1wb3J0IEN1YmlzbVRhcmdldFBvaW50ID0gY3ViaXNtdGFyZ2V0cG9pbnQuQ3ViaXNtVGFyZ2V0UG9pbnQ7XG5pbXBvcnQgQ3ViaXNtTW90aW9uTWFuYWdlciA9IGN1YmlzbW1vdGlvbm1hbmFnZXIuQ3ViaXNtTW90aW9uTWFuYWdlcjtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICog44Om44O844K244O844GM5a6f6Zqb44Gr5L2/55So44GZ44KL44Oi44OH44OrXG4gICAqXG4gICAqIOODpuODvOOCtuODvOOBjOWun+mam+OBq+S9v+eUqOOBmeOCi+ODouODh+ODq+OBruWfuuW6leOCr+ODqeOCueOAguOBk+OCjOOCkue2meaJv+OBl+OBpuODpuODvOOCtuODvOOBjOWun+ijheOBmeOCi+OAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbVVzZXJNb2RlbCB7XG4gICAgLyoqXG4gICAgICog5Yid5pyf5YyW54q25oWL44Gu5Y+W5b6XXG4gICAgICpcbiAgICAgKiDliJ3mnJ/ljJbjgZXjgozjgabjgYTjgovnirbmhYvjgYvvvJ9cbiAgICAgKlxuICAgICAqIEByZXR1cm4gdHJ1ZSAgICAg5Yid5pyf5YyW44GV44KM44Gm44GE44KLXG4gICAgICogQHJldHVybiBmYWxzZSAgICDliJ3mnJ/ljJbjgZXjgozjgabjgYTjgarjgYRcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNJbml0aWFsaXplZCgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0aWFsaXplZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDliJ3mnJ/ljJbnirbmhYvjga7oqK3lrppcbiAgICAgKlxuICAgICAqIOWIneacn+WMlueKtuaFi+OCkuioreWumuOBmeOCi+OAglxuICAgICAqXG4gICAgICogQHBhcmFtIHYg5Yid5pyf5YyW54q25oWLXG4gICAgICovXG4gICAgcHVibGljIHNldEluaXRpYWxpemVkKHY6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gdjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmm7TmlrDnirbmhYvjga7lj5blvpdcbiAgICAgKlxuICAgICAqIOabtOaWsOOBleOCjOOBpuOBhOOCi+eKtuaFi+OBi++8n1xuICAgICAqXG4gICAgICogQHJldHVybiB0cnVlICAgICDmm7TmlrDjgZXjgozjgabjgYTjgotcbiAgICAgKiBAcmV0dXJuIGZhbHNlICAgIOabtOaWsOOBleOCjOOBpuOBhOOBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBpc1VwZGF0aW5nKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0aW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOabtOaWsOeKtuaFi+OBruioreWumlxuICAgICAqXG4gICAgICog5pu05paw54q25oWL44KS6Kit5a6a44GZ44KLXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdiDmm7TmlrDnirbmhYtcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0VXBkYXRpbmcodjogYm9vbGVhbik6IHZvaWQge1xuICAgICAgdGhpcy5fdXBkYXRpbmcgPSB2O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODnuOCpuOCueODieODqeODg+OCsOaDheWgseOBruioreWumlxuICAgICAqIEBwYXJhbSDjg4njg6njg4PjgrDjgZfjgabjgYTjgovjgqvjg7zjgr3jg6vjga5Y5L2N572uXG4gICAgICogQHBhcmFtIOODieODqeODg+OCsOOBl+OBpuOBhOOCi+OCq+ODvOOCveODq+OBrlnkvY3nva5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0RHJhZ2dpbmcoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX2RyYWdNYW5hZ2VyLnNldCh4LCB5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDliqDpgJ/luqbjga7mg4XloLHjgpLoqK3lrprjgZnjgotcbiAgICAgKiBAcGFyYW0geCBY6Lu45pa55ZCR44Gu5Yqg6YCf5bqmXG4gICAgICogQHBhcmFtIHkgWei7uOaWueWQkeOBruWKoOmAn+W6plxuICAgICAqIEBwYXJhbSB6IFrou7jmlrnlkJHjga7liqDpgJ/luqZcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0QWNjZWxlcmF0aW9uKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX2FjY2VsZXJhdGlvblggPSB4O1xuICAgICAgdGhpcy5fYWNjZWxlcmF0aW9uWSA9IHk7XG4gICAgICB0aGlzLl9hY2NlbGVyYXRpb25aID0gejtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg4fjg6vooYzliJfjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcmV0dXJuIOODouODh+ODq+ihjOWIl1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNb2RlbE1hdHJpeCgpOiBDdWJpc21Nb2RlbE1hdHJpeCB7XG4gICAgICByZXR1cm4gdGhpcy5fbW9kZWxNYXRyaXg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5LiN6YCP5piO5bqm44Gu6Kit5a6aXG4gICAgICogQHBhcmFtIGEg5LiN6YCP5piO5bqmXG4gICAgICovXG4gICAgcHVibGljIHNldE9wYWNpdHkoYTogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0aGlzLl9vcGFjaXR5ID0gYTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDkuI3pgI/mmI7luqbjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOS4jemAj+aYjuW6plxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRPcGFjaXR5KCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fb3BhY2l0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg4fjg6vjg4fjg7zjgr/jgpLoqq3jgb/ovrzjgoBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBidWZmZXIgICAgbW9jM+ODleOCoeOCpOODq+OBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgICAqL1xuICAgIHB1YmxpYyBsb2FkTW9kZWwoYnVmZmVyOiBBcnJheUJ1ZmZlcikge1xuICAgICAgdGhpcy5fbW9jID0gQ3ViaXNtTW9jLmNyZWF0ZShidWZmZXIpO1xuICAgICAgdGhpcy5fbW9kZWwgPSB0aGlzLl9tb2MuY3JlYXRlTW9kZWwoKTtcbiAgICAgIHRoaXMuX21vZGVsLnNhdmVQYXJhbWV0ZXJzKCk7XG5cbiAgICAgIGlmICh0aGlzLl9tb2MgPT0gbnVsbCB8fCB0aGlzLl9tb2RlbCA9PSBudWxsKSB7XG4gICAgICAgIEN1YmlzbUxvZ0Vycm9yKCdGYWlsZWQgdG8gQ3JlYXRlTW9kZWwoKS4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9tb2RlbE1hdHJpeCA9IG5ldyBDdWJpc21Nb2RlbE1hdHJpeChcbiAgICAgICAgdGhpcy5fbW9kZWwuZ2V0Q2FudmFzV2lkdGgoKSxcbiAgICAgICAgdGhpcy5fbW9kZWwuZ2V0Q2FudmFzSGVpZ2h0KClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44OH44O844K/44KS6Kqt44G/6L6844KAXG4gICAgICogQHBhcmFtIGJ1ZmZlciBtb3Rpb24zLmpzb27jg5XjgqHjgqTjg6vjgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICAgKiBAcGFyYW0gbmFtZSDjg6Ljg7zjgrfjg6fjg7Pjga7lkI3liY1cbiAgICAgKiBAcGFyYW0gb25GaW5pc2hlZE1vdGlvbkhhbmRsZXIg44Oi44O844K344On44Oz5YaN55Sf57WC5LqG5pmC44Gr5ZG844Gz5Ye644GV44KM44KL44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gICAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjgq/jg6njgrlcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9hZE1vdGlvbiA9IChcbiAgICAgIGJ1ZmZlcjogQXJyYXlCdWZmZXIsXG4gICAgICBzaXplOiBudW1iZXIsXG4gICAgICBuYW1lOiBzdHJpbmcsXG4gICAgICBvbkZpbmlzaGVkTW90aW9uSGFuZGxlcj86IEZpbmlzaGVkTW90aW9uQ2FsbGJhY2tcbiAgICApID0+IEN1YmlzbU1vdGlvbi5jcmVhdGUoYnVmZmVyLCBzaXplLCBvbkZpbmlzaGVkTW90aW9uSGFuZGxlcik7XG5cbiAgICAvKipcbiAgICAgKiDooajmg4Xjg4fjg7zjgr/jga7oqq3jgb/ovrzjgb9cbiAgICAgKiBAcGFyYW0gYnVmZmVyIGV4cOODleOCoeOCpOODq+OBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgICAqIEBwYXJhbSBuYW1lIOihqOaDheOBruWQjeWJjVxuICAgICAqL1xuICAgIHB1YmxpYyBsb2FkRXhwcmVzc2lvbihcbiAgICAgIGJ1ZmZlcjogQXJyYXlCdWZmZXIsXG4gICAgICBzaXplOiBudW1iZXIsXG4gICAgICBuYW1lOiBzdHJpbmdcbiAgICApOiBBQ3ViaXNtTW90aW9uIHtcbiAgICAgIHJldHVybiBDdWJpc21FeHByZXNzaW9uTW90aW9uLmNyZWF0ZShidWZmZXIsIHNpemUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODneODvOOCuuODh+ODvOOCv+OBruiqreOBv+i+vOOBv1xuICAgICAqIEBwYXJhbSBidWZmZXIgcG9zZTMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgICAqL1xuICAgIHB1YmxpYyBsb2FkUG9zZShidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX3Bvc2UgPSBDdWJpc21Qb3NlLmNyZWF0ZShidWZmZXIsIHNpemUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODh+ODq+OBq+S7mOWxnuOBmeOCi+ODpuODvOOCtuODvOODh+ODvOOCv+OCkuiqreOBv+i+vOOCgFxuICAgICAqIEBwYXJhbSBidWZmZXIgdXNlcmRhdGEzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9hZFVzZXJEYXRhKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IHZvaWQge1xuICAgICAgdGhpcy5fbW9kZWxVc2VyRGF0YSA9IEN1YmlzbU1vZGVsVXNlckRhdGEuY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog54mp55CG5ryU566X44OH44O844K/44Gu6Kqt44G/6L6844G/XG4gICAgICogQHBhcmFtIGJ1ZmZlciAgcGh5c2ljczMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgICAqIEBwYXJhbSBzaXplICAgIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgICAqL1xuICAgIHB1YmxpYyBsb2FkUGh5c2ljcyhidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX3BoeXNpY3MgPSBDdWJpc21QaHlzaWNzLmNyZWF0ZShidWZmZXIsIHNpemUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOW9k+OBn+OCiuWIpOWumuOBruWPluW+l1xuICAgICAqIEBwYXJhbSBkcmF3YWJsZUlkIOaknOiovOOBl+OBn+OBhERyYXdhYmxl44GuSURcbiAgICAgKiBAcGFyYW0gcG9pbnRYIFjkvY3nva5cbiAgICAgKiBAcGFyYW0gcG9pbnRZIFnkvY3nva5cbiAgICAgKiBAcmV0dXJuIHRydWUg44OS44OD44OI44GX44Gm44GE44KLXG4gICAgICogQHJldHVybiBmYWxzZSDjg5Ljg4Pjg4jjgZfjgabjgYTjgarjgYRcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNIaXQoXG4gICAgICBkcmF3YWJsZUlkOiBDdWJpc21JZEhhbmRsZSxcbiAgICAgIHBvaW50WDogbnVtYmVyLFxuICAgICAgcG9pbnRZOiBudW1iZXJcbiAgICApOiBib29sZWFuIHtcbiAgICAgIGNvbnN0IGRyYXdJbmRleDogbnVtYmVyID0gdGhpcy5fbW9kZWwuZ2V0RHJhd2FibGVJbmRleChkcmF3YWJsZUlkKTtcblxuICAgICAgaWYgKGRyYXdJbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyDlrZjlnKjjgZfjgarjgYTloLTlkIjjga9mYWxzZVxuICAgICAgfVxuXG4gICAgICBjb25zdCBjb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwuZ2V0RHJhd2FibGVWZXJ0ZXhDb3VudChkcmF3SW5kZXgpO1xuICAgICAgY29uc3QgdmVydGljZXM6IEZsb2F0MzJBcnJheSA9IHRoaXMuX21vZGVsLmdldERyYXdhYmxlVmVydGljZXMoZHJhd0luZGV4KTtcblxuICAgICAgbGV0IGxlZnQ6IG51bWJlciA9IHZlcnRpY2VzWzBdO1xuICAgICAgbGV0IHJpZ2h0OiBudW1iZXIgPSB2ZXJ0aWNlc1swXTtcbiAgICAgIGxldCB0b3A6IG51bWJlciA9IHZlcnRpY2VzWzFdO1xuICAgICAgbGV0IGJvdHRvbTogbnVtYmVyID0gdmVydGljZXNbMV07XG5cbiAgICAgIGZvciAobGV0IGogPSAxOyBqIDwgY291bnQ7ICsraikge1xuICAgICAgICBjb25zdCB4ID0gdmVydGljZXNbQ29uc3RhbnQudmVydGV4T2Zmc2V0ICsgaiAqIENvbnN0YW50LnZlcnRleFN0ZXBdO1xuICAgICAgICBjb25zdCB5ID0gdmVydGljZXNbQ29uc3RhbnQudmVydGV4T2Zmc2V0ICsgaiAqIENvbnN0YW50LnZlcnRleFN0ZXAgKyAxXTtcblxuICAgICAgICBpZiAoeCA8IGxlZnQpIHtcbiAgICAgICAgICBsZWZ0ID0geDsgLy8gTWluIHhcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh4ID4gcmlnaHQpIHtcbiAgICAgICAgICByaWdodCA9IHg7IC8vIE1heCB4XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoeSA8IHRvcCkge1xuICAgICAgICAgIHRvcCA9IHk7IC8vIE1pbiB5XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoeSA+IGJvdHRvbSkge1xuICAgICAgICAgIGJvdHRvbSA9IHk7IC8vIE1heCB5XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgdHg6IG51bWJlciA9IHRoaXMuX21vZGVsTWF0cml4LmludmVydFRyYW5zZm9ybVgocG9pbnRYKTtcbiAgICAgIGNvbnN0IHR5OiBudW1iZXIgPSB0aGlzLl9tb2RlbE1hdHJpeC5pbnZlcnRUcmFuc2Zvcm1ZKHBvaW50WSk7XG5cbiAgICAgIHJldHVybiBsZWZ0IDw9IHR4ICYmIHR4IDw9IHJpZ2h0ICYmIHRvcCA8PSB0eSAmJiB0eSA8PSBib3R0b207XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44OH44Or44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDjg6Ljg4fjg6tcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TW9kZWwoKTogQ3ViaXNtTW9kZWwge1xuICAgICAgcmV0dXJuIHRoaXMuX21vZGVsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODrOODs+ODgOODqeOBruWPluW+l1xuICAgICAqIEByZXR1cm4g44Os44Oz44OA44OpXG4gICAgICovXG4gICAgcHVibGljIGdldFJlbmRlcmVyKCk6IEN1YmlzbVJlbmRlcmVyX1dlYkdMIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZW5kZXJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6zjg7Pjg4Djg6njgpLkvZzmiJDjgZfjgabliJ3mnJ/ljJbjgpLlrp/ooYzjgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgY3JlYXRlUmVuZGVyZXIoKTogdm9pZCB7XG4gICAgICBpZiAodGhpcy5fcmVuZGVyZXIpIHtcbiAgICAgICAgdGhpcy5kZWxldGVSZW5kZXJlcigpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZW5kZXJlciA9IG5ldyBDdWJpc21SZW5kZXJlcl9XZWJHTCgpO1xuICAgICAgdGhpcy5fcmVuZGVyZXIuaW5pdGlhbGl6ZSh0aGlzLl9tb2RlbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Os44Oz44OA44Op44Gu6Kej5pS+XG4gICAgICovXG4gICAgcHVibGljIGRlbGV0ZVJlbmRlcmVyKCk6IHZvaWQge1xuICAgICAgaWYgKHRoaXMuX3JlbmRlcmVyICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIucmVsZWFzZSgpO1xuICAgICAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kk44OZ44Oz44OI55m654Gr5pmC44Gu5qiZ5rqW5Yem55CGXG4gICAgICpcbiAgICAgKiBFdmVudOOBjOWGjeeUn+WHpueQhuaZguOBq+OBguOBo+OBn+WgtOWQiOOBruWHpueQhuOCkuOBmeOCi+OAglxuICAgICAqIOe2meaJv+OBp+S4iuabuOOBjeOBmeOCi+OBk+OBqOOCkuaDs+WumuOBl+OBpuOBhOOCi+OAglxuICAgICAqIOS4iuabuOOBjeOBl+OBquOBhOWgtOWQiOOBr+ODreOCsOWHuuWKm+OCkuOBmeOCi+OAglxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50VmFsdWUg55m654Gr44GX44Gf44Kk44OZ44Oz44OI44Gu5paH5a2X5YiX44OH44O844K/XG4gICAgICovXG4gICAgcHVibGljIG1vdGlvbkV2ZW50RmlyZWQoZXZlbnRWYWx1ZTogY3NtU3RyaW5nKTogdm9pZCB7XG4gICAgICBDdWJpc21Mb2dJbmZvKCd7MH0nLCBldmVudFZhbHVlLnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCpOODmeODs+ODiOeUqOOBruOCs+ODvOODq+ODkOODg+OCr1xuICAgICAqXG4gICAgICogQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2Vy44Gr44Kk44OZ44Oz44OI55So44Gr55m76Yyy44GZ44KL44Gf44KB44GuQ2FsbGJhY2vjgIJcbiAgICAgKiBDdWJpc21Vc2VyTW9kZWzjga7ntpnmib/lhYjjga5FdmVudEZpcmVk44KS5ZG844G244CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2FsbGVyIOeZuueBq+OBl+OBn+OCpOODmeODs+ODiOOCkueuoeeQhuOBl+OBpuOBhOOBn+ODouODvOOCt+ODp+ODs+ODnuODjeODvOOCuOODo+ODvOOAgeavlOi8g+eUqFxuICAgICAqIEBwYXJhbSBldmVudFZhbHVlIOeZuueBq+OBl+OBn+OCpOODmeODs+ODiOOBruaWh+Wtl+WIl+ODh+ODvOOCv1xuICAgICAqIEBwYXJhbSBjdXN0b21EYXRhIEN1YmlzbVVzZXJNb2RlbOOCkue2meaJv+OBl+OBn+OCpOODs+OCueOCv+ODs+OCueOCkuaDs+WumlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgY3ViaXNtRGVmYXVsdE1vdGlvbkV2ZW50Q2FsbGJhY2soXG4gICAgICBjYWxsZXI6IEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcixcbiAgICAgIGV2ZW50VmFsdWU6IGNzbVN0cmluZyxcbiAgICAgIGN1c3RvbURhdGE6IEN1YmlzbVVzZXJNb2RlbFxuICAgICk6IHZvaWQge1xuICAgICAgY29uc3QgbW9kZWw6IEN1YmlzbVVzZXJNb2RlbCA9IGN1c3RvbURhdGE7XG5cbiAgICAgIGlmIChtb2RlbCAhPSBudWxsKSB7XG4gICAgICAgIG1vZGVsLm1vdGlvbkV2ZW50RmlyZWQoZXZlbnRWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgLy8g5ZCE5aSJ5pWw5Yid5pyf5YyWXG4gICAgICB0aGlzLl9tb2MgPSBudWxsO1xuICAgICAgdGhpcy5fbW9kZWwgPSBudWxsO1xuICAgICAgdGhpcy5fbW90aW9uTWFuYWdlciA9IG51bGw7XG4gICAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlciA9IG51bGw7XG4gICAgICB0aGlzLl9leWVCbGluayA9IG51bGw7XG4gICAgICB0aGlzLl9icmVhdGggPSBudWxsO1xuICAgICAgdGhpcy5fbW9kZWxNYXRyaXggPSBudWxsO1xuICAgICAgdGhpcy5fcG9zZSA9IG51bGw7XG4gICAgICB0aGlzLl9kcmFnTWFuYWdlciA9IG51bGw7XG4gICAgICB0aGlzLl9waHlzaWNzID0gbnVsbDtcbiAgICAgIHRoaXMuX21vZGVsVXNlckRhdGEgPSBudWxsO1xuICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3VwZGF0aW5nID0gZmFsc2U7XG4gICAgICB0aGlzLl9vcGFjaXR5ID0gMS4wO1xuICAgICAgdGhpcy5fbGlwc3luYyA9IHRydWU7XG4gICAgICB0aGlzLl9sYXN0TGlwU3luY1ZhbHVlID0gMC4wO1xuICAgICAgdGhpcy5fZHJhZ1ggPSAwLjA7XG4gICAgICB0aGlzLl9kcmFnWSA9IDAuMDtcbiAgICAgIHRoaXMuX2FjY2VsZXJhdGlvblggPSAwLjA7XG4gICAgICB0aGlzLl9hY2NlbGVyYXRpb25ZID0gMC4wO1xuICAgICAgdGhpcy5fYWNjZWxlcmF0aW9uWiA9IDAuMDtcbiAgICAgIHRoaXMuX2RlYnVnTW9kZSA9IGZhbHNlO1xuICAgICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuXG4gICAgICAvLyDjg6Ljg7zjgrfjg6fjg7Pjg57jg43jg7zjgrjjg6Pjg7zjgpLkvZzmiJBcbiAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIgPSBuZXcgQ3ViaXNtTW90aW9uTWFuYWdlcigpO1xuICAgICAgdGhpcy5fbW90aW9uTWFuYWdlci5zZXRFdmVudENhbGxiYWNrKFxuICAgICAgICBDdWJpc21Vc2VyTW9kZWwuY3ViaXNtRGVmYXVsdE1vdGlvbkV2ZW50Q2FsbGJhY2ssXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG5cbiAgICAgIC8vIOihqOaDheODnuODjeODvOOCuOODo+ODvOOCkuS9nOaIkFxuICAgICAgdGhpcy5fZXhwcmVzc2lvbk1hbmFnZXIgPSBuZXcgQ3ViaXNtTW90aW9uTWFuYWdlcigpO1xuXG4gICAgICAvLyDjg4njg6njg4PjgrDjgavjgojjgovjgqLjg4vjg6Hjg7zjgrfjg6fjg7NcbiAgICAgIHRoaXMuX2RyYWdNYW5hZ2VyID0gbmV3IEN1YmlzbVRhcmdldFBvaW50KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OH44K544OI44Op44Kv44K/44Gr55u45b2T44GZ44KL5Yem55CGXG4gICAgICovXG4gICAgcHVibGljIHJlbGVhc2UoKSB7XG4gICAgICBpZiAodGhpcy5fbW90aW9uTWFuYWdlciAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIucmVsZWFzZSgpO1xuICAgICAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2V4cHJlc3Npb25NYW5hZ2VyICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5fZXhwcmVzc2lvbk1hbmFnZXIucmVsZWFzZSgpO1xuICAgICAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlciA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9tb2MgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9tb2MuZGVsZXRlTW9kZWwodGhpcy5fbW9kZWwpO1xuICAgICAgICB0aGlzLl9tb2MucmVsZWFzZSgpO1xuICAgICAgICB0aGlzLl9tb2MgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9tb2RlbE1hdHJpeCA9IG51bGw7XG5cbiAgICAgIEN1YmlzbVBvc2UuZGVsZXRlKHRoaXMuX3Bvc2UpO1xuICAgICAgQ3ViaXNtRXllQmxpbmsuZGVsZXRlKHRoaXMuX2V5ZUJsaW5rKTtcbiAgICAgIEN1YmlzbUJyZWF0aC5kZWxldGUodGhpcy5fYnJlYXRoKTtcblxuICAgICAgdGhpcy5fZHJhZ01hbmFnZXIgPSBudWxsO1xuXG4gICAgICBDdWJpc21QaHlzaWNzLmRlbGV0ZSh0aGlzLl9waHlzaWNzKTtcbiAgICAgIEN1YmlzbU1vZGVsVXNlckRhdGEuZGVsZXRlKHRoaXMuX21vZGVsVXNlckRhdGEpO1xuXG4gICAgICB0aGlzLmRlbGV0ZVJlbmRlcmVyKCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9tb2M6IEN1YmlzbU1vYzsgLy8gTW9j44OH44O844K/XG4gICAgcHJvdGVjdGVkIF9tb2RlbDogQ3ViaXNtTW9kZWw7IC8vIE1vZGVs44Kk44Oz44K544K/44Oz44K5XG5cbiAgICBwcm90ZWN0ZWQgX21vdGlvbk1hbmFnZXI6IEN1YmlzbU1vdGlvbk1hbmFnZXI7IC8vIOODouODvOOCt+ODp+ODs+euoeeQhlxuICAgIHByb3RlY3RlZCBfZXhwcmVzc2lvbk1hbmFnZXI6IEN1YmlzbU1vdGlvbk1hbmFnZXI7IC8vIOihqOaDheeuoeeQhlxuICAgIHByb3RlY3RlZCBfZXllQmxpbms6IEN1YmlzbUV5ZUJsaW5rOyAvLyDoh6rli5Xjgb7jgbDjgZ/jgY1cbiAgICBwcm90ZWN0ZWQgX2JyZWF0aDogQ3ViaXNtQnJlYXRoOyAvLyDlkbzlkLhcbiAgICBwcm90ZWN0ZWQgX21vZGVsTWF0cml4OiBDdWJpc21Nb2RlbE1hdHJpeDsgLy8g44Oi44OH44Or6KGM5YiXXG4gICAgcHJvdGVjdGVkIF9wb3NlOiBDdWJpc21Qb3NlOyAvLyDjg53jg7zjgrrnrqHnkIZcbiAgICBwcm90ZWN0ZWQgX2RyYWdNYW5hZ2VyOiBDdWJpc21UYXJnZXRQb2ludDsgLy8g44Oe44Km44K544OJ44Op44OD44KwXG4gICAgcHJvdGVjdGVkIF9waHlzaWNzOiBDdWJpc21QaHlzaWNzOyAvLyDniannkIbmvJTnrpdcbiAgICBwcm90ZWN0ZWQgX21vZGVsVXNlckRhdGE6IEN1YmlzbU1vZGVsVXNlckRhdGE7IC8vIOODpuODvOOCtuODvOODh+ODvOOCv1xuXG4gICAgcHJvdGVjdGVkIF9pbml0aWFsaXplZDogYm9vbGVhbjsgLy8g5Yid5pyf5YyW44GV44KM44Gf44GL44Gp44GG44GLXG4gICAgcHJvdGVjdGVkIF91cGRhdGluZzogYm9vbGVhbjsgLy8g5pu05paw44GV44KM44Gf44GL44Gp44GG44GLXG4gICAgcHJvdGVjdGVkIF9vcGFjaXR5OiBudW1iZXI7IC8vIOS4jemAj+aYjuW6plxuICAgIHByb3RlY3RlZCBfbGlwc3luYzogYm9vbGVhbjsgLy8g44Oq44OD44OX44K344Oz44Kv44GZ44KL44GL44Gp44GG44GLXG4gICAgcHJvdGVjdGVkIF9sYXN0TGlwU3luY1ZhbHVlOiBudW1iZXI7IC8vIOacgOW+jOOBruODquODg+ODl+OCt+ODs+OCr+OBruWItuW+oeWcsFxuICAgIHByb3RlY3RlZCBfZHJhZ1g6IG51bWJlcjsgLy8g44Oe44Km44K544OJ44Op44OD44Kw44GuWOS9jee9rlxuICAgIHByb3RlY3RlZCBfZHJhZ1k6IG51bWJlcjsgLy8g44Oe44Km44K544OJ44Op44OD44Kw44GuWeS9jee9rlxuICAgIHByb3RlY3RlZCBfYWNjZWxlcmF0aW9uWDogbnVtYmVyOyAvLyBY6Lu45pa55ZCR44Gu5Yqg6YCf5bqmXG4gICAgcHJvdGVjdGVkIF9hY2NlbGVyYXRpb25ZOiBudW1iZXI7IC8vIFnou7jmlrnlkJHjga7liqDpgJ/luqZcbiAgICBwcm90ZWN0ZWQgX2FjY2VsZXJhdGlvblo6IG51bWJlcjsgLy8gWui7uOaWueWQkeOBruWKoOmAn+W6plxuICAgIHByb3RlY3RlZCBfZGVidWdNb2RlOiBib29sZWFuOyAvLyDjg4fjg5Djg4PjgrDjg6Ljg7zjg4njgYvjganjgYbjgYtcblxuICAgIHByaXZhdGUgX3JlbmRlcmVyOiBDdWJpc21SZW5kZXJlcl9XZWJHTDsgLy8g44Os44Oz44OA44OpXG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXIgfSBmcm9tICcuL2N1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlcic7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgYWN1YmlzbW1vdGlvbiB9IGZyb20gJy4vYWN1YmlzbW1vdGlvbic7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSA9IGN1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlci5DdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlO1xuaW1wb3J0IEN1YmlzbU1vZGVsID0gY3ViaXNtbW9kZWwuQ3ViaXNtTW9kZWw7XG5pbXBvcnQgQUN1YmlzbU1vdGlvbiA9IGFjdWJpc21tb3Rpb24uQUN1YmlzbU1vdGlvbjtcbmltcG9ydCBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIgPSBjdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXIuQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyO1xuXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7nrqHnkIZcbiAgICpcbiAgICog44Oi44O844K344On44Oz44Gu566h55CG44KS6KGM44GG44Kv44Op44K5XG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uTWFuYWdlciBleHRlbmRzIEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlciB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIHRoaXMuX2N1cnJlbnRQcmlvcml0eSA9IDA7XG4gICAgICB0aGlzLl9yZXNlcnZlUHJpb3JpdHkgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWGjeeUn+S4reOBruODouODvOOCt+ODp+ODs+OBruWEquWFiOW6puOBruWPluW+l1xuICAgICAqIEByZXR1cm4gIOODouODvOOCt+ODp+ODs+OBruWEquWFiOW6plxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRDdXJyZW50UHJpb3JpdHkoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50UHJpb3JpdHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5LqI57SE5Lit44Gu44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm44KS5Y+W5b6X44GZ44KL44CCXG4gICAgICogQHJldHVybiAg44Oi44O844K344On44Oz44Gu5YSq5YWI5bqmXG4gICAgICovXG4gICAgcHVibGljIGdldFJlc2VydmVQcmlvcml0eSgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX3Jlc2VydmVQcmlvcml0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDkuojntITkuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgpLoqK3lrprjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0gICB2YWwgICAgIOWEquWFiOW6plxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRSZXNlcnZlUHJpb3JpdHkodmFsOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX3Jlc2VydmVQcmlvcml0eSA9IHZhbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlhKrlhYjluqbjgpLoqK3lrprjgZfjgabjg6Ljg7zjgrfjg6fjg7PjgpLplovlp4vjgZnjgovjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBtb3Rpb24gICAgICAgICAg44Oi44O844K344On44OzXG4gICAgICogQHBhcmFtIGF1dG9EZWxldGUgICAgICDlho3nlJ/jgYzni6nnjJ/jgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLliYrpmaTjgZnjgovjgarjgol0cnVlXG4gICAgICogQHBhcmFtIHByaW9yaXR5ICAgICAgICDlhKrlhYjluqZcbiAgICAgKiBAcmV0dXJuICAgICAgICAgICAgICAgIOmWi+Wni+OBl+OBn+ODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt+OCkui/lOOBmeOAguWAi+WIpeOBruODouODvOOCt+ODp+ODs+OBjOe1guS6huOBl+OBn+OBi+WQpuOBi+OCkuWIpOWumuOBmeOCi0lzRmluaXNoZWQoKeOBruW8leaVsOOBp+S9v+eUqOOBmeOCi+OAgumWi+Wni+OBp+OBjeOBquOBhOaZguOBr+OAjC0x44CNXG4gICAgICovXG4gICAgcHVibGljIHN0YXJ0TW90aW9uUHJpb3JpdHkoXG4gICAgICBtb3Rpb246IEFDdWJpc21Nb3Rpb24sXG4gICAgICBhdXRvRGVsZXRlOiBib29sZWFuLFxuICAgICAgcHJpb3JpdHk6IG51bWJlclxuICAgICk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUge1xuICAgICAgaWYgKHByaW9yaXR5ID09IHRoaXMuX3Jlc2VydmVQcmlvcml0eSkge1xuICAgICAgICB0aGlzLl9yZXNlcnZlUHJpb3JpdHkgPSAwOyAvLyDkuojntITjgpLop6PpmaRcbiAgICAgIH1cblxuICAgICAgdGhpcy5fY3VycmVudFByaW9yaXR5ID0gcHJpb3JpdHk7IC8vIOWGjeeUn+S4reODouODvOOCt+ODp+ODs+OBruWEquWFiOW6puOCkuioreWumlxuXG4gICAgICByZXR1cm4gc3VwZXIuc3RhcnRNb3Rpb24obW90aW9uLCBhdXRvRGVsZXRlLCB0aGlzLl91c2VyVGltZVNlY29uZHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OCkuabtOaWsOOBl+OBpuOAgeODouODh+ODq+OBq+ODkeODqeODoeODvOOCv+WApOOCkuWPjeaYoOOBmeOCi+OAglxuICAgICAqXG4gICAgICogQHBhcmFtIG1vZGVsICAg5a++6LGh44Gu44Oi44OH44OrXG4gICAgICogQHBhcmFtIGRlbHRhVGltZVNlY29uZHMgICAg44OH44Or44K/5pmC6ZaTW+enkl1cbiAgICAgKiBAcmV0dXJuICB0cnVlICAgIOabtOaWsOOBleOCjOOBpuOBhOOCi1xuICAgICAqIEByZXR1cm4gIGZhbHNlICAg5pu05paw44GV44KM44Gm44GE44Gq44GEXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZU1vdGlvbihtb2RlbDogQ3ViaXNtTW9kZWwsIGRlbHRhVGltZVNlY29uZHM6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzICs9IGRlbHRhVGltZVNlY29uZHM7XG5cbiAgICAgIGNvbnN0IHVwZGF0ZWQ6IGJvb2xlYW4gPSBzdXBlci5kb1VwZGF0ZU1vdGlvbihcbiAgICAgICAgbW9kZWwsXG4gICAgICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kc1xuICAgICAgKTtcblxuICAgICAgaWYgKHRoaXMuaXNGaW5pc2hlZCgpKSB7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRQcmlvcml0eSA9IDA7IC8vIOWGjeeUn+S4reOBruODouODvOOCt+ODp+ODs+OBruWEquWFiOW6puOCkuino+mZpFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdXBkYXRlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7PjgpLkuojntITjgZnjgovjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHByaW9yaXR5ICAgIOWEquWFiOW6plxuICAgICAqIEByZXR1cm4gIHRydWUgICAg5LqI57SE44Gn44GN44GfXG4gICAgICogQHJldHVybiAgZmFsc2UgICDkuojntITjgafjgY3jgarjgYvjgaPjgZ9cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVzZXJ2ZU1vdGlvbihwcmlvcml0eTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICBpZiAoXG4gICAgICAgIHByaW9yaXR5IDw9IHRoaXMuX3Jlc2VydmVQcmlvcml0eSB8fFxuICAgICAgICBwcmlvcml0eSA8PSB0aGlzLl9jdXJyZW50UHJpb3JpdHlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3Jlc2VydmVQcmlvcml0eSA9IHByaW9yaXR5O1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBfY3VycmVudFByaW9yaXR5OiBudW1iZXI7IC8vIOePvuWcqOWGjeeUn+S4reOBruODouODvOOCt+ODp+ODs+OBruWEquWFiOW6plxuICAgIF9yZXNlcnZlUHJpb3JpdHk6IG51bWJlcjsgLy8g5YaN55Sf5LqI5a6a44Gu44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm44CC5YaN55Sf5Lit44GvMOOBq+OBquOCi+OAguODouODvOOCt+ODp+ODs+ODleOCoeOCpOODq+OCkuWIpeOCueODrOODg+ODieOBp+iqreOBv+i+vOOCgOOBqOOBjeOBruapn+iDveOAglxuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgYWN1YmlzbW1vdGlvbiB9IGZyb20gJy4vYWN1YmlzbW1vdGlvbic7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW90aW9ucXVldWVtYW5hZ2VyIH0gZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXInO1xuaW1wb3J0IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUgPSBjdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXIuQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZTtcbmltcG9ydCBBQ3ViaXNtTW90aW9uID0gYWN1YmlzbW1vdGlvbi5BQ3ViaXNtTW90aW9uO1xuXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIC8qKlxuICAgKiBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXLjgaflho3nlJ/jgZfjgabjgYTjgovlkITjg6Ljg7zjgrfjg6fjg7Pjga7nrqHnkIbjgq/jg6njgrnjgIJcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5IHtcbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICB0aGlzLl9hdXRvRGVsZXRlID0gZmFsc2U7XG4gICAgICB0aGlzLl9tb3Rpb24gPSBudWxsO1xuICAgICAgdGhpcy5fYXZhaWxhYmxlID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICB0aGlzLl9zdGFydGVkID0gZmFsc2U7XG4gICAgICB0aGlzLl9zdGFydFRpbWVTZWNvbmRzID0gLTEuMDtcbiAgICAgIHRoaXMuX2ZhZGVJblN0YXJ0VGltZVNlY29uZHMgPSAwLjA7XG4gICAgICB0aGlzLl9lbmRUaW1lU2Vjb25kcyA9IC0xLjA7XG4gICAgICB0aGlzLl9zdGF0ZVRpbWVTZWNvbmRzID0gMC4wO1xuICAgICAgdGhpcy5fc3RhdGVXZWlnaHQgPSAwLjA7XG4gICAgICB0aGlzLl9sYXN0RXZlbnRDaGVja1NlY29uZHMgPSAwLjA7XG4gICAgICB0aGlzLl9tb3Rpb25RdWV1ZUVudHJ5SGFuZGxlID0gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICAgIGlmICh0aGlzLl9hdXRvRGVsZXRlICYmIHRoaXMuX21vdGlvbikge1xuICAgICAgICBBQ3ViaXNtTW90aW9uLmRlbGV0ZSh0aGlzLl9tb3Rpb24pOyAvL1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODleOCp+ODvOODieOCouOCpuODiOOBrumWi+Wni1xuICAgICAqIEBwYXJhbSBmYWRlT3V0U2Vjb25kcyDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgICAqIEBwYXJhbSB1c2VyVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhcnRGYWRlb3V0KGZhZGVvdXRTZWNvbmRzOiBudW1iZXIsIHVzZXJUaW1lU2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgICBjb25zdCBuZXdFbmRUaW1lU2Vjb25kczogbnVtYmVyID0gdXNlclRpbWVTZWNvbmRzICsgZmFkZW91dFNlY29uZHM7XG5cbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5fZW5kVGltZVNlY29uZHMgPCAwLjAgfHxcbiAgICAgICAgbmV3RW5kVGltZVNlY29uZHMgPCB0aGlzLl9lbmRUaW1lU2Vjb25kc1xuICAgICAgKSB7XG4gICAgICAgIHRoaXMuX2VuZFRpbWVTZWNvbmRzID0gbmV3RW5kVGltZVNlY29uZHM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gu57WC5LqG44Gu56K66KqNXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHRydWUg44Oi44O844K344On44Oz44GM57WC5LqG44GX44GfXG4gICAgICogQHJldHVybiBmYWxzZSDntYLkuobjgZfjgabjgYTjgarjgYRcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNGaW5pc2hlZCgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLl9maW5pc2hlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vjga7norroqo1cbiAgICAgKiBAcmV0dXJuIHRydWUg44Oi44O844K344On44Oz44GM6ZaL5aeL44GX44GfXG4gICAgICogQHJldHVybiBmYWxzZSDplovlp4vjgZfjgabjgYTjgarjgYRcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNTdGFydGVkKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMuX3N0YXJ0ZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gu6ZaL5aeL5pmC5Yi744Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vmmYLliLtb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRTdGFydFRpbWUoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9zdGFydFRpbWVTZWNvbmRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODleOCp+ODvOODieOCpOODs+OBrumWi+Wni+aZguWIu+OBruWPluW+l1xuICAgICAqIEByZXR1cm4g44OV44Kn44O844OJ44Kk44Oz44Gu6ZaL5aeL5pmC5Yi7W+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RmFkZUluU3RhcnRUaW1lKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fZmFkZUluU3RhcnRUaW1lU2Vjb25kcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Xjgqfjg7zjg4njgqTjg7Pjga7ntYLkuobmmYLliLvjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCpOODs+OBrue1guS6huaZguWIu+OBruWPluW+l1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRFbmRUaW1lKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fZW5kVGltZVNlY29uZHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gu6ZaL5aeL5pmC5Yi744Gu6Kit5a6aXG4gICAgICogQHBhcmFtIHN0YXJ0VGltZSDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vmmYLliLtcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0U3RhcnRUaW1lKHN0YXJ0VGltZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0aGlzLl9zdGFydFRpbWVTZWNvbmRzID0gc3RhcnRUaW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODleOCp+ODvOODieOCpOODs+OBrumWi+Wni+aZguWIu+OBruioreWumlxuICAgICAqIEBwYXJhbSBzdGFydFRpbWUg44OV44Kn44O844OJ44Kk44Oz44Gu6ZaL5aeL5pmC5Yi7W+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0RmFkZUluU3RhcnRUaW1lKHN0YXJ0VGltZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0aGlzLl9mYWRlSW5TdGFydFRpbWVTZWNvbmRzID0gc3RhcnRUaW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODleOCp+ODvOODieOCpOODs+OBrue1guS6huaZguWIu+OBruioreWumlxuICAgICAqIEBwYXJhbSBlbmRUaW1lIOODleOCp+ODvOODieOCpOODs+OBrue1guS6huaZguWIu1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIHNldEVuZFRpbWUoZW5kVGltZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0aGlzLl9lbmRUaW1lU2Vjb25kcyA9IGVuZFRpbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gu57WC5LqG44Gu6Kit5a6aXG4gICAgICogQHBhcmFtIGYgdHJ1ZeOBquOCieODouODvOOCt+ODp+ODs+OBrue1guS6hlxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRJc0ZpbmlzaGVkKGY6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgIHRoaXMuX2ZpbmlzaGVkID0gZjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pplovlp4vjga7oqK3lrppcbiAgICAgKiBAcGFyYW0gZiB0cnVl44Gq44KJ44Oi44O844K344On44Oz44Gu6ZaL5aeLXG4gICAgICovXG4gICAgcHVibGljIHNldElzU3RhcnRlZChmOiBib29sZWFuKTogdm9pZCB7XG4gICAgICB0aGlzLl9zdGFydGVkID0gZjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7mnInlirnmgKfjga7norroqo1cbiAgICAgKiBAcmV0dXJuIHRydWUg44Oi44O844K344On44Oz44Gv5pyJ5Yq5XG4gICAgICogQHJldHVybiBmYWxzZSDjg6Ljg7zjgrfjg6fjg7Pjga/nhKHlirlcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNBdmFpbGFibGUoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdGhpcy5fYXZhaWxhYmxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OBruacieWKueaAp+OBruioreWumlxuICAgICAqIEBwYXJhbSB2IHRydWXjgarjgonjg6Ljg7zjgrfjg6fjg7Pjga/mnInlirlcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0SXNBdmFpbGFibGUodjogYm9vbGVhbik6IHZvaWQge1xuICAgICAgdGhpcy5fYXZhaWxhYmxlID0gdjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7nirbmhYvjga7oqK3lrppcbiAgICAgKiBAcGFyYW0gdGltZVNlY29uZHMg54++5Zyo5pmC5Yi7W+enkl1cbiAgICAgKiBAcGFyYW0gd2VpZ2h0IOODouODvOOCt+ODp+ODs+WwvumHjeOBv1xuICAgICAqL1xuICAgIHB1YmxpYyBzZXRTdGF0ZSh0aW1lU2Vjb25kczogbnVtYmVyLCB3ZWlnaHQ6IG51bWJlcik6IHZvaWQge1xuICAgICAgdGhpcy5fc3RhdGVUaW1lU2Vjb25kcyA9IHRpbWVTZWNvbmRzO1xuICAgICAgdGhpcy5fc3RhdGVXZWlnaHQgPSB3ZWlnaHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gu54++5Zyo5pmC5Yi744Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7nj77lnKjmmYLliLtb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRTdGF0ZVRpbWUoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9zdGF0ZVRpbWVTZWNvbmRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OBrumHjeOBv+OBruWPluW+l1xuICAgICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Gu6YeN44G/XG4gICAgICovXG4gICAgcHVibGljIGdldFN0YXRlV2VpZ2h0KCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fc3RhdGVXZWlnaHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5pyA5b6M44Gr44Kk44OZ44Oz44OI44Gu55m654Gr44KS44OB44Kn44OD44Kv44GX44Gf5pmC6ZaT44KS5Y+W5b6XXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIOacgOW+jOOBq+OCpOODmeODs+ODiOOBrueZuueBq+OCkuODgeOCp+ODg+OCr+OBl+OBn+aZgumWk1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIGdldExhc3RDaGVja0V2ZW50VGltZSgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2xhc3RFdmVudENoZWNrU2Vjb25kcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmnIDlvozjgavjgqTjg5njg7Pjg4jjgpLjg4Hjgqfjg4Pjgq/jgZfjgZ/mmYLplpPjgpLoqK3lrppcbiAgICAgKiBAcGFyYW0gY2hlY2tUaW1lIOacgOW+jOOBq+OCpOODmeODs+ODiOOCkuODgeOCp+ODg+OCr+OBl+OBn+aZgumWk1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIHNldExhc3RDaGVja0V2ZW50VGltZShjaGVja1RpbWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgdGhpcy5fbGFzdEV2ZW50Q2hlY2tTZWNvbmRzID0gY2hlY2tUaW1lO1xuICAgIH1cblxuICAgIF9hdXRvRGVsZXRlOiBib29sZWFuOyAvLyDoh6rli5XliYrpmaRcbiAgICBfbW90aW9uOiBBQ3ViaXNtTW90aW9uOyAvLyDjg6Ljg7zjgrfjg6fjg7NcblxuICAgIF9hdmFpbGFibGU6IGJvb2xlYW47IC8vIOacieWKueWMluODleODqeOCsFxuICAgIF9maW5pc2hlZDogYm9vbGVhbjsgLy8g57WC5LqG44OV44Op44KwXG4gICAgX3N0YXJ0ZWQ6IGJvb2xlYW47IC8vIOmWi+Wni+ODleODqeOCsFxuICAgIF9zdGFydFRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOODouODvOOCt+ODp+ODs+WGjeeUn+mWi+Wni+aZguWIu1vnp5JdXG4gICAgX2ZhZGVJblN0YXJ0VGltZVNlY29uZHM6IG51bWJlcjsgLy8g44OV44Kn44O844OJ44Kk44Oz6ZaL5aeL5pmC5Yi777yI44Or44O844OX44Gu5pmC44Gv5Yid5Zue44Gu44G/77yJW+enkl1cbiAgICBfZW5kVGltZVNlY29uZHM6IG51bWJlcjsgLy8g57WC5LqG5LqI5a6a5pmC5Yi7W+enkl1cbiAgICBfc3RhdGVUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDmmYLliLvjga7nirbmhYtb56eSXVxuICAgIF9zdGF0ZVdlaWdodDogbnVtYmVyOyAvLyDph43jgb/jga7nirbmhYtcbiAgICBfbGFzdEV2ZW50Q2hlY2tTZWNvbmRzOiBudW1iZXI7IC8vIOacgOe1guOBrk1vdGlvbuWBtOOBruODgeOCp+ODg+OCr+OBl+OBn+aZgumWk1xuXG4gICAgX21vdGlvblF1ZXVlRW50cnlIYW5kbGU6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGU7IC8vIOOCpOODs+OCueOCv+ODs+OCueOBlOOBqOOBq+S4gOaEj+OBruWApOOCkuaMgeOBpOitmOWIpeeVquWPt1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbWF0aCB9IGZyb20gJy4vY3ViaXNtbWF0aCc7XG5pbXBvcnQgQ3ViaXNtTWF0aCA9IGN1YmlzbW1hdGguQ3ViaXNtTWF0aDtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBjb25zdCBGcmFtZVJhdGUgPSAzMDtcbiAgY29uc3QgRXBzaWxvbiA9IDAuMDE7XG5cbiAgLyoqXG4gICAqIOmhlOOBruWQkeOBjeOBruWItuW+oeapn+iDvVxuICAgKlxuICAgKiDpoZTjga7lkJHjgY3jga7liLblvqHmqZ/og73jgpLmj5DkvpvjgZnjgovjgq/jg6njgrnjgIJcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21UYXJnZXRQb2ludCB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5fZmFjZVRhcmdldFggPSAwLjA7XG4gICAgICB0aGlzLl9mYWNlVGFyZ2V0WSA9IDAuMDtcbiAgICAgIHRoaXMuX2ZhY2VYID0gMC4wO1xuICAgICAgdGhpcy5fZmFjZVkgPSAwLjA7XG4gICAgICB0aGlzLl9mYWNlVlggPSAwLjA7XG4gICAgICB0aGlzLl9mYWNlVlkgPSAwLjA7XG4gICAgICB0aGlzLl9sYXN0VGltZVNlY29uZHMgPSAwLjA7XG4gICAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgPSAwLjA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5pu05paw5Yem55CGXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZShkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIC8vIOODh+ODq+OCv+aZgumWk+OCkuWKoOeul+OBmeOCi1xuICAgICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzICs9IGRlbHRhVGltZVNlY29uZHM7XG5cbiAgICAgIC8vIOmmluOCkuS4reWkruOBi+OCieW3puWPs+OBq+aMr+OCi+OBqOOBjeOBruW5s+Wdh+eahOOBqumAn+OBleOBryDnp5LpgJ/luqbjgILliqDpgJ/jg7vmuJvpgJ/jgpLogIPmha7jgZfjgabjgIHjgZ3jga7vvJLlgI3jgpLmnIDpq5jpgJ/luqbjgajjgZnjgotcbiAgICAgIC8vIOmhlOOBruaMr+OCiuWFt+WQiOOCkuOAgeS4reWkru+8iDAuMO+8ieOBi+OCieOAgeW3puWPs+OBr++8iCstMS4w77yJ44Go44GZ44KLXG4gICAgICBjb25zdCBmYWNlUGFyYW1NYXhWOiBudW1iZXIgPSA0MC4wIC8gMTAuMDsgLy8gNy4156eS6ZaT44GrNDDliIbnp7vli5UoNS4zL3NjKVxuICAgICAgY29uc3QgbWF4VjogbnVtYmVyID0gKGZhY2VQYXJhbU1heFYgKiAxLjApIC8gRnJhbWVSYXRlOyAvLyAxZnJhbWXjgYLjgZ/jgorjgavlpInljJbjgafjgY3jgovpgJ/luqbjga7kuIrpmZBcblxuICAgICAgaWYgKHRoaXMuX2xhc3RUaW1lU2Vjb25kcyA9PSAwLjApIHtcbiAgICAgICAgdGhpcy5fbGFzdFRpbWVTZWNvbmRzID0gdGhpcy5fdXNlclRpbWVTZWNvbmRzO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRlbHRhVGltZVdlaWdodDogbnVtYmVyID1cbiAgICAgICAgKHRoaXMuX3VzZXJUaW1lU2Vjb25kcyAtIHRoaXMuX2xhc3RUaW1lU2Vjb25kcykgKiBGcmFtZVJhdGU7XG4gICAgICB0aGlzLl9sYXN0VGltZVNlY29uZHMgPSB0aGlzLl91c2VyVGltZVNlY29uZHM7XG5cbiAgICAgIC8vIOacgOmrmOmAn+W6puOBq+OBquOCi+OBvuOBp+OBruaZgumWk+OCklxuICAgICAgY29uc3QgdGltZVRvTWF4U3BlZWQgPSAwLjE1O1xuICAgICAgY29uc3QgZnJhbWVUb01heFNwZWVkOiBudW1iZXIgPSB0aW1lVG9NYXhTcGVlZCAqIEZyYW1lUmF0ZTsgLy8gc2VjICogZnJhbWUvc2VjXG4gICAgICBjb25zdCBtYXhBOiBudW1iZXIgPSAoZGVsdGFUaW1lV2VpZ2h0ICogbWF4VikgLyBmcmFtZVRvTWF4U3BlZWQ7IC8vIDFmcmFtZeOBguOBn+OCiuOBruWKoOmAn+W6plxuXG4gICAgICAvLyDnm67mjIfjgZnlkJHjgY3jga/jgIHvvIhkeCwgZHnvvInmlrnlkJHjga7jg5njgq/jg4jjg6vjgajjgarjgotcbiAgICAgIGNvbnN0IGR4OiBudW1iZXIgPSB0aGlzLl9mYWNlVGFyZ2V0WCAtIHRoaXMuX2ZhY2VYO1xuICAgICAgY29uc3QgZHk6IG51bWJlciA9IHRoaXMuX2ZhY2VUYXJnZXRZIC0gdGhpcy5fZmFjZVk7XG5cbiAgICAgIGlmIChDdWJpc21NYXRoLmFicyhkeCkgPD0gRXBzaWxvbiAmJiBDdWJpc21NYXRoLmFicyhkeSkgPD0gRXBzaWxvbikge1xuICAgICAgICByZXR1cm47IC8vIOWkieWMluOBquOBl1xuICAgICAgfVxuXG4gICAgICAvLyDpgJ/luqbjga7mnIDlpKfjgojjgorjgoLlpKfjgY3jgYTloLTlkIjjga/jgIHpgJ/luqbjgpLokL3jgajjgZlcbiAgICAgIGNvbnN0IGQ6IG51bWJlciA9IEN1YmlzbU1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG5cbiAgICAgIC8vIOmAsuihjOaWueWQkeOBruacgOWkp+mAn+W6puODmeOCr+ODiOODq1xuICAgICAgY29uc3Qgdng6IG51bWJlciA9IChtYXhWICogZHgpIC8gZDtcbiAgICAgIGNvbnN0IHZ5OiBudW1iZXIgPSAobWF4ViAqIGR5KSAvIGQ7XG5cbiAgICAgIC8vIOePvuWcqOOBrumAn+W6puOBi+OCieOAgeaWsOimj+mAn+W6puOBuOOBruWkieWMlu+8iOWKoOmAn+W6pu+8ieOCkuaxguOCgeOCi1xuICAgICAgbGV0IGF4OiBudW1iZXIgPSB2eCAtIHRoaXMuX2ZhY2VWWDtcbiAgICAgIGxldCBheTogbnVtYmVyID0gdnkgLSB0aGlzLl9mYWNlVlk7XG5cbiAgICAgIGNvbnN0IGE6IG51bWJlciA9IEN1YmlzbU1hdGguc3FydChheCAqIGF4ICsgYXkgKiBheSk7XG5cbiAgICAgIC8vIOWKoOmAn+OBruOBqOOBjVxuICAgICAgaWYgKGEgPCAtbWF4QSB8fCBhID4gbWF4QSkge1xuICAgICAgICBheCAqPSBtYXhBIC8gYTtcbiAgICAgICAgYXkgKj0gbWF4QSAvIGE7XG4gICAgICB9XG5cbiAgICAgIC8vIOWKoOmAn+W6puOCkuWFg+OBrumAn+W6puOBq+i2s+OBl+OBpuOAgeaWsOmAn+W6puOBqOOBmeOCi1xuICAgICAgdGhpcy5fZmFjZVZYICs9IGF4O1xuICAgICAgdGhpcy5fZmFjZVZZICs9IGF5O1xuXG4gICAgICAvLyDnm67nmoTjga7mlrnlkJHjgavov5HjgaXjgYTjgZ/jgajjgY3jgIHmu5HjgonjgYvjgavmuJvpgJ/jgZnjgovjgZ/jgoHjga7lh6bnkIZcbiAgICAgIC8vIOioreWumuOBleOCjOOBn+WKoOmAn+W6puOBp+atouOBvuOCi+S6i+OBruWHuuadpeOCi+i3nembouOBqOmAn+W6puOBrumWouS/guOBi+OCiVxuICAgICAgLy8g54++5Zyo44Go44KK44GG44KL5pyA6auY6YCf5bqm44KS6KiI566X44GX44CB44Gd44KM5Lul5LiK44Gu5pmC44Gv6YCf5bqm44KS6JC944Go44GZXG4gICAgICAvLyDigLvmnKzmnaXjgIHkurrplpPjga/nrYvlipvjgaflipvvvIjliqDpgJ/luqbvvInjgpLoqr/mlbTjgafjgY3jgovjgZ/jgoHjgIHjgojjgoroh6rnlLHluqbjgYzpq5jjgYTjgYzjgIHnsKHljZjjgarlh6bnkIbjgafmuIjjgb7jgZvjgabjgYTjgotcbiAgICAgIHtcbiAgICAgICAgLy8g5Yqg6YCf5bqm44CB6YCf5bqm44CB6Led6Zui44Gu6Zai5L+C5byP44CCXG4gICAgICAgIC8vICAgICAgICAgICAgMiAgNiAgICAgICAgICAgMiAgICAgICAgICAgICAgIDNcbiAgICAgICAgLy8gICAgICBzcXJ0KGEgIHQgICsgMTYgYSBoIHQgIC0gOCBhIGgpIC0gYSB0XG4gICAgICAgIC8vIHYgPSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgMlxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgNCB0ICAtIDJcbiAgICAgICAgLy8gKHQ9MSlcbiAgICAgICAgLy8gXHTmmYLliLt044Gv44CB44GC44KJ44GL44GY44KB5Yqg6YCf5bqm44CB6YCf5bqm44KSMS82MCjjg5Xjg6zjg7zjg6Djg6zjg7zjg4jjgIHljZjkvY3jgarjgZcp44GnXG4gICAgICAgIC8vIFx06ICD44GI44Gm44GE44KL44Gu44Gn44CBdO+8ne+8keOBqOOBl+OBpua2iOOBl+OBpuOCiOOBhO+8iOKAu+acquaknOiovO+8iVxuXG4gICAgICAgIGNvbnN0IG1heFY6IG51bWJlciA9XG4gICAgICAgICAgMC41ICpcbiAgICAgICAgICAoQ3ViaXNtTWF0aC5zcXJ0KG1heEEgKiBtYXhBICsgMTYuMCAqIG1heEEgKiBkIC0gOC4wICogbWF4QSAqIGQpIC1cbiAgICAgICAgICAgIG1heEEpO1xuICAgICAgICBjb25zdCBjdXJWOiBudW1iZXIgPSBDdWJpc21NYXRoLnNxcnQoXG4gICAgICAgICAgdGhpcy5fZmFjZVZYICogdGhpcy5fZmFjZVZYICsgdGhpcy5fZmFjZVZZICogdGhpcy5fZmFjZVZZXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKGN1clYgPiBtYXhWKSB7XG4gICAgICAgICAgLy8g54++5Zyo44Gu6YCf5bqmID4g5pyA6auY6YCf5bqm44Gu44Go44GN44CB5pyA6auY6YCf5bqm44G+44Gn5rib6YCfXG4gICAgICAgICAgdGhpcy5fZmFjZVZYICo9IG1heFYgLyBjdXJWO1xuICAgICAgICAgIHRoaXMuX2ZhY2VWWSAqPSBtYXhWIC8gY3VyVjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9mYWNlWCArPSB0aGlzLl9mYWNlVlg7XG4gICAgICB0aGlzLl9mYWNlWSArPSB0aGlzLl9mYWNlVlk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogWOi7uOOBrumhlOOBruWQkeOBjeOBruWApOOCkuWPluW+l1xuICAgICAqXG4gICAgICogQHJldHVybiBY6Lu444Gu6aGU44Gu5ZCR44GN44Gu5YCk77yILTEuMCB+IDEuMO+8iVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRYKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fZmFjZVg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogWei7uOOBrumhlOOBruWQkeOBjeOBruWApOOCkuWPluW+l1xuICAgICAqXG4gICAgICogQHJldHVybiBZ6Lu444Gu6aGU44Gu5ZCR44GN44Gu5YCk77yILTEuMCB+IDEuMO+8iVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRZKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fZmFjZVk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6aGU44Gu5ZCR44GN44Gu55uu5qiZ5YCk44KS6Kit5a6aXG4gICAgICpcbiAgICAgKiBAcGFyYW0geCBY6Lu444Gu6aGU44Gu5ZCR44GN44Gu5YCk77yILTEuMCB+IDEuMO+8iVxuICAgICAqIEBwYXJhbSB5IFnou7jjga7poZTjga7lkJHjgY3jga7lgKTvvIgtMS4wIH4gMS4w77yJXG4gICAgICovXG4gICAgcHVibGljIHNldCh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgICAgdGhpcy5fZmFjZVRhcmdldFggPSB4O1xuICAgICAgdGhpcy5fZmFjZVRhcmdldFkgPSB5O1xuICAgIH1cblxuICAgIHByaXZhdGUgX2ZhY2VUYXJnZXRYOiBudW1iZXI7IC8vIOmhlOOBruWQkeOBjeOBrljnm67mqJnlgKTvvIjjgZPjga7lgKTjgavov5HjgaXjgYTjgabjgYTjgY/vvIlcbiAgICBwcml2YXRlIF9mYWNlVGFyZ2V0WTogbnVtYmVyOyAvLyDpoZTjga7lkJHjgY3jga5Z55uu5qiZ5YCk77yI44GT44Gu5YCk44Gr6L+R44Gl44GE44Gm44GE44GP77yJXG4gICAgcHJpdmF0ZSBfZmFjZVg6IG51bWJlcjsgLy8g6aGU44Gu5ZCR44GNWO+8iC0xLjAgfiAxLjDvvIlcbiAgICBwcml2YXRlIF9mYWNlWTogbnVtYmVyOyAvLyDpoZTjga7lkJHjgY1Z77yILTEuMCB+IDEuMO+8iVxuICAgIHByaXZhdGUgX2ZhY2VWWDogbnVtYmVyOyAvLyDpoZTjga7lkJHjgY3jga7lpInljJbpgJ/luqZYXG4gICAgcHJpdmF0ZSBfZmFjZVZZOiBudW1iZXI7IC8vIOmhlOOBruWQkeOBjeOBruWkieWMlumAn+W6pllcbiAgICBwcml2YXRlIF9sYXN0VGltZVNlY29uZHM6IG51bWJlcjsgLy8g5pyA5b6M44Gu5a6f6KGM5pmC6ZaTW+enkl1cbiAgICBwcml2YXRlIF91c2VyVGltZVNlY29uZHM6IG51bWJlcjsgLy8g44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbW1hcCB9IGZyb20gJy4uL3R5cGUvY3NtbWFwJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tYXRyaXg0NCB9IGZyb20gJy4vY3ViaXNtbWF0cml4NDQnO1xuaW1wb3J0IGNzbU1hcCA9IGNzbW1hcC5jc21NYXA7XG5pbXBvcnQgaXRlcmF0b3IgPSBjc21tYXAuaXRlcmF0b3I7XG5pbXBvcnQgQ3ViaXNtTWF0cml4NDQgPSBjdWJpc21tYXRyaXg0NC5DdWJpc21NYXRyaXg0NDtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICog44Oi44OH44Or5bqn5qiZ6Kit5a6a55So44GuNHg06KGM5YiXXG4gICAqXG4gICAqIOODouODh+ODq+W6p+aomeioreWumueUqOOBrjR4NOihjOWIl+OCr+ODqeOCuVxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsTWF0cml4IGV4dGVuZHMgQ3ViaXNtTWF0cml4NDQge1xuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqXG4gICAgICogQHBhcmFtIHcg5qiq5bmFXG4gICAgICogQHBhcmFtIGgg57im5bmFXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iodz86IG51bWJlciwgaD86IG51bWJlcikge1xuICAgICAgc3VwZXIoKTtcblxuICAgICAgdGhpcy5fd2lkdGggPSB3ICE9PSB1bmRlZmluZWQgPyB3IDogMC4wO1xuICAgICAgdGhpcy5faGVpZ2h0ID0gaCAhPT0gdW5kZWZpbmVkID8gaCA6IDAuMDtcblxuICAgICAgdGhpcy5zZXRIZWlnaHQoMS4wKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmqKrluYXjgpLoqK3lrppcbiAgICAgKlxuICAgICAqIEBwYXJhbSB3IOaoquW5hVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRXaWR0aCh3OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIGNvbnN0IHNjYWxlWDogbnVtYmVyID0gdyAvIHRoaXMuX3dpZHRoO1xuICAgICAgY29uc3Qgc2NhbGVZOiBudW1iZXIgPSBzY2FsZVg7XG4gICAgICB0aGlzLnNjYWxlKHNjYWxlWCoyLjYsIHNjYWxlWSoyLjYpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOe4puW5heOCkuioreWumlxuICAgICAqIEBwYXJhbSBoIOe4puW5hVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRIZWlnaHQoaDogbnVtYmVyKTogdm9pZCB7XG4gICAgICBjb25zdCBzY2FsZVg6IG51bWJlciA9IGggLyB0aGlzLl9oZWlnaHQ7XG4gICAgICBjb25zdCBzY2FsZVk6IG51bWJlciA9IHNjYWxlWDtcbiAgICAgIHRoaXMuc2NhbGUoc2NhbGVYKjIuNiwgc2NhbGVZKjIuNik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5L2N572u44KS6Kit5a6aXG4gICAgICpcbiAgICAgKiBAcGFyYW0geCBY6Lu444Gu5L2N572uXG4gICAgICogQHBhcmFtIHkgWei7uOOBruS9jee9rlxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRQb3NpdGlvbih4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgICAgdGhpcy50cmFuc2xhdGUoeCwgeSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5Lit5b+D5L2N572u44KS6Kit5a6aXG4gICAgICpcbiAgICAgKiBAcGFyYW0geCBY6Lu444Gu5Lit5b+D5L2N572uXG4gICAgICogQHBhcmFtIHkgWei7uOOBruS4reW/g+S9jee9rlxuICAgICAqXG4gICAgICogQG5vdGUgd2lkdGjjgYtoZWlnaHTjgpLoqK3lrprjgZfjgZ/jgYLjgajjgafjgarjgYTjgajjgIHmi6HlpKfnjofjgYzmraPjgZfjgY/lj5blvpfjgafjgY3jgarjgYTjgZ/jgoHjgZrjgozjgovjgIJcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0Q2VudGVyUG9zaXRpb24oeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgIHRoaXMuY2VudGVyWCh4KTtcbiAgICAgIHRoaXMuY2VudGVyWSh5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDkuIrovrrjga7kvY3nva7jgpLoqK3lrprjgZnjgotcbiAgICAgKlxuICAgICAqIEBwYXJhbSB5IOS4iui+uuOBrlnou7jkvY3nva5cbiAgICAgKi9cbiAgICBwdWJsaWMgdG9wKHk6IG51bWJlcik6IHZvaWQge1xuICAgICAgdGhpcy5zZXRZKHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOS4i+i+uuOBruS9jee9ruOCkuioreWumuOBmeOCi1xuICAgICAqXG4gICAgICogQHBhcmFtIHkg5LiL6L6644GuWei7uOS9jee9rlxuICAgICAqL1xuICAgIHB1YmxpYyBib3R0b20oeTogbnVtYmVyKSB7XG4gICAgICBjb25zdCBoOiBudW1iZXIgPSB0aGlzLl9oZWlnaHQgKiB0aGlzLmdldFNjYWxlWSgpO1xuXG4gICAgICB0aGlzLnRyYW5zbGF0ZVkoeSAtIGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOW3pui+uuOBruS9jee9ruOCkuioreWumlxuICAgICAqXG4gICAgICogQHBhcmFtIHgg5bem6L6644GuWOi7uOS9jee9rlxuICAgICAqL1xuICAgIHB1YmxpYyBsZWZ0KHg6IG51bWJlcik6IHZvaWQge1xuICAgICAgdGhpcy5zZXRYKHgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWPs+i+uuOBruS9jee9ruOCkuioreWumlxuICAgICAqXG4gICAgICogQHBhcmFtIHgg5Y+z6L6644GuWOi7uOS9jee9rlxuICAgICAqL1xuICAgIHB1YmxpYyByaWdodCh4OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIGNvbnN0IHcgPSB0aGlzLl93aWR0aCAqIHRoaXMuZ2V0U2NhbGVYKCk7XG5cbiAgICAgIHRoaXMudHJhbnNsYXRlWCh4IC0gdyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogWOi7uOOBruS4reW/g+S9jee9ruOCkuioreWumlxuICAgICAqXG4gICAgICogQHBhcmFtIHggWOi7uOOBruS4reW/g+S9jee9rlxuICAgICAqL1xuICAgIHB1YmxpYyBjZW50ZXJYKHg6IG51bWJlcik6IHZvaWQge1xuICAgICAgY29uc3QgdyA9IHRoaXMuX3dpZHRoICogdGhpcy5nZXRTY2FsZVgoKTtcblxuICAgICAgdGhpcy50cmFuc2xhdGVYKHggLSB3IC8gMi4wKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBY6Lu444Gu5L2N572u44KS6Kit5a6aXG4gICAgICpcbiAgICAgKiBAcGFyYW0geCBY6Lu444Gu5L2N572uXG4gICAgICovXG4gICAgcHVibGljIHNldFgoeDogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0aGlzLnRyYW5zbGF0ZVgoeCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogWei7uOOBruS4reW/g+S9jee9ruOCkuioreWumlxuICAgICAqXG4gICAgICogQHBhcmFtIHkgWei7uOOBruS4reW/g+S9jee9rlxuICAgICAqL1xuICAgIHB1YmxpYyBjZW50ZXJZKHk6IG51bWJlcik6IHZvaWQge1xuICAgICAgY29uc3QgaDogbnVtYmVyID0gdGhpcy5faGVpZ2h0ICogdGhpcy5nZXRTY2FsZVkoKTtcblxuICAgICAgdGhpcy50cmFuc2xhdGVZKHkgLSBoIC8gMi4wKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBZ6Lu444Gu5L2N572u44KS6Kit5a6a44GZ44KLXG4gICAgICpcbiAgICAgKiBAcGFyYW0geSBZ6Lu444Gu5L2N572uXG4gICAgICovXG4gICAgcHVibGljIHNldFkoeTogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0aGlzLnRyYW5zbGF0ZVkoeSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Os44Kk44Ki44Km44OI5oOF5aCx44GL44KJ5L2N572u44KS6Kit5a6aXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGF5b3V0IOODrOOCpOOCouOCpuODiOaDheWgsVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXR1cEZyb21MYXlvdXQobGF5b3V0OiBjc21NYXA8c3RyaW5nLCBudW1iZXI+KTogdm9pZCB7XG4gICAgICBjb25zdCBrZXlXaWR0aCA9ICd3aWR0aCc7XG4gICAgICBjb25zdCBrZXlIZWlnaHQgPSAnaGVpZ2h0JztcbiAgICAgIGNvbnN0IGtleVggPSAneCc7XG4gICAgICBjb25zdCBrZXlZID0gJ3knO1xuICAgICAgY29uc3Qga2V5Q2VudGVyWCA9ICdjZW50ZXJfeCc7XG4gICAgICBjb25zdCBrZXlDZW50ZXJZID0gJ2NlbnRlcl95JztcbiAgICAgIGNvbnN0IGtleVRvcCA9ICd0b3AnO1xuICAgICAgY29uc3Qga2V5Qm90dG9tID0gJ2JvdHRvbSc7XG4gICAgICBjb25zdCBrZXlMZWZ0ID0gJ2xlZnQnO1xuICAgICAgY29uc3Qga2V5UmlnaHQgPSAncmlnaHQnO1xuXG4gICAgICBmb3IgKFxuICAgICAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPHN0cmluZywgbnVtYmVyPiA9IGxheW91dC5iZWdpbigpO1xuICAgICAgICBpdGUubm90RXF1YWwobGF5b3V0LmVuZCgpKTtcbiAgICAgICAgaXRlLnByZUluY3JlbWVudCgpXG4gICAgICApIHtcbiAgICAgICAgY29uc3Qga2V5OiBzdHJpbmcgPSBpdGUucHRyKCkuZmlyc3Q7XG4gICAgICAgIGNvbnN0IHZhbHVlOiBudW1iZXIgPSBpdGUucHRyKCkuc2Vjb25kO1xuXG4gICAgICAgIGlmIChrZXkgPT0ga2V5V2lkdGgpIHtcbiAgICAgICAgICB0aGlzLnNldFdpZHRoKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT0ga2V5SGVpZ2h0KSB7XG4gICAgICAgICAgdGhpcy5zZXRIZWlnaHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAoXG4gICAgICAgIGNvbnN0IGl0ZTogaXRlcmF0b3I8c3RyaW5nLCBudW1iZXI+ID0gbGF5b3V0LmJlZ2luKCk7XG4gICAgICAgIGl0ZS5ub3RFcXVhbChsYXlvdXQuZW5kKCkpO1xuICAgICAgICBpdGUucHJlSW5jcmVtZW50KClcbiAgICAgICkge1xuICAgICAgICBjb25zdCBrZXk6IHN0cmluZyA9IGl0ZS5wdHIoKS5maXJzdDtcbiAgICAgICAgY29uc3QgdmFsdWU6IG51bWJlciA9IGl0ZS5wdHIoKS5zZWNvbmQ7XG5cbiAgICAgICAgaWYgKGtleSA9PSBrZXlYKSB7XG4gICAgICAgICAgdGhpcy5zZXRYKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT0ga2V5WSkge1xuICAgICAgICAgIHRoaXMuc2V0WSh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09IGtleUNlbnRlclgpIHtcbiAgICAgICAgICB0aGlzLmNlbnRlclgodmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PSBrZXlDZW50ZXJZKSB7XG4gICAgICAgICAgdGhpcy5jZW50ZXJZKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT0ga2V5VG9wKSB7XG4gICAgICAgICAgdGhpcy50b3AodmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PSBrZXlCb3R0b20pIHtcbiAgICAgICAgICB0aGlzLmJvdHRvbSh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09IGtleUxlZnQpIHtcbiAgICAgICAgICB0aGlzLmxlZnQodmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PSBrZXlSaWdodCkge1xuICAgICAgICAgIHRoaXMucmlnaHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfd2lkdGg6IG51bWJlcjsgLy8g5qiq5bmFXG4gICAgcHJpdmF0ZSBfaGVpZ2h0OiBudW1iZXI7IC8vIOe4puW5hVxuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWwgfSBmcm9tICcuL2N1YmlzbW1vZGVsJztcbmltcG9ydCBDdWJpc21Nb2RlbCA9IGN1YmlzbW1vZGVsLkN1YmlzbU1vZGVsO1xuaW1wb3J0IHsgQ1NNX0FTU0VSVCB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWRlYnVnJztcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICogTW9j44OH44O844K/44Gu566h55CGXG4gICAqXG4gICAqIE1vY+ODh+ODvOOCv+OBrueuoeeQhuOCkuihjOOBhuOCr+ODqeOCueOAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vYyB7XG4gICAgLyoqXG4gICAgICogTW9j44OH44O844K/44Gu5L2c5oiQXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGUobW9jQnl0ZXM6IEFycmF5QnVmZmVyKTogQ3ViaXNtTW9jIHtcbiAgICAgIGxldCBjdWJpc21Nb2M6IEN1YmlzbU1vYyA9IG51bGw7XG4gICAgICBjb25zdCBtb2M6IExpdmUyREN1YmlzbUNvcmUuTW9jID0gTGl2ZTJEQ3ViaXNtQ29yZS5Nb2MuZnJvbUFycmF5QnVmZmVyKFxuICAgICAgICBtb2NCeXRlc1xuICAgICAgKTtcblxuICAgICAgaWYgKG1vYykge1xuICAgICAgICBjdWJpc21Nb2MgPSBuZXcgQ3ViaXNtTW9jKG1vYyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjdWJpc21Nb2M7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTW9j44OH44O844K/44KS5YmK6ZmkXG4gICAgICpcbiAgICAgKiBNb2Pjg4fjg7zjgr/jgpLliYrpmaTjgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGRlbGV0ZShtb2M6IEN1YmlzbU1vYyk6IHZvaWQge1xuICAgICAgbW9jLl9tb2MuX3JlbGVhc2UoKTtcbiAgICAgIG1vYy5fbW9jID0gbnVsbDtcbiAgICAgIG1vYyA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44OH44Or44KS5L2c5oiQ44GZ44KLXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIE1vY+ODh+ODvOOCv+OBi+OCieS9nOaIkOOBleOCjOOBn+ODouODh+ODq1xuICAgICAqL1xuICAgIGNyZWF0ZU1vZGVsKCk6IEN1YmlzbU1vZGVsIHtcbiAgICAgIGxldCBjdWJpc21Nb2RlbDogQ3ViaXNtTW9kZWwgPSBudWxsO1xuXG4gICAgICBjb25zdCBtb2RlbDogTGl2ZTJEQ3ViaXNtQ29yZS5Nb2RlbCA9IExpdmUyREN1YmlzbUNvcmUuTW9kZWwuZnJvbU1vYyhcbiAgICAgICAgdGhpcy5fbW9jXG4gICAgICApO1xuXG4gICAgICBpZiAobW9kZWwpIHtcbiAgICAgICAgY3ViaXNtTW9kZWwgPSBuZXcgQ3ViaXNtTW9kZWwobW9kZWwpO1xuICAgICAgICBjdWJpc21Nb2RlbC5pbml0aWFsaXplKCk7XG5cbiAgICAgICAgKyt0aGlzLl9tb2RlbENvdW50O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY3ViaXNtTW9kZWw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44OH44Or44KS5YmK6Zmk44GZ44KLXG4gICAgICovXG4gICAgZGVsZXRlTW9kZWwobW9kZWw6IEN1YmlzbU1vZGVsKTogdm9pZCB7XG4gICAgICBpZiAobW9kZWwgIT0gbnVsbCkge1xuICAgICAgICBtb2RlbC5yZWxlYXNlKCk7XG4gICAgICAgIG1vZGVsID0gbnVsbDtcbiAgICAgICAgLS10aGlzLl9tb2RlbENvdW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHByaXZhdGUgY29uc3RydWN0b3IobW9jOiBMaXZlMkRDdWJpc21Db3JlLk1vYykge1xuICAgICAgdGhpcy5fbW9jID0gbW9jO1xuICAgICAgdGhpcy5fbW9kZWxDb3VudCA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAgICovXG4gICAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgICBDU01fQVNTRVJUKHRoaXMuX21vZGVsQ291bnQgPT0gMCk7XG5cbiAgICAgIHRoaXMuX21vYy5fcmVsZWFzZSgpO1xuICAgICAgdGhpcy5fbW9jID0gbnVsbDtcbiAgICB9XG5cbiAgICBfbW9jOiBMaXZlMkRDdWJpc21Db3JlLk1vYzsgLy8gTW9j44OH44O844K/XG4gICAgX21vZGVsQ291bnQ6IG51bWJlcjsgLy8gTW9j44OH44O844K/44GL44KJ5L2c44KJ44KM44Gf44Oi44OH44Or44Gu5YCL5pWwXG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21yZW5kZXJlciB9IGZyb20gJy4uL3JlbmRlcmluZy9jdWJpc21yZW5kZXJlcic7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtaWQgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtZnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc21tYXAgfSBmcm9tICcuLi90eXBlL2NzbW1hcCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtdmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IHsgQ1NNX0FTU0VSVCB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWRlYnVnJztcbmltcG9ydCBDdWJpc21GcmFtZXdvcmsgPSBjdWJpc21mcmFtZXdvcmsuQ3ViaXNtRnJhbWV3b3JrO1xuaW1wb3J0IEN1YmlzbUJsZW5kTW9kZSA9IGN1YmlzbXJlbmRlcmVyLkN1YmlzbUJsZW5kTW9kZTtcbmltcG9ydCBjc21WZWN0b3IgPSBjc212ZWN0b3IuY3NtVmVjdG9yO1xuaW1wb3J0IGNzbU1hcCA9IGNzbW1hcC5jc21NYXA7XG5pbXBvcnQgQ3ViaXNtSWRIYW5kbGUgPSBjdWJpc21pZC5DdWJpc21JZEhhbmRsZTtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICog44Oi44OH44OrXG4gICAqXG4gICAqIE1vY+ODh+ODvOOCv+OBi+OCieeUn+aIkOOBleOCjOOCi+ODouODh+ODq+OBruOCr+ODqeOCueOAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsIHtcbiAgICAvKipcbiAgICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr/jga7mm7TmlrBcbiAgICAgKi9cbiAgICBwdWJsaWMgdXBkYXRlKCk6IHZvaWQge1xuICAgICAgLy8gVXBkYXRlIG1vZGVsXG4gICAgICB0aGlzLl9tb2RlbC51cGRhdGUoKTtcblxuICAgICAgdGhpcy5fbW9kZWwuZHJhd2FibGVzLnJlc2V0RHluYW1pY0ZsYWdzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kt44Oj44Oz44OQ44K544Gu5bmF44KS5Y+W5b6X44GZ44KLXG4gICAgICovXG4gICAgcHVibGljIGdldENhbnZhc1dpZHRoKCk6IG51bWJlciB7XG4gICAgICBpZiAodGhpcy5fbW9kZWwgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gMC4wO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLl9tb2RlbC5jYW52YXNpbmZvLkNhbnZhc1dpZHRoIC9cbiAgICAgICAgdGhpcy5fbW9kZWwuY2FudmFzaW5mby5QaXhlbHNQZXJVbml0XG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCreODo+ODs+ODkOOCueOBrumrmOOBleOCkuWPluW+l+OBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRDYW52YXNIZWlnaHQoKTogbnVtYmVyIHtcbiAgICAgIGlmICh0aGlzLl9tb2RlbCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAwLjA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMuX21vZGVsLmNhbnZhc2luZm8uQ2FudmFzSGVpZ2h0IC9cbiAgICAgICAgdGhpcy5fbW9kZWwuY2FudmFzaW5mby5QaXhlbHNQZXJVbml0XG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODkeODqeODoeODvOOCv+OCkuS/neWtmOOBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBzYXZlUGFyYW1ldGVycygpOiB2b2lkIHtcbiAgICAgIGNvbnN0IHBhcmFtZXRlckNvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLmNvdW50O1xuICAgICAgY29uc3Qgc2F2ZWRQYXJhbWV0ZXJDb3VudDogbnVtYmVyID0gdGhpcy5fc2F2ZWRQYXJhbWV0ZXJzLmdldFNpemUoKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbWV0ZXJDb3VudDsgKytpKSB7XG4gICAgICAgIGlmIChpIDwgc2F2ZWRQYXJhbWV0ZXJDb3VudCkge1xuICAgICAgICAgIHRoaXMuX3NhdmVkUGFyYW1ldGVycy5zZXQoaSwgdGhpcy5fcGFyYW1ldGVyVmFsdWVzW2ldKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9zYXZlZFBhcmFtZXRlcnMucHVzaEJhY2sodGhpcy5fcGFyYW1ldGVyVmFsdWVzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODh+ODq+OCkuWPluW+l1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNb2RlbCgpOiBMaXZlMkRDdWJpc21Db3JlLk1vZGVsIHtcbiAgICAgIHJldHVybiB0aGlzLl9tb2RlbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Hjg7zjg4Tjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjgpLlj5blvpdcbiAgICAgKiBAcGFyYW0gcGFydElkIOODkeODvOODhOOBrklEXG4gICAgICogQHJldHVybiDjg5Hjg7zjg4Tjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UGFydEluZGV4KHBhcnRJZDogQ3ViaXNtSWRIYW5kbGUpOiBudW1iZXIge1xuICAgICAgbGV0IHBhcnRJbmRleDogbnVtYmVyO1xuICAgICAgY29uc3QgcGFydENvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbC5wYXJ0cy5jb3VudDtcblxuICAgICAgZm9yIChwYXJ0SW5kZXggPSAwOyBwYXJ0SW5kZXggPCBwYXJ0Q291bnQ7ICsrcGFydEluZGV4KSB7XG4gICAgICAgIGlmIChwYXJ0SWQgPT0gdGhpcy5fcGFydElkcy5hdChwYXJ0SW5kZXgpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnRJbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyDjg6Ljg4fjg6vjgavlrZjlnKjjgZfjgabjgYTjgarjgYTloLTlkIjjgIHpnZ7lrZjlnKjjg5Hjg7zjg4RJROODquOCueODiOWGheOBq+OBguOCi+OBi+OCkuaknOe0ouOBl+OAgeOBneOBruOCpOODs+ODh+ODg+OCr+OCueOCkui/lOOBmVxuICAgICAgaWYgKHRoaXMuX25vdEV4aXN0UGFydElkLmlzRXhpc3QocGFydElkKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbm90RXhpc3RQYXJ0SWQuZ2V0VmFsdWUocGFydElkKTtcbiAgICAgIH1cblxuICAgICAgLy8g6Z2e5a2Y5Zyo44OR44O844OESUTjg6rjgrnjg4jjgavjgarjgYTloLTlkIjjgIHmlrDjgZfjgY/opoHntKDjgpLov73liqDjgZnjgotcbiAgICAgIHBhcnRJbmRleCA9IHBhcnRDb3VudCArIHRoaXMuX25vdEV4aXN0UGFydElkLmdldFNpemUoKTtcbiAgICAgIHRoaXMuX25vdEV4aXN0UGFydElkLnNldFZhbHVlKHBhcnRJZCwgcGFydEluZGV4KTtcbiAgICAgIHRoaXMuX25vdEV4aXN0UGFydE9wYWNpdGllcy5hcHBlbmRLZXkocGFydEluZGV4KTtcblxuICAgICAgcmV0dXJuIHBhcnRJbmRleDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Hjg7zjg4Tjga7lgIvmlbDjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOODkeODvOODhOOBruWAi+aVsFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRQYXJ0Q291bnQoKTogbnVtYmVyIHtcbiAgICAgIGNvbnN0IHBhcnRDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwucGFydHMuY291bnQ7XG4gICAgICByZXR1cm4gcGFydENvdW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODkeODvOODhOOBruS4jemAj+aYjuW6puOBruioreWumihJbmRleClcbiAgICAgKiBAcGFyYW0gcGFydEluZGV4IOODkeODvOODhOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEBwYXJhbSBvcGFjaXR5IOS4jemAj+aYjuW6plxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRQYXJ0T3BhY2l0eUJ5SW5kZXgocGFydEluZGV4OiBudW1iZXIsIG9wYWNpdHk6IG51bWJlcik6IHZvaWQge1xuICAgICAgaWYgKHRoaXMuX25vdEV4aXN0UGFydE9wYWNpdGllcy5pc0V4aXN0KHBhcnRJbmRleCkpIHtcbiAgICAgICAgdGhpcy5fbm90RXhpc3RQYXJ0T3BhY2l0aWVzLnNldFZhbHVlKHBhcnRJbmRleCwgb3BhY2l0eSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8g44Kk44Oz44OH44OD44Kv44K544Gu56+E5Zuy5YaF5qSc55+lXG4gICAgICBDU01fQVNTRVJUKDAgPD0gcGFydEluZGV4ICYmIHBhcnRJbmRleCA8IHRoaXMuZ2V0UGFydENvdW50KCkpO1xuXG4gICAgICB0aGlzLl9wYXJ0T3BhY2l0aWVzW3BhcnRJbmRleF0gPSBvcGFjaXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODkeODvOODhOOBruS4jemAj+aYjuW6puOBruioreWumihJZClcbiAgICAgKiBAcGFyYW0gcGFydElkIOODkeODvOODhOOBrklEXG4gICAgICogQHBhcmFtIG9wYWNpdHkg44OR44O844OE44Gu5LiN6YCP5piO5bqmXG4gICAgICovXG4gICAgcHVibGljIHNldFBhcnRPcGFjaXR5QnlJZChwYXJ0SWQ6IEN1YmlzbUlkSGFuZGxlLCBvcGFjaXR5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIC8vIOmrmOmAn+WMluOBruOBn+OCgeOBq1BhcnRJbmRleOOCkuWPluW+l+OBp+OBjeOCi+apn+ani+OBq+OBquOBo+OBpuOBhOOCi+OBjOOAgeWklumDqOOBi+OCieOBruioreWumuOBruaZguOBr+WRvOOBs+WHuuOBl+mgu+W6puOBjOS9juOBhOOBn+OCgeS4jeimgVxuICAgICAgY29uc3QgaW5kZXg6IG51bWJlciA9IHRoaXMuZ2V0UGFydEluZGV4KHBhcnRJZCk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuOyAvLyDjg5Hjg7zjg4TjgYzjgarjgYTjga7jgafjgrnjgq3jg4Pjg5dcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRQYXJ0T3BhY2l0eUJ5SW5kZXgoaW5kZXgsIG9wYWNpdHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODkeODvOODhOOBruS4jemAj+aYjuW6puOBruWPluW+lyhpbmRleClcbiAgICAgKiBAcGFyYW0gcGFydEluZGV4IOODkeODvOODhOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g44OR44O844OE44Gu5LiN6YCP5piO5bqmXG4gICAgICovXG4gICAgcHVibGljIGdldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0SW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICBpZiAodGhpcy5fbm90RXhpc3RQYXJ0T3BhY2l0aWVzLmlzRXhpc3QocGFydEluZGV4KSkge1xuICAgICAgICAvLyDjg6Ljg4fjg6vjgavlrZjlnKjjgZfjgarjgYTjg5Hjg7zjg4RJROOBruWgtOWQiOOAgemdnuWtmOWcqOODkeODvOODhOODquOCueODiOOBi+OCieS4jemAj+aYjuW6puOCkui/lOOBmeOAglxuICAgICAgICByZXR1cm4gdGhpcy5fbm90RXhpc3RQYXJ0T3BhY2l0aWVzLmdldFZhbHVlKHBhcnRJbmRleCk7XG4gICAgICB9XG5cbiAgICAgIC8vIOOCpOODs+ODh+ODg+OCr+OCueOBruevhOWbsuWGheaknOefpVxuICAgICAgQ1NNX0FTU0VSVCgwIDw9IHBhcnRJbmRleCAmJiBwYXJ0SW5kZXggPCB0aGlzLmdldFBhcnRDb3VudCgpKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX3BhcnRPcGFjaXRpZXNbcGFydEluZGV4XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7lj5blvpcoaWQpXG4gICAgICogQHBhcmFtIHBhcnRJZCDjg5Hjg7zjg4Tjga7vvKnvvYRcbiAgICAgKiBAcmV0dXJuIOODkeODvOODhOOBruS4jemAj+aYjuW6plxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRQYXJ0T3BhY2l0eUJ5SWQocGFydElkOiBDdWJpc21JZEhhbmRsZSk6IG51bWJlciB7XG4gICAgICAvLyDpq5jpgJ/ljJbjga7jgZ/jgoHjgatQYXJ0SW5kZXjjgpLlj5blvpfjgafjgY3jgovmqZ/mp4vjgavjgarjgaPjgabjgYTjgovjgYzjgIHlpJbpg6jjgYvjgonjga7oqK3lrprjga7mmYLjga/lkbzjgbPlh7rjgZfpoLvluqbjgYzkvY7jgYTjgZ/jgoHkuI3opoFcbiAgICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSB0aGlzLmdldFBhcnRJbmRleChwYXJ0SWQpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiAwOyAvLyDjg5Hjg7zjg4TjgYznhKHjgYTjga7jgafjgrnjgq3jg4Pjg5dcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFydE9wYWNpdHlCeUluZGV4KGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrnjga7lj5blvpdcbiAgICAgKiBAcGFyYW0g44OR44Op44Oh44O844K/SURcbiAgICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRQYXJhbWV0ZXJJbmRleChwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUpOiBudW1iZXIge1xuICAgICAgbGV0IHBhcmFtZXRlckluZGV4OiBudW1iZXI7XG4gICAgICBjb25zdCBpZENvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLmNvdW50O1xuXG4gICAgICBmb3IgKHBhcmFtZXRlckluZGV4ID0gMDsgcGFyYW1ldGVySW5kZXggPCBpZENvdW50OyArK3BhcmFtZXRlckluZGV4KSB7XG4gICAgICAgIGlmIChwYXJhbWV0ZXJJZCAhPSB0aGlzLl9wYXJhbWV0ZXJJZHMuYXQocGFyYW1ldGVySW5kZXgpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFyYW1ldGVySW5kZXg7XG4gICAgICB9XG5cbiAgICAgIC8vIOODouODh+ODq+OBq+WtmOWcqOOBl+OBpuOBhOOBquOBhOWgtOWQiOOAgemdnuWtmOWcqOODkeODqeODoeODvOOCv0lE44Oq44K544OI5YaF44KS5qSc57Si44GX44CB44Gd44Gu44Kk44Oz44OH44OD44Kv44K544KS6L+U44GZXG4gICAgICBpZiAodGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJJZC5pc0V4aXN0KHBhcmFtZXRlcklkKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJJZC5nZXRWYWx1ZShwYXJhbWV0ZXJJZCk7XG4gICAgICB9XG5cbiAgICAgIC8vIOmdnuWtmOWcqOODkeODqeODoeODvOOCv0lE44Oq44K544OI44Gr44Gq44GE5aC05ZCI5paw44GX44GP6KaB57Sg44KS6L+95Yqg44GZ44KLXG4gICAgICBwYXJhbWV0ZXJJbmRleCA9XG4gICAgICAgIHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuY291bnQgKyB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlcklkLmdldFNpemUoKTtcblxuICAgICAgdGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJJZC5zZXRWYWx1ZShwYXJhbWV0ZXJJZCwgcGFyYW1ldGVySW5kZXgpO1xuICAgICAgdGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJWYWx1ZXMuYXBwZW5kS2V5KHBhcmFtZXRlckluZGV4KTtcblxuICAgICAgcmV0dXJuIHBhcmFtZXRlckluZGV4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODkeODqeODoeODvOOCv+OBruWAi+aVsOOBruWPluW+l1xuICAgICAqIEByZXR1cm4g44OR44Op44Oh44O844K/44Gu5YCL5pWwXG4gICAgICovXG4gICAgcHVibGljIGdldFBhcmFtZXRlckNvdW50KCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5jb3VudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlpKflgKTjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVySW5kZXgg44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlpKflgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UGFyYW1ldGVyTWF4aW11bVZhbHVlKHBhcmFtZXRlckluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWF4aW11bVZhbHVlc1twYXJhbWV0ZXJJbmRleF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OR44Op44Oh44O844K/44Gu5pyA5bCP5YCk44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4IOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g44OR44Op44Oh44O844K/44Gu5pyA5bCP5YCkXG4gICAgICovXG4gICAgcHVibGljIGdldFBhcmFtZXRlck1pbmltdW1WYWx1ZShwYXJhbWV0ZXJJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLm1pbmltdW1WYWx1ZXNbcGFyYW1ldGVySW5kZXhdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODkeODqeODoeODvOOCv+OBruODh+ODleOCqeODq+ODiOWApOOBruWPluW+l1xuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJJbmRleCDjg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruODh+ODleOCqeODq+ODiOWApFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRQYXJhbWV0ZXJEZWZhdWx0VmFsdWUocGFyYW1ldGVySW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5kZWZhdWx0VmFsdWVzW3BhcmFtZXRlckluZGV4XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVySW5kZXggICAg44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr/jga7lgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtZXRlckluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgaWYgKHRoaXMuX25vdEV4aXN0UGFyYW1ldGVyVmFsdWVzLmlzRXhpc3QocGFyYW1ldGVySW5kZXgpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcy5nZXRWYWx1ZShwYXJhbWV0ZXJJbmRleCk7XG4gICAgICB9XG5cbiAgICAgIC8vIOOCpOODs+ODh+ODg+OCr+OCueOBruevhOWbsuWGheaknOefpVxuICAgICAgQ1NNX0FTU0VSVChcbiAgICAgICAgMCA8PSBwYXJhbWV0ZXJJbmRleCAmJiBwYXJhbWV0ZXJJbmRleCA8IHRoaXMuZ2V0UGFyYW1ldGVyQ291bnQoKVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX3BhcmFtZXRlclZhbHVlc1twYXJhbWV0ZXJJbmRleF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIHBhcmFtZXRlcklkICAgIOODkeODqeODoeODvOOCv+OBrklEXG4gICAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr/jga7lgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UGFyYW1ldGVyVmFsdWVCeUlkKHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSk6IG51bWJlciB7XG4gICAgICAvLyDpq5jpgJ/ljJbjga7jgZ/jgoHjgatwYXJhbWV0ZXJJbmRleOOCkuWPluW+l+OBp+OBjeOCi+apn+ani+OBq+OBquOBo+OBpuOBhOOCi+OBjOOAgeWklumDqOOBi+OCieOBruioreWumuOBruaZguOBr+WRvOOBs+WHuuOBl+mgu+W6puOBjOS9juOBhOOBn+OCgeS4jeimgVxuICAgICAgY29uc3QgcGFyYW1ldGVySW5kZXg6IG51bWJlciA9IHRoaXMuZ2V0UGFyYW1ldGVySW5kZXgocGFyYW1ldGVySWQpO1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtZXRlckluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7oqK3lrppcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVySW5kZXgg44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHBhcmFtIHZhbHVlIOODkeODqeODoeODvOOCv+OBruWApFxuICAgICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/XG4gICAgICovXG4gICAgcHVibGljIHNldFBhcmFtZXRlclZhbHVlQnlJbmRleChcbiAgICAgIHBhcmFtZXRlckluZGV4OiBudW1iZXIsXG4gICAgICB2YWx1ZTogbnVtYmVyLFxuICAgICAgd2VpZ2h0ID0gMS4wXG4gICAgKTogdm9pZCB7XG4gICAgICBpZiAodGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJWYWx1ZXMuaXNFeGlzdChwYXJhbWV0ZXJJbmRleCkpIHtcbiAgICAgICAgdGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJWYWx1ZXMuc2V0VmFsdWUoXG4gICAgICAgICAgcGFyYW1ldGVySW5kZXgsXG4gICAgICAgICAgd2VpZ2h0ID09IDFcbiAgICAgICAgICAgID8gdmFsdWVcbiAgICAgICAgICAgIDogdGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJWYWx1ZXMuZ2V0VmFsdWUocGFyYW1ldGVySW5kZXgpICpcbiAgICAgICAgICAgICAgICAoMSAtIHdlaWdodCkgK1xuICAgICAgICAgICAgICAgIHZhbHVlICogd2VpZ2h0XG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyDjgqTjg7Pjg4fjg4Pjgq/jgrnjga7nr4Tlm7LlhoXmpJznn6VcbiAgICAgIENTTV9BU1NFUlQoXG4gICAgICAgIDAgPD0gcGFyYW1ldGVySW5kZXggJiYgcGFyYW1ldGVySW5kZXggPCB0aGlzLmdldFBhcmFtZXRlckNvdW50KClcbiAgICAgICk7XG5cbiAgICAgIGlmICh0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLm1heGltdW1WYWx1ZXNbcGFyYW1ldGVySW5kZXhdIDwgdmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLm1heGltdW1WYWx1ZXNbcGFyYW1ldGVySW5kZXhdO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWluaW11bVZhbHVlc1twYXJhbWV0ZXJJbmRleF0gPiB2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWluaW11bVZhbHVlc1twYXJhbWV0ZXJJbmRleF07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3BhcmFtZXRlclZhbHVlc1twYXJhbWV0ZXJJbmRleF0gPVxuICAgICAgICB3ZWlnaHQgPT0gMVxuICAgICAgICAgID8gdmFsdWVcbiAgICAgICAgICA6ICh0aGlzLl9wYXJhbWV0ZXJWYWx1ZXNbcGFyYW1ldGVySW5kZXhdID1cbiAgICAgICAgICAgICAgdGhpcy5fcGFyYW1ldGVyVmFsdWVzW3BhcmFtZXRlckluZGV4XSAqICgxIC0gd2VpZ2h0KSArXG4gICAgICAgICAgICAgIHZhbHVlICogd2VpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7oqK3lrppcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVySWQg44OR44Op44Oh44O844K/44GuSURcbiAgICAgKiBAcGFyYW0gdmFsdWUg44OR44Op44Oh44O844K/44Gu5YCkXG4gICAgICogQHBhcmFtIHdlaWdodCDph43jgb9cbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0UGFyYW1ldGVyVmFsdWVCeUlkKFxuICAgICAgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlLFxuICAgICAgdmFsdWU6IG51bWJlcixcbiAgICAgIHdlaWdodCA9IDEuMFxuICAgICk6IHZvaWQge1xuICAgICAgY29uc3QgaW5kZXg6IG51bWJlciA9IHRoaXMuZ2V0UGFyYW1ldGVySW5kZXgocGFyYW1ldGVySWQpO1xuICAgICAgdGhpcy5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgoaW5kZXgsIHZhbHVlLCB3ZWlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODkeODqeODoeODvOOCv+OBruWApOOBruWKoOeulyhpbmRleClcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVySW5kZXgg44OR44Op44Oh44O844K/44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHBhcmFtIHZhbHVlIOWKoOeul+OBmeOCi+WApFxuICAgICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/XG4gICAgICovXG4gICAgcHVibGljIGFkZFBhcmFtZXRlclZhbHVlQnlJbmRleChcbiAgICAgIHBhcmFtZXRlckluZGV4OiBudW1iZXIsXG4gICAgICB2YWx1ZTogbnVtYmVyLFxuICAgICAgd2VpZ2h0ID0gMS4wXG4gICAgKTogdm9pZCB7XG4gICAgICB0aGlzLnNldFBhcmFtZXRlclZhbHVlQnlJbmRleChcbiAgICAgICAgcGFyYW1ldGVySW5kZXgsXG4gICAgICAgIHRoaXMuZ2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtZXRlckluZGV4KSArIHZhbHVlICogd2VpZ2h0XG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODkeODqeODoeODvOOCv+OBruWApOOBruWKoOeulyhpZClcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVySWQg44OR44Op44Oh44O844K/77yp77ykXG4gICAgICogQHBhcmFtIHZhbHVlIOWKoOeul+OBmeOCi+WApFxuICAgICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/XG4gICAgICovXG4gICAgcHVibGljIGFkZFBhcmFtZXRlclZhbHVlQnlJZChcbiAgICAgIHBhcmFtZXRlcklkOiBhbnksXG4gICAgICB2YWx1ZTogbnVtYmVyLFxuICAgICAgd2VpZ2h0ID0gMS4wXG4gICAgKTogdm9pZCB7XG4gICAgICBjb25zdCBpbmRleDogbnVtYmVyID0gdGhpcy5nZXRQYXJhbWV0ZXJJbmRleChwYXJhbWV0ZXJJZCk7XG4gICAgICB0aGlzLmFkZFBhcmFtZXRlclZhbHVlQnlJbmRleChpbmRleCwgdmFsdWUsIHdlaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu5LmX566XXG4gICAgICogQHBhcmFtIHBhcmFtZXRlcklkIOODkeODqeODoeODvOOCv+OBrklEXG4gICAgICogQHBhcmFtIHZhbHVlIOS5l+eul+OBmeOCi+WApFxuICAgICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/XG4gICAgICovXG4gICAgcHVibGljIG11bHRpcGx5UGFyYW1ldGVyVmFsdWVCeUlkKFxuICAgICAgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlLFxuICAgICAgdmFsdWU6IG51bWJlcixcbiAgICAgIHdlaWdodCA9IDEuMFxuICAgICk6IHZvaWQge1xuICAgICAgY29uc3QgaW5kZXg6IG51bWJlciA9IHRoaXMuZ2V0UGFyYW1ldGVySW5kZXgocGFyYW1ldGVySWQpO1xuICAgICAgdGhpcy5tdWx0aXBseVBhcmFtZXRlclZhbHVlQnlJbmRleChpbmRleCwgdmFsdWUsIHdlaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu5LmX566XXG4gICAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4IOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEBwYXJhbSB2YWx1ZSDkuZfnrpfjgZnjgovlgKRcbiAgICAgKiBAcGFyYW0gd2VpZ2h0IOmHjeOBv1xuICAgICAqL1xuICAgIHB1YmxpYyBtdWx0aXBseVBhcmFtZXRlclZhbHVlQnlJbmRleChcbiAgICAgIHBhcmFtZXRlckluZGV4OiBudW1iZXIsXG4gICAgICB2YWx1ZTogbnVtYmVyLFxuICAgICAgd2VpZ2h0ID0gMS4wXG4gICAgKTogdm9pZCB7XG4gICAgICB0aGlzLnNldFBhcmFtZXRlclZhbHVlQnlJbmRleChcbiAgICAgICAgcGFyYW1ldGVySW5kZXgsXG4gICAgICAgIHRoaXMuZ2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtZXRlckluZGV4KSAqXG4gICAgICAgICAgKDEuMCArICh2YWx1ZSAtIDEuMCkgKiB3ZWlnaHQpXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K544Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIGRyYXdhYmxlSWQgRHJhd2FibGXjga5JRFxuICAgICAqIEByZXR1cm4gRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RHJhd2FibGVJbmRleChkcmF3YWJsZUlkOiBDdWJpc21JZEhhbmRsZSk6IG51bWJlciB7XG4gICAgICBjb25zdCBkcmF3YWJsZUNvdW50ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvdW50O1xuXG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgZHJhd2FibGVJbmRleCA9IDA7XG4gICAgICAgIGRyYXdhYmxlSW5kZXggPCBkcmF3YWJsZUNvdW50O1xuICAgICAgICArK2RyYXdhYmxlSW5kZXhcbiAgICAgICkge1xuICAgICAgICBpZiAodGhpcy5fZHJhd2FibGVJZHMuYXQoZHJhd2FibGVJbmRleCkgPT0gZHJhd2FibGVJZCkge1xuICAgICAgICAgIHJldHVybiBkcmF3YWJsZUluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEcmF3YWJsZeOBruWAi+aVsOOBruWPluW+l1xuICAgICAqIEByZXR1cm4gZHJhd2FibGXjga7lgIvmlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RHJhd2FibGVDb3VudCgpOiBudW1iZXIge1xuICAgICAgY29uc3QgZHJhd2FibGVDb3VudCA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5jb3VudDtcbiAgICAgIHJldHVybiBkcmF3YWJsZUNvdW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERyYXdhYmxl44GuSUTjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4gZHJhd2FibGXjga5JRFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXREcmF3YWJsZUlkKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlIHtcbiAgICAgIGNvbnN0IHBhcmFtZXRlcklkczogc3RyaW5nW10gPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuaWRzO1xuICAgICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChwYXJhbWV0ZXJJZHNbZHJhd2FibGVJbmRleF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERyYXdhYmxl44Gu5o+P55S76aCG44Oq44K544OI44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiBEcmF3YWJsZeOBruaPj+eUu+mghuODquOCueODiFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXREcmF3YWJsZVJlbmRlck9yZGVycygpOiBJbnQzMkFycmF5IHtcbiAgICAgIGNvbnN0IHJlbmRlck9yZGVyczogSW50MzJBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5yZW5kZXJPcmRlcnM7XG4gICAgICByZXR1cm4gcmVuZGVyT3JkZXJzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERyYXdhYmxl44Gu44OG44Kv44K544OB44Oj44Kk44Oz44OH44OD44Kv44K544Oq44K544OI44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu44OG44Kv44K544OB44Oj44Kk44Oz44OH44OD44Kv44K544Oq44K544OIXG4gICAgICovXG4gICAgcHVibGljIGdldERyYXdhYmxlVGV4dHVyZUluZGljZXMoZHJhd2FibGVJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgIGNvbnN0IHRleHR1cmVJbmRpY2VzOiBJbnQzMkFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLnRleHR1cmVJbmRpY2VzO1xuICAgICAgcmV0dXJuIHRleHR1cmVJbmRpY2VzW2RyYXdhYmxlSW5kZXhdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERyYXdhYmxl44GuVmVydGV4UG9zaXRpb25z44Gu5aSJ5YyW5oOF5aCx44Gu5Y+W5b6XXG4gICAgICpcbiAgICAgKiDnm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgadEcmF3YWJsZeOBrumggueCueaDheWgseOBjOWkieWMluOBl+OBn+OBi+OCkuWPluW+l+OBmeOCi+OAglxuICAgICAqXG4gICAgICogQHBhcmFtICAgZHJhd2FibGVJbmRleCAgIERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHZhbCAgdHJ1ZSAgICBEcmF3YWJsZeOBrumggueCueaDheWgseOBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBn1xuICAgICAqIEByZXR2YWwgIGZhbHNlICAgRHJhd2FibGXjga7poILngrnmg4XloLHjgYznm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgaflpInljJbjgZfjgabjgYTjgarjgYRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RHJhd2FibGVEeW5hbWljRmxhZ1ZlcnRleFBvc2l0aW9uc0RpZENoYW5nZShcbiAgICAgIGRyYXdhYmxlSW5kZXg6IG51bWJlclxuICAgICk6IGJvb2xlYW4ge1xuICAgICAgY29uc3QgZHluYW1pY0ZsYWdzOiBVaW50OEFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmR5bmFtaWNGbGFncztcbiAgICAgIHJldHVybiBMaXZlMkRDdWJpc21Db3JlLlV0aWxzLmhhc1ZlcnRleFBvc2l0aW9uc0RpZENoYW5nZUJpdChcbiAgICAgICAgZHluYW1pY0ZsYWdzW2RyYXdhYmxlSW5kZXhdXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERyYXdhYmxl44Gu6aCC54K544Kk44Oz44OH44OD44Kv44K544Gu5YCL5pWw44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu6aCC54K544Kk44Oz44OH44OD44Kv44K544Gu5YCL5pWwXG4gICAgICovXG4gICAgcHVibGljIGdldERyYXdhYmxlVmVydGV4SW5kZXhDb3VudChkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgY29uc3QgaW5kZXhDb3VudHM6IEludDMyQXJyYXkgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuaW5kZXhDb3VudHM7XG4gICAgICByZXR1cm4gaW5kZXhDb3VudHNbZHJhd2FibGVJbmRleF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRHJhd2FibGXjga7poILngrnjga7lgIvmlbDjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4gZHJhd2FibGXjga7poILngrnjga7lgIvmlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RHJhd2FibGVWZXJ0ZXhDb3VudChkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgY29uc3QgdmVydGV4Q291bnRzID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLnZlcnRleENvdW50cztcbiAgICAgIHJldHVybiB2ZXJ0ZXhDb3VudHNbZHJhd2FibGVJbmRleF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRHJhd2FibGXjga7poILngrnjg6rjgrnjg4jjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBkcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4gZHJhd2FibGXjga7poILngrnjg6rjgrnjg4hcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RHJhd2FibGVWZXJ0aWNlcyhkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBGbG9hdDMyQXJyYXkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0RHJhd2FibGVWZXJ0ZXhQb3NpdGlvbnMoZHJhd2FibGVJbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRHJhd2FibGXjga7poILngrnjgqTjg7Pjg4fjg4Pjgq/jgrnjg6rjgrnjg4jjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gZHJhcmFibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4gZHJhd2FibGXjga7poILngrnjgqTjg7Pjg4fjg4Pjgq/jgrnjg6rjgrnjg4hcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RHJhd2FibGVWZXJ0ZXhJbmRpY2VzKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IFVpbnQxNkFycmF5IHtcbiAgICAgIGNvbnN0IGluZGljZXNBcnJheTogVWludDE2QXJyYXlbXSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5pbmRpY2VzO1xuICAgICAgcmV0dXJuIGluZGljZXNBcnJheVtkcmF3YWJsZUluZGV4XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEcmF3YWJsZeOBrumggueCueODquOCueODiOOBruWPluW+l1xuICAgICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiBkcmF3YWJsZeOBrumggueCueODquOCueODiFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXREcmF3YWJsZVZlcnRleFBvc2l0aW9ucyhkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBGbG9hdDMyQXJyYXkge1xuICAgICAgY29uc3QgdmVydGljZXNBcnJheTogRmxvYXQzMkFycmF5W10gPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXNcbiAgICAgICAgLnZlcnRleFBvc2l0aW9ucztcbiAgICAgIHJldHVybiB2ZXJ0aWNlc0FycmF5W2RyYXdhYmxlSW5kZXhdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERyYXdhYmxl44Gu6aCC54K544GuVVbjg6rjgrnjg4jjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4gZHJhd2FibGXjga7poILngrlVVuODquOCueODiFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXREcmF3YWJsZVZlcnRleFV2cyhkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBGbG9hdDMyQXJyYXkge1xuICAgICAgY29uc3QgdXZzQXJyYXk6IEZsb2F0MzJBcnJheVtdID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLnZlcnRleFV2cztcbiAgICAgIHJldHVybiB1dnNBcnJheVtkcmF3YWJsZUluZGV4XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEcmF3YWJsZeOBruS4jemAj+aYjuW6puOBruWPluW+l1xuICAgICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiBkcmF3YWJsZeOBruS4jemAj+aYjuW6plxuICAgICAqL1xuICAgIHB1YmxpYyBnZXREcmF3YWJsZU9wYWNpdHkoZHJhd2FibGVJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgIGNvbnN0IG9wYWNpdGllczogRmxvYXQzMkFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLm9wYWNpdGllcztcbiAgICAgIHJldHVybiBvcGFjaXRpZXNbZHJhd2FibGVJbmRleF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRHJhd2FibGXjga7jgqvjg6rjg7PjgrDmg4XloLHjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4gZHJhd2FibGXjga7jgqvjg6rjg7PjgrDmg4XloLFcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RHJhd2FibGVDdWxsaW5nKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgY29uc3QgY29uc3RhbnRGbGFncyA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5jb25zdGFudEZsYWdzO1xuXG4gICAgICByZXR1cm4gIUxpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzSXNEb3VibGVTaWRlZEJpdChcbiAgICAgICAgY29uc3RhbnRGbGFnc1tkcmF3YWJsZUluZGV4XVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEcmF3YWJsZeOBruODluODrOODs+ODieODouODvOODieOCkuWPluW+l1xuICAgICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiBkcmF3YWJsZeOBruODluODrOODs+ODieODouODvOODiVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXREcmF3YWJsZUJsZW5kTW9kZShkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBDdWJpc21CbGVuZE1vZGUge1xuICAgICAgY29uc3QgY29uc3RhbnRGbGFncyA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5jb25zdGFudEZsYWdzO1xuXG4gICAgICByZXR1cm4gTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNCbGVuZEFkZGl0aXZlQml0KFxuICAgICAgICBjb25zdGFudEZsYWdzW2RyYXdhYmxlSW5kZXhdXG4gICAgICApXG4gICAgICAgID8gQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9BZGRpdGl2ZVxuICAgICAgICA6IExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzQmxlbmRNdWx0aXBsaWNhdGl2ZUJpdChcbiAgICAgICAgICAgIGNvbnN0YW50RmxhZ3NbZHJhd2FibGVJbmRleF1cbiAgICAgICAgICApXG4gICAgICAgID8gQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9NdWx0aXBsaWNhdGl2ZVxuICAgICAgICA6IEN1YmlzbUJsZW5kTW9kZS5DdWJpc21CbGVuZE1vZGVfTm9ybWFsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERyYXdhYmxl44Gu44Oe44K544Kv44Gu5Y+N6Lui5L2/55So44Gu5Y+W5b6XXG4gICAgICpcbiAgICAgKiBEcmF3YWJsZeOBruODnuOCueOCr+S9v+eUqOaZguOBruWPjei7ouioreWumuOCkuWPluW+l+OBmeOCi+OAglxuICAgICAqIOODnuOCueOCr+OCkuS9v+eUqOOBl+OBquOBhOWgtOWQiOOBr+eEoeimluOBleOCjOOCi+OAglxuICAgICAqXG4gICAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIERyYXdhYmxl44Gu5Y+N6Lui6Kit5a6aXG4gICAgICovXG4gICAgcHVibGljIGdldERyYXdhYmxlSW52ZXJ0ZWRNYXNrQml0KGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgY29uc3QgY29uc3RhbnRGbGFnczogVWludDhBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5jb25zdGFudEZsYWdzO1xuXG4gICAgICByZXR1cm4gTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNJc0ludmVydGVkTWFza0JpdChcbiAgICAgICAgY29uc3RhbnRGbGFnc1tkcmF3YWJsZUluZGV4XVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEcmF3YWJsZeOBruOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODquOCueODiOOBruWPluW+l1xuICAgICAqIEByZXR1cm4gRHJhd2FibGXjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg6rjgrnjg4hcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RHJhd2FibGVNYXNrcygpOiBJbnQzMkFycmF5W10ge1xuICAgICAgY29uc3QgbWFza3M6IEludDMyQXJyYXlbXSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5tYXNrcztcbiAgICAgIHJldHVybiBtYXNrcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEcmF3YWJsZeOBruOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruWAi+aVsOODquOCueODiOOBruWPluW+l1xuICAgICAqIEByZXR1cm4gRHJhd2FibGXjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7lgIvmlbDjg6rjgrnjg4hcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RHJhd2FibGVNYXNrQ291bnRzKCk6IEludDMyQXJyYXkge1xuICAgICAgY29uc3QgbWFza0NvdW50czogSW50MzJBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5tYXNrQ291bnRzO1xuICAgICAgcmV0dXJuIG1hc2tDb3VudHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu5L2/55So54q25oWLXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHRydWUg44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44KS5L2/55So44GX44Gm44GE44KLXG4gICAgICogQHJldHVybiBmYWxzZSDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgpLkvb/nlKjjgZfjgabjgYTjgarjgYRcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNVc2luZ01hc2tpbmcoKTogYm9vbGVhbiB7XG4gICAgICBmb3IgKGxldCBkID0gMDsgZCA8IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5jb3VudDsgKytkKSB7XG4gICAgICAgIGlmICh0aGlzLl9tb2RlbC5kcmF3YWJsZXMubWFza0NvdW50c1tkXSA8PSAwKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRHJhd2FibGXjga7ooajnpLrmg4XloLHjgpLlj5blvpfjgZnjgotcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiB0cnVlIERyYXdhYmxl44GM6KGo56S6XG4gICAgICogQHJldHVybiBmYWxzZSBEcmF3YWJsZeOBjOmdnuihqOekulxuICAgICAqL1xuICAgIHB1YmxpYyBnZXREcmF3YWJsZUR5bmFtaWNGbGFnSXNWaXNpYmxlKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgY29uc3QgZHluYW1pY0ZsYWdzOiBVaW50OEFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmR5bmFtaWNGbGFncztcbiAgICAgIHJldHVybiBMaXZlMkRDdWJpc21Db3JlLlV0aWxzLmhhc0lzVmlzaWJsZUJpdChcbiAgICAgICAgZHluYW1pY0ZsYWdzW2RyYXdhYmxlSW5kZXhdXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERyYXdhYmxl44GuRHJhd09yZGVy44Gu5aSJ5YyW5oOF5aCx44Gu5Y+W5b6XXG4gICAgICpcbiAgICAgKiDnm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgadkcmF3YWJsZeOBrmRyYXdPcmRlcuOBjOWkieWMluOBl+OBn+OBi+OCkuWPluW+l+OBmeOCi+OAglxuICAgICAqIGRyYXdPcmRlcuOBr2FydE1lc2jkuIrjgafmjIflrprjgZnjgosw44GL44KJMTAwMOOBruaDheWgsVxuICAgICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IGRyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiB0cnVlIGRyYXdhYmxl44Gu5LiN6YCP5piO5bqm44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44GfXG4gICAgICogQHJldHVybiBmYWxzZSBkcmF3YWJsZeOBruS4jemAj+aYjuW6puOBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBpuOBhOOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXREcmF3YWJsZUR5bmFtaWNGbGFnVmlzaWJpbGl0eURpZENoYW5nZShcbiAgICAgIGRyYXdhYmxlSW5kZXg6IG51bWJlclxuICAgICk6IGJvb2xlYW4ge1xuICAgICAgY29uc3QgZHluYW1pY0ZsYWdzOiBVaW50OEFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmR5bmFtaWNGbGFncztcbiAgICAgIHJldHVybiBMaXZlMkRDdWJpc21Db3JlLlV0aWxzLmhhc1Zpc2liaWxpdHlEaWRDaGFuZ2VCaXQoXG4gICAgICAgIGR5bmFtaWNGbGFnc1tkcmF3YWJsZUluZGV4XVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEcmF3YWJsZeOBruS4jemAj+aYjuW6puOBruWkieWMluaDheWgseOBruWPluW+l1xuICAgICAqXG4gICAgICog55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44GnZHJhd2FibGXjga7kuI3pgI/mmI7luqbjgYzlpInljJbjgZfjgZ/jgYvjgpLlj5blvpfjgZnjgovjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IGRyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiB0cnVlIERyYXdhYmxl44Gu5LiN6YCP5piO5bqm44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44GfXG4gICAgICogQHJldHVybiBmYWxzZSBEcmF3YWJsZeOBruS4jemAj+aYjuW6puOBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBpuOBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXREcmF3YWJsZUR5bmFtaWNGbGFnT3BhY2l0eURpZENoYW5nZShcbiAgICAgIGRyYXdhYmxlSW5kZXg6IG51bWJlclxuICAgICk6IGJvb2xlYW4ge1xuICAgICAgY29uc3QgZHluYW1pY0ZsYWdzOiBVaW50OEFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmR5bmFtaWNGbGFncztcbiAgICAgIHJldHVybiBMaXZlMkRDdWJpc21Db3JlLlV0aWxzLmhhc09wYWNpdHlEaWRDaGFuZ2VCaXQoXG4gICAgICAgIGR5bmFtaWNGbGFnc1tkcmF3YWJsZUluZGV4XVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEcmF3YWJsZeOBruaPj+eUu+mghuW6j+OBruWkieWMluaDheWgseOBruWPluW+l1xuICAgICAqXG4gICAgICog55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44GnRHJhd2FibGXjga7mj4/nlLvjga7poIbluo/jgYzlpInljJbjgZfjgZ/jgYvjgpLlj5blvpfjgZnjgovjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiB0cnVlIERyYXdhYmxl44Gu5o+P55S744Gu6aCG5bqP44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44GfXG4gICAgICogQHJldHVybiBmYWxzZSBEcmF3YWJsZeOBruaPj+eUu+OBrumghuW6j+OBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBpuOBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXREcmF3YWJsZUR5bmFtaWNGbGFnUmVuZGVyT3JkZXJEaWRDaGFuZ2UoXG4gICAgICBkcmF3YWJsZUluZGV4OiBudW1iZXJcbiAgICApOiBib29sZWFuIHtcbiAgICAgIGNvbnN0IGR5bmFtaWNGbGFnczogVWludDhBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5keW5hbWljRmxhZ3M7XG4gICAgICByZXR1cm4gTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNSZW5kZXJPcmRlckRpZENoYW5nZUJpdChcbiAgICAgICAgZHluYW1pY0ZsYWdzW2RyYXdhYmxlSW5kZXhdXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOS/neWtmOOBleOCjOOBn+ODkeODqeODoeODvOOCv+OBruiqreOBv+i+vOOBv1xuICAgICAqL1xuICAgIHB1YmxpYyBsb2FkUGFyYW1ldGVycygpOiB2b2lkIHtcbiAgICAgIGxldCBwYXJhbWV0ZXJDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5jb3VudDtcbiAgICAgIGNvbnN0IHNhdmVkUGFyYW1ldGVyQ291bnQ6IG51bWJlciA9IHRoaXMuX3NhdmVkUGFyYW1ldGVycy5nZXRTaXplKCk7XG5cbiAgICAgIGlmIChwYXJhbWV0ZXJDb3VudCA+IHNhdmVkUGFyYW1ldGVyQ291bnQpIHtcbiAgICAgICAgcGFyYW1ldGVyQ291bnQgPSBzYXZlZFBhcmFtZXRlckNvdW50O1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtZXRlckNvdW50OyArK2kpIHtcbiAgICAgICAgdGhpcy5fcGFyYW1ldGVyVmFsdWVzW2ldID0gdGhpcy5fc2F2ZWRQYXJhbWV0ZXJzLmF0KGkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWIneacn+WMluOBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBpbml0aWFsaXplKCk6IHZvaWQge1xuICAgICAgQ1NNX0FTU0VSVCh0aGlzLl9tb2RlbCk7XG5cbiAgICAgIHRoaXMuX3BhcmFtZXRlclZhbHVlcyA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMudmFsdWVzO1xuICAgICAgdGhpcy5fcGFydE9wYWNpdGllcyA9IHRoaXMuX21vZGVsLnBhcnRzLm9wYWNpdGllcztcbiAgICAgIHRoaXMuX3BhcmFtZXRlck1heGltdW1WYWx1ZXMgPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLm1heGltdW1WYWx1ZXM7XG4gICAgICB0aGlzLl9wYXJhbWV0ZXJNaW5pbXVtVmFsdWVzID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5taW5pbXVtVmFsdWVzO1xuXG4gICAgICB7XG4gICAgICAgIGNvbnN0IHBhcmFtZXRlcklkczogc3RyaW5nW10gPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLmlkcztcbiAgICAgICAgY29uc3QgcGFyYW1ldGVyQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuY291bnQ7XG5cbiAgICAgICAgdGhpcy5fcGFyYW1ldGVySWRzLnByZXBhcmVDYXBhY2l0eShwYXJhbWV0ZXJDb3VudCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1ldGVyQ291bnQ7ICsraSkge1xuICAgICAgICAgIHRoaXMuX3BhcmFtZXRlcklkcy5wdXNoQmFjayhcbiAgICAgICAgICAgIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChwYXJhbWV0ZXJJZHNbaV0pXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB7XG4gICAgICAgIGNvbnN0IHBhcnRJZHM6IHN0cmluZ1tdID0gdGhpcy5fbW9kZWwucGFydHMuaWRzO1xuICAgICAgICBjb25zdCBwYXJ0Q291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLnBhcnRzLmNvdW50O1xuXG4gICAgICAgIHRoaXMuX3BhcnRJZHMucHJlcGFyZUNhcGFjaXR5KHBhcnRDb3VudCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFydENvdW50OyArK2kpIHtcbiAgICAgICAgICB0aGlzLl9wYXJ0SWRzLnB1c2hCYWNrKFxuICAgICAgICAgICAgQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKHBhcnRJZHNbaV0pXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB7XG4gICAgICAgIGNvbnN0IGRyYXdhYmxlSWRzOiBzdHJpbmdbXSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5pZHM7XG4gICAgICAgIGNvbnN0IGRyYXdhYmxlQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5jb3VudDtcblxuICAgICAgICB0aGlzLl9kcmF3YWJsZUlkcy5wcmVwYXJlQ2FwYWNpdHkoZHJhd2FibGVDb3VudCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHJhd2FibGVDb3VudDsgKytpKSB7XG4gICAgICAgICAgdGhpcy5fZHJhd2FibGVJZHMucHVzaEJhY2soXG4gICAgICAgICAgICBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoZHJhd2FibGVJZHNbaV0pXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqIEBwYXJhbSBtb2RlbCDjg6Ljg4fjg6tcbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IobW9kZWw6IExpdmUyREN1YmlzbUNvcmUuTW9kZWwpIHtcbiAgICAgIHRoaXMuX21vZGVsID0gbW9kZWw7XG4gICAgICB0aGlzLl9wYXJhbWV0ZXJWYWx1ZXMgPSBudWxsO1xuICAgICAgdGhpcy5fcGFyYW1ldGVyTWF4aW11bVZhbHVlcyA9IG51bGw7XG4gICAgICB0aGlzLl9wYXJhbWV0ZXJNaW5pbXVtVmFsdWVzID0gbnVsbDtcbiAgICAgIHRoaXMuX3BhcnRPcGFjaXRpZXMgPSBudWxsO1xuICAgICAgdGhpcy5fc2F2ZWRQYXJhbWV0ZXJzID0gbmV3IGNzbVZlY3RvcjxudW1iZXI+KCk7XG4gICAgICB0aGlzLl9wYXJhbWV0ZXJJZHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPigpO1xuICAgICAgdGhpcy5fZHJhd2FibGVJZHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPigpO1xuICAgICAgdGhpcy5fcGFydElkcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+KCk7XG5cbiAgICAgIHRoaXMuX25vdEV4aXN0UGFydElkID0gbmV3IGNzbU1hcDxDdWJpc21JZEhhbmRsZSwgbnVtYmVyPigpO1xuICAgICAgdGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJJZCA9IG5ldyBjc21NYXA8Q3ViaXNtSWRIYW5kbGUsIG51bWJlcj4oKTtcbiAgICAgIHRoaXMuX25vdEV4aXN0UGFyYW1ldGVyVmFsdWVzID0gbmV3IGNzbU1hcDxudW1iZXIsIG51bWJlcj4oKTtcbiAgICAgIHRoaXMuX25vdEV4aXN0UGFydE9wYWNpdGllcyA9IG5ldyBjc21NYXA8bnVtYmVyLCBudW1iZXI+KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAgICovXG4gICAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgICB0aGlzLl9tb2RlbC5yZWxlYXNlKCk7XG4gICAgICB0aGlzLl9tb2RlbCA9IG51bGw7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfbm90RXhpc3RQYXJ0T3BhY2l0aWVzOiBjc21NYXA8bnVtYmVyLCBudW1iZXI+OyAvLyDlrZjlnKjjgZfjgabjgYTjgarjgYTjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7jg6rjgrnjg4hcbiAgICBwcml2YXRlIF9ub3RFeGlzdFBhcnRJZDogY3NtTWFwPEN1YmlzbUlkSGFuZGxlLCBudW1iZXI+OyAvLyDlrZjlnKjjgZfjgabjgYTjgarjgYTjg5Hjg7zjg4RJROOBruODquOCueODiFxuXG4gICAgcHJpdmF0ZSBfbm90RXhpc3RQYXJhbWV0ZXJWYWx1ZXM6IGNzbU1hcDxudW1iZXIsIG51bWJlcj47IC8vIOWtmOWcqOOBl+OBpuOBhOOBquOBhOODkeODqeODoeODvOOCv+OBruWApOOBruODquOCueODiFxuICAgIHByaXZhdGUgX25vdEV4aXN0UGFyYW1ldGVySWQ6IGNzbU1hcDxDdWJpc21JZEhhbmRsZSwgbnVtYmVyPjsgLy8g5a2Y5Zyo44GX44Gm44GE44Gq44GE44OR44Op44Oh44O844K/SUTjga7jg6rjgrnjg4hcblxuICAgIHByaXZhdGUgX3NhdmVkUGFyYW1ldGVyczogY3NtVmVjdG9yPG51bWJlcj47IC8vIOS/neWtmOOBleOCjOOBn+ODkeODqeODoeODvOOCv1xuXG4gICAgcHJpdmF0ZSBfbW9kZWw6IExpdmUyREN1YmlzbUNvcmUuTW9kZWw7IC8vIOODouODh+ODq1xuXG4gICAgcHJpdmF0ZSBfcGFyYW1ldGVyVmFsdWVzOiBGbG9hdDMyQXJyYXk7IC8vIOODkeODqeODoeODvOOCv+OBruWApOOBruODquOCueODiFxuICAgIHByaXZhdGUgX3BhcmFtZXRlck1heGltdW1WYWx1ZXM6IEZsb2F0MzJBcnJheTsgLy8g44OR44Op44Oh44O844K/44Gu5pyA5aSn5YCk44Gu44Oq44K544OIXG4gICAgcHJpdmF0ZSBfcGFyYW1ldGVyTWluaW11bVZhbHVlczogRmxvYXQzMkFycmF5OyAvLyDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlsI/lgKTjga7jg6rjgrnjg4hcblxuICAgIHByaXZhdGUgX3BhcnRPcGFjaXRpZXM6IEZsb2F0MzJBcnJheTsgLy8g44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu44Oq44K544OIXG5cbiAgICBwcml2YXRlIF9wYXJhbWV0ZXJJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT47XG4gICAgcHJpdmF0ZSBfcGFydElkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPjtcbiAgICBwcml2YXRlIF9kcmF3YWJsZUlkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPjtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vdGlvbmpzb24gfSBmcm9tICcuL2N1YmlzbW1vdGlvbmpzb24nO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vdGlvbmludGVybmFsIH0gZnJvbSAnLi9jdWJpc21tb3Rpb25pbnRlcm5hbCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgYWN1YmlzbW1vdGlvbiB9IGZyb20gJy4vYWN1YmlzbW1vdGlvbic7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtZnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb3Rpb25xdWV1ZWVudHJ5IH0gZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZWVudHJ5JztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tYXRoIH0gZnJvbSAnLi4vbWF0aC9jdWJpc21tYXRoJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtaWQgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3Ntc3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xuaW1wb3J0IHsgQ3ViaXNtTG9nRGVidWcsIENTTV9BU1NFUlQgfSBmcm9tICcuLi91dGlscy9jdWJpc21kZWJ1Zyc7XG5pbXBvcnQgY3NtU3RyaW5nID0gY3Ntc3RyaW5nLmNzbVN0cmluZztcbmltcG9ydCBDdWJpc21Nb3Rpb25EYXRhID0gY3ViaXNtbW90aW9uaW50ZXJuYWwuQ3ViaXNtTW90aW9uRGF0YTtcbmltcG9ydCBDdWJpc21Nb3Rpb25TZWdtZW50ID0gY3ViaXNtbW90aW9uaW50ZXJuYWwuQ3ViaXNtTW90aW9uU2VnbWVudDtcbmltcG9ydCBDdWJpc21Nb3Rpb25Qb2ludCA9IGN1YmlzbW1vdGlvbmludGVybmFsLkN1YmlzbU1vdGlvblBvaW50O1xuaW1wb3J0IEN1YmlzbU1vdGlvbkV2ZW50ID0gY3ViaXNtbW90aW9uaW50ZXJuYWwuQ3ViaXNtTW90aW9uRXZlbnQ7XG5pbXBvcnQgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUgPSBjdWJpc21tb3Rpb25pbnRlcm5hbC5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZTtcbmltcG9ydCBDdWJpc21JZEhhbmRsZSA9IGN1YmlzbWlkLkN1YmlzbUlkSGFuZGxlO1xuaW1wb3J0IEN1YmlzbU1vdGlvbkN1cnZlID0gY3ViaXNtbW90aW9uaW50ZXJuYWwuQ3ViaXNtTW90aW9uQ3VydmU7XG5pbXBvcnQgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQgPSBjdWJpc21tb3Rpb25pbnRlcm5hbC5DdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldDtcbmltcG9ydCBjc21WZWN0b3IgPSBjc212ZWN0b3IuY3NtVmVjdG9yO1xuaW1wb3J0IEN1YmlzbU1hdGggPSBjdWJpc21tYXRoLkN1YmlzbU1hdGg7XG5pbXBvcnQgQ3ViaXNtTW90aW9uUXVldWVFbnRyeSA9IGN1YmlzbW1vdGlvbnF1ZXVlZW50cnkuQ3ViaXNtTW90aW9uUXVldWVFbnRyeTtcbmltcG9ydCBDdWJpc21GcmFtZXdvcmsgPSBjdWJpc21mcmFtZXdvcmsuQ3ViaXNtRnJhbWV3b3JrO1xuaW1wb3J0IEN1YmlzbU1vZGVsID0gY3ViaXNtbW9kZWwuQ3ViaXNtTW9kZWw7XG5pbXBvcnQgQUN1YmlzbU1vdGlvbiA9IGFjdWJpc21tb3Rpb24uQUN1YmlzbU1vdGlvbjtcbmltcG9ydCBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrID0gYWN1YmlzbW1vdGlvbi5GaW5pc2hlZE1vdGlvbkNhbGxiYWNrO1xuaW1wb3J0IEN1YmlzbU1vdGlvbkpzb24gPSBjdWJpc21tb3Rpb25qc29uLkN1YmlzbU1vdGlvbkpzb247XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgY29uc3QgRWZmZWN0TmFtZUV5ZUJsaW5rID0gJ0V5ZUJsaW5rJztcbiAgY29uc3QgRWZmZWN0TmFtZUxpcFN5bmMgPSAnTGlwU3luYyc7XG4gIGNvbnN0IFRhcmdldE5hbWVNb2RlbCA9ICdNb2RlbCc7XG4gIGNvbnN0IFRhcmdldE5hbWVQYXJhbWV0ZXIgPSAnUGFyYW1ldGVyJztcbiAgY29uc3QgVGFyZ2V0TmFtZVBhcnRPcGFjaXR5ID0gJ1BhcnRPcGFjaXR5JztcblxuICBmdW5jdGlvbiBsZXJwUG9pbnRzKFxuICAgIGE6IEN1YmlzbU1vdGlvblBvaW50LFxuICAgIGI6IEN1YmlzbU1vdGlvblBvaW50LFxuICAgIHQ6IG51bWJlclxuICApOiBDdWJpc21Nb3Rpb25Qb2ludCB7XG4gICAgY29uc3QgcmVzdWx0OiBDdWJpc21Nb3Rpb25Qb2ludCA9IG5ldyBDdWJpc21Nb3Rpb25Qb2ludCgpO1xuXG4gICAgcmVzdWx0LnRpbWUgPSBhLnRpbWUgKyAoYi50aW1lIC0gYS50aW1lKSAqIHQ7XG4gICAgcmVzdWx0LnZhbHVlID0gYS52YWx1ZSArIChiLnZhbHVlIC0gYS52YWx1ZSkgKiB0O1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmVhckV2YWx1YXRlKHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSwgdGltZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBsZXQgdDogbnVtYmVyID0gKHRpbWUgLSBwb2ludHNbMF0udGltZSkgLyAocG9pbnRzWzFdLnRpbWUgLSBwb2ludHNbMF0udGltZSk7XG5cbiAgICBpZiAodCA8IDAuMCkge1xuICAgICAgdCA9IDAuMDtcbiAgICB9XG5cbiAgICByZXR1cm4gcG9pbnRzWzBdLnZhbHVlICsgKHBvaW50c1sxXS52YWx1ZSAtIHBvaW50c1swXS52YWx1ZSkgKiB0O1xuICB9XG5cbiAgZnVuY3Rpb24gYmV6aWVyRXZhbHVhdGUocG9pbnRzOiBDdWJpc21Nb3Rpb25Qb2ludFtdLCB0aW1lOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGxldCB0OiBudW1iZXIgPSAodGltZSAtIHBvaW50c1swXS50aW1lKSAvIChwb2ludHNbM10udGltZSAtIHBvaW50c1swXS50aW1lKTtcblxuICAgIGlmICh0IDwgMC4wKSB7XG4gICAgICB0ID0gMC4wO1xuICAgIH1cblxuICAgIGNvbnN0IHAwMTogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHBvaW50c1swXSwgcG9pbnRzWzFdLCB0KTtcbiAgICBjb25zdCBwMTI6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwb2ludHNbMV0sIHBvaW50c1syXSwgdCk7XG4gICAgY29uc3QgcDIzOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocG9pbnRzWzJdLCBwb2ludHNbM10sIHQpO1xuXG4gICAgY29uc3QgcDAxMjogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHAwMSwgcDEyLCB0KTtcbiAgICBjb25zdCBwMTIzOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocDEyLCBwMjMsIHQpO1xuXG4gICAgcmV0dXJuIGxlcnBQb2ludHMocDAxMiwgcDEyMywgdCkudmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBzdGVwcGVkRXZhbHVhdGUocG9pbnRzOiBDdWJpc21Nb3Rpb25Qb2ludFtdLCB0aW1lOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBwb2ludHNbMF0udmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBpbnZlcnNlU3RlcHBlZEV2YWx1YXRlKFxuICAgIHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSxcbiAgICB0aW1lOiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gcG9pbnRzWzFdLnZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZXZhbHVhdGVDdXJ2ZShcbiAgICBtb3Rpb25EYXRhOiBDdWJpc21Nb3Rpb25EYXRhLFxuICAgIGluZGV4OiBudW1iZXIsXG4gICAgdGltZTogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgLy8gRmluZCBzZWdtZW50IHRvIGV2YWx1YXRlLlxuICAgIGNvbnN0IGN1cnZlOiBDdWJpc21Nb3Rpb25DdXJ2ZSA9IG1vdGlvbkRhdGEuY3VydmVzLmF0KGluZGV4KTtcblxuICAgIGxldCB0YXJnZXQgPSAtMTtcbiAgICBjb25zdCB0b3RhbFNlZ21lbnRDb3VudDogbnVtYmVyID1cbiAgICAgIGN1cnZlLmJhc2VTZWdtZW50SW5kZXggKyBjdXJ2ZS5zZWdtZW50Q291bnQ7XG4gICAgbGV0IHBvaW50UG9zaXRpb24gPSAwO1xuICAgIGZvciAobGV0IGk6IG51bWJlciA9IGN1cnZlLmJhc2VTZWdtZW50SW5kZXg7IGkgPCB0b3RhbFNlZ21lbnRDb3VudDsgKytpKSB7XG4gICAgICAvLyBHZXQgZmlyc3QgcG9pbnQgb2YgbmV4dCBzZWdtZW50LlxuICAgICAgcG9pbnRQb3NpdGlvbiA9XG4gICAgICAgIG1vdGlvbkRhdGEuc2VnbWVudHMuYXQoaSkuYmFzZVBvaW50SW5kZXggK1xuICAgICAgICAobW90aW9uRGF0YS5zZWdtZW50cy5hdChpKS5zZWdtZW50VHlwZSA9PVxuICAgICAgICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9CZXppZXJcbiAgICAgICAgICA/IDNcbiAgICAgICAgICA6IDEpO1xuXG4gICAgICAvLyBCcmVhayBpZiB0aW1lIGxpZXMgd2l0aGluIGN1cnJlbnQgc2VnbWVudC5cbiAgICAgIGlmIChtb3Rpb25EYXRhLnBvaW50cy5hdChwb2ludFBvc2l0aW9uKS50aW1lID4gdGltZSkge1xuICAgICAgICB0YXJnZXQgPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGFyZ2V0ID09IC0xKSB7XG4gICAgICByZXR1cm4gbW90aW9uRGF0YS5wb2ludHMuYXQocG9pbnRQb3NpdGlvbikudmFsdWU7XG4gICAgfVxuXG4gICAgY29uc3Qgc2VnbWVudDogQ3ViaXNtTW90aW9uU2VnbWVudCA9IG1vdGlvbkRhdGEuc2VnbWVudHMuYXQodGFyZ2V0KTtcblxuICAgIHJldHVybiBzZWdtZW50LmV2YWx1YXRlKFxuICAgICAgbW90aW9uRGF0YS5wb2ludHMuZ2V0KHNlZ21lbnQuYmFzZVBvaW50SW5kZXgpLFxuICAgICAgdGltZVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Kv44Op44K5XG4gICAqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruOCr+ODqeOCueOAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvbiBleHRlbmRzIEFDdWJpc21Nb3Rpb24ge1xuICAgIC8qKlxuICAgICAqIOOCpOODs+OCueOCv+ODs+OCueOCkuS9nOaIkOOBmeOCi1xuICAgICAqXG4gICAgICogQHBhcmFtIGJ1ZmZlciBtb3Rpb24zLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICAgKiBAcGFyYW0gb25GaW5pc2hlZE1vdGlvbkhhbmRsZXIg44Oi44O844K344On44Oz5YaN55Sf57WC5LqG5pmC44Gr5ZG844Gz5Ye644GV44KM44KL44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gICAgICogQHJldHVybiDkvZzmiJDjgZXjgozjgZ/jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShcbiAgICAgIGJ1ZmZlcjogQXJyYXlCdWZmZXIsXG4gICAgICBzaXplOiBudW1iZXIsXG4gICAgICBvbkZpbmlzaGVkTW90aW9uSGFuZGxlcj86IEZpbmlzaGVkTW90aW9uQ2FsbGJhY2tcbiAgICApOiBDdWJpc21Nb3Rpb24ge1xuICAgICAgY29uc3QgcmV0ID0gbmV3IEN1YmlzbU1vdGlvbigpO1xuXG4gICAgICByZXQucGFyc2UoYnVmZmVyLCBzaXplKTtcbiAgICAgIHJldC5fc291cmNlRnJhbWVSYXRlID0gcmV0Ll9tb3Rpb25EYXRhLmZwcztcbiAgICAgIHJldC5fbG9vcER1cmF0aW9uU2Vjb25kcyA9IHJldC5fbW90aW9uRGF0YS5kdXJhdGlvbjtcbiAgICAgIHJldC5fb25GaW5pc2hlZE1vdGlvbiA9IG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyO1xuXG4gICAgICAvLyBOT1RFOiBFZGl0b3Ljgafjga/jg6vjg7zjg5fjgYLjgorjga7jg6Ljg7zjgrfjg6fjg7Pmm7jjgY3lh7rjgZfjga/pnZ7lr77lv5xcbiAgICAgIC8vIHJldC0+X2xvb3AgPSAocmV0LT5fbW90aW9uRGF0YS0+TG9vcCA+IDApO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr/jga7mm7TmlrDjga7lrp/ooYxcbiAgICAgKiBAcGFyYW0gbW9kZWwgICAgICAgICAgICAg5a++6LGh44Gu44Oi44OH44OrXG4gICAgICogQHBhcmFtIHVzZXJUaW1lU2Vjb25kcyAgIOePvuWcqOOBruaZguWIu1vnp5JdXG4gICAgICogQHBhcmFtIGZhZGVXZWlnaHQgICAgICAgIOODouODvOOCt+ODp+ODs+OBrumHjeOBv1xuICAgICAqIEBwYXJhbSBtb3Rpb25RdWV1ZUVudHJ5ICBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXLjgafnrqHnkIbjgZXjgozjgabjgYTjgovjg6Ljg7zjgrfjg6fjg7NcbiAgICAgKi9cbiAgICBwdWJsaWMgZG9VcGRhdGVQYXJhbWV0ZXJzKFxuICAgICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgICAgdXNlclRpbWVTZWNvbmRzOiBudW1iZXIsXG4gICAgICBmYWRlV2VpZ2h0OiBudW1iZXIsXG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5XG4gICAgKTogdm9pZCB7XG4gICAgICBpZiAodGhpcy5fbW9kZWxDdXJ2ZUlkRXllQmxpbmsgPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9tb2RlbEN1cnZlSWRFeWVCbGluayA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgICAgICBFZmZlY3ROYW1lRXllQmxpbmtcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX21vZGVsQ3VydmVJZExpcFN5bmMgPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9tb2RlbEN1cnZlSWRMaXBTeW5jID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgICAgIEVmZmVjdE5hbWVMaXBTeW5jXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGxldCB0aW1lT2Zmc2V0U2Vjb25kczogbnVtYmVyID1cbiAgICAgICAgdXNlclRpbWVTZWNvbmRzIC0gbW90aW9uUXVldWVFbnRyeS5nZXRTdGFydFRpbWUoKTtcblxuICAgICAgaWYgKHRpbWVPZmZzZXRTZWNvbmRzIDwgMC4wKSB7XG4gICAgICAgIHRpbWVPZmZzZXRTZWNvbmRzID0gMC4wOyAvLyDjgqjjg6njg7zlm57pgb9cbiAgICAgIH1cblxuICAgICAgbGV0IGxpcFN5bmNWYWx1ZTogbnVtYmVyID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgIGxldCBleWVCbGlua1ZhbHVlOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuXG4gICAgICAvL+OBvuOBsOOBn+OBjeOAgeODquODg+ODl+OCt+ODs+OCr+OBruOBhuOBoeODouODvOOCt+ODp+ODs+OBrumBqeeUqOOCkuaknOWHuuOBmeOCi+OBn+OCgeOBruODk+ODg+ODiO+8iG1heEZsYWdDb3VudOWAi+OBvuOBp1xuICAgICAgY29uc3QgTWF4VGFyZ2V0U2l6ZSA9IDY0O1xuICAgICAgbGV0IGxpcFN5bmNGbGFncyA9IDA7XG4gICAgICBsZXQgZXllQmxpbmtGbGFncyA9IDA7XG5cbiAgICAgIC8v556s44GN44CB44Oq44OD44OX44K344Oz44Kv44Gu44K/44O844Ky44OD44OI5pWw44GM5LiK6ZmQ44KS6LaF44GI44Gm44GE44KL5aC05ZCIXG4gICAgICBpZiAodGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpID4gTWF4VGFyZ2V0U2l6ZSkge1xuICAgICAgICBDdWJpc21Mb2dEZWJ1ZyhcbiAgICAgICAgICAndG9vIG1hbnkgZXllIGJsaW5rIHRhcmdldHMgOiB7MH0nLFxuICAgICAgICAgIHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmdldFNpemUoKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpID4gTWF4VGFyZ2V0U2l6ZSkge1xuICAgICAgICBDdWJpc21Mb2dEZWJ1ZyhcbiAgICAgICAgICAndG9vIG1hbnkgbGlwIHN5bmMgdGFyZ2V0cyA6IHswfScsXG4gICAgICAgICAgdGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5nZXRTaXplKClcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdG1wRmFkZUluOiBudW1iZXIgPVxuICAgICAgICB0aGlzLl9mYWRlSW5TZWNvbmRzIDw9IDAuMFxuICAgICAgICAgID8gMS4wXG4gICAgICAgICAgOiBDdWJpc21NYXRoLmdldEVhc2luZ1NpbmUoXG4gICAgICAgICAgICAgICh1c2VyVGltZVNlY29uZHMgLSBtb3Rpb25RdWV1ZUVudHJ5LmdldEZhZGVJblN0YXJ0VGltZSgpKSAvXG4gICAgICAgICAgICAgICAgdGhpcy5fZmFkZUluU2Vjb25kc1xuICAgICAgICAgICAgKTtcblxuICAgICAgY29uc3QgdG1wRmFkZU91dDogbnVtYmVyID1cbiAgICAgICAgdGhpcy5fZmFkZU91dFNlY29uZHMgPD0gMC4wIHx8IG1vdGlvblF1ZXVlRW50cnkuZ2V0RW5kVGltZSgpIDwgMC4wXG4gICAgICAgICAgPyAxLjBcbiAgICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZShcbiAgICAgICAgICAgICAgKG1vdGlvblF1ZXVlRW50cnkuZ2V0RW5kVGltZSgpIC0gdXNlclRpbWVTZWNvbmRzKSAvXG4gICAgICAgICAgICAgICAgdGhpcy5fZmFkZU91dFNlY29uZHNcbiAgICAgICAgICAgICk7XG4gICAgICBsZXQgdmFsdWU6IG51bWJlcjtcbiAgICAgIGxldCBjOiBudW1iZXIsIHBhcmFtZXRlckluZGV4OiBudW1iZXI7XG5cbiAgICAgIC8vICdSZXBlYXQnIHRpbWUgYXMgbmVjZXNzYXJ5LlxuICAgICAgbGV0IHRpbWU6IG51bWJlciA9IHRpbWVPZmZzZXRTZWNvbmRzO1xuXG4gICAgICBpZiAodGhpcy5faXNMb29wKSB7XG4gICAgICAgIHdoaWxlICh0aW1lID4gdGhpcy5fbW90aW9uRGF0YS5kdXJhdGlvbikge1xuICAgICAgICAgIHRpbWUgLT0gdGhpcy5fbW90aW9uRGF0YS5kdXJhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBjdXJ2ZXM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25DdXJ2ZT4gPSB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcztcblxuICAgICAgLy8gRXZhbHVhdGUgbW9kZWwgY3VydmVzLlxuICAgICAgZm9yIChcbiAgICAgICAgYyA9IDA7XG4gICAgICAgIGMgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQgJiZcbiAgICAgICAgY3VydmVzLmF0KGMpLnR5cGUgPT1cbiAgICAgICAgICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldC5DdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9Nb2RlbDtcbiAgICAgICAgKytjXG4gICAgICApIHtcbiAgICAgICAgLy8gRXZhbHVhdGUgY3VydmUgYW5kIGNhbGwgaGFuZGxlci5cbiAgICAgICAgdmFsdWUgPSBldmFsdWF0ZUN1cnZlKHRoaXMuX21vdGlvbkRhdGEsIGMsIHRpbWUpO1xuXG4gICAgICAgIGlmIChjdXJ2ZXMuYXQoYykuaWQgPT0gdGhpcy5fbW9kZWxDdXJ2ZUlkRXllQmxpbmspIHtcbiAgICAgICAgICBleWVCbGlua1ZhbHVlID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VydmVzLmF0KGMpLmlkID09IHRoaXMuX21vZGVsQ3VydmVJZExpcFN5bmMpIHtcbiAgICAgICAgICBsaXBTeW5jVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsZXQgcGFyYW1ldGVyTW90aW9uQ3VydmVDb3VudCA9IDA7XG5cbiAgICAgIGZvciAoXG4gICAgICAgIDtcbiAgICAgICAgYyA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudCAmJlxuICAgICAgICBjdXJ2ZXMuYXQoYykudHlwZSA9PVxuICAgICAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcmFtZXRlcjtcbiAgICAgICAgKytjXG4gICAgICApIHtcbiAgICAgICAgcGFyYW1ldGVyTW90aW9uQ3VydmVDb3VudCsrO1xuXG4gICAgICAgIC8vIEZpbmQgcGFyYW1ldGVyIGluZGV4LlxuICAgICAgICBwYXJhbWV0ZXJJbmRleCA9IG1vZGVsLmdldFBhcmFtZXRlckluZGV4KGN1cnZlcy5hdChjKS5pZCk7XG5cbiAgICAgICAgLy8gU2tpcCBjdXJ2ZSBldmFsdWF0aW9uIGlmIG5vIHZhbHVlIGluIHNpbmsuXG4gICAgICAgIGlmIChwYXJhbWV0ZXJJbmRleCA9PSAtMSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc291cmNlVmFsdWU6IG51bWJlciA9IG1vZGVsLmdldFBhcmFtZXRlclZhbHVlQnlJbmRleChcbiAgICAgICAgICBwYXJhbWV0ZXJJbmRleFxuICAgICAgICApO1xuXG4gICAgICAgIC8vIEV2YWx1YXRlIGN1cnZlIGFuZCBhcHBseSB2YWx1ZS5cbiAgICAgICAgdmFsdWUgPSBldmFsdWF0ZUN1cnZlKHRoaXMuX21vdGlvbkRhdGEsIGMsIHRpbWUpO1xuXG4gICAgICAgIGlmIChleWVCbGlua1ZhbHVlICE9IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgICAgaSA8IHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmdldFNpemUoKSAmJiBpIDwgTWF4VGFyZ2V0U2l6ZTtcbiAgICAgICAgICAgICsraVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmF0KGkpID09IGN1cnZlcy5hdChjKS5pZCkge1xuICAgICAgICAgICAgICB2YWx1ZSAqPSBleWVCbGlua1ZhbHVlO1xuICAgICAgICAgICAgICBleWVCbGlua0ZsYWdzIHw9IDEgPDwgaTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpcFN5bmNWYWx1ZSAhPSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgIGkgPCB0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzLmdldFNpemUoKSAmJiBpIDwgTWF4VGFyZ2V0U2l6ZTtcbiAgICAgICAgICAgICsraVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMuYXQoaSkgPT0gY3VydmVzLmF0KGMpLmlkKSB7XG4gICAgICAgICAgICAgIHZhbHVlICs9IGxpcFN5bmNWYWx1ZTtcbiAgICAgICAgICAgICAgbGlwU3luY0ZsYWdzIHw9IDEgPDwgaTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHY6IG51bWJlcjtcblxuICAgICAgICAvLyDjg5Hjg6njg6Hjg7zjgr/jgZTjgajjga7jg5Xjgqfjg7zjg4lcbiAgICAgICAgaWYgKGN1cnZlcy5hdChjKS5mYWRlSW5UaW1lIDwgMC4wICYmIGN1cnZlcy5hdChjKS5mYWRlT3V0VGltZSA8IDAuMCkge1xuICAgICAgICAgIC8vIOODouODvOOCt+ODp+ODs+OBruODleOCp+ODvOODieOCkumBqeeUqFxuICAgICAgICAgIHYgPSBzb3VyY2VWYWx1ZSArICh2YWx1ZSAtIHNvdXJjZVZhbHVlKSAqIGZhZGVXZWlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8g44OR44Op44Oh44O844K/44Gr5a++44GX44Gm44OV44Kn44O844OJ44Kk44Oz44GL44OV44Kn44O844OJ44Ki44Km44OI44GM6Kit5a6a44GX44Gm44GC44KL5aC05ZCI44Gv44Gd44Gh44KJ44KS6YGp55SoXG4gICAgICAgICAgbGV0IGZpbjogbnVtYmVyO1xuICAgICAgICAgIGxldCBmb3V0OiBudW1iZXI7XG5cbiAgICAgICAgICBpZiAoY3VydmVzLmF0KGMpLmZhZGVJblRpbWUgPCAwLjApIHtcbiAgICAgICAgICAgIGZpbiA9IHRtcEZhZGVJbjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmluID1cbiAgICAgICAgICAgICAgY3VydmVzLmF0KGMpLmZhZGVJblRpbWUgPT0gMC4wXG4gICAgICAgICAgICAgICAgPyAxLjBcbiAgICAgICAgICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZShcbiAgICAgICAgICAgICAgICAgICAgKHVzZXJUaW1lU2Vjb25kcyAtIG1vdGlvblF1ZXVlRW50cnkuZ2V0RmFkZUluU3RhcnRUaW1lKCkpIC9cbiAgICAgICAgICAgICAgICAgICAgICBjdXJ2ZXMuYXQoYykuZmFkZUluVGltZVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3VydmVzLmF0KGMpLmZhZGVPdXRUaW1lIDwgMC4wKSB7XG4gICAgICAgICAgICBmb3V0ID0gdG1wRmFkZU91dDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm91dCA9XG4gICAgICAgICAgICAgIGN1cnZlcy5hdChjKS5mYWRlT3V0VGltZSA9PSAwLjAgfHxcbiAgICAgICAgICAgICAgbW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPCAwLjBcbiAgICAgICAgICAgICAgICA/IDEuMFxuICAgICAgICAgICAgICAgIDogQ3ViaXNtTWF0aC5nZXRFYXNpbmdTaW5lKFxuICAgICAgICAgICAgICAgICAgICAobW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgLSB1c2VyVGltZVNlY29uZHMpIC9cbiAgICAgICAgICAgICAgICAgICAgICBjdXJ2ZXMuYXQoYykuZmFkZU91dFRpbWVcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgcGFyYW1XZWlnaHQ6IG51bWJlciA9IHRoaXMuX3dlaWdodCAqIGZpbiAqIGZvdXQ7XG5cbiAgICAgICAgICAvLyDjg5Hjg6njg6Hjg7zjgr/jgZTjgajjga7jg5Xjgqfjg7zjg4njgpLpgannlKhcbiAgICAgICAgICB2ID0gc291cmNlVmFsdWUgKyAodmFsdWUgLSBzb3VyY2VWYWx1ZSkgKiBwYXJhbVdlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbWV0ZXJJbmRleCwgdiwgMS4wKTtcbiAgICAgIH1cblxuICAgICAge1xuICAgICAgICBpZiAoZXllQmxpbmtWYWx1ZSAhPSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgIGkgPCB0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcy5nZXRTaXplKCkgJiYgaSA8IE1heFRhcmdldFNpemU7XG4gICAgICAgICAgICArK2lcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZVZhbHVlOiBudW1iZXIgPSBtb2RlbC5nZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICAgICAgICAgIHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmF0KGkpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyDjg6Ljg7zjgrfjg6fjg7Pjgafjga7kuIrmm7jjgY3jgYzjgYLjgaPjgZ/mmYLjgavjga/jgb7jgbDjgZ/jgY3jga/pgannlKjjgZfjgarjgYRcbiAgICAgICAgICAgIGlmICgoZXllQmxpbmtGbGFncyA+PiBpKSAmIDB4MDEpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHY6IG51bWJlciA9XG4gICAgICAgICAgICAgIHNvdXJjZVZhbHVlICsgKGV5ZUJsaW5rVmFsdWUgLSBzb3VyY2VWYWx1ZSkgKiBmYWRlV2VpZ2h0O1xuXG4gICAgICAgICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQodGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMuYXQoaSksIHYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXBTeW5jVmFsdWUgIT0gTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgICBpIDwgdGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5nZXRTaXplKCkgJiYgaSA8IE1heFRhcmdldFNpemU7XG4gICAgICAgICAgICArK2lcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZVZhbHVlOiBudW1iZXIgPSBtb2RlbC5nZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICAgICAgICAgIHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMuYXQoaSlcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIC8vIOODouODvOOCt+ODp+ODs+OBp+OBruS4iuabuOOBjeOBjOOBguOBo+OBn+aZguOBq+OBr+ODquODg+ODl+OCt+ODs+OCr+OBr+mBqeeUqOOBl+OBquOBhFxuICAgICAgICAgICAgaWYgKChsaXBTeW5jRmxhZ3MgPj4gaSkgJiAweDAxKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB2OiBudW1iZXIgPVxuICAgICAgICAgICAgICBzb3VyY2VWYWx1ZSArIChsaXBTeW5jVmFsdWUgLSBzb3VyY2VWYWx1ZSkgKiBmYWRlV2VpZ2h0O1xuXG4gICAgICAgICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQodGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5hdChpKSwgdik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAoXG4gICAgICAgIDtcbiAgICAgICAgYyA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudCAmJlxuICAgICAgICBjdXJ2ZXMuYXQoYykudHlwZSA9PVxuICAgICAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcnRPcGFjaXR5O1xuICAgICAgICArK2NcbiAgICAgICkge1xuICAgICAgICAvLyBGaW5kIHBhcmFtZXRlciBpbmRleC5cbiAgICAgICAgcGFyYW1ldGVySW5kZXggPSBtb2RlbC5nZXRQYXJhbWV0ZXJJbmRleChjdXJ2ZXMuYXQoYykuaWQpO1xuXG4gICAgICAgIC8vIFNraXAgY3VydmUgZXZhbHVhdGlvbiBpZiBubyB2YWx1ZSBpbiBzaW5rLlxuICAgICAgICBpZiAocGFyYW1ldGVySW5kZXggPT0gLTEpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEV2YWx1YXRlIGN1cnZlIGFuZCBhcHBseSB2YWx1ZS5cbiAgICAgICAgdmFsdWUgPSBldmFsdWF0ZUN1cnZlKHRoaXMuX21vdGlvbkRhdGEsIGMsIHRpbWUpO1xuXG4gICAgICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbWV0ZXJJbmRleCwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGltZU9mZnNldFNlY29uZHMgPj0gdGhpcy5fbW90aW9uRGF0YS5kdXJhdGlvbikge1xuICAgICAgICBpZiAodGhpcy5faXNMb29wKSB7XG4gICAgICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRTdGFydFRpbWUodXNlclRpbWVTZWNvbmRzKTsgLy8g5pyA5Yid44Gu54q25oWL44G4XG4gICAgICAgICAgaWYgKHRoaXMuX2lzTG9vcEZhZGVJbikge1xuICAgICAgICAgICAgLy8g44Or44O844OX5YaF44Gn44Or44O844OX55So44OV44Kn44O844OJ44Kk44Oz44GM5pyJ5Yq544Gu5pmC44Gv44CB44OV44Kn44O844OJ44Kk44Oz6Kit5a6a44GX55u044GXXG4gICAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldEZhZGVJblN0YXJ0VGltZSh1c2VyVGltZVNlY29uZHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodGhpcy5fb25GaW5pc2hlZE1vdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fb25GaW5pc2hlZE1vdGlvbih0aGlzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldElzRmluaXNoZWQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuX2xhc3RXZWlnaHQgPSBmYWRlV2VpZ2h0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODq+ODvOODl+aDheWgseOBruioreWumlxuICAgICAqIEBwYXJhbSBsb29wIOODq+ODvOODl+aDheWgsVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRJc0xvb3AobG9vcDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgdGhpcy5faXNMb29wID0gbG9vcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6vjg7zjg5fmg4XloLHjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIHRydWUg44Or44O844OX44GZ44KLXG4gICAgICogQHJldHVybiBmYWxzZSDjg6vjg7zjg5fjgZfjgarjgYRcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNMb29wKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMuX2lzTG9vcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6vjg7zjg5fmmYLjga7jg5Xjgqfjg7zjg4njgqTjg7Pmg4XloLHjga7oqK3lrppcbiAgICAgKiBAcGFyYW0gbG9vcEZhZGVJbiAg44Or44O844OX5pmC44Gu44OV44Kn44O844OJ44Kk44Oz5oOF5aCxXG4gICAgICovXG4gICAgcHVibGljIHNldElzTG9vcEZhZGVJbihsb29wRmFkZUluOiBib29sZWFuKTogdm9pZCB7XG4gICAgICB0aGlzLl9pc0xvb3BGYWRlSW4gPSBsb29wRmFkZUluO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODq+ODvOODl+aZguOBruODleOCp+ODvOODieOCpOODs+aDheWgseOBruWPluW+l1xuICAgICAqXG4gICAgICogQHJldHVybiAgdHJ1ZSAgICDjgZnjgotcbiAgICAgKiBAcmV0dXJuICBmYWxzZSAgIOOBl+OBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBpc0xvb3BGYWRlSW4oKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdGhpcy5faXNMb29wRmFkZUluO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OBrumVt+OBleOCkuWPluW+l+OBmeOCi+OAglxuICAgICAqXG4gICAgICogQHJldHVybiAg44Oi44O844K344On44Oz44Gu6ZW344GVW+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RHVyYXRpb24oKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9pc0xvb3AgPyAtMS4wIDogdGhpcy5fbG9vcER1cmF0aW9uU2Vjb25kcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jg6vjg7zjg5fmmYLjga7plbfjgZXjgpLlj5blvpfjgZnjgovjgIJcbiAgICAgKlxuICAgICAqIEByZXR1cm4gIOODouODvOOCt+ODp+ODs+OBruODq+ODvOODl+aZguOBrumVt+OBlVvnp5JdXG4gICAgICovXG4gICAgcHVibGljIGdldExvb3BEdXJhdGlvbigpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2xvb3BEdXJhdGlvblNlY29uZHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OR44Op44Oh44O844K/44Gr5a++44GZ44KL44OV44Kn44O844OJ44Kk44Oz44Gu5pmC6ZaT44KS6Kit5a6a44GZ44KL44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVySWQgICAgIOODkeODqeODoeODvOOCv0lEXG4gICAgICogQHBhcmFtIHZhbHVlICAgICAgICAgICDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRQYXJhbWV0ZXJGYWRlSW5UaW1lKFxuICAgICAgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlLFxuICAgICAgdmFsdWU6IG51bWJlclxuICAgICk6IHZvaWQge1xuICAgICAgY29uc3QgY3VydmVzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+ID0gdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXM7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50OyArK2kpIHtcbiAgICAgICAgaWYgKHBhcmFtZXRlcklkID09IGN1cnZlcy5hdChpKS5pZCkge1xuICAgICAgICAgIGN1cnZlcy5hdChpKS5mYWRlSW5UaW1lID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OR44Op44Oh44O844K/44Gr5a++44GZ44KL44OV44Kn44O844OJ44Ki44Km44OI44Gu5pmC6ZaT44Gu6Kit5a6aXG4gICAgICogQHBhcmFtIHBhcmFtZXRlcklkICAgICDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgICAqIEBwYXJhbSB2YWx1ZSAgICAgICAgICAg44OV44Kn44O844OJ44Ki44Km44OI44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0UGFyYW1ldGVyRmFkZU91dFRpbWUoXG4gICAgICBwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUsXG4gICAgICB2YWx1ZTogbnVtYmVyXG4gICAgKTogdm9pZCB7XG4gICAgICBjb25zdCBjdXJ2ZXM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25DdXJ2ZT4gPSB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcztcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQ7ICsraSkge1xuICAgICAgICBpZiAocGFyYW1ldGVySWQgPT0gY3VydmVzLmF0KGkpLmlkKSB7XG4gICAgICAgICAgY3VydmVzLmF0KGkpLmZhZGVPdXRUaW1lID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OR44Op44Oh44O844K/44Gr5a++44GZ44KL44OV44Kn44O844OJ44Kk44Oz44Gu5pmC6ZaT44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtICAgIHBhcmFtZXRlcklkICAgICDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgICAqIEByZXR1cm4gICDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRQYXJhbWV0ZXJGYWRlSW5UaW1lKHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSk6IG51bWJlciB7XG4gICAgICBjb25zdCBjdXJ2ZXM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25DdXJ2ZT4gPSB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcztcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQ7ICsraSkge1xuICAgICAgICBpZiAocGFyYW1ldGVySWQgPT0gY3VydmVzLmF0KGkpLmlkKSB7XG4gICAgICAgICAgcmV0dXJuIGN1cnZlcy5hdChpKS5mYWRlSW5UaW1lO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Hjg6njg6Hjg7zjgr/jgavlr77jgZnjgovjg5Xjgqfjg7zjg4njgqLjgqbjg4jjga7mmYLplpPjgpLlj5blvpdcbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHBhcmFtZXRlcklkICAgICDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgICAqIEByZXR1cm4gICDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRQYXJhbWV0ZXJGYWRlT3V0VGltZShwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUpOiBudW1iZXIge1xuICAgICAgY29uc3QgY3VydmVzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+ID0gdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXM7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50OyArK2kpIHtcbiAgICAgICAgaWYgKHBhcmFtZXRlcklkID09IGN1cnZlcy5hdChpKS5pZCkge1xuICAgICAgICAgIHJldHVybiBjdXJ2ZXMuYXQoaSkuZmFkZU91dFRpbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOiHquWLleOCqOODleOCp+OCr+ODiOOBjOOBi+OBi+OBo+OBpuOBhOOCi+ODkeODqeODoeODvOOCv0lE44Oq44K544OI44Gu6Kit5a6aXG4gICAgICogQHBhcmFtIGV5ZUJsaW5rUGFyYW1ldGVySWRzICAgIOiHquWLleOBvuOBsOOBn+OBjeOBjOOBi+OBi+OBo+OBpuOBhOOCi+ODkeODqeODoeODvOOCv0lE44Gu44Oq44K544OIXG4gICAgICogQHBhcmFtIGxpcFN5bmNQYXJhbWV0ZXJJZHMgICAgIOODquODg+ODl+OCt+ODs+OCr+OBjOOBi+OBi+OBo+OBpuOBhOOCi+ODkeODqeODoeODvOOCv0lE44Gu44Oq44K544OIXG4gICAgICovXG4gICAgcHVibGljIHNldEVmZmVjdElkcyhcbiAgICAgIGV5ZUJsaW5rUGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+LFxuICAgICAgbGlwU3luY1BhcmFtZXRlcklkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPlxuICAgICk6IHZvaWQge1xuICAgICAgdGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMgPSBleWVCbGlua1BhcmFtZXRlcklkcztcbiAgICAgIHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMgPSBsaXBTeW5jUGFyYW1ldGVySWRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICB0aGlzLl9zb3VyY2VGcmFtZVJhdGUgPSAzMC4wO1xuICAgICAgdGhpcy5fbG9vcER1cmF0aW9uU2Vjb25kcyA9IC0xLjA7XG4gICAgICB0aGlzLl9pc0xvb3AgPSBmYWxzZTsgLy8gdHJ1ZeOBi+OCiSBmYWxzZSDjgbjjg4fjg5Xjgqnjg6vjg4jjgpLlpInmm7RcbiAgICAgIHRoaXMuX2lzTG9vcEZhZGVJbiA9IHRydWU7IC8vIOODq+ODvOODl+aZguOBq+ODleOCp+ODvOODieOCpOODs+OBjOacieWKueOBi+OBqeOBhuOBi+OBruODleODqeOCsFxuICAgICAgdGhpcy5fbGFzdFdlaWdodCA9IDAuMDtcbiAgICAgIHRoaXMuX21vdGlvbkRhdGEgPSBudWxsO1xuICAgICAgdGhpcy5fbW9kZWxDdXJ2ZUlkRXllQmxpbmsgPSBudWxsO1xuICAgICAgdGhpcy5fbW9kZWxDdXJ2ZUlkTGlwU3luYyA9IG51bGw7XG4gICAgICB0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcyA9IG51bGw7XG4gICAgICB0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICAgIHRoaXMuX21vdGlvbkRhdGEgPSB2b2lkIDA7XG4gICAgICB0aGlzLl9tb3Rpb25EYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBtb3Rpb24zLmpzb27jgpLjg5Hjg7zjgrnjgZnjgovjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBtb3Rpb25Kc29uICBtb3Rpb24zLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICAgKiBAcGFyYW0gc2l6ZSAgICAgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAgICovXG4gICAgcHVibGljIHBhcnNlKG1vdGlvbkpzb246IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX21vdGlvbkRhdGEgPSBuZXcgQ3ViaXNtTW90aW9uRGF0YSgpO1xuXG4gICAgICBsZXQganNvbjogQ3ViaXNtTW90aW9uSnNvbiA9IG5ldyBDdWJpc21Nb3Rpb25Kc29uKG1vdGlvbkpzb24sIHNpemUpO1xuXG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLmR1cmF0aW9uID0ganNvbi5nZXRNb3Rpb25EdXJhdGlvbigpO1xuICAgICAgdGhpcy5fbW90aW9uRGF0YS5sb29wID0ganNvbi5pc01vdGlvbkxvb3AoKTtcbiAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudCA9IGpzb24uZ2V0TW90aW9uQ3VydmVDb3VudCgpO1xuICAgICAgdGhpcy5fbW90aW9uRGF0YS5mcHMgPSBqc29uLmdldE1vdGlvbkZwcygpO1xuICAgICAgdGhpcy5fbW90aW9uRGF0YS5ldmVudENvdW50ID0ganNvbi5nZXRFdmVudENvdW50KCk7XG5cbiAgICAgIGlmIChqc29uLmlzRXhpc3RNb3Rpb25GYWRlSW5UaW1lKCkpIHtcbiAgICAgICAgdGhpcy5fZmFkZUluU2Vjb25kcyA9XG4gICAgICAgICAganNvbi5nZXRNb3Rpb25GYWRlSW5UaW1lKCkgPCAwLjAgPyAxLjAgOiBqc29uLmdldE1vdGlvbkZhZGVJblRpbWUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2ZhZGVJblNlY29uZHMgPSAxLjA7XG4gICAgICB9XG5cbiAgICAgIGlmIChqc29uLmlzRXhpc3RNb3Rpb25GYWRlT3V0VGltZSgpKSB7XG4gICAgICAgIHRoaXMuX2ZhZGVPdXRTZWNvbmRzID1cbiAgICAgICAgICBqc29uLmdldE1vdGlvbkZhZGVPdXRUaW1lKCkgPCAwLjAgPyAxLjAgOiBqc29uLmdldE1vdGlvbkZhZGVPdXRUaW1lKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9IDEuMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMudXBkYXRlU2l6ZShcbiAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50LFxuICAgICAgICBDdWJpc21Nb3Rpb25DdXJ2ZSxcbiAgICAgICAgdHJ1ZVxuICAgICAgKTtcbiAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMudXBkYXRlU2l6ZShcbiAgICAgICAganNvbi5nZXRNb3Rpb25Ub3RhbFNlZ21lbnRDb3VudCgpLFxuICAgICAgICBDdWJpc21Nb3Rpb25TZWdtZW50LFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMudXBkYXRlU2l6ZShcbiAgICAgICAganNvbi5nZXRNb3Rpb25Ub3RhbFBvaW50Q291bnQoKSxcbiAgICAgICAgQ3ViaXNtTW90aW9uUG9pbnQsXG4gICAgICAgIHRydWVcbiAgICAgICk7XG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50cy51cGRhdGVTaXplKFxuICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50Q291bnQsXG4gICAgICAgIEN1YmlzbU1vdGlvbkV2ZW50LFxuICAgICAgICB0cnVlXG4gICAgICApO1xuXG4gICAgICBsZXQgdG90YWxQb2ludENvdW50ID0gMDtcbiAgICAgIGxldCB0b3RhbFNlZ21lbnRDb3VudCA9IDA7XG5cbiAgICAgIC8vIEN1cnZlc1xuICAgICAgZm9yIChcbiAgICAgICAgbGV0IGN1cnZlQ291bnQgPSAwO1xuICAgICAgICBjdXJ2ZUNvdW50IDwgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50O1xuICAgICAgICArK2N1cnZlQ291bnRcbiAgICAgICkge1xuICAgICAgICBpZiAoanNvbi5nZXRNb3Rpb25DdXJ2ZVRhcmdldChjdXJ2ZUNvdW50KSA9PSBUYXJnZXROYW1lTW9kZWwpIHtcbiAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChjdXJ2ZUNvdW50KS50eXBlID1cbiAgICAgICAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X01vZGVsO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGpzb24uZ2V0TW90aW9uQ3VydmVUYXJnZXQoY3VydmVDb3VudCkgPT0gVGFyZ2V0TmFtZVBhcmFtZXRlclxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChjdXJ2ZUNvdW50KS50eXBlID1cbiAgICAgICAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcmFtZXRlcjtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBqc29uLmdldE1vdGlvbkN1cnZlVGFyZ2V0KGN1cnZlQ291bnQpID09IFRhcmdldE5hbWVQYXJ0T3BhY2l0eVxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChjdXJ2ZUNvdW50KS50eXBlID1cbiAgICAgICAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcnRPcGFjaXR5O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoY3VydmVDb3VudCkuaWQgPSBqc29uLmdldE1vdGlvbkN1cnZlSWQoXG4gICAgICAgICAgY3VydmVDb3VudFxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KFxuICAgICAgICAgIGN1cnZlQ291bnRcbiAgICAgICAgKS5iYXNlU2VnbWVudEluZGV4ID0gdG90YWxTZWdtZW50Q291bnQ7XG5cbiAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoXG4gICAgICAgICAgY3VydmVDb3VudFxuICAgICAgICApLmZhZGVJblRpbWUgPSBqc29uLmlzRXhpc3RNb3Rpb25DdXJ2ZUZhZGVJblRpbWUoY3VydmVDb3VudClcbiAgICAgICAgICA/IGpzb24uZ2V0TW90aW9uQ3VydmVGYWRlSW5UaW1lKGN1cnZlQ291bnQpXG4gICAgICAgICAgOiAtMS4wO1xuICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChcbiAgICAgICAgICBjdXJ2ZUNvdW50XG4gICAgICAgICkuZmFkZU91dFRpbWUgPSBqc29uLmlzRXhpc3RNb3Rpb25DdXJ2ZUZhZGVPdXRUaW1lKGN1cnZlQ291bnQpXG4gICAgICAgICAgPyBqc29uLmdldE1vdGlvbkN1cnZlRmFkZU91dFRpbWUoY3VydmVDb3VudClcbiAgICAgICAgICA6IC0xLjA7XG5cbiAgICAgICAgLy8gU2VnbWVudHNcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBsZXQgc2VnbWVudFBvc2l0aW9uID0gMDtcbiAgICAgICAgICBzZWdtZW50UG9zaXRpb24gPCBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudENvdW50KGN1cnZlQ291bnQpO1xuXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChzZWdtZW50UG9zaXRpb24gPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdChcbiAgICAgICAgICAgICAgdG90YWxTZWdtZW50Q291bnRcbiAgICAgICAgICAgICkuYmFzZVBvaW50SW5kZXggPSB0b3RhbFBvaW50Q291bnQ7XG5cbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxuICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnRcbiAgICAgICAgICAgICkudGltZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KGN1cnZlQ291bnQsIHNlZ21lbnRQb3NpdGlvbik7XG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcbiAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50XG4gICAgICAgICAgICApLnZhbHVlID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXG4gICAgICAgICAgICAgIGN1cnZlQ291bnQsXG4gICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDFcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArPSAxO1xuICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICs9IDI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQodG90YWxTZWdtZW50Q291bnQpLmJhc2VQb2ludEluZGV4ID1cbiAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50IC0gMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBzZWdtZW50OiBudW1iZXIgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcbiAgICAgICAgICAgIGN1cnZlQ291bnQsXG4gICAgICAgICAgICBzZWdtZW50UG9zaXRpb25cbiAgICAgICAgICApO1xuICAgICAgICAgIHN3aXRjaCAoc2VnbWVudCkge1xuICAgICAgICAgICAgY2FzZSBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9MaW5lYXI6IHtcbiAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuc2VnbWVudFR5cGUgPVxuICAgICAgICAgICAgICAgIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0xpbmVhcjtcbiAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdChcbiAgICAgICAgICAgICAgICB0b3RhbFNlZ21lbnRDb3VudFxuICAgICAgICAgICAgICApLmV2YWx1YXRlID0gbGluZWFyRXZhbHVhdGU7XG5cbiAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQoXG4gICAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50XG4gICAgICAgICAgICAgICkudGltZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxuICAgICAgICAgICAgICAgIGN1cnZlQ291bnQsXG4gICAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgMVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcbiAgICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnRcbiAgICAgICAgICAgICAgKS52YWx1ZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxuICAgICAgICAgICAgICAgIGN1cnZlQ291bnQsXG4gICAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgMlxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArPSAxO1xuICAgICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKz0gMztcblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfQmV6aWVyOiB7XG4gICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQodG90YWxTZWdtZW50Q291bnQpLnNlZ21lbnRUeXBlID1cbiAgICAgICAgICAgICAgICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9CZXppZXI7XG4gICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQoXG4gICAgICAgICAgICAgICAgdG90YWxTZWdtZW50Q291bnRcbiAgICAgICAgICAgICAgKS5ldmFsdWF0ZSA9IGJlemllckV2YWx1YXRlO1xuXG4gICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxuICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudFxuICAgICAgICAgICAgICApLnRpbWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcbiAgICAgICAgICAgICAgICBjdXJ2ZUNvdW50LFxuICAgICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDFcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQoXG4gICAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50XG4gICAgICAgICAgICAgICkudmFsdWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcbiAgICAgICAgICAgICAgICBjdXJ2ZUNvdW50LFxuICAgICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDJcbiAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcbiAgICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgKyAxXG4gICAgICAgICAgICAgICkudGltZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxuICAgICAgICAgICAgICAgIGN1cnZlQ291bnQsXG4gICAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgM1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcbiAgICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgKyAxXG4gICAgICAgICAgICAgICkudmFsdWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcbiAgICAgICAgICAgICAgICBjdXJ2ZUNvdW50LFxuICAgICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDRcbiAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcbiAgICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgKyAyXG4gICAgICAgICAgICAgICkudGltZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxuICAgICAgICAgICAgICAgIGN1cnZlQ291bnQsXG4gICAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgNVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcbiAgICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgKyAyXG4gICAgICAgICAgICAgICkudmFsdWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcbiAgICAgICAgICAgICAgICBjdXJ2ZUNvdW50LFxuICAgICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDZcbiAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgKz0gMztcbiAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICs9IDc7XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhc2UgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfU3RlcHBlZDoge1xuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5zZWdtZW50VHlwZSA9XG4gICAgICAgICAgICAgICAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfU3RlcHBlZDtcbiAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdChcbiAgICAgICAgICAgICAgICB0b3RhbFNlZ21lbnRDb3VudFxuICAgICAgICAgICAgICApLmV2YWx1YXRlID0gc3RlcHBlZEV2YWx1YXRlO1xuXG4gICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxuICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudFxuICAgICAgICAgICAgICApLnRpbWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcbiAgICAgICAgICAgICAgICBjdXJ2ZUNvdW50LFxuICAgICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDFcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQoXG4gICAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50XG4gICAgICAgICAgICAgICkudmFsdWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcbiAgICAgICAgICAgICAgICBjdXJ2ZUNvdW50LFxuICAgICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDJcbiAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgKz0gMTtcbiAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICs9IDM7XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhc2UgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfSW52ZXJzZVN0ZXBwZWQ6IHtcbiAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuc2VnbWVudFR5cGUgPVxuICAgICAgICAgICAgICAgIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0ludmVyc2VTdGVwcGVkO1xuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KFxuICAgICAgICAgICAgICAgIHRvdGFsU2VnbWVudENvdW50XG4gICAgICAgICAgICAgICkuZXZhbHVhdGUgPSBpbnZlcnNlU3RlcHBlZEV2YWx1YXRlO1xuXG4gICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxuICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudFxuICAgICAgICAgICAgICApLnRpbWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcbiAgICAgICAgICAgICAgICBjdXJ2ZUNvdW50LFxuICAgICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDFcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQoXG4gICAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50XG4gICAgICAgICAgICAgICkudmFsdWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcbiAgICAgICAgICAgICAgICBjdXJ2ZUNvdW50LFxuICAgICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDJcbiAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgKz0gMTtcbiAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICs9IDM7XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgIENTTV9BU1NFUlQoMCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgICsrdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoY3VydmVDb3VudCkuc2VnbWVudENvdW50O1xuICAgICAgICAgICsrdG90YWxTZWdtZW50Q291bnQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yIChcbiAgICAgICAgbGV0IHVzZXJkYXRhY291bnQgPSAwO1xuICAgICAgICB1c2VyZGF0YWNvdW50IDwganNvbi5nZXRFdmVudENvdW50KCk7XG4gICAgICAgICsrdXNlcmRhdGFjb3VudFxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuX21vdGlvbkRhdGEuZXZlbnRzLmF0KHVzZXJkYXRhY291bnQpLmZpcmVUaW1lID0ganNvbi5nZXRFdmVudFRpbWUoXG4gICAgICAgICAgdXNlcmRhdGFjb3VudFxuICAgICAgICApO1xuICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50cy5hdCh1c2VyZGF0YWNvdW50KS52YWx1ZSA9IGpzb24uZ2V0RXZlbnRWYWx1ZShcbiAgICAgICAgICB1c2VyZGF0YWNvdW50XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGpzb24ucmVsZWFzZSgpO1xuICAgICAganNvbiA9IHZvaWQgMDtcbiAgICAgIGpzb24gPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODh+ODq+OBruODkeODqeODoeODvOOCv+abtOaWsFxuICAgICAqXG4gICAgICog44Kk44OZ44Oz44OI55m654Gr44Gu44OB44Kn44OD44Kv44CCXG4gICAgICog5YWl5Yqb44GZ44KL5pmC6ZaT44Gv5ZG844Gw44KM44KL44Oi44O844K344On44Oz44K/44Kk44Of44Oz44Kw44KS77yQ44Go44GX44Gf56eS5pWw44Gn6KGM44GG44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYmVmb3JlQ2hlY2tUaW1lU2Vjb25kcyAgIOWJjeWbnuOBruOCpOODmeODs+ODiOODgeOCp+ODg+OCr+aZgumWk1vnp5JdXG4gICAgICogQHBhcmFtIG1vdGlvblRpbWVTZWNvbmRzICAgICAgICDku4rlm57jga7lho3nlJ/mmYLplpNb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRGaXJlZEV2ZW50KFxuICAgICAgYmVmb3JlQ2hlY2tUaW1lU2Vjb25kczogbnVtYmVyLFxuICAgICAgbW90aW9uVGltZVNlY29uZHM6IG51bWJlclxuICAgICk6IGNzbVZlY3Rvcjxjc21TdHJpbmc+IHtcbiAgICAgIHRoaXMuX2ZpcmVkRXZlbnRWYWx1ZXMudXBkYXRlU2l6ZSgwKTtcblxuICAgICAgLy8g44Kk44OZ44Oz44OI44Gu55m654Gr44OB44Kn44OD44KvXG4gICAgICBmb3IgKGxldCB1ID0gMDsgdSA8IHRoaXMuX21vdGlvbkRhdGEuZXZlbnRDb3VudDsgKyt1KSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50cy5hdCh1KS5maXJlVGltZSA+IGJlZm9yZUNoZWNrVGltZVNlY29uZHMgJiZcbiAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50cy5hdCh1KS5maXJlVGltZSA8PSBtb3Rpb25UaW1lU2Vjb25kc1xuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLl9maXJlZEV2ZW50VmFsdWVzLnB1c2hCYWNrKFxuICAgICAgICAgICAgbmV3IGNzbVN0cmluZyh0aGlzLl9tb3Rpb25EYXRhLmV2ZW50cy5hdCh1KS52YWx1ZS5zKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2ZpcmVkRXZlbnRWYWx1ZXM7XG4gICAgfVxuXG4gICAgcHVibGljIF9zb3VyY2VGcmFtZVJhdGU6IG51bWJlcjsgLy8g44Ot44O844OJ44GX44Gf44OV44Kh44Kk44Or44GuRlBT44CC6KiY6L+w44GM54Sh44GR44KM44Gw44OH44OV44Kp44Or44OI5YCkMTVmcHPjgajjgarjgotcbiAgICBwdWJsaWMgX2xvb3BEdXJhdGlvblNlY29uZHM6IG51bWJlcjsgLy8gbXRu44OV44Kh44Kk44Or44Gn5a6a576p44GV44KM44KL5LiA6YCj44Gu44Oi44O844K344On44Oz44Gu6ZW344GVXG4gICAgcHVibGljIF9pc0xvb3A6IGJvb2xlYW47IC8vIOODq+ODvOODl+OBmeOCi+OBiz9cbiAgICBwdWJsaWMgX2lzTG9vcEZhZGVJbjogYm9vbGVhbjsgLy8g44Or44O844OX5pmC44Gr44OV44Kn44O844OJ44Kk44Oz44GM5pyJ5Yq544GL44Gp44GG44GL44Gu44OV44Op44Kw44CC5Yid5pyf5YCk44Gn44Gv5pyJ5Yq544CCXG4gICAgcHVibGljIF9sYXN0V2VpZ2h0OiBudW1iZXI7IC8vIOacgOW+jOOBq+ioreWumuOBleOCjOOBn+mHjeOBv1xuXG4gICAgcHVibGljIF9tb3Rpb25EYXRhOiBDdWJpc21Nb3Rpb25EYXRhOyAvLyDlrp/pmpvjga7jg6Ljg7zjgrfjg6fjg7Pjg4fjg7zjgr/mnKzkvZNcblxuICAgIHB1YmxpYyBfZXllQmxpbmtQYXJhbWV0ZXJJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT47IC8vIOiHquWLleOBvuOBsOOBn+OBjeOCkumBqeeUqOOBmeOCi+ODkeODqeODoeODvOOCv0lE44OP44Oz44OJ44Or44Gu44Oq44K544OI44CCICDjg6Ljg4fjg6vvvIjjg6Ljg4fjg6vjgrvjg4Pjg4bjgqPjg7PjgrDvvInjgajjg5Hjg6njg6Hjg7zjgr/jgpLlr77lv5zku5jjgZHjgovjgIJcbiAgICBwdWJsaWMgX2xpcFN5bmNQYXJhbWV0ZXJJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT47IC8vIOODquODg+ODl+OCt+ODs+OCr+OCkumBqeeUqOOBmeOCi+ODkeODqeODoeODvOOCv0lE44OP44Oz44OJ44Or44Gu44Oq44K544OI44CCICDjg6Ljg4fjg6vvvIjjg6Ljg4fjg6vjgrvjg4Pjg4bjgqPjg7PjgrDvvInjgajjg5Hjg6njg6Hjg7zjgr/jgpLlr77lv5zku5jjgZHjgovjgIJcblxuICAgIHB1YmxpYyBfbW9kZWxDdXJ2ZUlkRXllQmxpbms6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg6Ljg4fjg6vjgYzmjIHjgaToh6rli5Xjgb7jgbDjgZ/jgY3nlKjjg5Hjg6njg6Hjg7zjgr9JROOBruODj+ODs+ODieODq+OAgiAg44Oi44OH44Or44Go44Oi44O844K344On44Oz44KS5a++5b+c5LuY44GR44KL44CCXG4gICAgcHVibGljIF9tb2RlbEN1cnZlSWRMaXBTeW5jOiBDdWJpc21JZEhhbmRsZTsgLy8g44Oi44OH44Or44GM5oyB44Gk44Oq44OD44OX44K344Oz44Kv55So44OR44Op44Oh44O844K/SUTjga7jg4/jg7Pjg4njg6vjgIIgIOODouODh+ODq+OBqOODouODvOOCt+ODp+ODs+OCkuWvvuW/nOS7mOOBkeOCi+OAglxuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtanNvbiB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWpzb24nO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3Ntc3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xuaW1wb3J0IGNzbVN0cmluZyA9IGNzbXN0cmluZy5jc21TdHJpbmc7XG5pbXBvcnQgQ3ViaXNtRnJhbWV3b3JrID0gY3ViaXNtZnJhbWV3b3JrLkN1YmlzbUZyYW1ld29yaztcbmltcG9ydCBDdWJpc21JZEhhbmRsZSA9IGN1YmlzbWlkLkN1YmlzbUlkSGFuZGxlO1xuaW1wb3J0IEN1YmlzbUpzb24gPSBjdWJpc21qc29uLkN1YmlzbUpzb247XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgLy8gSlNPTiBrZXlzXG4gIGNvbnN0IE1ldGEgPSAnTWV0YSc7XG4gIGNvbnN0IER1cmF0aW9uID0gJ0R1cmF0aW9uJztcbiAgY29uc3QgTG9vcCA9ICdMb29wJztcbiAgY29uc3QgQ3VydmVDb3VudCA9ICdDdXJ2ZUNvdW50JztcbiAgY29uc3QgRnBzID0gJ0Zwcyc7XG4gIGNvbnN0IFRvdGFsU2VnbWVudENvdW50ID0gJ1RvdGFsU2VnbWVudENvdW50JztcbiAgY29uc3QgVG90YWxQb2ludENvdW50ID0gJ1RvdGFsUG9pbnRDb3VudCc7XG4gIGNvbnN0IEN1cnZlcyA9ICdDdXJ2ZXMnO1xuICBjb25zdCBUYXJnZXQgPSAnVGFyZ2V0JztcbiAgY29uc3QgSWQgPSAnSWQnO1xuICBjb25zdCBGYWRlSW5UaW1lID0gJ0ZhZGVJblRpbWUnO1xuICBjb25zdCBGYWRlT3V0VGltZSA9ICdGYWRlT3V0VGltZSc7XG4gIGNvbnN0IFNlZ21lbnRzID0gJ1NlZ21lbnRzJztcbiAgY29uc3QgVXNlckRhdGEgPSAnVXNlckRhdGEnO1xuICBjb25zdCBVc2VyRGF0YUNvdW50ID0gJ1VzZXJEYXRhQ291bnQnO1xuICBjb25zdCBUb3RhbFVzZXJEYXRhU2l6ZSA9ICdUb3RhbFVzZXJEYXRhU2l6ZSc7XG4gIGNvbnN0IFRpbWUgPSAnVGltZSc7XG4gIGNvbnN0IFZhbHVlID0gJ1ZhbHVlJztcblxuICAvKipcbiAgICogbW90aW9uMy5qc29u44Gu44Kz44Oz44OG44OK44CCXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uSnNvbiB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICogQHBhcmFtIGJ1ZmZlciBtb3Rpb24zLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKSB7XG4gICAgICB0aGlzLl9qc29uID0gQ3ViaXNtSnNvbi5jcmVhdGUoYnVmZmVyLCBzaXplKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICAgIEN1YmlzbUpzb24uZGVsZXRlKHRoaXMuX2pzb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OBrumVt+OBleOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Gu6ZW344GVW+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TW90aW9uRHVyYXRpb24oKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRHVyYXRpb24pXG4gICAgICAgIC50b0Zsb2F0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gu44Or44O844OX5oOF5aCx44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiB0cnVlIOODq+ODvOODl+OBmeOCi1xuICAgICAqIEByZXR1cm4gZmFsc2Ug44Or44O844OX44GX44Gq44GEXG4gICAgICovXG4gICAgcHVibGljIGlzTW90aW9uTG9vcCgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTG9vcClcbiAgICAgICAgLnRvQm9vbGVhbigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruWAi+aVsOOBruWPluW+l1xuICAgICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kr44O844OW44Gu5YCL5pWwXG4gICAgICovXG4gICAgcHVibGljIGdldE1vdGlvbkN1cnZlQ291bnQoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQ3VydmVDb3VudClcbiAgICAgICAgLnRvSW50KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gu44OV44Os44O844Og44Os44O844OI44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDjg5Xjg6zjg7zjg6Djg6zjg7zjg4hbRlBTXVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNb3Rpb25GcHMoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRnBzKVxuICAgICAgICAudG9GbG9hdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OBruOCu+OCsOODoeODs+ODiOOBrue3j+WQiOioiOOBruWPluW+l1xuICAgICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Gu44K744Kw44Oh44Oz44OI44Gu5Y+W5b6XXG4gICAgICovXG4gICAgcHVibGljIGdldE1vdGlvblRvdGFsU2VnbWVudENvdW50KCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRvdGFsU2VnbWVudENvdW50KVxuICAgICAgICAudG9JbnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7liLblvqHlupfjga7nt4/lkIjoqIjjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruWItuW+oeeCueOBrue3j+WQiOioiFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNb3Rpb25Ub3RhbFBvaW50Q291bnQoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVG90YWxQb2ludENvdW50KVxuICAgICAgICAudG9JbnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jg5Xjgqfjg7zjg4njgqTjg7PmmYLplpPjga7lrZjlnKhcbiAgICAgKiBAcmV0dXJuIHRydWUg5a2Y5Zyo44GZ44KLXG4gICAgICogQHJldHVybiBmYWxzZSDlrZjlnKjjgZfjgarjgYRcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNFeGlzdE1vdGlvbkZhZGVJblRpbWUoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gIXRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlSW5UaW1lKVxuICAgICAgICAuaXNOdWxsKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gu44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaT44Gu5a2Y5ZyoXG4gICAgICogQHJldHVybiB0cnVlIOWtmOWcqOOBmeOCi1xuICAgICAqIEByZXR1cm4gZmFsc2Ug5a2Y5Zyo44GX44Gq44GEXG4gICAgICovXG4gICAgcHVibGljIGlzRXhpc3RNb3Rpb25GYWRlT3V0VGltZSgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiAhdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVPdXRUaW1lKVxuICAgICAgICAuaXNOdWxsKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gu44OV44Kn44O844OJ44Kk44Oz5pmC6ZaT44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqTjg7PmmYLplpNb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNb3Rpb25GYWRlSW5UaW1lKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVJblRpbWUpXG4gICAgICAgIC50b0Zsb2F0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gu44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaT44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqLjgqbjg4jmmYLplpNb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNb3Rpb25GYWRlT3V0VGltZSgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlT3V0VGltZSlcbiAgICAgICAgLnRvRmxvYXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7nqK7poZ7jga7lj5blvpdcbiAgICAgKiBAcGFyYW0gY3VydmVJbmRleCDjgqvjg7zjg5bjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOOCq+ODvOODluOBrueorumhnlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNb3Rpb25DdXJ2ZVRhcmdldChjdXJ2ZUluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZXMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVGFyZ2V0KVxuICAgICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44GuSUTjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gY3VydmVJbmRleCDjgqvjg7zjg5bjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOOCq+ODvOODluOBrklEXG4gICAgICovXG4gICAgcHVibGljIGdldE1vdGlvbkN1cnZlSWQoY3VydmVJbmRleDogbnVtYmVyKTogQ3ViaXNtSWRIYW5kbGUge1xuICAgICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgICAgdGhpcy5fanNvblxuICAgICAgICAgIC5nZXRSb290KClcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZXMpXG4gICAgICAgICAgLmdldFZhbHVlQnlJbmRleChjdXJ2ZUluZGV4KVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElkKVxuICAgICAgICAgIC5nZXRSYXdTdHJpbmcoKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7jg5Xjgqfjg7zjg4njgqTjg7PmmYLplpPjga7lrZjlnKhcbiAgICAgKiBAcGFyYW0gY3VydmVJbmRleCDjgqvjg7zjg5bjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIHRydWUg5a2Y5Zyo44GZ44KLXG4gICAgICogQHJldHVybiBmYWxzZSDlrZjlnKjjgZfjgarjgYRcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNFeGlzdE1vdGlvbkN1cnZlRmFkZUluVGltZShjdXJ2ZUluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiAhdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEN1cnZlcylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChjdXJ2ZUluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlSW5UaW1lKVxuICAgICAgICAuaXNOdWxsKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaT44Gu5a2Y5ZyoXG4gICAgICogQHBhcmFtIGN1cnZlSW5kZXgg44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiB0cnVlIOWtmOWcqOOBmeOCi1xuICAgICAqIEByZXR1cm4gZmFsc2Ug5a2Y5Zyo44GX44Gq44GEXG4gICAgICovXG4gICAgcHVibGljIGlzRXhpc3RNb3Rpb25DdXJ2ZUZhZGVPdXRUaW1lKGN1cnZlSW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuICF0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQ3VydmVzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGN1cnZlSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVPdXRUaW1lKVxuICAgICAgICAuaXNOdWxsKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu44OV44Kn44O844OJ44Kk44Oz5pmC6ZaT44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIGN1cnZlSW5kZXgg44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqTjg7PmmYLplpNb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNb3Rpb25DdXJ2ZUZhZGVJblRpbWUoY3VydmVJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQ3VydmVzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGN1cnZlSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVJblRpbWUpXG4gICAgICAgIC50b0Zsb2F0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaT44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIGN1cnZlSW5kZXgg44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqLjgqbjg4jmmYLplpNb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNb3Rpb25DdXJ2ZUZhZGVPdXRUaW1lKGN1cnZlSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEN1cnZlcylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChjdXJ2ZUluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlT3V0VGltZSlcbiAgICAgICAgLnRvRmxvYXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjga7lgIvmlbDjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcGFyYW0gY3VydmVJbmRleCDjgqvjg7zjg5bjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOBruWAi+aVsFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNb3Rpb25DdXJ2ZVNlZ21lbnRDb3VudChjdXJ2ZUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZXMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoU2VnbWVudHMpXG4gICAgICAgIC5nZXRWZWN0b3IoKVxuICAgICAgICAuZ2V0U2l6ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOBruWApOOBruWPluW+l1xuICAgICAqIEBwYXJhbSBjdXJ2ZUluZGV4IOOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEBwYXJhbSBzZWdtZW50SW5kZXgg44K744Kw44Oh44Oz44OI44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDjgrvjgrDjg6Hjg7Pjg4jjga7lgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxuICAgICAgY3VydmVJbmRleDogbnVtYmVyLFxuICAgICAgc2VnbWVudEluZGV4OiBudW1iZXJcbiAgICApOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZXMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoU2VnbWVudHMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoc2VnbWVudEluZGV4KVxuICAgICAgICAudG9GbG9hdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCpOODmeODs+ODiOOBruWAi+aVsOOBruWPluW+l1xuICAgICAqIEByZXR1cm4g44Kk44OZ44Oz44OI44Gu5YCL5pWwXG4gICAgICovXG4gICAgcHVibGljIGdldEV2ZW50Q291bnQoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVXNlckRhdGFDb3VudClcbiAgICAgICAgLnRvSW50KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIOOCpOODmeODs+ODiOOBrue3j+aWh+Wtl+aVsOOBruWPluW+l1xuICAgICAqIEByZXR1cm4g44Kk44OZ44Oz44OI44Gu57eP5paH5a2X5pWwXG4gICAgICovXG4gICAgcHVibGljIGdldFRvdGFsRXZlbnRWYWx1ZVNpemUoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVG90YWxVc2VyRGF0YVNpemUpXG4gICAgICAgIC50b0ludCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCpOODmeODs+ODiOOBruaZgumWk+OBruWPluW+l1xuICAgICAqIEBwYXJhbSB1c2VyRGF0YUluZGV4IOOCpOODmeODs+ODiOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g44Kk44OZ44Oz44OI44Gu5pmC6ZaTW+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RXZlbnRUaW1lKHVzZXJEYXRhSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHVzZXJEYXRhSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRpbWUpXG4gICAgICAgIC50b0ludCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCpOODmeODs+ODiOOBruWPluW+l1xuICAgICAqIEBwYXJhbSB1c2VyRGF0YUluZGV4IOOCpOODmeODs+ODiOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g44Kk44OZ44Oz44OI44Gu5paH5a2X5YiXXG4gICAgICovXG4gICAgcHVibGljIGdldEV2ZW50VmFsdWUodXNlckRhdGFJbmRleDogbnVtYmVyKTogY3NtU3RyaW5nIHtcbiAgICAgIHJldHVybiBuZXcgY3NtU3RyaW5nKFxuICAgICAgICB0aGlzLl9qc29uXG4gICAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodXNlckRhdGFJbmRleClcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWYWx1ZSlcbiAgICAgICAgICAuZ2V0UmF3U3RyaW5nKClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgX2pzb246IEN1YmlzbUpzb247IC8vIG1vdGlvbjMuanNvbuOBruODh+ODvOOCv1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtaWQgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3Ntc3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCBjc21WZWN0b3IgPSBjc212ZWN0b3IuY3NtVmVjdG9yO1xuaW1wb3J0IGNzbVN0cmluZyA9IGNzbXN0cmluZy5jc21TdHJpbmc7XG5pbXBvcnQgQ3ViaXNtSWRIYW5kbGUgPSBjdWJpc21pZC5DdWJpc21JZEhhbmRsZTtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICogQGJyaWVmIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBrueorumhnlxuICAgKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7nqK7poZ7jgIJcbiAgICovXG4gIGV4cG9ydCBlbnVtIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0IHtcbiAgICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9Nb2RlbCwgLy8g44Oi44OH44Or44Gr5a++44GX44GmXG4gICAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfUGFyYW1ldGVyLCAvLyDjg5Hjg6njg6Hjg7zjgr/jgavlr77jgZfjgaZcbiAgICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9QYXJ0T3BhY2l0eSAvLyDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjgavlr77jgZfjgaZcbiAgfVxuXG4gIC8qKlxuICAgKiBAYnJpZWYg44Oi44O844K344On44Oz44Kr44O844OW44Gu44K744Kw44Oh44Oz44OI44Gu56iu6aGeXG4gICAqXG4gICAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOBrueorumhnuOAglxuICAgKi9cbiAgZXhwb3J0IGVudW0gQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUge1xuICAgIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0xpbmVhciA9IDAsIC8vIOODquODi+OColxuICAgIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0JlemllciA9IDEsIC8vIOODmeOCuOOCp+absue3mlxuICAgIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX1N0ZXBwZWQgPSAyLCAvLyDjgrnjg4bjg4Pjg5dcbiAgICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9JbnZlcnNlU3RlcHBlZCA9IDMgLy8g44Kk44Oz44OQ44O844K544K544OG44OD44OXXG4gIH1cblxuICAvKipcbiAgICogQGJyaWVmIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruWItuW+oeeCuVxuICAgKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7liLblvqHngrnjgIJcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25Qb2ludCB7XG4gICAgdGltZSA9IDAuMDsgLy8g5pmC6ZaTW+enkl1cbiAgICB2YWx1ZSA9IDAuMDsgLy8g5YCkXG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Kr44O844OW44Gu44K744Kw44Oh44Oz44OI44Gu6KmV5L6h6Zai5pWwXG4gICAqXG4gICAqIEBwYXJhbSAgIHBvaW50cyAgICAgIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruWItuW+oeeCueODquOCueODiFxuICAgKiBAcGFyYW0gICB0aW1lICAgICAgICDoqZXkvqHjgZnjgovmmYLplpNb56eSXVxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBjc21Nb3Rpb25TZWdtZW50RXZhbHVhdGlvbkZ1bmN0aW9uIHtcbiAgICAocG9pbnRzOiBDdWJpc21Nb3Rpb25Qb2ludFtdLCB0aW1lOiBudW1iZXIpOiBudW1iZXI7XG4gIH1cblxuICAvKipcbiAgICogQGJyaWVmIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruOCu+OCsOODoeODs+ODiFxuICAgKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjgIJcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25TZWdtZW50IHtcbiAgICAvKipcbiAgICAgKiBAYnJpZWYg44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICpcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr/jgIJcbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICB0aGlzLmV2YWx1YXRlID0gbnVsbDtcbiAgICAgIHRoaXMuYmFzZVBvaW50SW5kZXggPSAwO1xuICAgICAgdGhpcy5zZWdtZW50VHlwZSA9IDA7XG4gICAgfVxuXG4gICAgZXZhbHVhdGU6IGNzbU1vdGlvblNlZ21lbnRFdmFsdWF0aW9uRnVuY3Rpb247IC8vIOS9v+eUqOOBmeOCi+ipleS+oemWouaVsFxuICAgIGJhc2VQb2ludEluZGV4OiBudW1iZXI7IC8vIOacgOWIneOBruOCu+OCsOODoeODs+ODiOOBuOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgIHNlZ21lbnRUeXBlOiBudW1iZXI7IC8vIOOCu+OCsOODoeODs+ODiOOBrueorumhnlxuICB9XG5cbiAgLyoqXG4gICAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5ZcbiAgICpcbiAgICog44Oi44O844K344On44Oz44Kr44O844OW44CCXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uQ3VydmUge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMudHlwZSA9IEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X01vZGVsO1xuICAgICAgdGhpcy5zZWdtZW50Q291bnQgPSAwO1xuICAgICAgdGhpcy5iYXNlU2VnbWVudEluZGV4ID0gMDtcbiAgICAgIHRoaXMuZmFkZUluVGltZSA9IDAuMDtcbiAgICAgIHRoaXMuZmFkZU91dFRpbWUgPSAwLjA7XG4gICAgfVxuXG4gICAgdHlwZTogQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQ7IC8vIOOCq+ODvOODluOBrueorumhnlxuICAgIGlkOiBDdWJpc21JZEhhbmRsZTsgLy8g44Kr44O844OW44GuSURcbiAgICBzZWdtZW50Q291bnQ6IG51bWJlcjsgLy8g44K744Kw44Oh44Oz44OI44Gu5YCL5pWwXG4gICAgYmFzZVNlZ21lbnRJbmRleDogbnVtYmVyOyAvLyDmnIDliJ3jga7jgrvjgrDjg6Hjg7Pjg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICBmYWRlSW5UaW1lOiBudW1iZXI7IC8vIOODleOCp+ODvOODieOCpOODs+OBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gICAgZmFkZU91dFRpbWU6IG51bWJlcjsgLy8g44OV44Kn44O844OJ44Ki44Km44OI44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg5njg7Pjg4jjgIJcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25FdmVudCB7XG4gICAgZmlyZVRpbWUgPSAwLjA7XG4gICAgdmFsdWU6IGNzbVN0cmluZztcbiAgfVxuXG4gIC8qKlxuICAgKiBAYnJpZWYg44Oi44O844K344On44Oz44OH44O844K/XG4gICAqXG4gICAqIOODouODvOOCt+ODp+ODs+ODh+ODvOOCv+OAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvbkRhdGEge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMuZHVyYXRpb24gPSAwLjA7XG4gICAgICB0aGlzLmxvb3AgPSBmYWxzZTtcbiAgICAgIHRoaXMuY3VydmVDb3VudCA9IDA7XG4gICAgICB0aGlzLmV2ZW50Q291bnQgPSAwO1xuICAgICAgdGhpcy5mcHMgPSAwLjA7XG5cbiAgICAgIHRoaXMuY3VydmVzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25DdXJ2ZT4oKTtcbiAgICAgIHRoaXMuc2VnbWVudHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vdGlvblNlZ21lbnQ+KCk7XG4gICAgICB0aGlzLnBvaW50cyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW90aW9uUG9pbnQ+KCk7XG4gICAgICB0aGlzLmV2ZW50cyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW90aW9uRXZlbnQ+KCk7XG4gICAgfVxuXG4gICAgZHVyYXRpb246IG51bWJlcjsgLy8g44Oi44O844K344On44Oz44Gu6ZW344GVW+enkl1cbiAgICBsb29wOiBib29sZWFuOyAvLyDjg6vjg7zjg5fjgZnjgovjgYvjganjgYbjgYtcbiAgICBjdXJ2ZUNvdW50OiBudW1iZXI7IC8vIOOCq+ODvOODluOBruWAi+aVsFxuICAgIGV2ZW50Q291bnQ6IG51bWJlcjsgLy8gVXNlckRhdGHjga7lgIvmlbBcbiAgICBmcHM6IG51bWJlcjsgLy8g44OV44Os44O844Og44Os44O844OIXG4gICAgY3VydmVzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+OyAvLyDjgqvjg7zjg5bjga7jg6rjgrnjg4hcbiAgICBzZWdtZW50czogY3NtVmVjdG9yPEN1YmlzbU1vdGlvblNlZ21lbnQ+OyAvLyDjgrvjgrDjg6Hjg7Pjg4jjga7jg6rjgrnjg4hcbiAgICBwb2ludHM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25Qb2ludD47IC8vIOODneOCpOODs+ODiOOBruODquOCueODiFxuICAgIGV2ZW50czogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkV2ZW50PjsgLy8g44Kk44OZ44Oz44OI44Gu44Oq44K544OIXG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBhY3ViaXNtbW90aW9uIH0gZnJvbSAnLi9hY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21qc29uIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtanNvbic7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtaWQgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtZnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb3Rpb25xdWV1ZWVudHJ5IH0gZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZWVudHJ5JztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgSnNvbkZsb2F0ID0gY3ViaXNtanNvbi5Kc29uRmxvYXQ7XG5pbXBvcnQgY3NtVmVjdG9yID0gY3NtdmVjdG9yLmNzbVZlY3RvcjtcbmltcG9ydCBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gY3ViaXNtbW90aW9ucXVldWVlbnRyeS5DdWJpc21Nb3Rpb25RdWV1ZUVudHJ5O1xuaW1wb3J0IEN1YmlzbU1vZGVsID0gY3ViaXNtbW9kZWwuQ3ViaXNtTW9kZWw7XG5pbXBvcnQgQ3ViaXNtRnJhbWV3b3JrID0gY3ViaXNtZnJhbWV3b3JrLkN1YmlzbUZyYW1ld29yaztcbmltcG9ydCBDdWJpc21JZEhhbmRsZSA9IGN1YmlzbWlkLkN1YmlzbUlkSGFuZGxlO1xuaW1wb3J0IEN1YmlzbUpzb24gPSBjdWJpc21qc29uLkN1YmlzbUpzb247XG5pbXBvcnQgVmFsdWUgPSBjdWJpc21qc29uLlZhbHVlO1xuaW1wb3J0IEFDdWJpc21Nb3Rpb24gPSBhY3ViaXNtbW90aW9uLkFDdWJpc21Nb3Rpb247XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgLy8gZXhwMy5qc29u44Gu44Kt44O844Go44OH44OV44Kp44Or44OIXG4gIGNvbnN0IEV4cHJlc3Npb25LZXlGYWRlSW4gPSAnRmFkZUluVGltZSc7XG4gIGNvbnN0IEV4cHJlc3Npb25LZXlGYWRlT3V0ID0gJ0ZhZGVPdXRUaW1lJztcbiAgY29uc3QgRXhwcmVzc2lvbktleVBhcmFtZXRlcnMgPSAnUGFyYW1ldGVycyc7XG4gIGNvbnN0IEV4cHJlc3Npb25LZXlJZCA9ICdJZCc7XG4gIGNvbnN0IEV4cHJlc3Npb25LZXlWYWx1ZSA9ICdWYWx1ZSc7XG4gIGNvbnN0IEV4cHJlc3Npb25LZXlCbGVuZCA9ICdCbGVuZCc7XG4gIGNvbnN0IEJsZW5kVmFsdWVBZGQgPSAnQWRkJztcbiAgY29uc3QgQmxlbmRWYWx1ZU11bHRpcGx5ID0gJ011bHRpcGx5JztcbiAgY29uc3QgQmxlbmRWYWx1ZU92ZXJ3cml0ZSA9ICdPdmVyd3JpdGUnO1xuICBjb25zdCBEZWZhdWx0RmFkZVRpbWUgPSAxLjA7XG5cbiAgLyoqXG4gICAqIOihqOaDheOBruODouODvOOCt+ODp+ODs1xuICAgKlxuICAgKiDooajmg4Xjga7jg6Ljg7zjgrfjg6fjg7Pjgq/jg6njgrnjgIJcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21FeHByZXNzaW9uTW90aW9uIGV4dGVuZHMgQUN1YmlzbU1vdGlvbiB7XG4gICAgLyoqXG4gICAgICog44Kk44Oz44K544K/44Oz44K544KS5L2c5oiQ44GZ44KL44CCXG4gICAgICogQHBhcmFtIGJ1ZmZlciBleHDjg5XjgqHjgqTjg6vjgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICAgKiBAcmV0dXJuIOS9nOaIkOOBleOCjOOBn+OCpOODs+OCueOCv+ODs+OCuVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKFxuICAgICAgYnVmZmVyOiBBcnJheUJ1ZmZlcixcbiAgICAgIHNpemU6IG51bWJlclxuICAgICk6IEN1YmlzbUV4cHJlc3Npb25Nb3Rpb24ge1xuICAgICAgY29uc3QgZXhwcmVzc2lvbjogQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbiA9IG5ldyBDdWJpc21FeHByZXNzaW9uTW90aW9uKCk7XG5cbiAgICAgIGNvbnN0IGpzb246IEN1YmlzbUpzb24gPSBDdWJpc21Kc29uLmNyZWF0ZShidWZmZXIsIHNpemUpO1xuICAgICAgY29uc3Qgcm9vdDogVmFsdWUgPSBqc29uLmdldFJvb3QoKTtcblxuICAgICAgZXhwcmVzc2lvbi5zZXRGYWRlSW5UaW1lKFxuICAgICAgICByb290LmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleUZhZGVJbikudG9GbG9hdChEZWZhdWx0RmFkZVRpbWUpXG4gICAgICApOyAvLyDjg5Xjgqfjg7zjg4njgqTjg7NcbiAgICAgIGV4cHJlc3Npb24uc2V0RmFkZU91dFRpbWUoXG4gICAgICAgIHJvb3QuZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9uS2V5RmFkZU91dCkudG9GbG9hdChEZWZhdWx0RmFkZVRpbWUpXG4gICAgICApOyAvLyDjg5Xjgqfjg7zjg4njgqLjgqbjg4hcblxuICAgICAgLy8g5ZCE44OR44Op44Oh44O844K/44Gr44Gk44GE44GmXG4gICAgICBjb25zdCBwYXJhbWV0ZXJDb3VudCA9IHJvb3RcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleVBhcmFtZXRlcnMpXG4gICAgICAgIC5nZXRTaXplKCk7XG4gICAgICBleHByZXNzaW9uLl9wYXJhbWV0ZXJzLnByZXBhcmVDYXBhY2l0eShwYXJhbWV0ZXJDb3VudCk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1ldGVyQ291bnQ7ICsraSkge1xuICAgICAgICBjb25zdCBwYXJhbTogVmFsdWUgPSByb290XG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleVBhcmFtZXRlcnMpXG4gICAgICAgICAgLmdldFZhbHVlQnlJbmRleChpKTtcbiAgICAgICAgY29uc3QgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgICAgIHBhcmFtLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleUlkKS5nZXRSYXdTdHJpbmcoKVxuICAgICAgICApOyAvLyDjg5Hjg6njg6Hjg7zjgr9JRFxuXG4gICAgICAgIGNvbnN0IHZhbHVlOiBudW1iZXIgPSBwYXJhbVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlWYWx1ZSlcbiAgICAgICAgICAudG9GbG9hdCgpOyAvLyDlgKRcblxuICAgICAgICAvLyDoqIjnrpfmlrnms5Xjga7oqK3lrppcbiAgICAgICAgbGV0IGJsZW5kVHlwZTogRXhwcmVzc2lvbkJsZW5kVHlwZTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgcGFyYW0uZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9uS2V5QmxlbmQpLmlzTnVsbCgpIHx8XG4gICAgICAgICAgcGFyYW0uZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9uS2V5QmxlbmQpLmdldFN0cmluZygpID09XG4gICAgICAgICAgICBCbGVuZFZhbHVlQWRkXG4gICAgICAgICkge1xuICAgICAgICAgIGJsZW5kVHlwZSA9IEV4cHJlc3Npb25CbGVuZFR5cGUuRXhwcmVzc2lvbkJsZW5kVHlwZV9BZGQ7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgcGFyYW0uZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9uS2V5QmxlbmQpLmdldFN0cmluZygpID09XG4gICAgICAgICAgQmxlbmRWYWx1ZU11bHRpcGx5XG4gICAgICAgICkge1xuICAgICAgICAgIGJsZW5kVHlwZSA9IEV4cHJlc3Npb25CbGVuZFR5cGUuRXhwcmVzc2lvbkJsZW5kVHlwZV9NdWx0aXBseTtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBwYXJhbS5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlCbGVuZCkuZ2V0U3RyaW5nKCkgPT1cbiAgICAgICAgICBCbGVuZFZhbHVlT3ZlcndyaXRlXG4gICAgICAgICkge1xuICAgICAgICAgIGJsZW5kVHlwZSA9IEV4cHJlc3Npb25CbGVuZFR5cGUuRXhwcmVzc2lvbkJsZW5kVHlwZV9PdmVyd3JpdGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8g44Gd44Gu5LuWIOS7leanmOOBq+OBquOBhOWApOOCkuioreWumuOBl+OBn+aZguOBr+WKoOeul+ODouODvOODieOBq+OBmeOCi+OBk+OBqOOBp+W+qeaXp1xuICAgICAgICAgIGJsZW5kVHlwZSA9IEV4cHJlc3Npb25CbGVuZFR5cGUuRXhwcmVzc2lvbkJsZW5kVHlwZV9BZGQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDoqK3lrprjgqrjg5bjgrjjgqfjgq/jg4jjgpLkvZzmiJDjgZfjgabjg6rjgrnjg4jjgavov73liqDjgZnjgotcbiAgICAgICAgY29uc3QgaXRlbTogRXhwcmVzc2lvblBhcmFtZXRlciA9IG5ldyBFeHByZXNzaW9uUGFyYW1ldGVyKCk7XG5cbiAgICAgICAgaXRlbS5wYXJhbWV0ZXJJZCA9IHBhcmFtZXRlcklkO1xuICAgICAgICBpdGVtLmJsZW5kVHlwZSA9IGJsZW5kVHlwZTtcbiAgICAgICAgaXRlbS52YWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgIGV4cHJlc3Npb24uX3BhcmFtZXRlcnMucHVzaEJhY2soaXRlbSk7XG4gICAgICB9XG5cbiAgICAgIEN1YmlzbUpzb24uZGVsZXRlKGpzb24pOyAvLyBKU09O44OH44O844K/44Gv5LiN6KaB44Gr44Gq44Gj44Gf44KJ5YmK6Zmk44GZ44KLXG4gICAgICByZXR1cm4gZXhwcmVzc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr/jga7mm7TmlrDjga7lrp/ooYxcbiAgICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXG4gICAgICogQHBhcmFtIHVzZXJUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxuICAgICAqIEBwYXJhbSB3ZWlnaHQg44Oi44O844K344On44Oz44Gu6YeN44G/XG4gICAgICogQHBhcmFtIG1vdGlvblF1ZXVlRW50cnkgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2Vy44Gn566h55CG44GV44KM44Gm44GE44KL44Oi44O844K344On44OzXG4gICAgICovXG4gICAgcHVibGljIGRvVXBkYXRlUGFyYW1ldGVycyhcbiAgICAgIG1vZGVsOiBDdWJpc21Nb2RlbCxcbiAgICAgIHVzZXJUaW1lU2Vjb25kczogbnVtYmVyLFxuICAgICAgd2VpZ2h0OiBudW1iZXIsXG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5XG4gICAgKTogdm9pZCB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3BhcmFtZXRlcnMuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgICAgY29uc3QgcGFyYW1ldGVyOiBFeHByZXNzaW9uUGFyYW1ldGVyID0gdGhpcy5fcGFyYW1ldGVycy5hdChpKTtcblxuICAgICAgICBzd2l0Y2ggKHBhcmFtZXRlci5ibGVuZFR5cGUpIHtcbiAgICAgICAgICBjYXNlIEV4cHJlc3Npb25CbGVuZFR5cGUuRXhwcmVzc2lvbkJsZW5kVHlwZV9BZGQ6IHtcbiAgICAgICAgICAgIG1vZGVsLmFkZFBhcmFtZXRlclZhbHVlQnlJZChcbiAgICAgICAgICAgICAgcGFyYW1ldGVyLnBhcmFtZXRlcklkLFxuICAgICAgICAgICAgICBwYXJhbWV0ZXIudmFsdWUsXG4gICAgICAgICAgICAgIHdlaWdodFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIEV4cHJlc3Npb25CbGVuZFR5cGUuRXhwcmVzc2lvbkJsZW5kVHlwZV9NdWx0aXBseToge1xuICAgICAgICAgICAgbW9kZWwubXVsdGlwbHlQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICAgICAgICAgIHBhcmFtZXRlci5wYXJhbWV0ZXJJZCxcbiAgICAgICAgICAgICAgcGFyYW1ldGVyLnZhbHVlLFxuICAgICAgICAgICAgICB3ZWlnaHRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBFeHByZXNzaW9uQmxlbmRUeXBlLkV4cHJlc3Npb25CbGVuZFR5cGVfT3ZlcndyaXRlOiB7XG4gICAgICAgICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICAgICAgICAgIHBhcmFtZXRlci5wYXJhbWV0ZXJJZCxcbiAgICAgICAgICAgICAgcGFyYW1ldGVyLnZhbHVlLFxuICAgICAgICAgICAgICB3ZWlnaHRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIC8vIOS7leanmOOBq+OBquOBhOWApOOCkuioreWumuOBl+OBn+aZguOBr+OBmeOBp+OBq+WKoOeul+ODouODvOODieOBq+OBquOBo+OBpuOBhOOCi1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG5cbiAgICAgIHRoaXMuX3BhcmFtZXRlcnMgPSBuZXcgY3NtVmVjdG9yPEV4cHJlc3Npb25QYXJhbWV0ZXI+KCk7XG4gICAgfVxuXG4gICAgX3BhcmFtZXRlcnM6IGNzbVZlY3RvcjxFeHByZXNzaW9uUGFyYW1ldGVyPjsgLy8g6KGo5oOF44Gu44OR44Op44Oh44O844K/5oOF5aCx44Oq44K544OIXG4gIH1cblxuICAvKipcbiAgICog6KGo5oOF44OR44Op44Oh44O844K/5YCk44Gu6KiI566X5pa55byPXG4gICAqL1xuICBleHBvcnQgZW51bSBFeHByZXNzaW9uQmxlbmRUeXBlIHtcbiAgICBFeHByZXNzaW9uQmxlbmRUeXBlX0FkZCA9IDAsIC8vIOWKoOeul1xuICAgIEV4cHJlc3Npb25CbGVuZFR5cGVfTXVsdGlwbHkgPSAxLCAvLyDkuZfnrpdcbiAgICBFeHByZXNzaW9uQmxlbmRUeXBlX092ZXJ3cml0ZSA9IDIgLy8g5LiK5pu444GNXG4gIH1cblxuICAvKipcbiAgICog6KGo5oOF44Gu44OR44Op44Oh44O844K/5oOF5aCxXG4gICAqL1xuICBleHBvcnQgY2xhc3MgRXhwcmVzc2lvblBhcmFtZXRlciB7XG4gICAgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgIGJsZW5kVHlwZTogRXhwcmVzc2lvbkJsZW5kVHlwZTsgLy8g44OR44Op44Oh44O844K/44Gu5ryU566X56iu6aGeXG4gICAgdmFsdWU6IG51bWJlcjsgLy8g5YCkXG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21pZCB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtZnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21qc29uIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtanNvbic7XG5pbXBvcnQgQ3ViaXNtSWRIYW5kbGUgPSBjdWJpc21pZC5DdWJpc21JZEhhbmRsZTtcbmltcG9ydCBjc21WZWN0b3IgPSBjc212ZWN0b3IuY3NtVmVjdG9yO1xuaW1wb3J0IGl0ZXJhdG9yID0gY3NtdmVjdG9yLml0ZXJhdG9yO1xuaW1wb3J0IEN1YmlzbU1vZGVsID0gY3ViaXNtbW9kZWwuQ3ViaXNtTW9kZWw7XG5pbXBvcnQgQ3ViaXNtRnJhbWV3b3JrID0gY3ViaXNtZnJhbWV3b3JrLkN1YmlzbUZyYW1ld29yaztcbmltcG9ydCBDdWJpc21Kc29uID0gY3ViaXNtanNvbi5DdWJpc21Kc29uO1xuaW1wb3J0IFZhbHVlID0gY3ViaXNtanNvbi5WYWx1ZTtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBjb25zdCBFcHNpbG9uID0gMC4wMDE7XG4gIGNvbnN0IERlZmF1bHRGYWRlSW5TZWNvbmRzID0gMC41O1xuXG4gIC8vIFBvc2UuanNvbuOBruOCv+OCsFxuICBjb25zdCBGYWRlSW4gPSAnRmFkZUluVGltZSc7XG4gIGNvbnN0IExpbmsgPSAnTGluayc7XG4gIGNvbnN0IEdyb3VwcyA9ICdHcm91cHMnO1xuICBjb25zdCBJZCA9ICdJZCc7XG5cbiAgLyoqXG4gICAqIOODkeODvOODhOOBruS4jemAj+aYjuW6puOBruioreWumlxuICAgKlxuICAgKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7nrqHnkIbjgajoqK3lrprjgpLooYzjgYbjgIJcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21Qb3NlIHtcbiAgICAvKipcbiAgICAgKiDjgqTjg7Pjgrnjgr/jg7Pjgrnjga7kvZzmiJBcbiAgICAgKiBAcGFyYW0gcG9zZTNqc29uIHBvc2UzLmpzb27jga7jg4fjg7zjgr9cbiAgICAgKiBAcGFyYW0gc2l6ZSBwb3NlMy5qc29u44Gu44OH44O844K/44Gu44K144Kk44K6W2J5dGVdXG4gICAgICogQHJldHVybiDkvZzmiJDjgZXjgozjgZ/jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShwb3NlM2pzb246IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiBDdWJpc21Qb3NlIHtcbiAgICAgIGNvbnN0IHJldDogQ3ViaXNtUG9zZSA9IG5ldyBDdWJpc21Qb3NlKCk7XG4gICAgICBjb25zdCBqc29uOiBDdWJpc21Kc29uID0gQ3ViaXNtSnNvbi5jcmVhdGUocG9zZTNqc29uLCBzaXplKTtcbiAgICAgIGNvbnN0IHJvb3Q6IFZhbHVlID0ganNvbi5nZXRSb290KCk7XG5cbiAgICAgIC8vIOODleOCp+ODvOODieaZgumWk+OBruaMh+WumlxuICAgICAgaWYgKCFyb290LmdldFZhbHVlQnlTdHJpbmcoRmFkZUluKS5pc051bGwoKSkge1xuICAgICAgICByZXQuX2ZhZGVUaW1lU2Vjb25kcyA9IHJvb3RcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlSW4pXG4gICAgICAgICAgLnRvRmxvYXQoRGVmYXVsdEZhZGVJblNlY29uZHMpO1xuXG4gICAgICAgIGlmIChyZXQuX2ZhZGVUaW1lU2Vjb25kcyA8PSAwLjApIHtcbiAgICAgICAgICByZXQuX2ZhZGVUaW1lU2Vjb25kcyA9IERlZmF1bHRGYWRlSW5TZWNvbmRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIOODkeODvOODhOOCsOODq+ODvOODl1xuICAgICAgY29uc3QgcG9zZUxpc3RJbmZvOiBWYWx1ZSA9IHJvb3QuZ2V0VmFsdWVCeVN0cmluZyhHcm91cHMpO1xuICAgICAgY29uc3QgcG9zZUNvdW50OiBudW1iZXIgPSBwb3NlTGlzdEluZm8uZ2V0U2l6ZSgpO1xuXG4gICAgICBmb3IgKGxldCBwb3NlSW5kZXggPSAwOyBwb3NlSW5kZXggPCBwb3NlQ291bnQ7ICsrcG9zZUluZGV4KSB7XG4gICAgICAgIGNvbnN0IGlkTGlzdEluZm86IFZhbHVlID0gcG9zZUxpc3RJbmZvLmdldFZhbHVlQnlJbmRleChwb3NlSW5kZXgpO1xuICAgICAgICBjb25zdCBpZENvdW50OiBudW1iZXIgPSBpZExpc3RJbmZvLmdldFNpemUoKTtcbiAgICAgICAgbGV0IGdyb3VwQ291bnQgPSAwO1xuXG4gICAgICAgIGZvciAobGV0IGdyb3VwSW5kZXggPSAwOyBncm91cEluZGV4IDwgaWRDb3VudDsgKytncm91cEluZGV4KSB7XG4gICAgICAgICAgY29uc3QgcGFydEluZm86IFZhbHVlID0gaWRMaXN0SW5mby5nZXRWYWx1ZUJ5SW5kZXgoZ3JvdXBJbmRleCk7XG4gICAgICAgICAgY29uc3QgcGFydERhdGE6IFBhcnREYXRhID0gbmV3IFBhcnREYXRhKCk7XG4gICAgICAgICAgY29uc3QgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgICAgICAgcGFydEluZm8uZ2V0VmFsdWVCeVN0cmluZyhJZCkuZ2V0UmF3U3RyaW5nKClcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgcGFydERhdGEucGFydElkID0gcGFyYW1ldGVySWQ7XG5cbiAgICAgICAgICAvLyDjg6rjg7Pjgq/jgZnjgovjg5Hjg7zjg4Tjga7oqK3lrppcbiAgICAgICAgICBpZiAoIXBhcnRJbmZvLmdldFZhbHVlQnlTdHJpbmcoTGluaykuaXNOdWxsKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmtMaXN0SW5mbzogVmFsdWUgPSBwYXJ0SW5mby5nZXRWYWx1ZUJ5U3RyaW5nKExpbmspO1xuICAgICAgICAgICAgY29uc3QgbGlua0NvdW50OiBudW1iZXIgPSBsaW5rTGlzdEluZm8uZ2V0U2l6ZSgpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBsaW5rSW5kZXggPSAwOyBsaW5rSW5kZXggPCBsaW5rQ291bnQ7ICsrbGlua0luZGV4KSB7XG4gICAgICAgICAgICAgIGNvbnN0IGxpbmtQYXJ0OiBQYXJ0RGF0YSA9IG5ldyBQYXJ0RGF0YSgpO1xuICAgICAgICAgICAgICBjb25zdCBsaW5rSWQ6IEN1YmlzbUlkSGFuZGxlID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgICAgICAgICAgIGxpbmtMaXN0SW5mby5nZXRWYWx1ZUJ5SW5kZXgobGlua0luZGV4KS5nZXRTdHJpbmcoKVxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgIGxpbmtQYXJ0LnBhcnRJZCA9IGxpbmtJZDtcblxuICAgICAgICAgICAgICBwYXJ0RGF0YS5saW5rLnB1c2hCYWNrKGxpbmtQYXJ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXQuX3BhcnRHcm91cHMucHVzaEJhY2socGFydERhdGEuY2xvbmUoKSk7XG5cbiAgICAgICAgICArK2dyb3VwQ291bnQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXQuX3BhcnRHcm91cENvdW50cy5wdXNoQmFjayhncm91cENvdW50KTtcbiAgICAgIH1cblxuICAgICAgQ3ViaXNtSnNvbi5kZWxldGUoanNvbik7XG5cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kk44Oz44K544K/44Oz44K544KS56C05qOE44GZ44KLXG4gICAgICogQHBhcmFtIHBvc2Ug5a++6LGh44GuQ3ViaXNtUG9zZVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZGVsZXRlKHBvc2U6IEN1YmlzbVBvc2UpOiB2b2lkIHtcbiAgICAgIGlmIChwb3NlICE9IG51bGwpIHtcbiAgICAgICAgcG9zZSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/44Gu5pu05pawXG4gICAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xuICAgICAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZVBhcmFtZXRlcnMoXG4gICAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXG4gICAgICBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXJcbiAgICApOiB2b2lkIHtcbiAgICAgIC8vIOWJjeWbnuOBruODouODh+ODq+OBqOWQjOOBmOOBp+OBquOBhOWgtOWQiOOBr+WIneacn+WMluOBjOW/heimgVxuICAgICAgaWYgKG1vZGVsICE9IHRoaXMuX2xhc3RNb2RlbCkge1xuICAgICAgICAvLyDjg5Hjg6njg6Hjg7zjgr/jgqTjg7Pjg4fjg4Pjgq/jgrnjga7liJ3mnJ/ljJZcbiAgICAgICAgdGhpcy5yZXNldChtb2RlbCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2xhc3RNb2RlbCA9IG1vZGVsO1xuXG4gICAgICAvLyDoqK3lrprjgYvjgonmmYLplpPjgpLlpInmm7TjgZnjgovjgajjgIHntYzpgY7mmYLplpPjgYzjg57jgqTjg4rjgrnjgavjgarjgovkuovjgYzjgYLjgovjga7jgafjgIHntYzpgY7mmYLplpMw44Go44GX44Gm5a++5b+cXG4gICAgICBpZiAoZGVsdGFUaW1lU2Vjb25kcyA8IDAuMCkge1xuICAgICAgICBkZWx0YVRpbWVTZWNvbmRzID0gMC4wO1xuICAgICAgfVxuXG4gICAgICBsZXQgYmVnaW5JbmRleCA9IDA7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fcGFydEdyb3VwQ291bnRzLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHBhcnRHcm91cENvdW50OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBDb3VudHMuYXQoaSk7XG5cbiAgICAgICAgdGhpcy5kb0ZhZGUobW9kZWwsIGRlbHRhVGltZVNlY29uZHMsIGJlZ2luSW5kZXgsIHBhcnRHcm91cENvdW50KTtcblxuICAgICAgICBiZWdpbkluZGV4ICs9IHBhcnRHcm91cENvdW50O1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvcHlQYXJ0T3BhY2l0aWVzKG1vZGVsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDooajnpLrjgpLliJ3mnJ/ljJZcbiAgICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXG4gICAgICogQG5vdGUg5LiN6YCP5piO5bqm44Gu5Yid5pyf5YCk44GMMOOBp+OBquOBhOODkeODqeODoeODvOOCv+OBr+OAgeS4jemAj+aYjuW6puOCku+8keOBq+ioreWumuOBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyByZXNldChtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkIHtcbiAgICAgIGxldCBiZWdpbkluZGV4ID0gMDtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9wYXJ0R3JvdXBDb3VudHMuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgICAgY29uc3QgZ3JvdXBDb3VudDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3VwQ291bnRzLmF0KGkpO1xuXG4gICAgICAgIGZvciAobGV0IGo6IG51bWJlciA9IGJlZ2luSW5kZXg7IGogPCBiZWdpbkluZGV4ICsgZ3JvdXBDb3VudDsgKytqKSB7XG4gICAgICAgICAgdGhpcy5fcGFydEdyb3Vwcy5hdChqKS5pbml0aWFsaXplKG1vZGVsKTtcblxuICAgICAgICAgIGNvbnN0IHBhcnRzSW5kZXg6IG51bWJlciA9IHRoaXMuX3BhcnRHcm91cHMuYXQoaikucGFydEluZGV4O1xuICAgICAgICAgIGNvbnN0IHBhcmFtSW5kZXg6IG51bWJlciA9IHRoaXMuX3BhcnRHcm91cHMuYXQoaikucGFyYW1ldGVySW5kZXg7XG5cbiAgICAgICAgICBpZiAocGFydHNJbmRleCA8IDApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1vZGVsLnNldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0c0luZGV4LCBqID09IGJlZ2luSW5kZXggPyAxLjAgOiAwLjApO1xuICAgICAgICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJbmRleChcbiAgICAgICAgICAgIHBhcmFtSW5kZXgsXG4gICAgICAgICAgICBqID09IGJlZ2luSW5kZXggPyAxLjAgOiAwLjBcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCB0aGlzLl9wYXJ0R3JvdXBzLmF0KGopLmxpbmsuZ2V0U2l6ZSgpOyArK2spIHtcbiAgICAgICAgICAgIHRoaXMuX3BhcnRHcm91cHNcbiAgICAgICAgICAgICAgLmF0KGopXG4gICAgICAgICAgICAgIC5saW5rLmF0KGspXG4gICAgICAgICAgICAgIC5pbml0aWFsaXplKG1vZGVsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBiZWdpbkluZGV4ICs9IGdyb3VwQ291bnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OR44O844OE44Gu5LiN6YCP5piO5bqm44KS44Kz44OU44O8XG4gICAgICpcbiAgICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXG4gICAgICovXG4gICAgcHVibGljIGNvcHlQYXJ0T3BhY2l0aWVzKG1vZGVsOiBDdWJpc21Nb2RlbCk6IHZvaWQge1xuICAgICAgZm9yIChcbiAgICAgICAgbGV0IGdyb3VwSW5kZXggPSAwO1xuICAgICAgICBncm91cEluZGV4IDwgdGhpcy5fcGFydEdyb3Vwcy5nZXRTaXplKCk7XG4gICAgICAgICsrZ3JvdXBJbmRleFxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IHBhcnREYXRhOiBQYXJ0RGF0YSA9IHRoaXMuX3BhcnRHcm91cHMuYXQoZ3JvdXBJbmRleCk7XG5cbiAgICAgICAgaWYgKHBhcnREYXRhLmxpbmsuZ2V0U2l6ZSgpID09IDApIHtcbiAgICAgICAgICBjb250aW51ZTsgLy8g6YCj5YuV44GZ44KL44OR44Op44Oh44O844K/44Gv44Gq44GEXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXJ0SW5kZXg6IG51bWJlciA9IHRoaXMuX3BhcnRHcm91cHMuYXQoZ3JvdXBJbmRleCkucGFydEluZGV4O1xuICAgICAgICBjb25zdCBvcGFjaXR5OiBudW1iZXIgPSBtb2RlbC5nZXRQYXJ0T3BhY2l0eUJ5SW5kZXgocGFydEluZGV4KTtcblxuICAgICAgICBmb3IgKFxuICAgICAgICAgIGxldCBsaW5rSW5kZXggPSAwO1xuICAgICAgICAgIGxpbmtJbmRleCA8IHBhcnREYXRhLmxpbmsuZ2V0U2l6ZSgpO1xuICAgICAgICAgICsrbGlua0luZGV4XG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IGxpbmtQYXJ0OiBQYXJ0RGF0YSA9IHBhcnREYXRhLmxpbmsuYXQobGlua0luZGV4KTtcbiAgICAgICAgICBjb25zdCBsaW5rUGFydEluZGV4OiBudW1iZXIgPSBsaW5rUGFydC5wYXJ0SW5kZXg7XG5cbiAgICAgICAgICBpZiAobGlua1BhcnRJbmRleCA8IDApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1vZGVsLnNldFBhcnRPcGFjaXR5QnlJbmRleChsaW5rUGFydEluZGV4LCBvcGFjaXR5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODkeODvOODhOOBruODleOCp+ODvOODieaTjeS9nOOCkuihjOOBhuOAglxuICAgICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcbiAgICAgKiBAcGFyYW0gZGVsdGFUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpNb56eSXVxuICAgICAqIEBwYXJhbSBiZWdpbkluZGV4IOODleOCp+ODvOODieaTjeS9nOOCkuihjOOBhuODkeODvOODhOOCsOODq+ODvOODl+OBruWFiOmgreOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEBwYXJhbSBwYXJ0R3JvdXBDb3VudCDjg5Xjgqfjg7zjg4nmk43kvZzjgpLooYzjgYbjg5Hjg7zjg4TjgrDjg6vjg7zjg5fjga7lgIvmlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgZG9GYWRlKFxuICAgICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgICAgZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyLFxuICAgICAgYmVnaW5JbmRleDogbnVtYmVyLFxuICAgICAgcGFydEdyb3VwQ291bnQ6IG51bWJlclxuICAgICk6IHZvaWQge1xuICAgICAgbGV0IHZpc2libGVQYXJ0SW5kZXggPSAtMTtcbiAgICAgIGxldCBuZXdPcGFjaXR5ID0gMS4wO1xuXG4gICAgICBjb25zdCBwaGkgPSAwLjU7XG4gICAgICBjb25zdCBiYWNrT3BhY2l0eVRocmVzaG9sZCA9IDAuMTU7XG5cbiAgICAgIC8vIOePvuWcqOOAgeihqOekuueKtuaFi+OBq+OBquOBo+OBpuOBhOOCi+ODkeODvOODhOOCkuWPluW+l1xuICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gYmVnaW5JbmRleDsgaSA8IGJlZ2luSW5kZXggKyBwYXJ0R3JvdXBDb3VudDsgKytpKSB7XG4gICAgICAgIGNvbnN0IHBhcnRJbmRleDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3Vwcy5hdChpKS5wYXJ0SW5kZXg7XG4gICAgICAgIGNvbnN0IHBhcmFtSW5kZXg6IG51bWJlciA9IHRoaXMuX3BhcnRHcm91cHMuYXQoaSkucGFyYW1ldGVySW5kZXg7XG5cbiAgICAgICAgaWYgKG1vZGVsLmdldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbUluZGV4KSA+IEVwc2lsb24pIHtcbiAgICAgICAgICBpZiAodmlzaWJsZVBhcnRJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2aXNpYmxlUGFydEluZGV4ID0gaTtcbiAgICAgICAgICBuZXdPcGFjaXR5ID0gbW9kZWwuZ2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRJbmRleCk7XG5cbiAgICAgICAgICAvLyDmlrDjgZfjgYTkuI3pgI/mmI7luqbjgpLoqIjnrpdcbiAgICAgICAgICBuZXdPcGFjaXR5ICs9IGRlbHRhVGltZVNlY29uZHMgLyB0aGlzLl9mYWRlVGltZVNlY29uZHM7XG5cbiAgICAgICAgICBpZiAobmV3T3BhY2l0eSA+IDEuMCkge1xuICAgICAgICAgICAgbmV3T3BhY2l0eSA9IDEuMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHZpc2libGVQYXJ0SW5kZXggPCAwKSB7XG4gICAgICAgIHZpc2libGVQYXJ0SW5kZXggPSAwO1xuICAgICAgICBuZXdPcGFjaXR5ID0gMS4wO1xuICAgICAgfVxuXG4gICAgICAvLyDooajnpLrjg5Hjg7zjg4TjgIHpnZ7ooajnpLrjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjgpLoqK3lrprjgZnjgotcbiAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IGJlZ2luSW5kZXg7IGkgPCBiZWdpbkluZGV4ICsgcGFydEdyb3VwQ291bnQ7ICsraSkge1xuICAgICAgICBjb25zdCBwYXJ0c0luZGV4OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGkpLnBhcnRJbmRleDtcblxuICAgICAgICAvLyDooajnpLrjg5Hjg7zjg4Tjga7oqK3lrppcbiAgICAgICAgaWYgKHZpc2libGVQYXJ0SW5kZXggPT0gaSkge1xuICAgICAgICAgIG1vZGVsLnNldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0c0luZGV4LCBuZXdPcGFjaXR5KTsgLy8g5YWI44Gr6Kit5a6aXG4gICAgICAgIH1cbiAgICAgICAgLy8g6Z2e6KGo56S644OR44O844OE44Gu6Kit5a6aXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGxldCBvcGFjaXR5OiBudW1iZXIgPSBtb2RlbC5nZXRQYXJ0T3BhY2l0eUJ5SW5kZXgocGFydHNJbmRleCk7XG4gICAgICAgICAgbGV0IGExOiBudW1iZXI7IC8vIOioiOeul+OBq+OCiOOBo+OBpuaxguOCgeOCieOCjOOCi+S4jemAj+aYjuW6plxuXG4gICAgICAgICAgaWYgKG5ld09wYWNpdHkgPCBwaGkpIHtcbiAgICAgICAgICAgIGExID0gKG5ld09wYWNpdHkgKiAocGhpIC0gMSkpIC8gcGhpICsgMS4wOyAvLyAoMCwxKSwocGhpLHBoaSnjgpLpgJrjgovnm7Tnt5rlvI9cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYTEgPSAoKDEgLSBuZXdPcGFjaXR5KSAqIHBoaSkgLyAoMS4wIC0gcGhpKTsgLy8gKDEsMCksKHBoaSxwaGkp44KS6YCa44KL55u057ea5byPXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8g6IOM5pmv44Gu6KaL44GI44KL5Ymy5ZCI44KS5Yi26ZmQ44GZ44KL5aC05ZCIXG4gICAgICAgICAgY29uc3QgYmFja09wYWNpdHk6IG51bWJlciA9ICgxLjAgLSBhMSkgKiAoMS4wIC0gbmV3T3BhY2l0eSk7XG5cbiAgICAgICAgICBpZiAoYmFja09wYWNpdHkgPiBiYWNrT3BhY2l0eVRocmVzaG9sZCkge1xuICAgICAgICAgICAgYTEgPSAxLjAgLSBiYWNrT3BhY2l0eVRocmVzaG9sZCAvICgxLjAgLSBuZXdPcGFjaXR5KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAob3BhY2l0eSA+IGExKSB7XG4gICAgICAgICAgICBvcGFjaXR5ID0gYTE7IC8vIOioiOeul+OBruS4jemAj+aYjuW6puOCiOOCiuOCguWkp+OBjeOBkeOCjOOBsO+8iOa/g+OBkeOCjOOBsO+8ieS4jemAj+aYjuW6puOCkuS4iuOBkuOCi1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1vZGVsLnNldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0c0luZGV4LCBvcGFjaXR5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMuX2ZhZGVUaW1lU2Vjb25kcyA9IERlZmF1bHRGYWRlSW5TZWNvbmRzO1xuICAgICAgdGhpcy5fbGFzdE1vZGVsID0gbnVsbDtcbiAgICAgIHRoaXMuX3BhcnRHcm91cHMgPSBuZXcgY3NtVmVjdG9yPFBhcnREYXRhPigpO1xuICAgICAgdGhpcy5fcGFydEdyb3VwQ291bnRzID0gbmV3IGNzbVZlY3RvcjxudW1iZXI+KCk7XG4gICAgfVxuXG4gICAgX3BhcnRHcm91cHM6IGNzbVZlY3RvcjxQYXJ0RGF0YT47IC8vIOODkeODvOODhOOCsOODq+ODvOODl1xuICAgIF9wYXJ0R3JvdXBDb3VudHM6IGNzbVZlY3RvcjxudW1iZXI+OyAvLyDjgZ3jgozjgZ7jgozjga7jg5Hjg7zjg4TjgrDjg6vjg7zjg5fjga7lgIvmlbBcbiAgICBfZmFkZVRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOODleOCp+ODvOODieaZgumWk1vnp5JdXG4gICAgX2xhc3RNb2RlbDogQ3ViaXNtTW9kZWw7IC8vIOWJjeWbnuaTjeS9nOOBl+OBn+ODouODh+ODq1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODvOODhOOBq+OBvuOBpOOCj+OCi+ODh+ODvOOCv+OCkueuoeeQhlxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIFBhcnREYXRhIHtcbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih2PzogUGFydERhdGEpIHtcbiAgICAgIHRoaXMucGFyYW1ldGVySW5kZXggPSAwO1xuICAgICAgdGhpcy5wYXJ0SW5kZXggPSAwO1xuICAgICAgdGhpcy5saW5rID0gbmV3IGNzbVZlY3RvcjxQYXJ0RGF0YT4oKTtcblxuICAgICAgaWYgKHYgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMucGFydElkID0gdi5wYXJ0SWQ7XG5cbiAgICAgICAgZm9yIChcbiAgICAgICAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPFBhcnREYXRhPiA9IHYubGluay5iZWdpbigpO1xuICAgICAgICAgIGl0ZS5ub3RFcXVhbCh2LmxpbmsuZW5kKCkpO1xuICAgICAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLmxpbmsucHVzaEJhY2soaXRlLnB0cigpLmNsb25lKCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogPea8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxuICAgICAqL1xuICAgIHB1YmxpYyBhc3NpZ25tZW50KHY6IFBhcnREYXRhKTogUGFydERhdGEge1xuICAgICAgdGhpcy5wYXJ0SWQgPSB2LnBhcnRJZDtcblxuICAgICAgZm9yIChcbiAgICAgICAgY29uc3QgaXRlOiBpdGVyYXRvcjxQYXJ0RGF0YT4gPSB2LmxpbmsuYmVnaW4oKTtcbiAgICAgICAgaXRlLm5vdEVxdWFsKHYubGluay5lbmQoKSk7XG4gICAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMubGluay5wdXNoQmFjayhpdGUucHRyKCkuY2xvbmUoKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWIneacn+WMllxuICAgICAqIEBwYXJhbSBtb2RlbCDliJ3mnJ/ljJbjgavkvb/nlKjjgZnjgovjg6Ljg4fjg6tcbiAgICAgKi9cbiAgICBwdWJsaWMgaW5pdGlhbGl6ZShtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkIHtcbiAgICAgIHRoaXMucGFyYW1ldGVySW5kZXggPSBtb2RlbC5nZXRQYXJhbWV0ZXJJbmRleCh0aGlzLnBhcnRJZCk7XG4gICAgICB0aGlzLnBhcnRJbmRleCA9IG1vZGVsLmdldFBhcnRJbmRleCh0aGlzLnBhcnRJZCk7XG5cbiAgICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJbmRleCh0aGlzLnBhcmFtZXRlckluZGV4LCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgqrjg5bjgrjjgqfjgq/jg4jjga7jgrPjg5Tjg7zjgpLnlJ/miJDjgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgY2xvbmUoKTogUGFydERhdGEge1xuICAgICAgY29uc3QgY2xvbmVQYXJ0RGF0YTogUGFydERhdGEgPSBuZXcgUGFydERhdGEoKTtcblxuICAgICAgY2xvbmVQYXJ0RGF0YS5wYXJ0SWQgPSB0aGlzLnBhcnRJZDtcbiAgICAgIGNsb25lUGFydERhdGEucGFyYW1ldGVySW5kZXggPSB0aGlzLnBhcmFtZXRlckluZGV4O1xuICAgICAgY2xvbmVQYXJ0RGF0YS5wYXJ0SW5kZXggPSB0aGlzLnBhcnRJbmRleDtcbiAgICAgIGNsb25lUGFydERhdGEubGluayA9IG5ldyBjc21WZWN0b3I8UGFydERhdGE+KCk7XG5cbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpdGU6IGl0ZXJhdG9yPFBhcnREYXRhPiA9IHRoaXMubGluay5iZWdpbigpO1xuICAgICAgICBpdGUubm90RXF1YWwodGhpcy5saW5rLmVuZCgpKTtcbiAgICAgICAgaXRlLmluY3JlbWVudCgpXG4gICAgICApIHtcbiAgICAgICAgY2xvbmVQYXJ0RGF0YS5saW5rLnB1c2hCYWNrKGl0ZS5wdHIoKS5jbG9uZSgpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsb25lUGFydERhdGE7XG4gICAgfVxuXG4gICAgcGFydElkOiBDdWJpc21JZEhhbmRsZTsgLy8g44OR44O844OESURcbiAgICBwYXJhbWV0ZXJJbmRleDogbnVtYmVyOyAvLyDjg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICBwYXJ0SW5kZXg6IG51bWJlcjsgLy8g44OR44O844OE44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgbGluazogY3NtVmVjdG9yPFBhcnREYXRhPjsgLy8g6YCj5YuV44GZ44KL44OR44Op44Oh44O844K/XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb2RlbHVzZXJkYXRhanNvbiB9IGZyb20gJy4vY3ViaXNtbW9kZWx1c2VyZGF0YWpzb24nO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtZnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCBDdWJpc21GcmFtZXdvcmsgPSBjdWJpc21mcmFtZXdvcmsuQ3ViaXNtRnJhbWV3b3JrO1xuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XG5pbXBvcnQgY3NtU3RyaW5nID0gY3Ntc3RyaW5nLmNzbVN0cmluZztcbmltcG9ydCBDdWJpc21JZEhhbmRsZSA9IGN1YmlzbWlkLkN1YmlzbUlkSGFuZGxlO1xuaW1wb3J0IEN1YmlzbU1vZGVsVXNlckRhdGFKc29uID0gY3ViaXNtbW9kZWx1c2VyZGF0YWpzb24uQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb247XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgY29uc3QgQXJ0TWVzaCA9ICdBcnRNZXNoJztcblxuICAvKipcbiAgICog44Om44O844K244O844OH44O844K/44Kk44Oz44K/44O844OV44Kn44O844K5XG4gICAqXG4gICAqIEpzb27jgYvjgonoqq3jgb/ovrzjgpPjgaDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jgpLoqJjpjLLjgZfjgabjgYrjgY/jgZ/jgoHjga7mp4vpgKDkvZNcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZSB7XG4gICAgdGFyZ2V0VHlwZTogQ3ViaXNtSWRIYW5kbGU7IC8vIOODpuODvOOCtuODvOODh+ODvOOCv+OCv+ODvOOCsuODg+ODiOOCv+OCpOODl1xuICAgIHRhcmdldElkOiBDdWJpc21JZEhhbmRsZTsgLy8g44Om44O844K244O844OH44O844K/44K/44O844Ky44OD44OI44GuSURcbiAgICB2YWx1ZTogY3NtU3RyaW5nOyAvLyDjg6bjg7zjgrbjg7zjg4fjg7zjgr9cbiAgfVxuXG4gIC8qKlxuICAgKiDjg6bjg7zjgrbjg4fjg7zjgr/jga7nrqHnkIbjgq/jg6njgrlcbiAgICpcbiAgICog44Om44O844K244OH44O844K/44KS44Ot44O844OJ44CB566h55CG44CB5qSc57Si44Kk44Oz44K/44O844OV44Kn44Kk44K544CB6Kej5pS+44G+44Gn44KS6KGM44GG44CCXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtTW9kZWxVc2VyRGF0YSB7XG4gICAgLyoqXG4gICAgICog44Kk44Oz44K544K/44Oz44K544Gu5L2c5oiQXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYnVmZmVyICAgIHVzZXJkYXRhMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAgICogQHBhcmFtIHNpemUgICAgICDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICAgKiBAcmV0dXJuIOS9nOaIkOOBleOCjOOBn+OCpOODs+OCueOCv+ODs+OCuVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKFxuICAgICAgYnVmZmVyOiBBcnJheUJ1ZmZlcixcbiAgICAgIHNpemU6IG51bWJlclxuICAgICk6IEN1YmlzbU1vZGVsVXNlckRhdGEge1xuICAgICAgY29uc3QgcmV0OiBDdWJpc21Nb2RlbFVzZXJEYXRhID0gbmV3IEN1YmlzbU1vZGVsVXNlckRhdGEoKTtcblxuICAgICAgcmV0LnBhcnNlVXNlckRhdGEoYnVmZmVyLCBzaXplKTtcblxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLnoLTmo4TjgZnjgotcbiAgICAgKlxuICAgICAqIEBwYXJhbSBtb2RlbFVzZXJEYXRhIOegtOajhOOBmeOCi+OCpOODs+OCueOCv+ODs+OCuVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZGVsZXRlKG1vZGVsVXNlckRhdGE6IEN1YmlzbU1vZGVsVXNlckRhdGEpOiB2b2lkIHtcbiAgICAgIGlmIChtb2RlbFVzZXJEYXRhICE9IG51bGwpIHtcbiAgICAgICAgbW9kZWxVc2VyRGF0YS5yZWxlYXNlKCk7XG4gICAgICAgIG1vZGVsVXNlckRhdGEgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFydE1lc2jjga7jg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7jg6rjgrnjg4jjga7lj5blvpdcbiAgICAgKlxuICAgICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44Oq44K544OIXG4gICAgICovXG4gICAgcHVibGljIGdldEFydE1lc2hVc2VyRGF0YXMoKTogY3NtVmVjdG9yPEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlPiB7XG4gICAgICByZXR1cm4gdGhpcy5fYXJ0TWVzaFVzZXJEYXRhTm9kZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiB1c2VyZGF0YTMuanNvbuOBruODkeODvOOCuVxuICAgICAqXG4gICAgICogQHBhcmFtIGJ1ZmZlciAgICB1c2VyZGF0YTMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgICAqIEBwYXJhbSBzaXplICAgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAgICovXG4gICAgcHVibGljIHBhcnNlVXNlckRhdGEoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICBsZXQganNvbjogQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24gPSBuZXcgQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24oXG4gICAgICAgIGJ1ZmZlcixcbiAgICAgICAgc2l6ZVxuICAgICAgKTtcblxuICAgICAgY29uc3QgdHlwZU9mQXJ0TWVzaCA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChBcnRNZXNoKTtcbiAgICAgIGNvbnN0IG5vZGVDb3VudDogbnVtYmVyID0ganNvbi5nZXRVc2VyRGF0YUNvdW50KCk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZUNvdW50OyBpKyspIHtcbiAgICAgICAgY29uc3QgYWRkTm9kZTogQ3ViaXNtTW9kZWxVc2VyRGF0YU5vZGUgPSBuZXcgQ3ViaXNtTW9kZWxVc2VyRGF0YU5vZGUoKTtcblxuICAgICAgICBhZGROb2RlLnRhcmdldElkID0ganNvbi5nZXRVc2VyRGF0YUlkKGkpO1xuICAgICAgICBhZGROb2RlLnRhcmdldFR5cGUgPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgICAganNvbi5nZXRVc2VyRGF0YVRhcmdldFR5cGUoaSlcbiAgICAgICAgKTtcbiAgICAgICAgYWRkTm9kZS52YWx1ZSA9IG5ldyBjc21TdHJpbmcoanNvbi5nZXRVc2VyRGF0YVZhbHVlKGkpKTtcbiAgICAgICAgdGhpcy5fdXNlckRhdGFOb2Rlcy5wdXNoQmFjayhhZGROb2RlKTtcblxuICAgICAgICBpZiAoYWRkTm9kZS50YXJnZXRUeXBlID09IHR5cGVPZkFydE1lc2gpIHtcbiAgICAgICAgICB0aGlzLl9hcnRNZXNoVXNlckRhdGFOb2RlLnB1c2hCYWNrKGFkZE5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGpzb24ucmVsZWFzZSgpO1xuICAgICAganNvbiA9IHZvaWQgMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICB0aGlzLl91c2VyRGF0YU5vZGVzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZT4oKTtcbiAgICAgIHRoaXMuX2FydE1lc2hVc2VyRGF0YU5vZGUgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlPigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgICAqXG4gICAgICog44Om44O844K244O844OH44O844K/5qeL6YCg5L2T6YWN5YiX44KS6Kej5pS+44GZ44KLXG4gICAgICovXG4gICAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3VzZXJEYXRhTm9kZXMuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgICAgdGhpcy5fdXNlckRhdGFOb2Rlcy5zZXQoaSwgbnVsbCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3VzZXJEYXRhTm9kZXMgPSBudWxsO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3VzZXJEYXRhTm9kZXM6IGNzbVZlY3RvcjxDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZT47IC8vIOODpuODvOOCtuODvOODh+ODvOOCv+ani+mAoOS9k+mFjeWIl1xuICAgIHByaXZhdGUgX2FydE1lc2hVc2VyRGF0YU5vZGU6IGNzbVZlY3RvcjxDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZT47IC8vIOmWsuimp+ODquOCueODiOOBruS/neaMgVxuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtanNvbiB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWpzb24nO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgQ3ViaXNtRnJhbWV3b3JrID0gY3ViaXNtZnJhbWV3b3JrLkN1YmlzbUZyYW1ld29yaztcbmltcG9ydCBDdWJpc21JZEhhbmRsZSA9IGN1YmlzbWlkLkN1YmlzbUlkSGFuZGxlO1xuaW1wb3J0IEN1YmlzbUpzb24gPSBjdWJpc21qc29uLkN1YmlzbUpzb247XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgY29uc3QgTWV0YSA9ICdNZXRhJztcbiAgY29uc3QgVXNlckRhdGFDb3VudCA9ICdVc2VyRGF0YUNvdW50JztcbiAgY29uc3QgVG90YWxVc2VyRGF0YVNpemUgPSAnVG90YWxVc2VyRGF0YVNpemUnO1xuICBjb25zdCBVc2VyRGF0YSA9ICdVc2VyRGF0YSc7XG4gIGNvbnN0IFRhcmdldCA9ICdUYXJnZXQnO1xuICBjb25zdCBJZCA9ICdJZCc7XG4gIGNvbnN0IFZhbHVlID0gJ1ZhbHVlJztcblxuICBleHBvcnQgY2xhc3MgQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24ge1xuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqIEBwYXJhbSBidWZmZXIgICAgdXNlcmRhdGEzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICAgKiBAcGFyYW0gc2l6ZSAgICAgIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpIHtcbiAgICAgIHRoaXMuX2pzb24gPSBDdWJpc21Kc29uLmNyZWF0ZShidWZmZXIsIHNpemUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgICAqL1xuICAgIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgICAgQ3ViaXNtSnNvbi5kZWxldGUodGhpcy5fanNvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Om44O844K244O844OH44O844K/5YCL5pWw44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7lgIvmlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VXNlckRhdGFDb3VudCgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhVc2VyRGF0YUNvdW50KVxuICAgICAgICAudG9JbnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/nt4/mloflrZfliJfmlbDjga7lj5blvpdcbiAgICAgKlxuICAgICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/57eP5paH5a2X5YiX5pWwXG4gICAgICovXG4gICAgcHVibGljIGdldFRvdGFsVXNlckRhdGFTaXplKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRvdGFsVXNlckRhdGFTaXplKVxuICAgICAgICAudG9JbnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7jgr/jgqTjg5fjga7lj5blvpdcbiAgICAgKlxuICAgICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44Gu44K/44Kk44OXXG4gICAgICovXG4gICAgcHVibGljIGdldFVzZXJEYXRhVGFyZ2V0VHlwZShpOiBudW1iZXIpOiBzdHJpbmcge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhVc2VyRGF0YSlcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChpKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUYXJnZXQpXG4gICAgICAgIC5nZXRSYXdTdHJpbmcoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7jgr/jg7zjgrLjg4Pjg4hJROOBruWPluW+l1xuICAgICAqXG4gICAgICogQHBhcmFtIGkg44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jgr/jg7zjgrLjg4Pjg4hJRFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRVc2VyRGF0YUlkKGk6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlIHtcbiAgICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVXNlckRhdGEpXG4gICAgICAgICAgLmdldFZhbHVlQnlJbmRleChpKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElkKVxuICAgICAgICAgIC5nZXRSYXdTdHJpbmcoKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7mloflrZfliJfjga7lj5blvpdcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpIOOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/XG4gICAgICovXG4gICAgcHVibGljIGdldFVzZXJEYXRhVmFsdWUoaTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVXNlckRhdGEpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmFsdWUpXG4gICAgICAgIC5nZXRSYXdTdHJpbmcoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9qc29uOiBDdWJpc21Kc29uO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtcGh5c2ljc2ludGVybmFsIH0gZnJvbSAnLi9jdWJpc21waHlzaWNzaW50ZXJuYWwnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbXZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL2N1YmlzbXZlY3RvcjInO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1hdGggfSBmcm9tICcuLi9tYXRoL2N1YmlzbW1hdGgnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbXBoeXNpY3Nqc29uIH0gZnJvbSAnLi9jdWJpc21waHlzaWNzanNvbic7XG5pbXBvcnQgQ3ViaXNtUGh5c2ljc0pzb24gPSBjdWJpc21waHlzaWNzanNvbi5DdWJpc21QaHlzaWNzSnNvbjtcbmltcG9ydCBDdWJpc21NYXRoID0gY3ViaXNtbWF0aC5DdWJpc21NYXRoO1xuaW1wb3J0IEN1YmlzbVBoeXNpY3NSaWcgPSBjdWJpc21waHlzaWNzaW50ZXJuYWwuQ3ViaXNtUGh5c2ljc1JpZztcbmltcG9ydCBDdWJpc21QaHlzaWNzU3ViUmlnID0gY3ViaXNtcGh5c2ljc2ludGVybmFsLkN1YmlzbVBoeXNpY3NTdWJSaWc7XG5pbXBvcnQgQ3ViaXNtUGh5c2ljc0lucHV0ID0gY3ViaXNtcGh5c2ljc2ludGVybmFsLkN1YmlzbVBoeXNpY3NJbnB1dDtcbmltcG9ydCBDdWJpc21QaHlzaWNzT3V0cHV0ID0gY3ViaXNtcGh5c2ljc2ludGVybmFsLkN1YmlzbVBoeXNpY3NPdXRwdXQ7XG5pbXBvcnQgQ3ViaXNtUGh5c2ljc1BhcnRpY2xlID0gY3ViaXNtcGh5c2ljc2ludGVybmFsLkN1YmlzbVBoeXNpY3NQYXJ0aWNsZTtcbmltcG9ydCBDdWJpc21QaHlzaWNzU291cmNlID0gY3ViaXNtcGh5c2ljc2ludGVybmFsLkN1YmlzbVBoeXNpY3NTb3VyY2U7XG5pbXBvcnQgQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGUgPSBjdWJpc21waHlzaWNzaW50ZXJuYWwuQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGU7XG5pbXBvcnQgQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24gPSBjdWJpc21waHlzaWNzaW50ZXJuYWwuQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb247XG5pbXBvcnQgQ3ViaXNtVmVjdG9yMiA9IGN1YmlzbXZlY3RvcjIuQ3ViaXNtVmVjdG9yMjtcbmltcG9ydCBDdWJpc21Nb2RlbCA9IGN1YmlzbW1vZGVsLkN1YmlzbU1vZGVsO1xuXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIC8vIHBoeXNpY3MgdHlwZXMgdGFncy5cbiAgY29uc3QgUGh5c2ljc1R5cGVUYWdYID0gJ1gnO1xuICBjb25zdCBQaHlzaWNzVHlwZVRhZ1kgPSAnWSc7XG4gIGNvbnN0IFBoeXNpY3NUeXBlVGFnQW5nbGUgPSAnQW5nbGUnO1xuXG4gIC8vIENvbnN0YW50IG9mIGFpciByZXNpc3RhbmNlLlxuICBjb25zdCBBaXJSZXNpc3RhbmNlID0gNS4wO1xuXG4gIC8vIENvbnN0YW50IG9mIG1heGltdW0gd2VpZ2h0IG9mIGlucHV0IGFuZCBvdXRwdXQgcmF0aW8uXG4gIGNvbnN0IE1heGltdW1XZWlnaHQgPSAxMDAuMDtcblxuICAvLyBDb25zdGFudCBvZiB0aHJlc2hvbGQgb2YgbW92ZW1lbnQuXG4gIGNvbnN0IE1vdmVtZW50VGhyZXNob2xkID0gMC4wMDE7XG5cbiAgLyoqXG4gICAqIOeJqeeQhua8lOeul+OCr+ODqeOCuVxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3Mge1xuICAgIC8qKlxuICAgICAqIOOCpOODs+OCueOCv+ODs+OCueOBruS9nOaIkFxuICAgICAqIEBwYXJhbSBidWZmZXIgICAgcGh5c2ljczMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgICAqIEBwYXJhbSBzaXplICAgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAgICogQHJldHVybiDkvZzmiJDjgZXjgozjgZ/jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiBDdWJpc21QaHlzaWNzIHtcbiAgICAgIGNvbnN0IHJldDogQ3ViaXNtUGh5c2ljcyA9IG5ldyBDdWJpc21QaHlzaWNzKCk7XG5cbiAgICAgIHJldC5wYXJzZShidWZmZXIsIHNpemUpO1xuICAgICAgcmV0Ll9waHlzaWNzUmlnLmdyYXZpdHkueSA9IDA7XG5cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kk44Oz44K544K/44Oz44K544KS56C05qOE44GZ44KLXG4gICAgICogQHBhcmFtIHBoeXNpY3Mg56C05qOE44GZ44KL44Kk44Oz44K544K/44Oz44K5XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBkZWxldGUocGh5c2ljczogQ3ViaXNtUGh5c2ljcyk6IHZvaWQge1xuICAgICAgaWYgKHBoeXNpY3MgIT0gbnVsbCkge1xuICAgICAgICBwaHlzaWNzLnJlbGVhc2UoKTtcbiAgICAgICAgcGh5c2ljcyA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog54mp55CG5ryU566X44Gu6KmV5L6hXG4gICAgICogQHBhcmFtIG1vZGVsIOeJqeeQhua8lOeul+OBrue1kOaenOOCkumBqeeUqOOBmeOCi+ODouODh+ODq1xuICAgICAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIGV2YWx1YXRlKG1vZGVsOiBDdWJpc21Nb2RlbCwgZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgICBsZXQgdG90YWxBbmdsZTogeyBhbmdsZTogbnVtYmVyIH07XG4gICAgICBsZXQgd2VpZ2h0OiBudW1iZXI7XG4gICAgICBsZXQgcmFkQW5nbGU6IG51bWJlcjtcbiAgICAgIGxldCBvdXRwdXRWYWx1ZTogbnVtYmVyO1xuICAgICAgY29uc3QgdG90YWxUcmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKCk7XG4gICAgICBsZXQgY3VycmVudFNldHRpbmc6IEN1YmlzbVBoeXNpY3NTdWJSaWc7XG4gICAgICBsZXQgY3VycmVudElucHV0OiBDdWJpc21QaHlzaWNzSW5wdXRbXTtcbiAgICAgIGxldCBjdXJyZW50T3V0cHV0OiBDdWJpc21QaHlzaWNzT3V0cHV0W107XG4gICAgICBsZXQgY3VycmVudFBhcnRpY2xlczogQ3ViaXNtUGh5c2ljc1BhcnRpY2xlW107XG5cbiAgICAgIGxldCBwYXJhbWV0ZXJWYWx1ZTogRmxvYXQzMkFycmF5O1xuICAgICAgbGV0IHBhcmFtZXRlck1heGltdW1WYWx1ZTogRmxvYXQzMkFycmF5O1xuICAgICAgbGV0IHBhcmFtZXRlck1pbmltdW1WYWx1ZTogRmxvYXQzMkFycmF5O1xuICAgICAgbGV0IHBhcmFtZXRlckRlZmF1bHRWYWx1ZTogRmxvYXQzMkFycmF5O1xuXG4gICAgICBwYXJhbWV0ZXJWYWx1ZSA9IG1vZGVsLmdldE1vZGVsKCkucGFyYW1ldGVycy52YWx1ZXM7XG4gICAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWUgPSBtb2RlbC5nZXRNb2RlbCgpLnBhcmFtZXRlcnMubWF4aW11bVZhbHVlcztcbiAgICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZSA9IG1vZGVsLmdldE1vZGVsKCkucGFyYW1ldGVycy5taW5pbXVtVmFsdWVzO1xuICAgICAgcGFyYW1ldGVyRGVmYXVsdFZhbHVlID0gbW9kZWwuZ2V0TW9kZWwoKS5wYXJhbWV0ZXJzLmRlZmF1bHRWYWx1ZXM7XG5cbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBzZXR0aW5nSW5kZXggPSAwO1xuICAgICAgICBzZXR0aW5nSW5kZXggPCB0aGlzLl9waHlzaWNzUmlnLnN1YlJpZ0NvdW50O1xuICAgICAgICArK3NldHRpbmdJbmRleFxuICAgICAgKSB7XG4gICAgICAgIHRvdGFsQW5nbGUgPSB7IGFuZ2xlOiAwLjAgfTtcbiAgICAgICAgdG90YWxUcmFuc2xhdGlvbi54ID0gMC4wO1xuICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnkgPSAwLjA7XG4gICAgICAgIGN1cnJlbnRTZXR0aW5nID0gdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChzZXR0aW5nSW5kZXgpO1xuICAgICAgICBjdXJyZW50SW5wdXQgPSB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5nZXQoXG4gICAgICAgICAgY3VycmVudFNldHRpbmcuYmFzZUlucHV0SW5kZXhcbiAgICAgICAgKTtcbiAgICAgICAgY3VycmVudE91dHB1dCA9IHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5nZXQoXG4gICAgICAgICAgY3VycmVudFNldHRpbmcuYmFzZU91dHB1dEluZGV4XG4gICAgICAgICk7XG4gICAgICAgIGN1cnJlbnRQYXJ0aWNsZXMgPSB0aGlzLl9waHlzaWNzUmlnLnBhcnRpY2xlcy5nZXQoXG4gICAgICAgICAgY3VycmVudFNldHRpbmcuYmFzZVBhcnRpY2xlSW5kZXhcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBMb2FkIGlucHV0IHBhcmFtZXRlcnNcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50U2V0dGluZy5pbnB1dENvdW50OyArK2kpIHtcbiAgICAgICAgICB3ZWlnaHQgPSBjdXJyZW50SW5wdXRbaV0ud2VpZ2h0IC8gTWF4aW11bVdlaWdodDtcblxuICAgICAgICAgIGlmIChjdXJyZW50SW5wdXRbaV0uc291cmNlUGFyYW1ldGVySW5kZXggPT0gLTEpIHtcbiAgICAgICAgICAgIGN1cnJlbnRJbnB1dFtpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleCA9IG1vZGVsLmdldFBhcmFtZXRlckluZGV4KFxuICAgICAgICAgICAgICBjdXJyZW50SW5wdXRbaV0uc291cmNlLmlkXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGN1cnJlbnRJbnB1dFtpXS5nZXROb3JtYWxpemVkUGFyYW1ldGVyVmFsdWUoXG4gICAgICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLFxuICAgICAgICAgICAgdG90YWxBbmdsZSxcbiAgICAgICAgICAgIHBhcmFtZXRlclZhbHVlW2N1cnJlbnRJbnB1dFtpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleF0sXG4gICAgICAgICAgICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWVbY3VycmVudElucHV0W2ldLnNvdXJjZVBhcmFtZXRlckluZGV4XSxcbiAgICAgICAgICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZVtjdXJyZW50SW5wdXRbaV0uc291cmNlUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgICAgcGFyYW1ldGVyRGVmYXVsdFZhbHVlW2N1cnJlbnRJbnB1dFtpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleF0sXG4gICAgICAgICAgICBjdXJyZW50U2V0dGluZy5ub3JtYWxpemF0aW9uUG9zaXRpb24sXG4gICAgICAgICAgICBjdXJyZW50U2V0dGluZy5ub3JtYWxpemF0aW9uQW5nbGUsXG4gICAgICAgICAgICBjdXJyZW50SW5wdXRbMF0ucmVmbGVjdCxcbiAgICAgICAgICAgIHdlaWdodFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByYWRBbmdsZSA9IEN1YmlzbU1hdGguZGVncmVlc1RvUmFkaWFuKC10b3RhbEFuZ2xlLmFuZ2xlKTtcblxuICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnggPVxuICAgICAgICAgIHRvdGFsVHJhbnNsYXRpb24ueCAqIEN1YmlzbU1hdGguY29zKHJhZEFuZ2xlKSAtXG4gICAgICAgICAgdG90YWxUcmFuc2xhdGlvbi55ICogQ3ViaXNtTWF0aC5zaW4ocmFkQW5nbGUpO1xuICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnkgPVxuICAgICAgICAgIHRvdGFsVHJhbnNsYXRpb24ueCAqIEN1YmlzbU1hdGguc2luKHJhZEFuZ2xlKSArXG4gICAgICAgICAgdG90YWxUcmFuc2xhdGlvbi55ICogQ3ViaXNtTWF0aC5jb3MocmFkQW5nbGUpO1xuXG4gICAgICAgIC8vIENhbGN1bGF0ZSBwYXJ0aWNsZXMgcG9zaXRpb24uXG4gICAgICAgIHVwZGF0ZVBhcnRpY2xlcyhcbiAgICAgICAgICBjdXJyZW50UGFydGljbGVzLFxuICAgICAgICAgIGN1cnJlbnRTZXR0aW5nLnBhcnRpY2xlQ291bnQsXG4gICAgICAgICAgdG90YWxUcmFuc2xhdGlvbixcbiAgICAgICAgICB0b3RhbEFuZ2xlLmFuZ2xlLFxuICAgICAgICAgIHRoaXMuX29wdGlvbnMud2luZCxcbiAgICAgICAgICBNb3ZlbWVudFRocmVzaG9sZCAqIGN1cnJlbnRTZXR0aW5nLm5vcm1hbGl6YXRpb25Qb3NpdGlvbi5tYXhpbXVtLFxuICAgICAgICAgIGRlbHRhVGltZVNlY29uZHMsXG4gICAgICAgICAgQWlyUmVzaXN0YW5jZVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBvdXRwdXQgcGFyYW1ldGVycy5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50U2V0dGluZy5vdXRwdXRDb3VudDsgKytpKSB7XG4gICAgICAgICAgY29uc3QgcGFydGljbGVJbmRleCA9IGN1cnJlbnRPdXRwdXRbaV0udmVydGV4SW5kZXg7XG5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBwYXJ0aWNsZUluZGV4IDwgMSB8fFxuICAgICAgICAgICAgcGFydGljbGVJbmRleCA+PSBjdXJyZW50U2V0dGluZy5wYXJ0aWNsZUNvdW50XG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3VycmVudE91dHB1dFtpXS5kZXN0aW5hdGlvblBhcmFtZXRlckluZGV4ID09IC0xKSB7XG4gICAgICAgICAgICBjdXJyZW50T3V0cHV0W1xuICAgICAgICAgICAgICBpXG4gICAgICAgICAgICBdLmRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXggPSBtb2RlbC5nZXRQYXJhbWV0ZXJJbmRleChcbiAgICAgICAgICAgICAgY3VycmVudE91dHB1dFtpXS5kZXN0aW5hdGlvbi5pZFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCB0cmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKCk7XG4gICAgICAgICAgdHJhbnNsYXRpb24ueCA9XG4gICAgICAgICAgICBjdXJyZW50UGFydGljbGVzW3BhcnRpY2xlSW5kZXhdLnBvc2l0aW9uLnggLVxuICAgICAgICAgICAgY3VycmVudFBhcnRpY2xlc1twYXJ0aWNsZUluZGV4IC0gMV0ucG9zaXRpb24ueDtcbiAgICAgICAgICB0cmFuc2xhdGlvbi55ID1cbiAgICAgICAgICAgIGN1cnJlbnRQYXJ0aWNsZXNbcGFydGljbGVJbmRleF0ucG9zaXRpb24ueSAtXG4gICAgICAgICAgICBjdXJyZW50UGFydGljbGVzW3BhcnRpY2xlSW5kZXggLSAxXS5wb3NpdGlvbi55O1xuXG4gICAgICAgICAgb3V0cHV0VmFsdWUgPSBjdXJyZW50T3V0cHV0W2ldLmdldFZhbHVlKFxuICAgICAgICAgICAgdHJhbnNsYXRpb24sXG4gICAgICAgICAgICBjdXJyZW50UGFydGljbGVzLFxuICAgICAgICAgICAgcGFydGljbGVJbmRleCxcbiAgICAgICAgICAgIGN1cnJlbnRPdXRwdXRbaV0ucmVmbGVjdCxcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuZ3Jhdml0eVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBjb25zdCBkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4OiBudW1iZXIgPVxuICAgICAgICAgICAgY3VycmVudE91dHB1dFtpXS5kZXN0aW5hdGlvblBhcmFtZXRlckluZGV4O1xuICAgICAgICAgIGNvbnN0IG91dFBhcmFtZXRlclZhbHVlOiBGbG9hdDMyQXJyYXkgPVxuICAgICAgICAgICAgIUZsb2F0MzJBcnJheS5wcm90b3R5cGUuc2xpY2UgJiZcbiAgICAgICAgICAgICdzdWJhcnJheScgaW4gRmxvYXQzMkFycmF5LnByb3RvdHlwZVxuICAgICAgICAgICAgICA/IEpTT04ucGFyc2UoXG4gICAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyVmFsdWUuc3ViYXJyYXkoZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleClcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApIC8vIOWApOa4oeOBl+OBmeOCi+OBn+OCgeOAgUpTT04ucGFyc2UsIEpTT04uc3RyaW5naWZ5XG4gICAgICAgICAgICAgIDogcGFyYW1ldGVyVmFsdWUuc2xpY2UoZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleCk7XG5cbiAgICAgICAgICB1cGRhdGVPdXRwdXRQYXJhbWV0ZXJWYWx1ZShcbiAgICAgICAgICAgIG91dFBhcmFtZXRlclZhbHVlLFxuICAgICAgICAgICAgcGFyYW1ldGVyTWluaW11bVZhbHVlW2Rlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlW2Rlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgICAgb3V0cHV0VmFsdWUsXG4gICAgICAgICAgICBjdXJyZW50T3V0cHV0W2ldXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIC8vIOWApOOCkuWPjeaYoFxuICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICBsZXQgb2Zmc2V0OiBudW1iZXIgPSBkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4LCBvdXRQYXJhbUluZGV4ID0gMDtcbiAgICAgICAgICAgIG9mZnNldCA8IHBhcmFtZXRlclZhbHVlLmxlbmd0aDtcbiAgICAgICAgICAgIG9mZnNldCsrLCBvdXRQYXJhbUluZGV4KytcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHBhcmFtZXRlclZhbHVlW29mZnNldF0gPSBvdXRQYXJhbWV0ZXJWYWx1ZVtvdXRQYXJhbUluZGV4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgqrjg5fjgrfjg6fjg7Pjga7oqK3lrppcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyDjgqrjg5fjgrfjg6fjg7NcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0T3B0aW9ucyhvcHRpb25zOiBPcHRpb25zKTogdm9pZCB7XG4gICAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgqrjg5fjgrfjg6fjg7Pjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOOCquODl+OCt+ODp+ODs1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRPcHRpb24oKTogT3B0aW9ucyB7XG4gICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICB0aGlzLl9waHlzaWNzUmlnID0gbnVsbDtcblxuICAgICAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICAgICAgdGhpcy5fb3B0aW9ucyA9IG5ldyBPcHRpb25zKCk7XG4gICAgICB0aGlzLl9vcHRpb25zLmdyYXZpdHkueSA9IC0xLjA7XG4gICAgICB0aGlzLl9vcHRpb25zLmdyYXZpdHkueCA9IDA7XG4gICAgICB0aGlzLl9vcHRpb25zLndpbmQueCA9IDA7XG4gICAgICB0aGlzLl9vcHRpb25zLndpbmQueSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAgICovXG4gICAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgICB0aGlzLl9waHlzaWNzUmlnID0gdm9pZCAwO1xuICAgICAgdGhpcy5fcGh5c2ljc1JpZyA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcGh5c2ljczMuanNvbuOCkuODkeODvOOCueOBmeOCi+OAglxuICAgICAqIEBwYXJhbSBwaHlzaWNzSnNvbiBwaHlzaWNzMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAgICovXG4gICAgcHVibGljIHBhcnNlKHBoeXNpY3NKc29uOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0aGlzLl9waHlzaWNzUmlnID0gbmV3IEN1YmlzbVBoeXNpY3NSaWcoKTtcblxuICAgICAgbGV0IGpzb246IEN1YmlzbVBoeXNpY3NKc29uID0gbmV3IEN1YmlzbVBoeXNpY3NKc29uKHBoeXNpY3NKc29uLCBzaXplKTtcblxuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5ncmF2aXR5ID0ganNvbi5nZXRHcmF2aXR5KCk7XG4gICAgICB0aGlzLl9waHlzaWNzUmlnLndpbmQgPSBqc29uLmdldFdpbmQoKTtcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc3ViUmlnQ291bnQgPSBqc29uLmdldFN1YlJpZ0NvdW50KCk7XG5cbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MudXBkYXRlU2l6ZShcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zdWJSaWdDb3VudCxcbiAgICAgICAgQ3ViaXNtUGh5c2ljc1N1YlJpZyxcbiAgICAgICAgdHJ1ZVxuICAgICAgKTtcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLnVwZGF0ZVNpemUoXG4gICAgICAgIGpzb24uZ2V0VG90YWxJbnB1dENvdW50KCksXG4gICAgICAgIEN1YmlzbVBoeXNpY3NJbnB1dCxcbiAgICAgICAgdHJ1ZVxuICAgICAgKTtcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy51cGRhdGVTaXplKFxuICAgICAgICBqc29uLmdldFRvdGFsT3V0cHV0Q291bnQoKSxcbiAgICAgICAgQ3ViaXNtUGh5c2ljc091dHB1dCxcbiAgICAgICAgdHJ1ZVxuICAgICAgKTtcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcucGFydGljbGVzLnVwZGF0ZVNpemUoXG4gICAgICAgIGpzb24uZ2V0VmVydGV4Q291bnQoKSxcbiAgICAgICAgQ3ViaXNtUGh5c2ljc1BhcnRpY2xlLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuXG4gICAgICBsZXQgaW5wdXRJbmRleCA9IDAsXG4gICAgICAgIG91dHB1dEluZGV4ID0gMCxcbiAgICAgICAgcGFydGljbGVJbmRleCA9IDA7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5nZXRTaXplKCk7ICsraSkge1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KFxuICAgICAgICAgIGlcbiAgICAgICAgKS5ub3JtYWxpemF0aW9uUG9zaXRpb24ubWluaW11bSA9IGpzb24uZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uTWluaW11bVZhbHVlKFxuICAgICAgICAgIGlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChcbiAgICAgICAgICBpXG4gICAgICAgICkubm9ybWFsaXphdGlvblBvc2l0aW9uLm1heGltdW0gPSBqc29uLmdldE5vcm1hbGl6YXRpb25Qb3NpdGlvbk1heGltdW1WYWx1ZShcbiAgICAgICAgICBpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoXG4gICAgICAgICAgaVxuICAgICAgICApLm5vcm1hbGl6YXRpb25Qb3NpdGlvbi5kZWZhbHV0ID0ganNvbi5nZXROb3JtYWxpemF0aW9uUG9zaXRpb25EZWZhdWx0VmFsdWUoXG4gICAgICAgICAgaVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoXG4gICAgICAgICAgaVxuICAgICAgICApLm5vcm1hbGl6YXRpb25BbmdsZS5taW5pbXVtID0ganNvbi5nZXROb3JtYWxpemF0aW9uQW5nbGVNaW5pbXVtVmFsdWUoXG4gICAgICAgICAgaVxuICAgICAgICApO1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KFxuICAgICAgICAgIGlcbiAgICAgICAgKS5ub3JtYWxpemF0aW9uQW5nbGUubWF4aW11bSA9IGpzb24uZ2V0Tm9ybWFsaXphdGlvbkFuZ2xlTWF4aW11bVZhbHVlKFxuICAgICAgICAgIGlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChcbiAgICAgICAgICBpXG4gICAgICAgICkubm9ybWFsaXphdGlvbkFuZ2xlLmRlZmFsdXQgPSBqc29uLmdldE5vcm1hbGl6YXRpb25BbmdsZURlZmF1bHRWYWx1ZShcbiAgICAgICAgICBpXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gSW5wdXRcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5pbnB1dENvdW50ID0ganNvbi5nZXRJbnB1dENvdW50KGkpO1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLmJhc2VJbnB1dEluZGV4ID0gaW5wdXRJbmRleDtcblxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkuaW5wdXRDb3VudDsgKytqKSB7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoaW5wdXRJbmRleCArIGopLnNvdXJjZVBhcmFtZXRlckluZGV4ID0gLTE7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoXG4gICAgICAgICAgICBpbnB1dEluZGV4ICsgalxuICAgICAgICAgICkud2VpZ2h0ID0ganNvbi5nZXRJbnB1dFdlaWdodChpLCBqKTtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChcbiAgICAgICAgICAgIGlucHV0SW5kZXggKyBqXG4gICAgICAgICAgKS5yZWZsZWN0ID0ganNvbi5nZXRJbnB1dFJlZmxlY3QoaSwgaik7XG5cbiAgICAgICAgICBpZiAoanNvbi5nZXRJbnB1dFR5cGUoaSwgaikgPT0gUGh5c2ljc1R5cGVUYWdYKSB7XG4gICAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChpbnB1dEluZGV4ICsgaikudHlwZSA9XG4gICAgICAgICAgICAgIEN1YmlzbVBoeXNpY3NTb3VyY2UuQ3ViaXNtUGh5c2ljc1NvdXJjZV9YO1xuICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoXG4gICAgICAgICAgICAgIGlucHV0SW5kZXggKyBqXG4gICAgICAgICAgICApLmdldE5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZSA9IGdldElucHV0VHJhbnNsYXRpb25YRnJvbU5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGpzb24uZ2V0SW5wdXRUeXBlKGksIGopID09IFBoeXNpY3NUeXBlVGFnWSkge1xuICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoaW5wdXRJbmRleCArIGopLnR5cGUgPVxuICAgICAgICAgICAgICBDdWJpc21QaHlzaWNzU291cmNlLkN1YmlzbVBoeXNpY3NTb3VyY2VfWTtcbiAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KFxuICAgICAgICAgICAgICBpbnB1dEluZGV4ICsgalxuICAgICAgICAgICAgKS5nZXROb3JtYWxpemVkUGFyYW1ldGVyVmFsdWUgPSBnZXRJbnB1dFRyYW5zbGF0aW9uWUZyb21Ob3JtYWxpemVkUGFyYW10ZXJWYWx1ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGpzb24uZ2V0SW5wdXRUeXBlKGksIGopID09IFBoeXNpY3NUeXBlVGFnQW5nbGUpIHtcbiAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KGlucHV0SW5kZXggKyBqKS50eXBlID1cbiAgICAgICAgICAgICAgQ3ViaXNtUGh5c2ljc1NvdXJjZS5DdWJpc21QaHlzaWNzU291cmNlX0FuZ2xlO1xuICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoXG4gICAgICAgICAgICAgIGlucHV0SW5kZXggKyBqXG4gICAgICAgICAgICApLmdldE5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZSA9IGdldElucHV0QW5nbGVGcm9tTm9ybWFsaXplZFBhcmFtZXRlclZhbHVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KGlucHV0SW5kZXggKyBqKS5zb3VyY2UudGFyZ2V0VHlwZSA9XG4gICAgICAgICAgICBDdWJpc21QaHlzaWNzVGFyZ2V0VHlwZS5DdWJpc21QaHlzaWNzVGFyZ2V0VHlwZV9QYXJhbWV0ZXI7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoXG4gICAgICAgICAgICBpbnB1dEluZGV4ICsgalxuICAgICAgICAgICkuc291cmNlLmlkID0ganNvbi5nZXRJbnB1dFNvdXJjZUlkKGksIGopO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0SW5kZXggKz0gdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5pbnB1dENvdW50O1xuXG4gICAgICAgIC8vIE91dHB1dFxuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLm91dHB1dENvdW50ID0ganNvbi5nZXRPdXRwdXRDb3VudChpKTtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5iYXNlT3V0cHV0SW5kZXggPSBvdXRwdXRJbmRleDtcblxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkub3V0cHV0Q291bnQ7ICsraikge1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChcbiAgICAgICAgICAgIG91dHB1dEluZGV4ICsgalxuICAgICAgICAgICkuZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleCA9IC0xO1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChcbiAgICAgICAgICAgIG91dHB1dEluZGV4ICsgalxuICAgICAgICAgICkudmVydGV4SW5kZXggPSBqc29uLmdldE91dHB1dFZlcnRleEluZGV4KGksIGopO1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChcbiAgICAgICAgICAgIG91dHB1dEluZGV4ICsgalxuICAgICAgICAgICkuYW5nbGVTY2FsZSA9IGpzb24uZ2V0T3V0cHV0QW5nbGVTY2FsZShpLCBqKTtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQoXG4gICAgICAgICAgICBvdXRwdXRJbmRleCArIGpcbiAgICAgICAgICApLndlaWdodCA9IGpzb24uZ2V0T3V0cHV0V2VpZ2h0KGksIGopO1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLmRlc3RpbmF0aW9uLnRhcmdldFR5cGUgPVxuICAgICAgICAgICAgQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGUuQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGVfUGFyYW1ldGVyO1xuXG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KFxuICAgICAgICAgICAgb3V0cHV0SW5kZXggKyBqXG4gICAgICAgICAgKS5kZXN0aW5hdGlvbi5pZCA9IGpzb24uZ2V0T3V0cHV0RGVzdGluYXRpb25JZChpLCBqKTtcblxuICAgICAgICAgIGlmIChqc29uLmdldE91dHB1dFR5cGUoaSwgaikgPT0gUGh5c2ljc1R5cGVUYWdYKSB7XG4gICAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS50eXBlID1cbiAgICAgICAgICAgICAgQ3ViaXNtUGh5c2ljc1NvdXJjZS5DdWJpc21QaHlzaWNzU291cmNlX1g7XG4gICAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQoXG4gICAgICAgICAgICAgIG91dHB1dEluZGV4ICsgalxuICAgICAgICAgICAgKS5nZXRWYWx1ZSA9IGdldE91dHB1dFRyYW5zbGF0aW9uWDtcbiAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChcbiAgICAgICAgICAgICAgb3V0cHV0SW5kZXggKyBqXG4gICAgICAgICAgICApLmdldFNjYWxlID0gZ2V0T3V0cHV0U2NhbGVUcmFuc2xhdGlvblg7XG4gICAgICAgICAgfSBlbHNlIGlmIChqc29uLmdldE91dHB1dFR5cGUoaSwgaikgPT0gUGh5c2ljc1R5cGVUYWdZKSB7XG4gICAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS50eXBlID1cbiAgICAgICAgICAgICAgQ3ViaXNtUGh5c2ljc1NvdXJjZS5DdWJpc21QaHlzaWNzU291cmNlX1k7XG4gICAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQoXG4gICAgICAgICAgICAgIG91dHB1dEluZGV4ICsgalxuICAgICAgICAgICAgKS5nZXRWYWx1ZSA9IGdldE91dHB1dFRyYW5zbGF0aW9uWTtcbiAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChcbiAgICAgICAgICAgICAgb3V0cHV0SW5kZXggKyBqXG4gICAgICAgICAgICApLmdldFNjYWxlID0gZ2V0T3V0cHV0U2NhbGVUcmFuc2xhdGlvblk7XG4gICAgICAgICAgfSBlbHNlIGlmIChqc29uLmdldE91dHB1dFR5cGUoaSwgaikgPT0gUGh5c2ljc1R5cGVUYWdBbmdsZSkge1xuICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikudHlwZSA9XG4gICAgICAgICAgICAgIEN1YmlzbVBoeXNpY3NTb3VyY2UuQ3ViaXNtUGh5c2ljc1NvdXJjZV9BbmdsZTtcbiAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChcbiAgICAgICAgICAgICAgb3V0cHV0SW5kZXggKyBqXG4gICAgICAgICAgICApLmdldFZhbHVlID0gZ2V0T3V0cHV0QW5nbGU7XG4gICAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQoXG4gICAgICAgICAgICAgIG91dHB1dEluZGV4ICsgalxuICAgICAgICAgICAgKS5nZXRTY2FsZSA9IGdldE91dHB1dFNjYWxlQW5nbGU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KFxuICAgICAgICAgICAgb3V0cHV0SW5kZXggKyBqXG4gICAgICAgICAgKS5yZWZsZWN0ID0ganNvbi5nZXRPdXRwdXRSZWZsZWN0KGksIGopO1xuICAgICAgICB9XG4gICAgICAgIG91dHB1dEluZGV4ICs9IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkub3V0cHV0Q291bnQ7XG5cbiAgICAgICAgLy8gUGFydGljbGVcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5wYXJ0aWNsZUNvdW50ID0ganNvbi5nZXRQYXJ0aWNsZUNvdW50KFxuICAgICAgICAgIGlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5iYXNlUGFydGljbGVJbmRleCA9IHBhcnRpY2xlSW5kZXg7XG5cbiAgICAgICAgZm9yIChcbiAgICAgICAgICBsZXQgaiA9IDA7XG4gICAgICAgICAgaiA8IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkucGFydGljbGVDb3VudDtcbiAgICAgICAgICArK2pcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMuYXQoXG4gICAgICAgICAgICBwYXJ0aWNsZUluZGV4ICsgalxuICAgICAgICAgICkubW9iaWxpdHkgPSBqc29uLmdldFBhcnRpY2xlTW9iaWxpdHkoaSwgaik7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMuYXQoXG4gICAgICAgICAgICBwYXJ0aWNsZUluZGV4ICsgalxuICAgICAgICAgICkuZGVsYXkgPSBqc29uLmdldFBhcnRpY2xlRGVsYXkoaSwgaik7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMuYXQoXG4gICAgICAgICAgICBwYXJ0aWNsZUluZGV4ICsgalxuICAgICAgICAgICkuYWNjZWxlcmF0aW9uID0ganNvbi5nZXRQYXJ0aWNsZUFjY2VsZXJhdGlvbihpLCBqKTtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnBhcnRpY2xlcy5hdChcbiAgICAgICAgICAgIHBhcnRpY2xlSW5kZXggKyBqXG4gICAgICAgICAgKS5yYWRpdXMgPSBqc29uLmdldFBhcnRpY2xlUmFkaXVzKGksIGopO1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcucGFydGljbGVzLmF0KFxuICAgICAgICAgICAgcGFydGljbGVJbmRleCArIGpcbiAgICAgICAgICApLnBvc2l0aW9uID0ganNvbi5nZXRQYXJ0aWNsZVBvc2l0aW9uKGksIGopO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFydGljbGVJbmRleCArPSB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLnBhcnRpY2xlQ291bnQ7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuXG4gICAgICBqc29uLnJlbGVhc2UoKTtcbiAgICAgIGpzb24gPSB2b2lkIDA7XG4gICAgICBqc29uID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDliJ3mnJ/ljJbjgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgaW5pdGlhbGl6ZSgpOiB2b2lkIHtcbiAgICAgIGxldCBzdHJhbmQ6IEN1YmlzbVBoeXNpY3NQYXJ0aWNsZVtdO1xuICAgICAgbGV0IGN1cnJlbnRTZXR0aW5nOiBDdWJpc21QaHlzaWNzU3ViUmlnO1xuICAgICAgbGV0IHJhZGl1czogQ3ViaXNtVmVjdG9yMjtcblxuICAgICAgZm9yIChcbiAgICAgICAgbGV0IHNldHRpbmdJbmRleCA9IDA7XG4gICAgICAgIHNldHRpbmdJbmRleCA8IHRoaXMuX3BoeXNpY3NSaWcuc3ViUmlnQ291bnQ7XG4gICAgICAgICsrc2V0dGluZ0luZGV4XG4gICAgICApIHtcbiAgICAgICAgY3VycmVudFNldHRpbmcgPSB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KHNldHRpbmdJbmRleCk7XG4gICAgICAgIHN0cmFuZCA9IHRoaXMuX3BoeXNpY3NSaWcucGFydGljbGVzLmdldChcbiAgICAgICAgICBjdXJyZW50U2V0dGluZy5iYXNlUGFydGljbGVJbmRleFxuICAgICAgICApO1xuXG4gICAgICAgIC8vIEluaXRpYWxpemUgdGhlIHRvcCBvZiBwYXJ0aWNsZS5cbiAgICAgICAgc3RyYW5kWzBdLmluaXRpYWxQb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICAgICAgc3RyYW5kWzBdLmxhc3RQb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKFxuICAgICAgICAgIHN0cmFuZFswXS5pbml0aWFsUG9zaXRpb24ueCxcbiAgICAgICAgICBzdHJhbmRbMF0uaW5pdGlhbFBvc2l0aW9uLnlcbiAgICAgICAgKTtcbiAgICAgICAgc3RyYW5kWzBdLmxhc3RHcmF2aXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAtMS4wKTtcbiAgICAgICAgc3RyYW5kWzBdLmxhc3RHcmF2aXR5LnkgKj0gLTEuMDtcbiAgICAgICAgc3RyYW5kWzBdLnZlbG9jaXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgICAgICBzdHJhbmRbMF0uZm9yY2UgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG5cbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBwYXJpdGNsZXMuXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgY3VycmVudFNldHRpbmcucGFydGljbGVDb3VudDsgKytpKSB7XG4gICAgICAgICAgcmFkaXVzID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgICAgICAgIHJhZGl1cy55ID0gc3RyYW5kW2ldLnJhZGl1cztcbiAgICAgICAgICBzdHJhbmRbaV0uaW5pdGlhbFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoXG4gICAgICAgICAgICBzdHJhbmRbaSAtIDFdLmluaXRpYWxQb3NpdGlvbi54ICsgcmFkaXVzLngsXG4gICAgICAgICAgICBzdHJhbmRbaSAtIDFdLmluaXRpYWxQb3NpdGlvbi55ICsgcmFkaXVzLnlcbiAgICAgICAgICApO1xuICAgICAgICAgIHN0cmFuZFtpXS5wb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKFxuICAgICAgICAgICAgc3RyYW5kW2ldLmluaXRpYWxQb3NpdGlvbi54LFxuICAgICAgICAgICAgc3RyYW5kW2ldLmluaXRpYWxQb3NpdGlvbi55XG4gICAgICAgICAgKTtcbiAgICAgICAgICBzdHJhbmRbaV0ubGFzdFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoXG4gICAgICAgICAgICBzdHJhbmRbaV0uaW5pdGlhbFBvc2l0aW9uLngsXG4gICAgICAgICAgICBzdHJhbmRbaV0uaW5pdGlhbFBvc2l0aW9uLnlcbiAgICAgICAgICApO1xuICAgICAgICAgIHN0cmFuZFtpXS5sYXN0R3Jhdml0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgLTEuMCk7XG4gICAgICAgICAgc3RyYW5kW2ldLmxhc3RHcmF2aXR5LnkgKj0gLTEuMDtcbiAgICAgICAgICBzdHJhbmRbaV0udmVsb2NpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgICAgICAgc3RyYW5kW2ldLmZvcmNlID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3BoeXNpY3NSaWc6IEN1YmlzbVBoeXNpY3NSaWc7IC8vIOeJqeeQhua8lOeul+OBruODh+ODvOOCv1xuICAgIF9vcHRpb25zOiBPcHRpb25zOyAvLyDjgqrjg5fjgrfjg6fjg7NcbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbmvJTnrpfjga7jgqrjg5fjgrfjg6fjg7NcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBPcHRpb25zIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMuZ3Jhdml0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgICAgdGhpcy53aW5kID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgfVxuXG4gICAgZ3Jhdml0eTogQ3ViaXNtVmVjdG9yMjsgLy8g6YeN5Yqb5pa55ZCRXG4gICAgd2luZDogQ3ViaXNtVmVjdG9yMjsgLy8g6aKo44Gu5pa55ZCRXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBzaWduLlxuICAgKlxuICAgKiBAcGFyYW0gdmFsdWUgRXZhbHVhdGlvbiB0YXJnZXQgdmFsdWUuXG4gICAqXG4gICAqIEByZXR1cm4gU2lnbiBvZiB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHNpZ24odmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgbGV0IHJldCA9IDA7XG5cbiAgICBpZiAodmFsdWUgPiAwLjApIHtcbiAgICAgIHJldCA9IDE7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA8IDAuMCkge1xuICAgICAgcmV0ID0gLTE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldElucHV0VHJhbnNsYXRpb25YRnJvbU5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZShcbiAgICB0YXJnZXRUcmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgICB0YXJnZXRBbmdsZTogeyBhbmdsZTogbnVtYmVyIH0sXG4gICAgdmFsdWU6IG51bWJlcixcbiAgICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWU6IG51bWJlcixcbiAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWU6IG51bWJlcixcbiAgICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWU6IG51bWJlcixcbiAgICBub3JtYWxpemF0aW9uUG9zaXRpb246IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxuICAgIG5vcm1hbGl6YXRpb25BbmdsZTogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24sXG4gICAgaXNJbnZlcnRlZDogYm9vbGVhbixcbiAgICB3ZWlnaHQ6IG51bWJlclxuICApOiB2b2lkIHtcbiAgICB0YXJnZXRUcmFuc2xhdGlvbi54ICs9XG4gICAgICBub3JtYWxpemVQYXJhbWV0ZXJWYWx1ZShcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZSxcbiAgICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlLFxuICAgICAgICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWUsXG4gICAgICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbi5taW5pbXVtLFxuICAgICAgICBub3JtYWxpemF0aW9uUG9zaXRpb24ubWF4aW11bSxcbiAgICAgICAgbm9ybWFsaXphdGlvblBvc2l0aW9uLmRlZmFsdXQsXG4gICAgICAgIGlzSW52ZXJ0ZWRcbiAgICAgICkgKiB3ZWlnaHQ7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJbnB1dFRyYW5zbGF0aW9uWUZyb21Ob3JtYWxpemVkUGFyYW10ZXJWYWx1ZShcbiAgICB0YXJnZXRUcmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgICB0YXJnZXRBbmdsZTogeyBhbmdsZTogbnVtYmVyIH0sXG4gICAgdmFsdWU6IG51bWJlcixcbiAgICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWU6IG51bWJlcixcbiAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWU6IG51bWJlcixcbiAgICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWU6IG51bWJlcixcbiAgICBub3JtYWxpemF0aW9uUG9zaXRpb246IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxuICAgIG5vcm1hbGl6YXRpb25BbmdsZTogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24sXG4gICAgaXNJbnZlcnRlZDogYm9vbGVhbixcbiAgICB3ZWlnaHQ6IG51bWJlclxuICApOiB2b2lkIHtcbiAgICB0YXJnZXRUcmFuc2xhdGlvbi55ICs9XG4gICAgICBub3JtYWxpemVQYXJhbWV0ZXJWYWx1ZShcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZSxcbiAgICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlLFxuICAgICAgICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWUsXG4gICAgICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbi5taW5pbXVtLFxuICAgICAgICBub3JtYWxpemF0aW9uUG9zaXRpb24ubWF4aW11bSxcbiAgICAgICAgbm9ybWFsaXphdGlvblBvc2l0aW9uLmRlZmFsdXQsXG4gICAgICAgIGlzSW52ZXJ0ZWRcbiAgICAgICkgKiB3ZWlnaHQ7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJbnB1dEFuZ2xlRnJvbU5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZShcbiAgICB0YXJnZXRUcmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgICB0YXJnZXRBbmdsZTogeyBhbmdsZTogbnVtYmVyIH0sXG4gICAgdmFsdWU6IG51bWJlcixcbiAgICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWU6IG51bWJlcixcbiAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWU6IG51bWJlcixcbiAgICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWU6IG51bWJlcixcbiAgICBub3JtYWxpemFpdGlvblBvc2l0aW9uOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcbiAgICBub3JtYWxpemF0aW9uQW5nbGU6IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxuICAgIGlzSW52ZXJ0ZWQ6IGJvb2xlYW4sXG4gICAgd2VpZ2h0OiBudW1iZXJcbiAgKTogdm9pZCB7XG4gICAgdGFyZ2V0QW5nbGUuYW5nbGUgKz1cbiAgICAgIG5vcm1hbGl6ZVBhcmFtZXRlclZhbHVlKFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgcGFyYW1ldGVyTWluaW11bVZhbHVlLFxuICAgICAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWUsXG4gICAgICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZSxcbiAgICAgICAgbm9ybWFsaXphdGlvbkFuZ2xlLm1pbmltdW0sXG4gICAgICAgIG5vcm1hbGl6YXRpb25BbmdsZS5tYXhpbXVtLFxuICAgICAgICBub3JtYWxpemF0aW9uQW5nbGUuZGVmYWx1dCxcbiAgICAgICAgaXNJbnZlcnRlZFxuICAgICAgKSAqIHdlaWdodDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE91dHB1dFRyYW5zbGF0aW9uWChcbiAgICB0cmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgICBwYXJ0aWNsZXM6IEN1YmlzbVBoeXNpY3NQYXJ0aWNsZVtdLFxuICAgIHBhcnRpY2xlSW5kZXg6IG51bWJlcixcbiAgICBpc0ludmVydGVkOiBib29sZWFuLFxuICAgIHBhcmVudEdyYXZpdHk6IEN1YmlzbVZlY3RvcjJcbiAgKTogbnVtYmVyIHtcbiAgICBsZXQgb3V0cHV0VmFsdWU6IG51bWJlciA9IHRyYW5zbGF0aW9uLng7XG5cbiAgICBpZiAoaXNJbnZlcnRlZCkge1xuICAgICAgb3V0cHV0VmFsdWUgKj0gLTEuMDtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0VmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRPdXRwdXRUcmFuc2xhdGlvblkoXG4gICAgdHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIsXG4gICAgcGFydGljbGVzOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXSxcbiAgICBwYXJ0aWNsZUluZGV4OiBudW1iZXIsXG4gICAgaXNJbnZlcnRlZDogYm9vbGVhbixcbiAgICBwYXJlbnRHcmF2aXR5OiBDdWJpc21WZWN0b3IyXG4gICk6IG51bWJlciB7XG4gICAgbGV0IG91dHB1dFZhbHVlOiBudW1iZXIgPSB0cmFuc2xhdGlvbi55O1xuXG4gICAgaWYgKGlzSW52ZXJ0ZWQpIHtcbiAgICAgIG91dHB1dFZhbHVlICo9IC0xLjA7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXRWYWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE91dHB1dEFuZ2xlKFxuICAgIHRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxuICAgIHBhcnRpY2xlczogQ3ViaXNtUGh5c2ljc1BhcnRpY2xlW10sXG4gICAgcGFydGljbGVJbmRleDogbnVtYmVyLFxuICAgIGlzSW52ZXJ0ZWQ6IGJvb2xlYW4sXG4gICAgcGFyZW50R3Jhdml0eTogQ3ViaXNtVmVjdG9yMlxuICApOiBudW1iZXIge1xuICAgIGxldCBvdXRwdXRWYWx1ZTogbnVtYmVyO1xuXG4gICAgaWYgKHBhcnRpY2xlSW5kZXggPj0gMikge1xuICAgICAgcGFyZW50R3Jhdml0eSA9IHBhcnRpY2xlc1twYXJ0aWNsZUluZGV4IC0gMV0ucG9zaXRpb24uc3Vic3RyYWN0KFxuICAgICAgICBwYXJ0aWNsZXNbcGFydGljbGVJbmRleCAtIDJdLnBvc2l0aW9uXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJlbnRHcmF2aXR5ID0gcGFyZW50R3Jhdml0eS5tdWx0aXBseUJ5U2NhbGVyKC0xLjApO1xuICAgIH1cblxuICAgIG91dHB1dFZhbHVlID0gQ3ViaXNtTWF0aC5kaXJlY3Rpb25Ub1JhZGlhbihwYXJlbnRHcmF2aXR5LCB0cmFuc2xhdGlvbik7XG5cbiAgICBpZiAoaXNJbnZlcnRlZCkge1xuICAgICAgb3V0cHV0VmFsdWUgKj0gLTEuMDtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0VmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRSYW5nZVZhbHVlKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3QgbWF4VmFsdWU6IG51bWJlciA9IEN1YmlzbU1hdGgubWF4KG1pbiwgbWF4KTtcbiAgICBjb25zdCBtaW5WYWx1ZTogbnVtYmVyID0gQ3ViaXNtTWF0aC5taW4obWluLCBtYXgpO1xuXG4gICAgcmV0dXJuIEN1YmlzbU1hdGguYWJzKG1heFZhbHVlIC0gbWluVmFsdWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RGVmYXVsdFZhbHVlKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3QgbWluVmFsdWU6IG51bWJlciA9IEN1YmlzbU1hdGgubWluKG1pbiwgbWF4KTtcbiAgICByZXR1cm4gbWluVmFsdWUgKyBnZXRSYW5nZVZhbHVlKG1pbiwgbWF4KSAvIDIuMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE91dHB1dFNjYWxlVHJhbnNsYXRpb25YKFxuICAgIHRyYW5zbGF0aW9uU2NhbGU6IEN1YmlzbVZlY3RvcjIsXG4gICAgYW5nbGVTY2FsZTogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodHJhbnNsYXRpb25TY2FsZS54KSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRPdXRwdXRTY2FsZVRyYW5zbGF0aW9uWShcbiAgICB0cmFuc2xhdGlvblNjYWxlOiBDdWJpc21WZWN0b3IyLFxuICAgIGFuZ2xlU2NhbGU6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRyYW5zbGF0aW9uU2NhbGUueSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0T3V0cHV0U2NhbGVBbmdsZShcbiAgICB0cmFuc2xhdGlvblNjYWxlOiBDdWJpc21WZWN0b3IyLFxuICAgIGFuZ2xlU2NhbGU6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGFuZ2xlU2NhbGUpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHBhcnRpY2xlcy5cbiAgICpcbiAgICogQHBhcmFtIHN0cmFuZCAgICAgICAgICAgICAgICBUYXJnZXQgYXJyYXkgb2YgcGFydGljbGUuXG4gICAqIEBwYXJhbSBzdHJhbmRDb3VudCAgICAgICAgICAgQ291bnQgb2YgcGFydGljbGUuXG4gICAqIEBwYXJhbSB0b3RhbFRyYW5zbGF0aW9uICAgICAgVG90YWwgdHJhbnNsYXRpb24gdmFsdWUuXG4gICAqIEBwYXJhbSB0b3RhbEFuZ2xlICAgICAgICAgICAgVG90YWwgYW5nbGUuXG4gICAqIEBwYXJhbSB3aW5kRGlyZWN0aW9uICAgICAgICAgRGlyZWN0aW9uIG9mIFdpbmQuXG4gICAqIEBwYXJhbSB0aHJlc2hvbGRWYWx1ZSAgICAgICAgVGhyZXNob2xkIG9mIG1vdmVtZW50LlxuICAgKiBAcGFyYW0gZGVsdGFUaW1lU2Vjb25kcyAgICAgIERlbHRhIHRpbWUuXG4gICAqIEBwYXJhbSBhaXJSZXNpc3RhbmNlICAgICAgICAgQWlyIHJlc2lzdGFuY2UuXG4gICAqL1xuICBmdW5jdGlvbiB1cGRhdGVQYXJ0aWNsZXMoXG4gICAgc3RyYW5kOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXSxcbiAgICBzdHJhbmRDb3VudDogbnVtYmVyLFxuICAgIHRvdGFsVHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIsXG4gICAgdG90YWxBbmdsZTogbnVtYmVyLFxuICAgIHdpbmREaXJlY3Rpb246IEN1YmlzbVZlY3RvcjIsXG4gICAgdGhyZXNob2xkVmFsdWU6IG51bWJlcixcbiAgICBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIsXG4gICAgYWlyUmVzaXN0YW5jZTogbnVtYmVyXG4gICkge1xuICAgIGxldCB0b3RhbFJhZGlhbjogbnVtYmVyO1xuICAgIGxldCBkZWxheTogbnVtYmVyO1xuICAgIGxldCByYWRpYW46IG51bWJlcjtcbiAgICBsZXQgY3VycmVudEdyYXZpdHk6IEN1YmlzbVZlY3RvcjI7XG4gICAgbGV0IGRpcmVjdGlvbjogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICBsZXQgdmVsb2NpdHk6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgbGV0IGZvcmNlOiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgIGxldCBuZXdEaXJlY3Rpb246IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG5cbiAgICBzdHJhbmRbMF0ucG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMihcbiAgICAgIHRvdGFsVHJhbnNsYXRpb24ueCxcbiAgICAgIHRvdGFsVHJhbnNsYXRpb24ueVxuICAgICk7XG5cbiAgICB0b3RhbFJhZGlhbiA9IEN1YmlzbU1hdGguZGVncmVlc1RvUmFkaWFuKHRvdGFsQW5nbGUpO1xuICAgIGN1cnJlbnRHcmF2aXR5ID0gQ3ViaXNtTWF0aC5yYWRpYW5Ub0RpcmVjdGlvbih0b3RhbFJhZGlhbik7XG4gICAgY3VycmVudEdyYXZpdHkubm9ybWFsaXplKCk7XG5cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHN0cmFuZENvdW50OyArK2kpIHtcbiAgICAgIHN0cmFuZFtpXS5mb3JjZSA9IGN1cnJlbnRHcmF2aXR5XG4gICAgICAgIC5tdWx0aXBseUJ5U2NhbGVyKHN0cmFuZFtpXS5hY2NlbGVyYXRpb24pXG4gICAgICAgIC5hZGQod2luZERpcmVjdGlvbik7XG5cbiAgICAgIHN0cmFuZFtpXS5sYXN0UG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMihcbiAgICAgICAgc3RyYW5kW2ldLnBvc2l0aW9uLngsXG4gICAgICAgIHN0cmFuZFtpXS5wb3NpdGlvbi55XG4gICAgICApO1xuXG4gICAgICBkZWxheSA9IHN0cmFuZFtpXS5kZWxheSAqIGRlbHRhVGltZVNlY29uZHMgKiAzMC4wO1xuXG4gICAgICBkaXJlY3Rpb24gPSBzdHJhbmRbaV0ucG9zaXRpb24uc3Vic3RyYWN0KHN0cmFuZFtpIC0gMV0ucG9zaXRpb24pO1xuXG4gICAgICByYWRpYW4gPVxuICAgICAgICBDdWJpc21NYXRoLmRpcmVjdGlvblRvUmFkaWFuKHN0cmFuZFtpXS5sYXN0R3Jhdml0eSwgY3VycmVudEdyYXZpdHkpIC9cbiAgICAgICAgYWlyUmVzaXN0YW5jZTtcblxuICAgICAgZGlyZWN0aW9uLnggPVxuICAgICAgICBDdWJpc21NYXRoLmNvcyhyYWRpYW4pICogZGlyZWN0aW9uLnggLVxuICAgICAgICBkaXJlY3Rpb24ueSAqIEN1YmlzbU1hdGguc2luKHJhZGlhbik7XG4gICAgICBkaXJlY3Rpb24ueSA9XG4gICAgICAgIEN1YmlzbU1hdGguc2luKHJhZGlhbikgKiBkaXJlY3Rpb24ueCArXG4gICAgICAgIGRpcmVjdGlvbi55ICogQ3ViaXNtTWF0aC5jb3MocmFkaWFuKTtcblxuICAgICAgc3RyYW5kW2ldLnBvc2l0aW9uID0gc3RyYW5kW2kgLSAxXS5wb3NpdGlvbi5hZGQoZGlyZWN0aW9uKTtcblxuICAgICAgdmVsb2NpdHkgPSBzdHJhbmRbaV0udmVsb2NpdHkubXVsdGlwbHlCeVNjYWxlcihkZWxheSk7XG4gICAgICBmb3JjZSA9IHN0cmFuZFtpXS5mb3JjZS5tdWx0aXBseUJ5U2NhbGVyKGRlbGF5KS5tdWx0aXBseUJ5U2NhbGVyKGRlbGF5KTtcblxuICAgICAgc3RyYW5kW2ldLnBvc2l0aW9uID0gc3RyYW5kW2ldLnBvc2l0aW9uLmFkZCh2ZWxvY2l0eSkuYWRkKGZvcmNlKTtcblxuICAgICAgbmV3RGlyZWN0aW9uID0gc3RyYW5kW2ldLnBvc2l0aW9uLnN1YnN0cmFjdChzdHJhbmRbaSAtIDFdLnBvc2l0aW9uKTtcbiAgICAgIG5ld0RpcmVjdGlvbi5ub3JtYWxpemUoKTtcblxuICAgICAgc3RyYW5kW2ldLnBvc2l0aW9uID0gc3RyYW5kW2kgLSAxXS5wb3NpdGlvbi5hZGQoXG4gICAgICAgIG5ld0RpcmVjdGlvbi5tdWx0aXBseUJ5U2NhbGVyKHN0cmFuZFtpXS5yYWRpdXMpXG4gICAgICApO1xuXG4gICAgICBpZiAoQ3ViaXNtTWF0aC5hYnMoc3RyYW5kW2ldLnBvc2l0aW9uLngpIDwgdGhyZXNob2xkVmFsdWUpIHtcbiAgICAgICAgc3RyYW5kW2ldLnBvc2l0aW9uLnggPSAwLjA7XG4gICAgICB9XG5cbiAgICAgIGlmIChkZWxheSAhPSAwLjApIHtcbiAgICAgICAgc3RyYW5kW2ldLnZlbG9jaXR5ID0gc3RyYW5kW2ldLnBvc2l0aW9uLnN1YnN0cmFjdChcbiAgICAgICAgICBzdHJhbmRbaV0ubGFzdFBvc2l0aW9uXG4gICAgICAgICk7XG4gICAgICAgIHN0cmFuZFtpXS52ZWxvY2l0eSA9IHN0cmFuZFtpXS52ZWxvY2l0eS5kaXZpc2lvbkJ5U2NhbGFyKGRlbGF5KTtcbiAgICAgICAgc3RyYW5kW2ldLnZlbG9jaXR5ID0gc3RyYW5kW2ldLnZlbG9jaXR5Lm11bHRpcGx5QnlTY2FsZXIoXG4gICAgICAgICAgc3RyYW5kW2ldLm1vYmlsaXR5XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHN0cmFuZFtpXS5mb3JjZSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICAgIHN0cmFuZFtpXS5sYXN0R3Jhdml0eSA9IG5ldyBDdWJpc21WZWN0b3IyKFxuICAgICAgICBjdXJyZW50R3Jhdml0eS54LFxuICAgICAgICBjdXJyZW50R3Jhdml0eS55XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIG91dHB1dCBwYXJhbWV0ZXIgdmFsdWUuXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSAgICAgICAgICAgIFRhcmdldCBwYXJhbWV0ZXIgdmFsdWUuXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZU1pbmltdW0gICAgIE1pbmltdW0gb2YgcGFyYW1ldGVyIHZhbHVlLlxuICAgKiBAcGFyYW0gcGFyYW1ldGVyVmFsdWVNYXhpbXVtICAgICBNYXhpbXVtIG9mIHBhcmFtZXRlciB2YWx1ZS5cbiAgICogQHBhcmFtIHRyYW5zbGF0aW9uICAgICAgICAgICAgICAgVHJhbnNsYXRpb24gdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiB1cGRhdGVPdXRwdXRQYXJhbWV0ZXJWYWx1ZShcbiAgICBwYXJhbWV0ZXJWYWx1ZTogRmxvYXQzMkFycmF5LFxuICAgIHBhcmFtZXRlclZhbHVlTWluaW11bTogbnVtYmVyLFxuICAgIHBhcmFtZXRlclZhbHVlTWF4aW11bTogbnVtYmVyLFxuICAgIHRyYW5zbGF0aW9uOiBudW1iZXIsXG4gICAgb3V0cHV0OiBDdWJpc21QaHlzaWNzT3V0cHV0XG4gICk6IHZvaWQge1xuICAgIGxldCBvdXRwdXRTY2FsZTogbnVtYmVyO1xuICAgIGxldCB2YWx1ZTogbnVtYmVyO1xuICAgIGxldCB3ZWlnaHQ6IG51bWJlcjtcblxuICAgIG91dHB1dFNjYWxlID0gb3V0cHV0LmdldFNjYWxlKG91dHB1dC50cmFuc2xhdGlvblNjYWxlLCBvdXRwdXQuYW5nbGVTY2FsZSk7XG5cbiAgICB2YWx1ZSA9IHRyYW5zbGF0aW9uICogb3V0cHV0U2NhbGU7XG5cbiAgICBpZiAodmFsdWUgPCBwYXJhbWV0ZXJWYWx1ZU1pbmltdW0pIHtcbiAgICAgIGlmICh2YWx1ZSA8IG91dHB1dC52YWx1ZUJlbG93TWluaW11bSkge1xuICAgICAgICBvdXRwdXQudmFsdWVCZWxvd01pbmltdW0gPSB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFsdWUgPSBwYXJhbWV0ZXJWYWx1ZU1pbmltdW07XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA+IHBhcmFtZXRlclZhbHVlTWF4aW11bSkge1xuICAgICAgaWYgKHZhbHVlID4gb3V0cHV0LnZhbHVlRXhjZWVkZWRNYXhpbXVtKSB7XG4gICAgICAgIG91dHB1dC52YWx1ZUV4Y2VlZGVkTWF4aW11bSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZSA9IHBhcmFtZXRlclZhbHVlTWF4aW11bTtcbiAgICB9XG5cbiAgICB3ZWlnaHQgPSBvdXRwdXQud2VpZ2h0IC8gTWF4aW11bVdlaWdodDtcblxuICAgIGlmICh3ZWlnaHQgPj0gMS4wKSB7XG4gICAgICBwYXJhbWV0ZXJWYWx1ZVswXSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IHBhcmFtZXRlclZhbHVlWzBdICogKDEuMCAtIHdlaWdodCkgKyB2YWx1ZSAqIHdlaWdodDtcbiAgICAgIHBhcmFtZXRlclZhbHVlWzBdID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplUGFyYW1ldGVyVmFsdWUoXG4gICAgdmFsdWU6IG51bWJlcixcbiAgICBwYXJhbWV0ZXJNaW5pbXVtOiBudW1iZXIsXG4gICAgcGFyYW1ldGVyTWF4aW11bTogbnVtYmVyLFxuICAgIHBhcmFtZXRlckRlZmF1bHQ6IG51bWJlcixcbiAgICBub3JtYWxpemVkTWluaW11bTogbnVtYmVyLFxuICAgIG5vcm1hbGl6ZWRNYXhpbXVtOiBudW1iZXIsXG4gICAgbm9ybWFsaXplZERlZmF1bHQ6IG51bWJlcixcbiAgICBpc0ludmVydGVkOiBib29sZWFuXG4gICkge1xuICAgIGxldCByZXN1bHQgPSAwLjA7XG5cbiAgICBjb25zdCBtYXhWYWx1ZTogbnVtYmVyID0gQ3ViaXNtTWF0aC5tYXgocGFyYW1ldGVyTWF4aW11bSwgcGFyYW1ldGVyTWluaW11bSk7XG5cbiAgICBpZiAobWF4VmFsdWUgPCB2YWx1ZSkge1xuICAgICAgdmFsdWUgPSBtYXhWYWx1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBtaW5WYWx1ZTogbnVtYmVyID0gQ3ViaXNtTWF0aC5taW4ocGFyYW1ldGVyTWF4aW11bSwgcGFyYW1ldGVyTWluaW11bSk7XG5cbiAgICBpZiAobWluVmFsdWUgPiB2YWx1ZSkge1xuICAgICAgdmFsdWUgPSBtaW5WYWx1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBtaW5Ob3JtVmFsdWU6IG51bWJlciA9IEN1YmlzbU1hdGgubWluKFxuICAgICAgbm9ybWFsaXplZE1pbmltdW0sXG4gICAgICBub3JtYWxpemVkTWF4aW11bVxuICAgICk7XG4gICAgY29uc3QgbWF4Tm9ybVZhbHVlOiBudW1iZXIgPSBDdWJpc21NYXRoLm1heChcbiAgICAgIG5vcm1hbGl6ZWRNaW5pbXVtLFxuICAgICAgbm9ybWFsaXplZE1heGltdW1cbiAgICApO1xuICAgIGNvbnN0IG1pZGRsZU5vcm1WYWx1ZTogbnVtYmVyID0gbm9ybWFsaXplZERlZmF1bHQ7XG5cbiAgICBjb25zdCBtaWRkbGVWYWx1ZTogbnVtYmVyID0gZ2V0RGVmYXVsdFZhbHVlKG1pblZhbHVlLCBtYXhWYWx1ZSk7XG4gICAgY29uc3QgcGFyYW1WYWx1ZTogbnVtYmVyID0gdmFsdWUgLSBtaWRkbGVWYWx1ZTtcblxuICAgIHN3aXRjaCAoc2lnbihwYXJhbVZhbHVlKSkge1xuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIGNvbnN0IG5MZW5ndGg6IG51bWJlciA9IG1heE5vcm1WYWx1ZSAtIG1pZGRsZU5vcm1WYWx1ZTtcbiAgICAgICAgY29uc3QgcExlbmd0aDogbnVtYmVyID0gbWF4VmFsdWUgLSBtaWRkbGVWYWx1ZTtcblxuICAgICAgICBpZiAocExlbmd0aCAhPSAwLjApIHtcbiAgICAgICAgICByZXN1bHQgPSBwYXJhbVZhbHVlICogKG5MZW5ndGggLyBwTGVuZ3RoKTtcbiAgICAgICAgICByZXN1bHQgKz0gbWlkZGxlTm9ybVZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIC0xOiB7XG4gICAgICAgIGNvbnN0IG5MZW5ndGg6IG51bWJlciA9IG1pbk5vcm1WYWx1ZSAtIG1pZGRsZU5vcm1WYWx1ZTtcbiAgICAgICAgY29uc3QgcExlbmd0aDogbnVtYmVyID0gbWluVmFsdWUgLSBtaWRkbGVWYWx1ZTtcblxuICAgICAgICBpZiAocExlbmd0aCAhPSAwLjApIHtcbiAgICAgICAgICByZXN1bHQgPSBwYXJhbVZhbHVlICogKG5MZW5ndGggLyBwTGVuZ3RoKTtcbiAgICAgICAgICByZXN1bHQgKz0gbWlkZGxlTm9ybVZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDA6IHtcbiAgICAgICAgcmVzdWx0ID0gbWlkZGxlTm9ybVZhbHVlO1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaXNJbnZlcnRlZCA/IHJlc3VsdCA6IHJlc3VsdCAqIC0xLjA7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc212ZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9jdWJpc212ZWN0b3IyJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21pZCB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgY3NtVmVjdG9yID0gY3NtdmVjdG9yLmNzbVZlY3RvcjtcbmltcG9ydCBDdWJpc21JZEhhbmRsZSA9IGN1YmlzbWlkLkN1YmlzbUlkSGFuZGxlO1xuaW1wb3J0IEN1YmlzbVZlY3RvcjIgPSBjdWJpc212ZWN0b3IyLkN1YmlzbVZlY3RvcjI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgLyoqXG4gICAqIOeJqeeQhua8lOeul+OBrumBqeeUqOWFiOOBrueorumhnlxuICAgKi9cbiAgZXhwb3J0IGVudW0gQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGUge1xuICAgIEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlX1BhcmFtZXRlciAvLyDjg5Hjg6njg6Hjg7zjgr/jgavlr77jgZfjgabpgannlKhcbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbmvJTnrpfjga7lhaXlipvjga7nqK7poZ5cbiAgICovXG4gIGV4cG9ydCBlbnVtIEN1YmlzbVBoeXNpY3NTb3VyY2Uge1xuICAgIEN1YmlzbVBoeXNpY3NTb3VyY2VfWCwgLy8gWOi7uOOBruS9jee9ruOBi+OCiVxuICAgIEN1YmlzbVBoeXNpY3NTb3VyY2VfWSwgLy8gWei7uOOBruS9jee9ruOBi+OCiVxuICAgIEN1YmlzbVBoeXNpY3NTb3VyY2VfQW5nbGUgLy8g6KeS5bqm44GL44KJXG4gIH1cblxuICAvKipcbiAgICogQGJyaWVmIOeJqeeQhua8lOeul+OBp+S9v+eUqOOBmeOCi+WklumDqOOBruWKm1xuICAgKlxuICAgKiDniannkIbmvJTnrpfjgafkvb/nlKjjgZnjgovlpJbpg6jjga7lipvjgIJcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBQaHlzaWNzSnNvbkVmZmVjdGl2ZUZvcmNlcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICB0aGlzLmdyYXZpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICAgIHRoaXMud2luZCA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgIH1cbiAgICBncmF2aXR5OiBDdWJpc21WZWN0b3IyOyAvLyDph43liptcbiAgICB3aW5kOiBDdWJpc21WZWN0b3IyOyAvLyDpoqhcbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbmvJTnrpfjga7jg5Hjg6njg6Hjg7zjgr/mg4XloLFcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21QaHlzaWNzUGFyYW1ldGVyIHtcbiAgICBpZDogQ3ViaXNtSWRIYW5kbGU7IC8vIOODkeODqeODoeODvOOCv1xuICAgIHRhcmdldFR5cGU6IEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlOyAvLyDpgannlKjlhYjjga7nqK7poZ5cbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbmvJTnrpfjga7mraPopo/ljJbmg4XloLFcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbiB7XG4gICAgbWluaW11bTogbnVtYmVyOyAvLyDmnIDlpKflgKRcbiAgICBtYXhpbXVtOiBudW1iZXI7IC8vIOacgOWwj+WApFxuICAgIGRlZmFsdXQ6IG51bWJlcjsgLy8g44OH44OV44Kp44Or44OI5YCkXG4gIH1cblxuICAvKipcbiAgICog54mp55CG5ryU566X44Gu5ryU566X5aeU5L2/55So44GZ44KL54mp55CG54K544Gu5oOF5aCxXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtUGh5c2ljc1BhcnRpY2xlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMuaW5pdGlhbFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgICB0aGlzLnBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgICB0aGlzLmxhc3RQb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgICAgdGhpcy5sYXN0R3Jhdml0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgICAgdGhpcy5mb3JjZSA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgICAgdGhpcy52ZWxvY2l0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgIH1cblxuICAgIGluaXRpYWxQb3NpdGlvbjogQ3ViaXNtVmVjdG9yMjsgLy8g5Yid5pyf5L2N572uXG4gICAgbW9iaWxpdHk6IG51bWJlcjsgLy8g5YuV44GN44KE44GZ44GVXG4gICAgZGVsYXk6IG51bWJlcjsgLy8g6YGF44KMXG4gICAgYWNjZWxlcmF0aW9uOiBudW1iZXI7IC8vIOWKoOmAn+W6plxuICAgIHJhZGl1czogbnVtYmVyOyAvLyDot53pm6JcbiAgICBwb3NpdGlvbjogQ3ViaXNtVmVjdG9yMjsgLy8g54++5Zyo44Gu5L2N572uXG4gICAgbGFzdFBvc2l0aW9uOiBDdWJpc21WZWN0b3IyOyAvLyDmnIDlvozjga7kvY3nva5cbiAgICBsYXN0R3Jhdml0eTogQ3ViaXNtVmVjdG9yMjsgLy8g5pyA5b6M44Gu6YeN5YqbXG4gICAgZm9yY2U6IEN1YmlzbVZlY3RvcjI7IC8vIOePvuWcqOOBi+OBi+OBo+OBpuOBhOOCi+WKm1xuICAgIHZlbG9jaXR5OiBDdWJpc21WZWN0b3IyOyAvLyDnj77lnKjjga7pgJ/luqZcbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbmvJTnrpfjga7niannkIbngrnjga7nrqHnkIZcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21QaHlzaWNzU3ViUmlnIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMubm9ybWFsaXphdGlvblBvc2l0aW9uID0gbmV3IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uKCk7XG4gICAgICB0aGlzLm5vcm1hbGl6YXRpb25BbmdsZSA9IG5ldyBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbigpO1xuICAgIH1cbiAgICBpbnB1dENvdW50OiBudW1iZXI7IC8vIOWFpeWKm+OBruWAi+aVsFxuICAgIG91dHB1dENvdW50OiBudW1iZXI7IC8vIOWHuuWKm+OBruWAi+aVsFxuICAgIHBhcnRpY2xlQ291bnQ6IG51bWJlcjsgLy8g54mp55CG54K544Gu5YCL5pWwXG4gICAgYmFzZUlucHV0SW5kZXg6IG51bWJlcjsgLy8g5YWl5Yqb44Gu5pyA5Yid44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgYmFzZU91dHB1dEluZGV4OiBudW1iZXI7IC8vIOWHuuWKm+OBruacgOWIneOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgIGJhc2VQYXJ0aWNsZUluZGV4OiBudW1iZXI7IC8vIOeJqeeQhueCueOBruacgOWIneOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbjogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb247IC8vIOato+imj+WMluOBleOCjOOBn+S9jee9rlxuICAgIG5vcm1hbGl6YXRpb25BbmdsZTogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb247IC8vIOato+imj+WMluOBleOCjOOBn+inkuW6plxuICB9XG5cbiAgLyoqXG4gICAqIOato+imj+WMluOBleOCjOOBn+ODkeODqeODoeODvOOCv+OBruWPluW+l+mWouaVsOOBruWuo+iogFxuICAgKiBAcGFyYW0gdGFyZ2V0VHJhbnNsYXRpb24gICAgIC8vIOa8lOeul+e1kOaenOOBruenu+WLleWApFxuICAgKiBAcGFyYW0gdGFyZ2V0QW5nbGUgICAgICAgICAgIC8vIOa8lOeul+e1kOaenOOBruinkuW6plxuICAgKiBAcGFyYW0gdmFsdWUgICAgICAgICAgICAgICAgIC8vIOODkeODqeODoeODvOOCv+OBruWApFxuICAgKiBAcGFyYW0gcGFyYW1ldGVyTWluaW11blZhbHVlIC8vIOODkeODqeODoeODvOOCv+OBruacgOWwj+WApFxuICAgKiBAcGFyYW0gcGFyYW1ldGVyTWF4aW11bVZhbHVlIC8vIOODkeODqeODoeODvOOCv+OBruacgOWkp+WApFxuICAgKiBAcGFyYW0gcGFyYW1ldGVyRGVmYXVsdFZhbHVlIC8vIOODkeODqeODoeODvOOCv+OBruODh+ODleOCqeODq+ODiOWApFxuICAgKiBAcGFyYW0gbm9ybWFsaXphdGlvblBvc2l0aW9uIC8vIOato+imj+WMluOBleOCjOOBn+S9jee9rlxuICAgKiBAcGFyYW0gbm9ybWFsaXphdGlvbkFuZ2xlICAgIC8vIOato+imj+WMluOBleOCjOOBn+inkuW6plxuICAgKiBAcGFyYW0gaXNJbnZlcnRlZCAgICAgICAgICAgIC8vIOWApOOBjOWPjei7ouOBleOCjOOBpuOBhOOCi+OBi++8n1xuICAgKiBAcGFyYW0gd2VpZ2h0ICAgICAgICAgICAgICAgIC8vIOmHjeOBv1xuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBub3JtYWxpemVkUGh5c2ljc1BhcmFtZXRlclZhbHVlR2V0dGVyIHtcbiAgICAoXG4gICAgICB0YXJnZXRUcmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgICAgIHRhcmdldEFuZ2xlOiB7IGFuZ2xlOiBudW1iZXIgfSxcbiAgICAgIHZhbHVlOiBudW1iZXIsXG4gICAgICBwYXJhbWV0ZXJNaW5pbXVuVmFsdWU6IG51bWJlcixcbiAgICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZTogbnVtYmVyLFxuICAgICAgcGFyYW1ldGVyRGVmYXVsdFZhbHVlOiBudW1iZXIsXG4gICAgICBub3JtYWxpemF0aW9uUG9zaXRpb246IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxuICAgICAgbm9ybWFsaXphdGlvbkFuZ2xlOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcbiAgICAgIGlzSW52ZXJ0ZWQ6IGJvb2xlYW4sXG4gICAgICB3ZWlnaHQ6IG51bWJlclxuICAgICk6IHZvaWQ7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG5ryU566X44Gu5YCk44Gu5Y+W5b6X6Zai5pWw44Gu5a6j6KiAXG4gICAqIEBwYXJhbSB0cmFuc2xhdGlvbiDnp7vli5XlgKRcbiAgICogQHBhcmFtIHBhcnRpY2xlcyDniannkIbngrnjga7jg6rjgrnjg4hcbiAgICogQHBhcmFtIGlzSW52ZXJ0ZWQg5YCk44GM5Y+N5pig44GV44KM44Gm44GE44KL44GLXG4gICAqIEBwYXJhbSBwYXJlbnRHcmF2aXR5IOmHjeWKm1xuICAgKiBAcmV0dXJuIOWApFxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBwaHlzaWNzVmFsdWVHZXR0ZXIge1xuICAgIChcbiAgICAgIHRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxuICAgICAgcGFydGljbGVzOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXSxcbiAgICAgIHBhcnRpY2xlSW5kZXg6IG51bWJlcixcbiAgICAgIGlzSW52ZXJ0ZWQ6IGJvb2xlYW4sXG4gICAgICBwYXJlbnRHcmF2aXR5OiBDdWJpc21WZWN0b3IyXG4gICAgKTogbnVtYmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIOeJqeeQhua8lOeul+OBruOCueOCseODvOODq+OBruWPluW+l+mWouaVsOOBruWuo+iogFxuICAgKiBAcGFyYW0gdHJhbnNsYXRpb25TY2FsZSDnp7vli5XlgKTjga7jgrnjgrHjg7zjg6tcbiAgICogQHBhcmFtIGFuZ2xlU2NhbGUgICAg6KeS5bqm44Gu44K544Kx44O844OrXG4gICAqIEByZXR1cm4g44K544Kx44O844Or5YCkXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIHBoeXNpY3NTY2FsZUdldHRlciB7XG4gICAgKHRyYW5zbGF0aW9uU2NhbGU6IEN1YmlzbVZlY3RvcjIsIGFuZ2xlU2NhbGU6IG51bWJlcik6IG51bWJlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbmvJTnrpfjga7lhaXlipvmg4XloLFcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21QaHlzaWNzSW5wdXQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5zb3VyY2UgPSBuZXcgQ3ViaXNtUGh5c2ljc1BhcmFtZXRlcigpO1xuICAgIH1cbiAgICBzb3VyY2U6IEN1YmlzbVBoeXNpY3NQYXJhbWV0ZXI7IC8vIOWFpeWKm+WFg+OBruODkeODqeODoeODvOOCv1xuICAgIHNvdXJjZVBhcmFtZXRlckluZGV4OiBudW1iZXI7IC8vIOWFpeWKm+WFg+OBruODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgIHdlaWdodDogbnVtYmVyOyAvLyDph43jgb9cbiAgICB0eXBlOiBudW1iZXI7IC8vIOWFpeWKm+OBrueorumhnlxuICAgIHJlZmxlY3Q6IGJvb2xlYW47IC8vIOWApOOBjOWPjei7ouOBleOCjOOBpuOBhOOCi+OBi+OBqeOBhuOBi1xuICAgIGdldE5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZTogbm9ybWFsaXplZFBoeXNpY3NQYXJhbWV0ZXJWYWx1ZUdldHRlcjsgLy8g5q2j6KaP5YyW44GV44KM44Gf44OR44Op44Oh44O844K/5YCk44Gu5Y+W5b6X6Zai5pWwXG4gIH1cblxuICAvKipcbiAgICogQGJyaWVmIOeJqeeQhua8lOeul+OBruWHuuWKm+aDheWgsVxuICAgKlxuICAgKiDniannkIbmvJTnrpfjga7lh7rlipvmg4XloLHjgIJcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21QaHlzaWNzT3V0cHV0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBuZXcgQ3ViaXNtUGh5c2ljc1BhcmFtZXRlcigpO1xuICAgICAgdGhpcy50cmFuc2xhdGlvblNjYWxlID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgfVxuXG4gICAgZGVzdGluYXRpb246IEN1YmlzbVBoeXNpY3NQYXJhbWV0ZXI7IC8vIOWHuuWKm+WFiOOBruODkeODqeODoeODvOOCv1xuICAgIGRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXg6IG51bWJlcjsgLy8g5Ye65Yqb5YWI44Gu44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgdmVydGV4SW5kZXg6IG51bWJlcjsgLy8g5oyv44KK5a2Q44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgdHJhbnNsYXRpb25TY2FsZTogQ3ViaXNtVmVjdG9yMjsgLy8g56e75YuV5YCk44Gu44K544Kx44O844OrXG4gICAgYW5nbGVTY2FsZTogbnVtYmVyOyAvLyDop5Lluqbjga7jgrnjgrHjg7zjg6tcbiAgICB3ZWlnaHQ6IG51bWJlcjsgLy8g6YeN44G/XG4gICAgdHlwZTogQ3ViaXNtUGh5c2ljc1NvdXJjZTsgLy8g5Ye65Yqb44Gu56iu6aGeXG4gICAgcmVmbGVjdDogYm9vbGVhbjsgLy8g5YCk44GM5Y+N6Lui44GV44KM44Gm44GE44KL44GL44Gp44GG44GLXG4gICAgdmFsdWVCZWxvd01pbmltdW06IG51bWJlcjsgLy8g5pyA5bCP5YCk44KS5LiL5Zue44Gj44Gf5pmC44Gu5YCkXG4gICAgdmFsdWVFeGNlZWRlZE1heGltdW06IG51bWJlcjsgLy8g5pyA5aSn5YCk44KS44GT44GI44Gf5pmC44Gu5YCkXG4gICAgZ2V0VmFsdWU6IHBoeXNpY3NWYWx1ZUdldHRlcjsgLy8g54mp55CG5ryU566X44Gu5YCk44Gu5Y+W5b6X6Zai5pWwXG4gICAgZ2V0U2NhbGU6IHBoeXNpY3NTY2FsZUdldHRlcjsgLy8g54mp55CG5ryU566X44Gu44K544Kx44O844Or5YCk44Gu5Y+W5b6X6Zai5pWwXG4gIH1cblxuICAvKipcbiAgICogQGJyaWVmIOeJqeeQhua8lOeul+OBruODh+ODvOOCv1xuICAgKlxuICAgKiDniannkIbmvJTnrpfjga7jg4fjg7zjgr/jgIJcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21QaHlzaWNzUmlnIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMuc2V0dGluZ3MgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NTdWJSaWc+KCk7XG4gICAgICB0aGlzLmlucHV0cyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtUGh5c2ljc0lucHV0PigpO1xuICAgICAgdGhpcy5vdXRwdXRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21QaHlzaWNzT3V0cHV0PigpO1xuICAgICAgdGhpcy5wYXJ0aWNsZXMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NQYXJ0aWNsZT4oKTtcbiAgICAgIHRoaXMuZ3Jhdml0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgICAgdGhpcy53aW5kID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgfVxuXG4gICAgc3ViUmlnQ291bnQ6IG51bWJlcjsgLy8g54mp55CG5ryU566X44Gu54mp55CG54K544Gu5YCL5pWwXG4gICAgc2V0dGluZ3M6IGNzbVZlY3RvcjxDdWJpc21QaHlzaWNzU3ViUmlnPjsgLy8g54mp55CG5ryU566X44Gu54mp55CG54K544Gu566h55CG44Gu44Oq44K544OIXG4gICAgaW5wdXRzOiBjc21WZWN0b3I8Q3ViaXNtUGh5c2ljc0lucHV0PjsgLy8g54mp55CG5ryU566X44Gu5YWl5Yqb44Gu44Oq44K544OIXG4gICAgb3V0cHV0czogY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NPdXRwdXQ+OyAvLyDniannkIbmvJTnrpfjga7lh7rlipvjga7jg6rjgrnjg4hcbiAgICBwYXJ0aWNsZXM6IGNzbVZlY3RvcjxDdWJpc21QaHlzaWNzUGFydGljbGU+OyAvLyDniannkIbmvJTnrpfjga7niannkIbngrnjga7jg6rjgrnjg4hcbiAgICBncmF2aXR5OiBDdWJpc21WZWN0b3IyOyAvLyDph43liptcbiAgICB3aW5kOiBDdWJpc21WZWN0b3IyOyAvLyDpoqhcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWpzb24gfSBmcm9tICcuLi91dGlscy9jdWJpc21qc29uJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc212ZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9jdWJpc212ZWN0b3IyJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21pZCB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21mcmFtZXdvcmsgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuaW1wb3J0IEN1YmlzbUZyYW1ld29yayA9IGN1YmlzbWZyYW1ld29yay5DdWJpc21GcmFtZXdvcms7XG5pbXBvcnQgQ3ViaXNtSWRIYW5kbGUgPSBjdWJpc21pZC5DdWJpc21JZEhhbmRsZTtcbmltcG9ydCBDdWJpc21WZWN0b3IyID0gY3ViaXNtdmVjdG9yMi5DdWJpc21WZWN0b3IyO1xuaW1wb3J0IEN1YmlzbUpzb24gPSBjdWJpc21qc29uLkN1YmlzbUpzb247XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgLy8gSlNPTiBrZXlzXG4gIGNvbnN0IFBvc2l0aW9uID0gJ1Bvc2l0aW9uJztcbiAgY29uc3QgWCA9ICdYJztcbiAgY29uc3QgWSA9ICdZJztcbiAgY29uc3QgQW5nbGUgPSAnQW5nbGUnO1xuICBjb25zdCBUeXBlID0gJ1R5cGUnO1xuICBjb25zdCBJZCA9ICdJZCc7XG5cbiAgLy8gTWV0YVxuICBjb25zdCBNZXRhID0gJ01ldGEnO1xuICBjb25zdCBFZmZlY3RpdmVGb3JjZXMgPSAnRWZmZWN0aXZlRm9yY2VzJztcbiAgY29uc3QgVG90YWxJbnB1dENvdW50ID0gJ1RvdGFsSW5wdXRDb3VudCc7XG4gIGNvbnN0IFRvdGFsT3V0cHV0Q291bnQgPSAnVG90YWxPdXRwdXRDb3VudCc7XG4gIGNvbnN0IFBoeXNpY3NTZXR0aW5nQ291bnQgPSAnUGh5c2ljc1NldHRpbmdDb3VudCc7XG4gIGNvbnN0IEdyYXZpdHkgPSAnR3Jhdml0eSc7XG4gIGNvbnN0IFdpbmQgPSAnV2luZCc7XG4gIGNvbnN0IFZlcnRleENvdW50ID0gJ1ZlcnRleENvdW50JztcblxuICAvLyBQaHlzaWNzU2V0dGluZ3NcbiAgY29uc3QgUGh5c2ljc1NldHRpbmdzID0gJ1BoeXNpY3NTZXR0aW5ncyc7XG4gIGNvbnN0IE5vcm1hbGl6YXRpb24gPSAnTm9ybWFsaXphdGlvbic7XG4gIGNvbnN0IE1pbmltdW0gPSAnTWluaW11bSc7XG4gIGNvbnN0IE1heGltdW0gPSAnTWF4aW11bSc7XG4gIGNvbnN0IERlZmF1bHQgPSAnRGVmYXVsdCc7XG4gIGNvbnN0IFJlZmxlY3QgPSAnUmVmbGVjdCc7XG4gIGNvbnN0IFdlaWdodCA9ICdXZWlnaHQnO1xuXG4gIC8vIElucHV0XG4gIGNvbnN0IElucHV0ID0gJ0lucHV0JztcbiAgY29uc3QgU291cmNlID0gJ1NvdXJjZSc7XG5cbiAgLy8gT3V0cHV0XG4gIGNvbnN0IE91dHB1dCA9ICdPdXRwdXQnO1xuICBjb25zdCBTY2FsZSA9ICdTY2FsZSc7XG4gIGNvbnN0IFZlcnRleEluZGV4ID0gJ1ZlcnRleEluZGV4JztcbiAgY29uc3QgRGVzdGluYXRpb24gPSAnRGVzdGluYXRpb24nO1xuXG4gIC8vIFBhcnRpY2xlXG4gIGNvbnN0IFZlcnRpY2VzID0gJ1ZlcnRpY2VzJztcbiAgY29uc3QgTW9iaWxpdHkgPSAnTW9iaWxpdHknO1xuICBjb25zdCBEZWxheSA9ICdEZWxheSc7XG4gIGNvbnN0IFJhZGl1cyA9ICdSYWRpdXMnO1xuICBjb25zdCBBY2NlbGVyYXRpb24gPSAnQWNjZWxlcmF0aW9uJztcblxuICAvKipcbiAgICogcGh5c2ljczMuanNvbuOBruOCs+ODs+ODhuODiuOAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NKc29uIHtcbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKiBAcGFyYW0gYnVmZmVyIHBoeXNpY3MzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKSB7XG4gICAgICB0aGlzLl9qc29uID0gQ3ViaXNtSnNvbi5jcmVhdGUoYnVmZmVyLCBzaXplKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICAgIEN1YmlzbUpzb24uZGVsZXRlKHRoaXMuX2pzb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOmHjeWKm+OBruWPluW+l1xuICAgICAqIEByZXR1cm4g6YeN5YqbXG4gICAgICovXG4gICAgcHVibGljIGdldEdyYXZpdHkoKTogQ3ViaXNtVmVjdG9yMiB7XG4gICAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICAgIHJldC54ID0gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEVmZmVjdGl2ZUZvcmNlcylcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoR3Jhdml0eSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoWClcbiAgICAgICAgLnRvRmxvYXQoKTtcbiAgICAgIHJldC55ID0gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEVmZmVjdGl2ZUZvcmNlcylcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoR3Jhdml0eSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoWSlcbiAgICAgICAgLnRvRmxvYXQoKTtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6aKo44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDpoqhcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0V2luZCgpOiBDdWJpc21WZWN0b3IyIHtcbiAgICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgICAgcmV0LnggPSB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRWZmZWN0aXZlRm9yY2VzKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhXaW5kKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhYKVxuICAgICAgICAudG9GbG9hdCgpO1xuICAgICAgcmV0LnkgPSB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRWZmZWN0aXZlRm9yY2VzKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhXaW5kKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhZKVxuICAgICAgICAudG9GbG9hdCgpO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDniannkIblupfjga7nrqHnkIbjga7lgIvmlbDjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOeJqeeQhuW6l+OBrueuoeeQhuOBruWAi+aVsFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRTdWJSaWdDb3VudCgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ0NvdW50KVxuICAgICAgICAudG9JbnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlhaXlipvjga7nt4/lkIjoqIjjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOWFpeWKm+OBrue3j+WQiOioiFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRUb3RhbElucHV0Q291bnQoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVG90YWxJbnB1dENvdW50KVxuICAgICAgICAudG9JbnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlh7rlipvjga7nt4/lkIjoqIjjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOWHuuWKm+OBrue3j+WQiOioiFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRUb3RhbE91dHB1dENvdW50KCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRvdGFsT3V0cHV0Q291bnQpXG4gICAgICAgIC50b0ludCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOeJqeeQhueCueOBruWAi+aVsOOBruWPluW+l1xuICAgICAqIEByZXR1cm4g54mp55CG54K544Gu5YCL5pWwXG4gICAgICovXG4gICAgcHVibGljIGdldFZlcnRleENvdW50KCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFZlcnRleENvdW50KVxuICAgICAgICAudG9JbnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmraPopo/ljJbjgZXjgozjgZ/kvY3nva7jga7mnIDlsI/lgKTjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOato+imj+WMluOBleOCjOOBn+S9jee9ruOBruacgOWwj+WApFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXROb3JtYWxpemF0aW9uUG9zaXRpb25NaW5pbXVtVmFsdWUoXG4gICAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXJcbiAgICApOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTm9ybWFsaXphdGlvbilcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUG9zaXRpb24pXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1pbmltdW0pXG4gICAgICAgIC50b0Zsb2F0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5q2j6KaP5YyW44GV44KM44Gf5L2N572u44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDmraPopo/ljJbjgZXjgozjgZ/kvY3nva7jga7mnIDlpKflgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uTWF4aW11bVZhbHVlKFxuICAgICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyXG4gICAgKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE5vcm1hbGl6YXRpb24pXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBvc2l0aW9uKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNYXhpbXVtKVxuICAgICAgICAudG9GbG9hdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOato+imj+WMluOBleOCjOOBn+S9jee9ruOBruODh+ODleOCqeODq+ODiOWApOOBruWPluW+l1xuICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g5q2j6KaP5YyW44GV44KM44Gf5L2N572u44Gu44OH44OV44Kp44Or44OI5YCkXG4gICAgICovXG4gICAgcHVibGljIGdldE5vcm1hbGl6YXRpb25Qb3NpdGlvbkRlZmF1bHRWYWx1ZShcbiAgICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlclxuICAgICk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOb3JtYWxpemF0aW9uKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQb3NpdGlvbilcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRGVmYXVsdClcbiAgICAgICAgLnRvRmxvYXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmraPopo/ljJbjgZXjgozjgZ/op5Lluqbjga7mnIDlsI/lgKTjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOato+imj+WMluOBleOCjOOBn+inkuW6puOBruacgOWwj+WApFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXROb3JtYWxpemF0aW9uQW5nbGVNaW5pbXVtVmFsdWUoXG4gICAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXJcbiAgICApOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTm9ybWFsaXphdGlvbilcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQW5nbGUpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1pbmltdW0pXG4gICAgICAgIC50b0Zsb2F0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5q2j6KaP5YyW44GV44KM44Gf6KeS5bqm44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXhcbiAgICAgKiBAcmV0dXJuIOato+imj+WMluOBleOCjOOBn+inkuW6puOBruacgOWkp+WApFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXROb3JtYWxpemF0aW9uQW5nbGVNYXhpbXVtVmFsdWUoXG4gICAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXJcbiAgICApOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTm9ybWFsaXphdGlvbilcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQW5nbGUpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1heGltdW0pXG4gICAgICAgIC50b0Zsb2F0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5q2j6KaP5YyW44GV44KM44Gf6KeS5bqm44Gu44OH44OV44Kp44Or44OI5YCk44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDmraPopo/ljJbjgZXjgozjgZ/op5Lluqbjga7jg4fjg5Xjgqnjg6vjg4jlgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0Tm9ybWFsaXphdGlvbkFuZ2xlRGVmYXVsdFZhbHVlKFxuICAgICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyXG4gICAgKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE5vcm1hbGl6YXRpb24pXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEFuZ2xlKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhEZWZhdWx0KVxuICAgICAgICAudG9GbG9hdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWFpeWKm+OBruWAi+aVsOOBruWPluW+l1xuICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g5YWl5Yqb44Gu5YCL5pWwXG4gICAgICovXG4gICAgcHVibGljIGdldElucHV0Q291bnQocGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElucHV0KVxuICAgICAgICAuZ2V0VmVjdG9yKClcbiAgICAgICAgLmdldFNpemUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlhaXlipvjga7ph43jgb/jga7lj5blvpdcbiAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcGFyYW0gaW5wdXRJbmRleCDlhaXlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOWFpeWKm+OBrumHjeOBv1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRJbnB1dFdlaWdodChcbiAgICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcbiAgICAgIGlucHV0SW5kZXg6IG51bWJlclxuICAgICk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJbnB1dClcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChpbnB1dEluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhXZWlnaHQpXG4gICAgICAgIC50b0Zsb2F0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5YWl5Yqb44Gu5Y+N6Lui44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHBhcmFtIGlucHV0SW5kZXgg5YWl5Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDlhaXlipvjga7lj43ou6JcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0SW5wdXRSZWZsZWN0KFxuICAgICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgICAgaW5wdXRJbmRleDogbnVtYmVyXG4gICAgKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJbnB1dClcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChpbnB1dEluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhSZWZsZWN0KVxuICAgICAgICAudG9Cb29sZWFuKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5YWl5Yqb44Gu56iu6aGe44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHBhcmFtIGlucHV0SW5kZXgg5YWl5Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDlhaXlipvjga7nqK7poZ5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0SW5wdXRUeXBlKFxuICAgICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgICAgaW5wdXRJbmRleDogbnVtYmVyXG4gICAgKTogc3RyaW5nIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElucHV0KVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGlucHV0SW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFR5cGUpXG4gICAgICAgIC5nZXRSYXdTdHJpbmcoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlhaXlipvlhYPjga5JROOBruWPluW+l1xuICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEBwYXJhbSBpbnB1dEluZGV4IOWFpeWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g5YWl5Yqb5YWD44GuSURcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0SW5wdXRTb3VyY2VJZChcbiAgICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcbiAgICAgIGlucHV0SW5kZXg6IG51bWJlclxuICAgICk6IEN1YmlzbUlkSGFuZGxlIHtcbiAgICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJbnB1dClcbiAgICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGlucHV0SW5kZXgpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoU291cmNlKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElkKVxuICAgICAgICAgIC5nZXRSYXdTdHJpbmcoKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlh7rlipvjga7lgIvmlbDjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOWHuuWKm+OBruWAi+aVsFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRPdXRwdXRDb3VudChwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoT3V0cHV0KVxuICAgICAgICAuZ2V0VmVjdG9yKClcbiAgICAgICAgLmdldFNpemUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlh7rlipvjga7niannkIbngrnjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcGFyYW0gb3V0cHV0SW5kZXgg5Ye65Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDlh7rlipvjga7niannkIbngrnjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0T3V0cHV0VmVydGV4SW5kZXgoXG4gICAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgICBvdXRwdXRJbmRleDogbnVtYmVyXG4gICAgKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE91dHB1dClcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChvdXRwdXRJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGV4SW5kZXgpXG4gICAgICAgIC50b0ludCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWHuuWKm+OBruinkuW6puOBruOCueOCseODvOODq+OCkuWPluW+l+OBmeOCi1xuICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEBwYXJhbSBvdXRwdXRJbmRleCDlh7rlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOWHuuWKm+OBruinkuW6puOBruOCueOCseODvOODq1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRPdXRwdXRBbmdsZVNjYWxlKFxuICAgICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgICAgb3V0cHV0SW5kZXg6IG51bWJlclxuICAgICk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhPdXRwdXQpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgob3V0cHV0SW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFNjYWxlKVxuICAgICAgICAudG9GbG9hdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWHuuWKm+OBrumHjeOBv+OBruWPluW+l1xuICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEBwYXJhbSBvdXRwdXRJbmRleCDlh7rlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOWHuuWKm+OBrumHjeOBv1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRPdXRwdXRXZWlnaHQoXG4gICAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgICBvdXRwdXRJbmRleDogbnVtYmVyXG4gICAgKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE91dHB1dClcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChvdXRwdXRJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoV2VpZ2h0KVxuICAgICAgICAudG9GbG9hdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWHuuWKm+WFiOOBrklE44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHBhcmFtIG91dHB1dEluZGV4IOWHuuWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g5Ye65Yqb5YWI44GuSURcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0T3V0cHV0RGVzdGluYXRpb25JZChcbiAgICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcbiAgICAgIG91dHB1dEluZGV4OiBudW1iZXJcbiAgICApOiBDdWJpc21JZEhhbmRsZSB7XG4gICAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgICB0aGlzLl9qc29uXG4gICAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoT3V0cHV0KVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgob3V0cHV0SW5kZXgpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRGVzdGluYXRpb24pXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSWQpXG4gICAgICAgICAgLmdldFJhd1N0cmluZygpXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWHuuWKm+OBrueorumhnuOBruWPluW+l1xuICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEBwYXJhbSBvdXRwdXRJbmRleCDlh7rlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOWHuuWKm+OBrueorumhnlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRPdXRwdXRUeXBlKFxuICAgICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgICAgb3V0cHV0SW5kZXg6IG51bWJlclxuICAgICk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhPdXRwdXQpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgob3V0cHV0SW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFR5cGUpXG4gICAgICAgIC5nZXRSYXdTdHJpbmcoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlh7rlipvjga7lj43ou6Ljga7lj5blvpdcbiAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcGFyYW0gb3V0cHV0SW5kZXgg5Ye65Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDlh7rlipvjga7lj43ou6JcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0T3V0cHV0UmVmbGVjdChcbiAgICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcbiAgICAgIG91dHB1dEluZGV4OiBudW1iZXJcbiAgICApOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE91dHB1dClcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChvdXRwdXRJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUmVmbGVjdClcbiAgICAgICAgLnRvQm9vbGVhbigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOeJqeeQhueCueOBruWAi+aVsOOBruWPluW+l1xuICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+eUt+ioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g54mp55CG54K544Gu5YCL5pWwXG4gICAgICovXG4gICAgcHVibGljIGdldFBhcnRpY2xlQ291bnQocGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFZlcnRpY2VzKVxuICAgICAgICAuZ2V0VmVjdG9yKClcbiAgICAgICAgLmdldFNpemUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDniannkIbngrnjga7li5XjgY3jgoTjgZnjgZXjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcGFyYW0gdmVydGV4SW5kZXgg54mp55CG54K544Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDniannkIbngrnjga7li5XjgY3jgoTjgZnjgZVcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UGFydGljbGVNb2JpbGl0eShcbiAgICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcbiAgICAgIHZlcnRleEluZGV4OiBudW1iZXJcbiAgICApOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGljZXMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodmVydGV4SW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1vYmlsaXR5KVxuICAgICAgICAudG9GbG9hdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOeJqeeQhueCueOBrumBheOCjOOBruWPluW+l1xuICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEBwYXJhbSB2ZXJ0ZXhJbmRleCDniannkIbngrnjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOeJqeeQhueCueOBrumBheOCjFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRQYXJ0aWNsZURlbGF5KFxuICAgICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgICAgdmVydGV4SW5kZXg6IG51bWJlclxuICAgICk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0aWNlcylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleCh2ZXJ0ZXhJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRGVsYXkpXG4gICAgICAgIC50b0Zsb2F0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog54mp55CG54K544Gu5Yqg6YCf5bqm44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6aXG4gICAgICogQHBhcmFtIHZlcnRleEluZGV4IOeJqeeQhueCueOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g54mp55CG54K544Gu5Yqg6YCf5bqmXG4gICAgICovXG4gICAgcHVibGljIGdldFBhcnRpY2xlQWNjZWxlcmF0aW9uKFxuICAgICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgICAgdmVydGV4SW5kZXg6IG51bWJlclxuICAgICk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0aWNlcylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleCh2ZXJ0ZXhJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQWNjZWxlcmF0aW9uKVxuICAgICAgICAudG9GbG9hdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOeJqeeQhueCueOBrui3nembouOBruWPluW+l1xuICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEBwYXJhbSB2ZXJ0ZXhJbmRleCDniannkIbngrnjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOeJqeeQhueCueOBrui3nembolxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRQYXJ0aWNsZVJhZGl1cyhcbiAgICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcbiAgICAgIHZlcnRleEluZGV4OiBudW1iZXJcbiAgICApOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGljZXMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodmVydGV4SW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFJhZGl1cylcbiAgICAgICAgLnRvSW50KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog54mp55CG54K544Gu5L2N572u44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHBhcmFtIHZlcnRleEluZGUg54mp55CG54K544Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDniannkIbngrnjga7kvY3nva5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UGFydGljbGVQb3NpdGlvbihcbiAgICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcbiAgICAgIHZlcnRleEluZGV4OiBudW1iZXJcbiAgICApOiBDdWJpc21WZWN0b3IyIHtcbiAgICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgICAgcmV0LnggPSB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFZlcnRpY2VzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHZlcnRleEluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQb3NpdGlvbilcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoWClcbiAgICAgICAgLnRvRmxvYXQoKTtcbiAgICAgIHJldC55ID0gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0aWNlcylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleCh2ZXJ0ZXhJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUG9zaXRpb24pXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFkpXG4gICAgICAgIC50b0Zsb2F0KCk7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIF9qc29uOiBDdWJpc21Kc29uOyAvLyBwaHlzaWNzMy5qc29u44OH44O844K/XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21mcmFtZXdvcmsgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXJlY3QgfSBmcm9tICcuLi90eXBlL2NzbXJlY3RmJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21yZW5kZXJlciB9IGZyb20gJy4vY3ViaXNtcmVuZGVyZXInO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YnNpbW1hdHJpeDQ0IH0gZnJvbSAnLi4vbWF0aC9jdWJpc21tYXRyaXg0NCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtbWFwIH0gZnJvbSAnLi4vdHlwZS9jc21tYXAnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IEN1YmlzbUxvZ0Vycm9yIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtZGVidWcnO1xuaW1wb3J0IENvbnN0YW50ID0gY3ViaXNtZnJhbWV3b3JrLkNvbnN0YW50O1xuaW1wb3J0IEN1YmlzbU1hdHJpeDQ0ID0gY3Vic2ltbWF0cml4NDQuQ3ViaXNtTWF0cml4NDQ7XG5pbXBvcnQgY3NtUmVjdCA9IGNzbXJlY3QuY3NtUmVjdDtcbmltcG9ydCBjc21NYXAgPSBjc21tYXAuY3NtTWFwO1xuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XG5pbXBvcnQgQ3ViaXNtTW9kZWwgPSBjdWJpc21tb2RlbC5DdWJpc21Nb2RlbDtcbmltcG9ydCBDdWJpc21SZW5kZXJlciA9IGN1YmlzbXJlbmRlcmVyLkN1YmlzbVJlbmRlcmVyO1xuaW1wb3J0IEN1YmlzbUJsZW5kTW9kZSA9IGN1YmlzbXJlbmRlcmVyLkN1YmlzbUJsZW5kTW9kZTtcbmltcG9ydCBDdWJpc21UZXh0dXJlQ29sb3IgPSBjdWJpc21yZW5kZXJlci5DdWJpc21UZXh0dXJlQ29sb3I7XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgY29uc3QgQ29sb3JDaGFubmVsQ291bnQgPSA0OyAvLyDlrp/pqJPmmYLjgasx44OB44Oj44Oz44ON44Or44Gu5aC05ZCI44GvMeOAgVJHQuOBoOOBkeOBruWgtOWQiOOBrzPjgIHjgqLjg6vjg5XjgqHjgoLlkKvjgoHjgovloLTlkIjjga80XG5cbiAgY29uc3Qgc2hhZGVyQ291bnQgPSAxMDsgLy8g44K344Kn44O844OA44O844Gu5pWwID0g44Oe44K544Kv55Sf5oiQ55SoICsgKOmAmuW4uOeUqCArIOWKoOeulyArIOS5l+eulykgKiAo44Oe44K544Kv54Sh44Gu5LmX566X5riI44Ki44Or44OV44Kh5a++5b+c54mIICsg44Oe44K544Kv5pyJ44Gu5LmX566X5riI44Ki44Or44OV44Kh5a++5b+c54mIICsg44Oe44K544Kv5pyJ5Y+N6Lui44Gu5LmX566X5riI44Ki44Or44OV44Kh5a++5b+c54mIKVxuICBsZXQgc19pbnN0YW5jZTogQ3ViaXNtU2hhZGVyX1dlYkdMO1xuICBsZXQgc192aWV3cG9ydDogbnVtYmVyW107XG4gIGxldCBzX2ZibzogV2ViR0xGcmFtZWJ1ZmZlcjtcblxuICAvKipcbiAgICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu5Yem55CG44KS5a6f6KGM44GZ44KL44Kv44Op44K5XG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMIHtcbiAgICAvKipcbiAgICAgKiDjgqvjg6njg7zjg4Hjg6Pjg7Pjg43jg6vvvIhSR0JB77yJ44Gu44OV44Op44Kw44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIGNoYW5uZWxObyDjgqvjg6njg7zjg4Hjg6Pjg7Pjg43jg6vvvIhSR0JB77yJ44Gu55Wq5Y+377yIMDpSLCAxOkcsIDI6QiwgMzpB77yJXG4gICAgICovXG4gICAgcHVibGljIGdldENoYW5uZWxGbGFnQXNDb2xvcihjaGFubmVsTm86IG51bWJlcik6IEN1YmlzbVRleHR1cmVDb2xvciB7XG4gICAgICByZXR1cm4gdGhpcy5fY2hhbm5lbENvbG9ycy5hdChjaGFubmVsTm8pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODhuODs+ODneODqeODquOBruODrOODs+ODgOODvOODhuOCr+OCueODgeODo+OBruOCouODieODrOOCueOCkuWPluW+l+OBmeOCi1xuICAgICAqIEZyYW1lQnVmZmVyT2JqZWN044GM5a2Y5Zyo44GX44Gq44GE5aC05ZCI44CB5paw44GX44GP55Sf5oiQ44GZ44KLXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIOODrOODs+ODgOODvOODhuOCr+OCueODgeODo+OBruOCouODieODrOOCuVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNYXNrUmVuZGVyVGV4dHVyZSgpOiBXZWJHTEZyYW1lYnVmZmVyIHtcbiAgICAgIGxldCByZXQ6IFdlYkdMRnJhbWVidWZmZXIgPSAwO1xuXG4gICAgICAvLyDjg4bjg7Pjg53jg6njg6rjga5SZW5kZXJUZXh0dXJl44KS5Y+W5b6X44GZ44KLXG4gICAgICBpZiAodGhpcy5fbWFza1RleHR1cmUgJiYgdGhpcy5fbWFza1RleHR1cmUudGV4dHVyZSAhPSAwKSB7XG4gICAgICAgIC8vIOWJjeWbnuS9v+OBo+OBn+OCguOBruOCkui/lOOBmVxuICAgICAgICB0aGlzLl9tYXNrVGV4dHVyZS5mcmFtZU5vID0gdGhpcy5fY3VycmVudEZyYW1lTm87XG4gICAgICAgIHJldCA9IHRoaXMuX21hc2tUZXh0dXJlLnRleHR1cmU7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXQgPT0gMCkge1xuICAgICAgICAvLyBGcmFtZUJ1ZmZlck9iamVjdOOBjOWtmOWcqOOBl+OBquOBhOWgtOWQiOOAgeaWsOOBl+OBj+eUn+aIkOOBmeOCi1xuXG4gICAgICAgIC8vIOOCr+ODquODg+ODlOODs+OCsOODkOODg+ODleOCoeOCteOCpOOCuuOCkuWPluW+l1xuICAgICAgICBjb25zdCBzaXplOiBudW1iZXIgPSB0aGlzLl9jbGlwcGluZ01hc2tCdWZmZXJTaXplO1xuXG4gICAgICAgIHRoaXMuX2NvbG9yQnVmZmVyID0gdGhpcy5nbC5jcmVhdGVUZXh0dXJlKCk7XG4gICAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0aGlzLl9jb2xvckJ1ZmZlcik7XG4gICAgICAgIHRoaXMuZ2wudGV4SW1hZ2UyRChcbiAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgMCxcbiAgICAgICAgICB0aGlzLmdsLlJHQkEsXG4gICAgICAgICAgc2l6ZSxcbiAgICAgICAgICBzaXplLFxuICAgICAgICAgIDAsXG4gICAgICAgICAgdGhpcy5nbC5SR0JBLFxuICAgICAgICAgIHRoaXMuZ2wuVU5TSUdORURfQllURSxcbiAgICAgICAgICBudWxsXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaShcbiAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgdGhpcy5nbC5URVhUVVJFX1dSQVBfUyxcbiAgICAgICAgICB0aGlzLmdsLkNMQU1QX1RPX0VER0VcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKFxuICAgICAgICAgIHRoaXMuZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfV1JBUF9ULFxuICAgICAgICAgIHRoaXMuZ2wuQ0xBTVBfVE9fRURHRVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkoXG4gICAgICAgICAgdGhpcy5nbC5URVhUVVJFXzJELFxuICAgICAgICAgIHRoaXMuZ2wuVEVYVFVSRV9NSU5fRklMVEVSLFxuICAgICAgICAgIHRoaXMuZ2wuTElORUFSXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaShcbiAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgdGhpcy5nbC5URVhUVVJFX01BR19GSUxURVIsXG4gICAgICAgICAgdGhpcy5nbC5MSU5FQVJcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkVfMkQsIG51bGwpO1xuXG4gICAgICAgIHJldCA9IHRoaXMuZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcbiAgICAgICAgdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIodGhpcy5nbC5GUkFNRUJVRkZFUiwgcmV0KTtcbiAgICAgICAgdGhpcy5nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChcbiAgICAgICAgICB0aGlzLmdsLkZSQU1FQlVGRkVSLFxuICAgICAgICAgIHRoaXMuZ2wuQ09MT1JfQVRUQUNITUVOVDAsXG4gICAgICAgICAgdGhpcy5nbC5URVhUVVJFXzJELFxuICAgICAgICAgIHRoaXMuX2NvbG9yQnVmZmVyLFxuICAgICAgICAgIDBcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIodGhpcy5nbC5GUkFNRUJVRkZFUiwgc19mYm8pO1xuXG4gICAgICAgIHRoaXMuX21hc2tUZXh0dXJlID0gbmV3IEN1YmlzbVJlbmRlclRleHR1cmVSZXNvdXJjZShcbiAgICAgICAgICB0aGlzLl9jdXJyZW50RnJhbWVObyxcbiAgICAgICAgICByZXRcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXZWJHTOODrOODs+ODgOODquODs+OCsOOCs+ODs+ODhuOCreOCueODiOOCkuioreWumuOBmeOCi1xuICAgICAqIEBwYXJhbSBnbCBXZWJHTOODrOODs+ODgOODquODs+OCsOOCs+ODs+ODhuOCreOCueODiFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRHTChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XG4gICAgICB0aGlzLmdsID0gZ2w7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oe44K544Kv44GV44KM44KL5o+P55S744Kq44OW44K444Kn44Kv44OI576k5YWo5L2T44KS5Zuy44KA55+p5b2i77yI44Oi44OH44Or5bqn5qiZ57O777yJ44KS6KiI566X44GZ44KLXG4gICAgICogQHBhcmFtIG1vZGVsIOODouODh+ODq+OBruOCpOODs+OCueOCv+ODs+OCuVxuICAgICAqIEBwYXJhbSBjbGlwcGluZ0NvbnRleHQg44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu44Kz44Oz44OG44Kt44K544OIXG4gICAgICovXG4gICAgcHVibGljIGNhbGNDbGlwcGVkRHJhd1RvdGFsQm91bmRzKFxuICAgICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgICAgY2xpcHBpbmdDb250ZXh0OiBDdWJpc21DbGlwcGluZ0NvbnRleHRcbiAgICApOiB2b2lkIHtcbiAgICAgIC8vIOiiq+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr++8iOODnuOCueOCr+OBleOCjOOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiO+8ieOBruWFqOS9k+OBruefqeW9olxuICAgICAgbGV0IGNsaXBwZWREcmF3VG90YWxNaW5YOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgbGV0IGNsaXBwZWREcmF3VG90YWxNaW5ZOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgbGV0IGNsaXBwZWREcmF3VG90YWxNYXhYOiBudW1iZXIgPSBOdW1iZXIuTUlOX1ZBTFVFO1xuICAgICAgbGV0IGNsaXBwZWREcmF3VG90YWxNYXhZOiBudW1iZXIgPSBOdW1iZXIuTUlOX1ZBTFVFO1xuXG4gICAgICAvLyDjgZPjga7jg57jgrnjgq/jgYzlrp/pmpvjgavlv4XopoHjgYvliKTlrprjgZnjgotcbiAgICAgIC8vIOOBk+OBruOCr+ODquODg+ODlOODs+OCsOOCkuWIqeeUqOOBmeOCi+OAjOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOAjeOBjOOBsuOBqOOBpOOBp+OCguS9v+eUqOWPr+iDveOBp+OBguOCjOOBsOODnuOCueOCr+OCkueUn+aIkOOBmeOCi+W/heimgeOBjOOBguOCi1xuICAgICAgY29uc3QgY2xpcHBlZERyYXdDb3VudDogbnVtYmVyID1cbiAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9jbGlwcGVkRHJhd2FibGVJbmRleExpc3QubGVuZ3RoO1xuXG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgY2xpcHBlZERyYXdhYmxlSW5kZXggPSAwO1xuICAgICAgICBjbGlwcGVkRHJhd2FibGVJbmRleCA8IGNsaXBwZWREcmF3Q291bnQ7XG4gICAgICAgIGNsaXBwZWREcmF3YWJsZUluZGV4KytcbiAgICAgICkge1xuICAgICAgICAvLyDjg57jgrnjgq/jgpLkvb/nlKjjgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7mj4/nlLvjgZXjgozjgovnn6nlvaLjgpLmsYLjgoHjgotcbiAgICAgICAgY29uc3QgZHJhd2FibGVJbmRleDogbnVtYmVyID1cbiAgICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdFtjbGlwcGVkRHJhd2FibGVJbmRleF07XG5cbiAgICAgICAgY29uc3QgZHJhd2FibGVWZXJ0ZXhDb3VudDogbnVtYmVyID0gbW9kZWwuZ2V0RHJhd2FibGVWZXJ0ZXhDb3VudChcbiAgICAgICAgICBkcmF3YWJsZUluZGV4XG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGRyYXdhYmxlVmVydGV4ZXM6IEZsb2F0MzJBcnJheSA9IG1vZGVsLmdldERyYXdhYmxlVmVydGljZXMoXG4gICAgICAgICAgZHJhd2FibGVJbmRleFxuICAgICAgICApO1xuXG4gICAgICAgIGxldCBtaW5YOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgICBsZXQgbWluWTogbnVtYmVyID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgbGV0IG1heFg6IG51bWJlciA9IE51bWJlci5NSU5fVkFMVUU7XG4gICAgICAgIGxldCBtYXhZOiBudW1iZXIgPSBOdW1iZXIuTUlOX1ZBTFVFO1xuXG4gICAgICAgIGNvbnN0IGxvb3A6IG51bWJlciA9IGRyYXdhYmxlVmVydGV4Q291bnQgKiBDb25zdGFudC52ZXJ0ZXhTdGVwO1xuICAgICAgICBmb3IgKFxuICAgICAgICAgIGxldCBwaTogbnVtYmVyID0gQ29uc3RhbnQudmVydGV4T2Zmc2V0O1xuICAgICAgICAgIHBpIDwgbG9vcDtcbiAgICAgICAgICBwaSArPSBDb25zdGFudC52ZXJ0ZXhTdGVwXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IHg6IG51bWJlciA9IGRyYXdhYmxlVmVydGV4ZXNbcGldO1xuICAgICAgICAgIGNvbnN0IHk6IG51bWJlciA9IGRyYXdhYmxlVmVydGV4ZXNbcGkgKyAxXTtcblxuICAgICAgICAgIGlmICh4IDwgbWluWCkge1xuICAgICAgICAgICAgbWluWCA9IHg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh4ID4gbWF4WCkge1xuICAgICAgICAgICAgbWF4WCA9IHg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh5IDwgbWluWSkge1xuICAgICAgICAgICAgbWluWSA9IHk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh5ID4gbWF4WSkge1xuICAgICAgICAgICAgbWF4WSA9IHk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8g5pyJ5Yq544Gq54K544GM5LiA44Gk44KC5Y+W44KM44Gq44GL44Gj44Gf44Gu44Gn44K544Kt44OD44OXXG4gICAgICAgIGlmIChtaW5YID09IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOWFqOS9k+OBruefqeW9ouOBq+WPjeaYoFxuICAgICAgICBpZiAobWluWCA8IGNsaXBwZWREcmF3VG90YWxNaW5YKSB7XG4gICAgICAgICAgY2xpcHBlZERyYXdUb3RhbE1pblggPSBtaW5YO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtaW5ZIDwgY2xpcHBlZERyYXdUb3RhbE1pblkpIHtcbiAgICAgICAgICBjbGlwcGVkRHJhd1RvdGFsTWluWSA9IG1pblk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1heFggPiBjbGlwcGVkRHJhd1RvdGFsTWF4WCkge1xuICAgICAgICAgIGNsaXBwZWREcmF3VG90YWxNYXhYID0gbWF4WDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4WSA+IGNsaXBwZWREcmF3VG90YWxNYXhZKSB7XG4gICAgICAgICAgY2xpcHBlZERyYXdUb3RhbE1heFkgPSBtYXhZO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNsaXBwZWREcmF3VG90YWxNaW5YID09IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2FsbENsaXBwZWREcmF3UmVjdC54ID0gMC4wO1xuICAgICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LnkgPSAwLjA7XG4gICAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3Qud2lkdGggPSAwLjA7XG4gICAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3QuaGVpZ2h0ID0gMC4wO1xuICAgICAgICAgIGNsaXBwaW5nQ29udGV4dC5faXNVc2luZyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNsaXBwaW5nQ29udGV4dC5faXNVc2luZyA9IHRydWU7XG4gICAgICAgICAgY29uc3QgdzogbnVtYmVyID0gY2xpcHBlZERyYXdUb3RhbE1heFggLSBjbGlwcGVkRHJhd1RvdGFsTWluWDtcbiAgICAgICAgICBjb25zdCBoOiBudW1iZXIgPSBjbGlwcGVkRHJhd1RvdGFsTWF4WSAtIGNsaXBwZWREcmF3VG90YWxNaW5ZO1xuICAgICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LnggPSBjbGlwcGVkRHJhd1RvdGFsTWluWDtcbiAgICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2FsbENsaXBwZWREcmF3UmVjdC55ID0gY2xpcHBlZERyYXdUb3RhbE1pblk7XG4gICAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3Qud2lkdGggPSB3O1xuICAgICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LmhlaWdodCA9IGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICB0aGlzLl9tYXNrUmVuZGVyVGV4dHVyZSA9IG51bGw7XG4gICAgICB0aGlzLl9jb2xvckJ1ZmZlciA9IG51bGw7XG4gICAgICB0aGlzLl9jdXJyZW50RnJhbWVObyA9IDA7XG4gICAgICB0aGlzLl9jbGlwcGluZ01hc2tCdWZmZXJTaXplID0gMjU2O1xuICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2sgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUNsaXBwaW5nQ29udGV4dD4oKTtcbiAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3ID0gbmV3IGNzbVZlY3RvcjxDdWJpc21DbGlwcGluZ0NvbnRleHQ+KCk7XG4gICAgICB0aGlzLl9jaGFubmVsQ29sb3JzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21UZXh0dXJlQ29sb3I+KCk7XG4gICAgICB0aGlzLl90bXBCb3VuZHNPbk1vZGVsID0gbmV3IGNzbVJlY3QoKTtcbiAgICAgIHRoaXMuX3RtcE1hdHJpeCA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xuICAgICAgdGhpcy5fdG1wTWF0cml4Rm9yTWFzayA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xuICAgICAgdGhpcy5fdG1wTWF0cml4Rm9yRHJhdyA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xuICAgICAgdGhpcy5fbWFza1RleHR1cmUgPSBudWxsO1xuXG4gICAgICBsZXQgdG1wOiBDdWJpc21UZXh0dXJlQ29sb3IgPSBuZXcgQ3ViaXNtVGV4dHVyZUNvbG9yKCk7XG4gICAgICB0bXAuUiA9IDEuMDtcbiAgICAgIHRtcC5HID0gMC4wO1xuICAgICAgdG1wLkIgPSAwLjA7XG4gICAgICB0bXAuQSA9IDAuMDtcbiAgICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMucHVzaEJhY2sodG1wKTtcblxuICAgICAgdG1wID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcigpO1xuICAgICAgdG1wLlIgPSAwLjA7XG4gICAgICB0bXAuRyA9IDEuMDtcbiAgICAgIHRtcC5CID0gMC4wO1xuICAgICAgdG1wLkEgPSAwLjA7XG4gICAgICB0aGlzLl9jaGFubmVsQ29sb3JzLnB1c2hCYWNrKHRtcCk7XG5cbiAgICAgIHRtcCA9IG5ldyBDdWJpc21UZXh0dXJlQ29sb3IoKTtcbiAgICAgIHRtcC5SID0gMC4wO1xuICAgICAgdG1wLkcgPSAwLjA7XG4gICAgICB0bXAuQiA9IDEuMDtcbiAgICAgIHRtcC5BID0gMC4wO1xuICAgICAgdGhpcy5fY2hhbm5lbENvbG9ycy5wdXNoQmFjayh0bXApO1xuXG4gICAgICB0bXAgPSBuZXcgQ3ViaXNtVGV4dHVyZUNvbG9yKCk7XG4gICAgICB0bXAuUiA9IDAuMDtcbiAgICAgIHRtcC5HID0gMC4wO1xuICAgICAgdG1wLkIgPSAwLjA7XG4gICAgICB0bXAuQSA9IDEuMDtcbiAgICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMucHVzaEJhY2sodG1wKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KGkpKSB7XG4gICAgICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoaSkucmVsZWFzZSgpO1xuICAgICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLnNldChpLCB2b2lkIDApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLnNldChpLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrID0gbnVsbDtcblxuICAgICAgLy8gX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF344GvX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNr44Gr44GC44KL44Kk44Oz44K544K/44Oz44K544KS5oyH44GX44Gm44GE44KL44CC5LiK6KiY44Gu5Yem55CG44Gr44KI44KK6KaB57Sg44GU44Go44GuREVMRVRF44Gv5LiN6KaB44CCXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3LmdldFNpemUoKTsgaSsrKSB7XG4gICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3LnNldChpLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3ID0gbnVsbDtcblxuICAgICAgaWYgKHRoaXMuX21hc2tUZXh0dXJlKSB7XG4gICAgICAgIHRoaXMuZ2wuZGVsZXRlRnJhbWVidWZmZXIodGhpcy5fbWFza1RleHR1cmUudGV4dHVyZSk7XG4gICAgICAgIHRoaXMuX21hc2tUZXh0dXJlID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9jaGFubmVsQ29sb3JzLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMuc2V0KGksIG51bGwpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9jaGFubmVsQ29sb3JzID0gbnVsbDtcblxuICAgICAgLy8g44OG44Kv44K544OB44Oj6Kej5pS+XG4gICAgICB0aGlzLmdsLmRlbGV0ZVRleHR1cmUodGhpcy5fY29sb3JCdWZmZXIpO1xuICAgICAgdGhpcy5fY29sb3JCdWZmZXIgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODnuODjeODvOOCuOODo+OBruWIneacn+WMluWHpueQhlxuICAgICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OCkuS9v+OBhuaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBrueZu+mMsuOCkuihjOOBhlxuICAgICAqIEBwYXJhbSBtb2RlbCDjg6Ljg4fjg6vjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICAgKiBAcGFyYW0gZHJhd2FibGVDb3VudCDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7mlbBcbiAgICAgKiBAcGFyYW0gZHJhd2FibGVNYXNrcyDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjgpLjg57jgrnjgq/jgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjga7jg6rjgrnjg4hcbiAgICAgKiBAcGFyYW0gZHJhd2FibGVDb3VudHMg5o+P55S744Kq44OW44K444Kn44Kv44OI44KS44Oe44K544Kv44GZ44KL5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu5pWwXG4gICAgICovXG4gICAgcHVibGljIGluaXRpYWxpemUoXG4gICAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXG4gICAgICBkcmF3YWJsZUNvdW50OiBudW1iZXIsXG4gICAgICBkcmF3YWJsZU1hc2tzOiBJbnQzMkFycmF5W10sXG4gICAgICBkcmF3YWJsZU1hc2tDb3VudHM6IEludDMyQXJyYXlcbiAgICApOiB2b2lkIHtcbiAgICAgIC8vIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OCkuS9v+OBhuaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOCkuOBmeOBueOBpueZu+mMsuOBmeOCi1xuICAgICAgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gv44CB6YCa5bi45pWw5YCL56iL5bqm44Gr6ZmQ5a6a44GX44Gm5L2/44GG44KC44Gu44Go44GZ44KLXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRyYXdhYmxlQ291bnQ7IGkrKykge1xuICAgICAgICBpZiAoZHJhd2FibGVNYXNrQ291bnRzW2ldIDw9IDApIHtcbiAgICAgICAgICAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgYzkvb/nlKjjgZXjgozjgabjgYTjgarjgYTjgqLjg7zjg4jjg6Hjg4Pjgrfjg6XvvIjlpJrjgY/jga7loLTlkIjkvb/nlKjjgZfjgarjgYTvvIlcbiAgICAgICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdy5wdXNoQmFjayhudWxsKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOaXouOBq+OBguOCi0NsaXBDb250ZXh044Go5ZCM44GY44GL44OB44Kn44OD44Kv44GZ44KLXG4gICAgICAgIGxldCBjbGlwcGluZ0NvbnRleHQ6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9IHRoaXMuZmluZFNhbWVDbGlwKFxuICAgICAgICAgIGRyYXdhYmxlTWFza3NbaV0sXG4gICAgICAgICAgZHJhd2FibGVNYXNrQ291bnRzW2ldXG4gICAgICAgICk7XG4gICAgICAgIGlmIChjbGlwcGluZ0NvbnRleHQgPT0gbnVsbCkge1xuICAgICAgICAgIC8vIOWQjOS4gOOBruODnuOCueOCr+OBjOWtmOWcqOOBl+OBpuOBhOOBquOBhOWgtOWQiOOBr+eUn+aIkOOBmeOCi1xuICAgICAgICAgIGNsaXBwaW5nQ29udGV4dCA9IG5ldyBDdWJpc21DbGlwcGluZ0NvbnRleHQoXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgZHJhd2FibGVNYXNrc1tpXSxcbiAgICAgICAgICAgIGRyYXdhYmxlTWFza0NvdW50c1tpXVxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2sucHVzaEJhY2soY2xpcHBpbmdDb250ZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5hZGRDbGlwcGVkRHJhd2FibGUoaSk7XG5cbiAgICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXcucHVzaEJhY2soY2xpcHBpbmdDb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjgpLkvZzmiJDjgZnjgovjgILjg6Ljg4fjg6vmj4/nlLvmmYLjgavlrp/ooYzjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0gbW9kZWwg44Oi44OH44Or44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAgICogQHBhcmFtIHJlbmRlcmVyIOODrOODs+ODgOODqeOBruOCpOODs+OCueOCv+ODs+OCuVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXR1cENsaXBwaW5nQ29udGV4dChcbiAgICAgIG1vZGVsOiBDdWJpc21Nb2RlbCxcbiAgICAgIHJlbmRlcmVyOiBDdWJpc21SZW5kZXJlcl9XZWJHTFxuICAgICk6IHZvaWQge1xuICAgICAgdGhpcy5fY3VycmVudEZyYW1lTm8rKztcblxuICAgICAgLy8g5YWo44Gm44Gu44Kv44Oq44OD44OU44Oz44Kw44KS55So5oSP44GZ44KLXG4gICAgICAvLyDlkIzjgZjjgq/jg6rjg4Pjg5fvvIjopIfmlbDjga7loLTlkIjjga/jgb7jgajjgoHjgabkuIDjgaTjga7jgq/jg6rjg4Pjg5fvvInjgpLkvb/jgYbloLTlkIjjga8x5bqm44Gg44GR6Kit5a6a44GZ44KLXG4gICAgICBsZXQgdXNpbmdDbGlwQ291bnQgPSAwO1xuICAgICAgZm9yIChcbiAgICAgICAgbGV0IGNsaXBJbmRleCA9IDA7XG4gICAgICAgIGNsaXBJbmRleCA8IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmdldFNpemUoKTtcbiAgICAgICAgY2xpcEluZGV4KytcbiAgICAgICkge1xuICAgICAgICAvLyAx44Gk44Gu44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gr6Zai44GX44GmXG4gICAgICAgIGNvbnN0IGNjOiBDdWJpc21DbGlwcGluZ0NvbnRleHQgPSB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChcbiAgICAgICAgICBjbGlwSW5kZXhcbiAgICAgICAgKTtcblxuICAgICAgICAvLyDjgZPjga7jgq/jg6rjg4Pjg5fjgpLliKnnlKjjgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jnvqTlhajkvZPjgpLlm7LjgoDnn6nlvaLjgpLoqIjnrpdcbiAgICAgICAgdGhpcy5jYWxjQ2xpcHBlZERyYXdUb3RhbEJvdW5kcyhtb2RlbCwgY2MpO1xuXG4gICAgICAgIGlmIChjYy5faXNVc2luZykge1xuICAgICAgICAgIHVzaW5nQ2xpcENvdW50Kys7IC8vIOS9v+eUqOS4reOBqOOBl+OBpuOCq+OCpuODs+ODiFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIOODnuOCueOCr+S9nOaIkOWHpueQhlxuICAgICAgaWYgKHVzaW5nQ2xpcENvdW50ID4gMCkge1xuICAgICAgICAvLyDnlJ/miJDjgZfjgZ9GcmFtZUJ1ZmZlcuOBqOWQjOOBmOOCteOCpOOCuuOBp+ODk+ODpeODvOODneODvOODiOOCkuioreWumlxuICAgICAgICB0aGlzLmdsLnZpZXdwb3J0KFxuICAgICAgICAgIDAsXG4gICAgICAgICAgMCxcbiAgICAgICAgICB0aGlzLl9jbGlwcGluZ01hc2tCdWZmZXJTaXplLFxuICAgICAgICAgIHRoaXMuX2NsaXBwaW5nTWFza0J1ZmZlclNpemVcbiAgICAgICAgKTtcblxuICAgICAgICAvLyDjg57jgrnjgq/jgpJhY3RpdmXjgavjgZnjgotcbiAgICAgICAgdGhpcy5fbWFza1JlbmRlclRleHR1cmUgPSB0aGlzLmdldE1hc2tSZW5kZXJUZXh0dXJlKCk7XG5cbiAgICAgICAgLy8g44Oi44OH44Or5o+P55S75pmC44GrRHJhd01lc2hOb3fjgavmuKHjgZXjgozjgovlpInmj5so44Oi44OH44OrdG/jg6/jg7zjg6vjg4nluqfmqJnlpInmj5spXG4gICAgICAgIGNvbnN0IG1vZGVsVG9Xb3JsZEY6IEN1YmlzbU1hdHJpeDQ0ID0gcmVuZGVyZXIuZ2V0TXZwTWF0cml4KCk7XG5cbiAgICAgICAgcmVuZGVyZXIucHJlRHJhdygpOyAvLyDjg5Djg4Pjg5XjgqHjgpLjgq/jg6rjgqLjgZnjgotcblxuICAgICAgICAvLyDlkITjg57jgrnjgq/jga7jg6zjgqTjgqLjgqbjg4jjgpLmsbrlrprjgZfjgabjgYTjgY9cbiAgICAgICAgdGhpcy5zZXR1cExheW91dEJvdW5kcyh1c2luZ0NsaXBDb3VudCk7XG5cbiAgICAgICAgLy8gLS0tLS0tLS0tLSDjg57jgrnjgq/mj4/nlLvlh6bnkIYgLS0tLS0tLS0tLVxuICAgICAgICAvLyDjg57jgrnjgq/nlKhSZW5kZXJUZXh0dXJl44KSYWN0aXZl44Gr44K744OD44OIXG4gICAgICAgIHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKHRoaXMuZ2wuRlJBTUVCVUZGRVIsIHRoaXMuX21hc2tSZW5kZXJUZXh0dXJlKTtcblxuICAgICAgICAvLyDjg57jgrnjgq/jgpLjgq/jg6rjgqLjgZnjgotcbiAgICAgICAgLy8gKOS7ruS7leanmCkgMeOBjOeEoeWKue+8iOaPj+OBi+OCjOOBquOBhO+8iemgmOWfn+OAgTDjgYzmnInlirnvvIjmj4/jgYvjgozjgovvvInpoJjln5/jgILvvIjjgrfjgqfjg7zjg4Djg7xDZCpDc+OBpzDjgavov5HjgYTlgKTjgpLjgYvjgZHjgabjg57jgrnjgq/jgpLkvZzjgovjgIIx44KS44GL44GR44KL44Go5L2V44KC6LW344GT44KJ44Gq44GE77yJXG4gICAgICAgIHRoaXMuZ2wuY2xlYXJDb2xvcigxLjAsIDEuMCwgMS4wLCAxLjApO1xuICAgICAgICB0aGlzLmdsLmNsZWFyKHRoaXMuZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XG5cbiAgICAgICAgLy8g5a6f6Zqb44Gr44Oe44K544Kv44KS55Sf5oiQ44GZ44KLXG4gICAgICAgIC8vIOWFqOOBpuOBruODnuOCueOCr+OCkuOBqeOBruOCiOOBhuOBq+ODrOOCpOOCouOCpuODiOOBl+OBpuaPj+OBj+OBi+OCkuaxuuWumuOBl+OAgUNsaXBDb250ZXh0LCBDbGlwcGVkRHJhd0NvbnRleHTjgavoqJjmhrbjgZnjgotcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBsZXQgY2xpcEluZGV4ID0gMDtcbiAgICAgICAgICBjbGlwSW5kZXggPCB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5nZXRTaXplKCk7XG4gICAgICAgICAgY2xpcEluZGV4KytcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gLS0tIOWun+mam+OBqzHjgaTjga7jg57jgrnjgq/jgpLmj4/jgY8gLS0tXG4gICAgICAgICAgY29uc3QgY2xpcENvbnRleHQ6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KFxuICAgICAgICAgICAgY2xpcEluZGV4XG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCBhbGxDbGlwZWREcmF3UmVjdDogY3NtUmVjdCA9IGNsaXBDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3Q7IC8vIOOBk+OBruODnuOCueOCr+OCkuS9v+OBhuOAgeOBmeOBueOBpuOBruaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruirlueQhuW6p+aomeS4iuOBruWbsuOBv+efqeW9olxuICAgICAgICAgIGNvbnN0IGxheW91dEJvdW5kc09uVGV4MDE6IGNzbVJlY3QgPSBjbGlwQ29udGV4dC5fbGF5b3V0Qm91bmRzOyAvLyDjgZPjga7kuK3jgavjg57jgrnjgq/jgpLlj47jgoHjgotcblxuICAgICAgICAgIC8vIOODouODh+ODq+W6p+aomeS4iuOBruefqeW9ouOCkuOAgemBqeWunOODnuODvOOCuOODs+OCkuS7mOOBkeOBpuS9v+OBhlxuICAgICAgICAgIGNvbnN0IE1BUkdJTiA9IDAuMDU7XG4gICAgICAgICAgdGhpcy5fdG1wQm91bmRzT25Nb2RlbC5zZXRSZWN0KGFsbENsaXBlZERyYXdSZWN0KTtcbiAgICAgICAgICB0aGlzLl90bXBCb3VuZHNPbk1vZGVsLmV4cGFuZChcbiAgICAgICAgICAgIGFsbENsaXBlZERyYXdSZWN0LndpZHRoICogTUFSR0lOLFxuICAgICAgICAgICAgYWxsQ2xpcGVkRHJhd1JlY3QuaGVpZ2h0ICogTUFSR0lOXG4gICAgICAgICAgKTtcbiAgICAgICAgICAvLyMjIyMjIyMjIyMg5pys5p2l44Gv5Ymy44KK5b2T44Gm44KJ44KM44Gf6aCY5Z+f44Gu5YWo5L2T44KS5L2/44KP44Ga5b+F6KaB5pyA5L2O6ZmQ44Gu44K144Kk44K644GM44KI44GEXG5cbiAgICAgICAgICAvLyDjgrfjgqfjg7zjg4DnlKjjga7oqIjnrpflvI/jgpLmsYLjgoHjgovjgILlm57ou6LjgpLogIPmha7jgZfjgarjgYTloLTlkIjjga/ku6XkuIvjga7jgajjgYrjgopcbiAgICAgICAgICAvLyBtb3ZlUGVyaW9kJyA9IG1vdmVQZXJpb2QgKiBzY2FsZVggKyBvZmZYXHRcdCAgW1sgbW92ZVBlcmlvZCcgPSAobW92ZVBlcmlvZCAtIHRtcEJvdW5kc09uTW9kZWwubW92ZVBlcmlvZCkqc2NhbGUgKyBsYXlvdXRCb3VuZHNPblRleDAxLm1vdmVQZXJpb2QgXV1cbiAgICAgICAgICBjb25zdCBzY2FsZVg6IG51bWJlciA9XG4gICAgICAgICAgICBsYXlvdXRCb3VuZHNPblRleDAxLndpZHRoIC8gdGhpcy5fdG1wQm91bmRzT25Nb2RlbC53aWR0aDtcbiAgICAgICAgICBjb25zdCBzY2FsZVk6IG51bWJlciA9XG4gICAgICAgICAgICBsYXlvdXRCb3VuZHNPblRleDAxLmhlaWdodCAvIHRoaXMuX3RtcEJvdW5kc09uTW9kZWwuaGVpZ2h0O1xuXG4gICAgICAgICAgLy8g44Oe44K544Kv55Sf5oiQ5pmC44Gr5L2/44GG6KGM5YiX44KS5rGC44KB44KLXG4gICAgICAgICAge1xuICAgICAgICAgICAgLy8g44K344Kn44O844OA44Gr5rih44GZ6KGM5YiX44KS5rGC44KB44KLIDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCDopoHmnIDpganljJbvvIjpgIbpoIbjgavoqIjnrpfjgZnjgozjgbDjgrfjg7Pjg5fjg6vjgavjgafjgY3jgovvvIlcbiAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC5sb2FkSWRlbnRpdHkoKTtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLy8gbGF5b3V0MC4uMSDjgpIgLTEuLjHjgavlpInmj5tcbiAgICAgICAgICAgICAgdGhpcy5fdG1wTWF0cml4LnRyYW5zbGF0ZVJlbGF0aXZlKC0xLjAsIC0xLjApO1xuICAgICAgICAgICAgICB0aGlzLl90bXBNYXRyaXguc2NhbGVSZWxhdGl2ZSgyLjAsIDIuMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIC8vIHZpZXcgdG8gbGF5b3V0MC4uMVxuICAgICAgICAgICAgICB0aGlzLl90bXBNYXRyaXgudHJhbnNsYXRlUmVsYXRpdmUoXG4gICAgICAgICAgICAgICAgbGF5b3V0Qm91bmRzT25UZXgwMS54LFxuICAgICAgICAgICAgICAgIGxheW91dEJvdW5kc09uVGV4MDEueVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB0aGlzLl90bXBNYXRyaXguc2NhbGVSZWxhdGl2ZShzY2FsZVgsIHNjYWxlWSk7IC8vIG5ldyA9IFt0cmFuc2xhdGVdW3NjYWxlXVxuICAgICAgICAgICAgICB0aGlzLl90bXBNYXRyaXgudHJhbnNsYXRlUmVsYXRpdmUoXG4gICAgICAgICAgICAgICAgLXRoaXMuX3RtcEJvdW5kc09uTW9kZWwueCxcbiAgICAgICAgICAgICAgICAtdGhpcy5fdG1wQm91bmRzT25Nb2RlbC55XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIC8vIG5ldyA9IFt0cmFuc2xhdGVdW3NjYWxlXVt0cmFuc2xhdGVdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0bXBNYXRyaXhGb3JNYXNr44GM6KiI566X57WQ5p6cXG4gICAgICAgICAgICB0aGlzLl90bXBNYXRyaXhGb3JNYXNrLnNldE1hdHJpeCh0aGlzLl90bXBNYXRyaXguZ2V0QXJyYXkoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8tLS0tLS0tLS0gZHJhd+aZguOBriBtYXNrIOWPgueFp+eUqOihjOWIl+OCkuioiOeul1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIC8vIOOCt+OCp+ODvOODgOOBq+a4oeOBmeihjOWIl+OCkuaxguOCgeOCiyA8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwg6KaB5pyA6YGp5YyW77yI6YCG6aCG44Gr6KiI566X44GZ44KM44Gw44K344Oz44OX44Or44Gr44Gn44GN44KL77yJXG4gICAgICAgICAgICB0aGlzLl90bXBNYXRyaXgubG9hZElkZW50aXR5KCk7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC50cmFuc2xhdGVSZWxhdGl2ZShcbiAgICAgICAgICAgICAgICBsYXlvdXRCb3VuZHNPblRleDAxLngsXG4gICAgICAgICAgICAgICAgbGF5b3V0Qm91bmRzT25UZXgwMS55XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC5zY2FsZVJlbGF0aXZlKHNjYWxlWCwgc2NhbGVZKTsgLy8gbmV3ID0gW3RyYW5zbGF0ZV1bc2NhbGVdXG4gICAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC50cmFuc2xhdGVSZWxhdGl2ZShcbiAgICAgICAgICAgICAgICAtdGhpcy5fdG1wQm91bmRzT25Nb2RlbC54LFxuICAgICAgICAgICAgICAgIC10aGlzLl90bXBCb3VuZHNPbk1vZGVsLnlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgLy8gbmV3ID0gW3RyYW5zbGF0ZV1bc2NhbGVdW3RyYW5zbGF0ZV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeEZvckRyYXcuc2V0TWF0cml4KHRoaXMuX3RtcE1hdHJpeC5nZXRBcnJheSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2xpcENvbnRleHQuX21hdHJpeEZvck1hc2suc2V0TWF0cml4KFxuICAgICAgICAgICAgdGhpcy5fdG1wTWF0cml4Rm9yTWFzay5nZXRBcnJheSgpXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjbGlwQ29udGV4dC5fbWF0cml4Rm9yRHJhdy5zZXRNYXRyaXgoXG4gICAgICAgICAgICB0aGlzLl90bXBNYXRyaXhGb3JEcmF3LmdldEFycmF5KClcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgY29uc3QgY2xpcERyYXdDb3VudDogbnVtYmVyID0gY2xpcENvbnRleHQuX2NsaXBwaW5nSWRDb3VudDtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNsaXBEcmF3Q291bnQ7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY2xpcERyYXdJbmRleDogbnVtYmVyID0gY2xpcENvbnRleHQuX2NsaXBwaW5nSWRMaXN0W2ldO1xuXG4gICAgICAgICAgICAvLyDpoILngrnmg4XloLHjgYzmm7TmlrDjgZXjgozjgabjgYrjgonjgZrjgIHkv6HpoLzmgKfjgYzjgarjgYTloLTlkIjjga/mj4/nlLvjgpLjg5HjgrnjgZnjgotcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgIW1vZGVsLmdldERyYXdhYmxlRHluYW1pY0ZsYWdWZXJ0ZXhQb3NpdGlvbnNEaWRDaGFuZ2UoXG4gICAgICAgICAgICAgICAgY2xpcERyYXdJbmRleFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlbmRlcmVyLnNldElzQ3VsbGluZyhcbiAgICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVDdWxsaW5nKGNsaXBEcmF3SW5kZXgpICE9IGZhbHNlXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyDku4rlm57lsILnlKjjga7lpInmj5vjgpLpgannlKjjgZfjgabmj4/jgY9cbiAgICAgICAgICAgIC8vIOODgeODo+ODs+ODjeODq+OCguWIh+OCiuabv+OBiOOCi+W/heimgeOBjOOBguOCiyhBLFIsRyxCKVxuICAgICAgICAgICAgcmVuZGVyZXIuc2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayhjbGlwQ29udGV4dCk7XG4gICAgICAgICAgICByZW5kZXJlci5kcmF3TWVzaChcbiAgICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVUZXh0dXJlSW5kaWNlcyhjbGlwRHJhd0luZGV4KSxcbiAgICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVWZXJ0ZXhJbmRleENvdW50KGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZVZlcnRleENvdW50KGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZVZlcnRleEluZGljZXMoY2xpcERyYXdJbmRleCksXG4gICAgICAgICAgICAgIG1vZGVsLmdldERyYXdhYmxlVmVydGljZXMoY2xpcERyYXdJbmRleCksXG4gICAgICAgICAgICAgIG1vZGVsLmdldERyYXdhYmxlVmVydGV4VXZzKGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZU9wYWNpdHkoY2xpcERyYXdJbmRleCksXG4gICAgICAgICAgICAgIEN1YmlzbUJsZW5kTW9kZS5DdWJpc21CbGVuZE1vZGVfTm9ybWFsLCAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjga/pgJrluLjmj4/nlLvjgpLlvLfliLZcbiAgICAgICAgICAgICAgZmFsc2UgLy8g44Oe44K544Kv55Sf5oiQ5pmC44Gv44Kv44Oq44OD44OU44Oz44Kw44Gu5Y+N6Lui5L2/55So44Gv5YWo44GP6Zai5L+C44GM44Gq44GEXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIC0tLSDlvozlh6bnkIYgLS0tXG4gICAgICAgIHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKHRoaXMuZ2wuRlJBTUVCVUZGRVIsIHNfZmJvKTsgLy8g5o+P55S75a++6LGh44KS5oi744GZXG4gICAgICAgIHJlbmRlcmVyLnNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2sobnVsbCk7XG5cbiAgICAgICAgdGhpcy5nbC52aWV3cG9ydChcbiAgICAgICAgICBzX3ZpZXdwb3J0WzBdLFxuICAgICAgICAgIHNfdmlld3BvcnRbMV0sXG4gICAgICAgICAgc192aWV3cG9ydFsyXSxcbiAgICAgICAgICBzX3ZpZXdwb3J0WzNdXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5pei44Gr44Oe44K544Kv44KS5L2c44Gj44Gm44GE44KL44GL44KS56K66KqNXG4gICAgICog5L2c44Gj44Gm44GE44KL5qeY44Gn44GC44KM44Gw6Kmy5b2T44GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu44Kk44Oz44K544K/44Oz44K544KS6L+U44GZXG4gICAgICog5L2c44Gj44Gm44GE44Gq44GR44KM44GwTlVMTOOCkui/lOOBmVxuICAgICAqIEBwYXJhbSBkcmF3YWJsZU1hc2tzIOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOCkuODnuOCueOCr+OBmeOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruODquOCueODiFxuICAgICAqIEBwYXJhbSBkcmF3YWJsZU1hc2tDb3VudHMg5o+P55S744Kq44OW44K444Kn44Kv44OI44KS44Oe44K544Kv44GZ44KL5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu5pWwXG4gICAgICogQHJldHVybiDoqbLlvZPjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgYzlrZjlnKjjgZnjgozjgbDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLov5TjgZfjgIHjgarjgZHjgozjgbBOVUxM44KS6L+U44GZXG4gICAgICovXG4gICAgcHVibGljIGZpbmRTYW1lQ2xpcChcbiAgICAgIGRyYXdhYmxlTWFza3M6IEludDMyQXJyYXksXG4gICAgICBkcmF3YWJsZU1hc2tDb3VudHM6IG51bWJlclxuICAgICk6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCB7XG4gICAgICAvLyDkvZzmiJDmuIjjgb9DbGlwcGluZ0NvbnRleHTjgajkuIDoh7TjgZnjgovjgYvnorroqo1cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgICAgY29uc3QgY2xpcHBpbmdDb250ZXh0OiBDdWJpc21DbGlwcGluZ0NvbnRleHQgPSB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChcbiAgICAgICAgICBpXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGNvdW50OiBudW1iZXIgPSBjbGlwcGluZ0NvbnRleHQuX2NsaXBwaW5nSWRDb3VudDtcblxuICAgICAgICAvLyDlgIvmlbDjgYzpgZXjgYbloLTlkIjjga/liKXnialcbiAgICAgICAgaWYgKGNvdW50ICE9IGRyYXdhYmxlTWFza0NvdW50cykge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHNhbWVDb3VudCA9IDA7XG5cbiAgICAgICAgLy8g5ZCM44GYSUTjgpLmjIHjgaTjgYvnorroqo3jgILphY3liJfjga7mlbDjgYzlkIzjgZjjgarjga7jgafjgIHkuIDoh7TjgZfjgZ/lgIvmlbDjgYzlkIzjgZjjgarjgonlkIzjgZjnianjgpLmjIHjgaTjgajjgZnjgotcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb3VudDsgaisrKSB7XG4gICAgICAgICAgY29uc3QgY2xpcElkOiBudW1iZXIgPSBjbGlwcGluZ0NvbnRleHQuX2NsaXBwaW5nSWRMaXN0W2pdO1xuXG4gICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBjb3VudDsgaysrKSB7XG4gICAgICAgICAgICBpZiAoZHJhd2FibGVNYXNrc1trXSA9PSBjbGlwSWQpIHtcbiAgICAgICAgICAgICAgc2FtZUNvdW50Kys7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzYW1lQ291bnQgPT0gY291bnQpIHtcbiAgICAgICAgICByZXR1cm4gY2xpcHBpbmdDb250ZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsOyAvLyDopovjgaTjgYvjgonjgarjgYvjgaPjgZ9cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjgpLphY3nva7jgZnjgovjg6zjgqTjgqLjgqbjg4hcbiAgICAgKiDkuIDjgaTjga7jg6zjg7Pjg4Djg7zjg4bjgq/jgrnjg4Hjg6PjgpLmpbXlipvjgYTjgaPjgbHjgYTjgavkvb/jgaPjgabjg57jgrnjgq/jgpLjg6zjgqTjgqLjgqbjg4jjgZnjgotcbiAgICAgKiDjg57jgrnjgq/jgrDjg6vjg7zjg5fjga7mlbDjgYw05Lul5LiL44Gq44KJUkdCQeWQhOODgeODo+ODs+ODjeODq+OBq+S4gOOBpOOBmuOBpOODnuOCueOCr+OCkumFjee9ruOBl+OAgTXku6XkuIo25Lul5LiL44Gq44KJUkdCQeOCkjIsMiwxLDHjgajphY3nva7jgZnjgovjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB1c2luZ0NsaXBDb3VudCDphY3nva7jgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjga7mlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0dXBMYXlvdXRCb3VuZHModXNpbmdDbGlwQ291bnQ6IG51bWJlcik6IHZvaWQge1xuICAgICAgLy8g44Gy44Go44Gk44GuUmVuZGVyVGV4dHVyZeOCkualteWKm+OBhOOBo+OBseOBhOOBq+S9v+OBo+OBpuODnuOCueOCr+OCkuODrOOCpOOCouOCpuODiOOBmeOCi1xuICAgICAgLy8g44Oe44K544Kv44Kw44Or44O844OX44Gu5pWw44GMNOS7peS4i+OBquOCiVJHQkHlkITjg4Hjg6Pjg7Pjg43jg6vjgasx44Gk44Ga44Gk44Oe44K544Kv44KS6YWN572u44GX44CBNeS7peS4ijbku6XkuIvjgarjgolSR0JB44KSMiwyLDEsMeOBqOmFjee9ruOBmeOCi1xuXG4gICAgICAvLyBSR0JB44KS6aCG55Wq44Gr5L2/44Gj44Gm44GE44GPXG4gICAgICBsZXQgZGl2OiBudW1iZXIgPSB1c2luZ0NsaXBDb3VudCAvIENvbG9yQ2hhbm5lbENvdW50OyAvLyAx44OB44Oj44Oz44ON44Or44Gr6YWN572u44GZ44KL5Z+65pys44Gu44Oe44K544KvXG4gICAgICBsZXQgbW9kOiBudW1iZXIgPSB1c2luZ0NsaXBDb3VudCAlIENvbG9yQ2hhbm5lbENvdW50OyAvLyDkvZnjgorjgIHjgZPjga7nlarlj7fjga7jg4Hjg6Pjg7Pjg43jg6vjgb7jgafjgavkuIDjgaTjgZrjgaTphY3liIbjgZnjgotcblxuICAgICAgLy8g5bCP5pWw54K544Gv5YiH44KK5o2o44Gm44KLXG4gICAgICBkaXYgPSB+fmRpdjtcbiAgICAgIG1vZCA9IH5+bW9kO1xuXG4gICAgICAvLyBSR0JB44Gd44KM44Ge44KM44Gu44OB44Oj44Oz44ON44Or44KS55So5oSP44GX44Gm44GE44GP77yIMDpSLCAxOkcsIDI6QiwgMzpB77yJXG4gICAgICBsZXQgY3VyQ2xpcEluZGV4ID0gMDsgLy8g6aCG55Wq44Gr6Kit5a6a44GX44Gm44GE44GPXG5cbiAgICAgIGZvciAobGV0IGNoYW5uZWxObyA9IDA7IGNoYW5uZWxObyA8IENvbG9yQ2hhbm5lbENvdW50OyBjaGFubmVsTm8rKykge1xuICAgICAgICAvLyDjgZPjga7jg4Hjg6Pjg7Pjg43jg6vjgavjg6zjgqTjgqLjgqbjg4jjgZnjgovmlbBcbiAgICAgICAgY29uc3QgbGF5b3V0Q291bnQ6IG51bWJlciA9IGRpdiArIChjaGFubmVsTm8gPCBtb2QgPyAxIDogMCk7XG5cbiAgICAgICAgLy8g5YiG5Ymy5pa55rOV44KS5rG65a6a44GZ44KLXG4gICAgICAgIGlmIChsYXlvdXRDb3VudCA9PSAwKSB7XG4gICAgICAgICAgLy8g5L2V44KC44GX44Gq44GEXG4gICAgICAgIH0gZWxzZSBpZiAobGF5b3V0Q291bnQgPT0gMSkge1xuICAgICAgICAgIC8vIOWFqOOBpuOCkuOBneOBruOBvuOBvuS9v+OBhlxuICAgICAgICAgIGNvbnN0IGNsaXBDb250ZXh0OiBDdWJpc21DbGlwcGluZ0NvbnRleHQgPSB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChcbiAgICAgICAgICAgIGN1ckNsaXBJbmRleCsrXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjbGlwQ29udGV4dC5fbGF5b3V0Q2hhbm5lbE5vID0gY2hhbm5lbE5vO1xuICAgICAgICAgIGNsaXBDb250ZXh0Ll9sYXlvdXRCb3VuZHMueCA9IDAuMDtcbiAgICAgICAgICBjbGlwQ29udGV4dC5fbGF5b3V0Qm91bmRzLnkgPSAwLjA7XG4gICAgICAgICAgY2xpcENvbnRleHQuX2xheW91dEJvdW5kcy53aWR0aCA9IDEuMDtcbiAgICAgICAgICBjbGlwQ29udGV4dC5fbGF5b3V0Qm91bmRzLmhlaWdodCA9IDEuMDtcbiAgICAgICAgfSBlbHNlIGlmIChsYXlvdXRDb3VudCA9PSAyKSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXlvdXRDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgeHBvczogbnVtYmVyID0gaSAlIDI7XG5cbiAgICAgICAgICAgIC8vIOWwj+aVsOeCueOBr+WIh+OCiuaNqOOBpuOCi1xuICAgICAgICAgICAgeHBvcyA9IH5+eHBvcztcblxuICAgICAgICAgICAgY29uc3QgY2M6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KFxuICAgICAgICAgICAgICBjdXJDbGlwSW5kZXgrK1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNjLl9sYXlvdXRDaGFubmVsTm8gPSBjaGFubmVsTm87XG5cbiAgICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMueCA9IHhwb3MgKiAwLjU7XG4gICAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLnkgPSAwLjA7XG4gICAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLndpZHRoID0gMC41O1xuICAgICAgICAgICAgY2MuX2xheW91dEJvdW5kcy5oZWlnaHQgPSAxLjA7XG4gICAgICAgICAgICAvLyBVVuOCkjLjgaTjgavliIbop6PjgZfjgabkvb/jgYZcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobGF5b3V0Q291bnQgPD0gNCkge1xuICAgICAgICAgIC8vIDTliIblibLjgZfjgabkvb/jgYZcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheW91dENvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGxldCB4cG9zOiBudW1iZXIgPSBpICUgMjtcbiAgICAgICAgICAgIGxldCB5cG9zOiBudW1iZXIgPSBpIC8gMjtcblxuICAgICAgICAgICAgLy8g5bCP5pWw54K544Gv5YiH44KK5o2o44Gm44KLXG4gICAgICAgICAgICB4cG9zID0gfn54cG9zO1xuICAgICAgICAgICAgeXBvcyA9IH5+eXBvcztcblxuICAgICAgICAgICAgY29uc3QgY2MgPSB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChjdXJDbGlwSW5kZXgrKyk7XG4gICAgICAgICAgICBjYy5fbGF5b3V0Q2hhbm5lbE5vID0gY2hhbm5lbE5vO1xuXG4gICAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLnggPSB4cG9zICogMC41O1xuICAgICAgICAgICAgY2MuX2xheW91dEJvdW5kcy55ID0geXBvcyAqIDAuNTtcbiAgICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMud2lkdGggPSAwLjU7XG4gICAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLmhlaWdodCA9IDAuNTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobGF5b3V0Q291bnQgPD0gOSkge1xuICAgICAgICAgIC8vIDnliIblibLjgZfjgabkvb/jgYZcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheW91dENvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGxldCB4cG9zID0gaSAlIDM7XG4gICAgICAgICAgICBsZXQgeXBvcyA9IGkgLyAzO1xuXG4gICAgICAgICAgICAvLyDlsI/mlbDngrnjga/liIfjgormjajjgabjgotcbiAgICAgICAgICAgIHhwb3MgPSB+fnhwb3M7XG4gICAgICAgICAgICB5cG9zID0gfn55cG9zO1xuXG4gICAgICAgICAgICBjb25zdCBjYzogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0ID0gdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoXG4gICAgICAgICAgICAgIGN1ckNsaXBJbmRleCsrXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY2MuX2xheW91dENoYW5uZWxObyA9IGNoYW5uZWxObztcblxuICAgICAgICAgICAgY2MuX2xheW91dEJvdW5kcy54ID0geHBvcyAvIDMuMDtcbiAgICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMueSA9IHlwb3MgLyAzLjA7XG4gICAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLndpZHRoID0gMS4wIC8gMy4wO1xuICAgICAgICAgICAgY2MuX2xheW91dEJvdW5kcy5oZWlnaHQgPSAxLjAgLyAzLjA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEN1YmlzbUxvZ0Vycm9yKCdub3Qgc3VwcG9ydGVkIG1hc2sgY291bnQgOiB7MH0nLCBsYXlvdXRDb3VudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgqvjg6njg7zjg5Djg4Pjg5XjgqHjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcmV0dXJuIOOCq+ODqeODvOODkOODg+ODleOCoVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRDb2xvckJ1ZmZlcigpOiBXZWJHTFRleHR1cmUge1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yQnVmZmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOeUu+mdouaPj+eUu+OBq+S9v+eUqOOBmeOCi+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruODquOCueODiOOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g55S76Z2i5o+P55S744Gr5L2/55So44GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu44Oq44K544OIXG4gICAgICovXG4gICAgcHVibGljIGdldENsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3KCk6IGNzbVZlY3RvcjxDdWJpc21DbGlwcGluZ0NvbnRleHQ+IHtcbiAgICAgIHJldHVybiB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrrjgpLoqK3lrprjgZnjgotcbiAgICAgKiBAcGFyYW0gc2l6ZSDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZShzaXplOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX2NsaXBwaW5nTWFza0J1ZmZlclNpemUgPSBzaXplO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCuuOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAgICovXG4gICAgcHVibGljIGdldENsaXBwaW5nTWFza0J1ZmZlclNpemUoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9jbGlwcGluZ01hc2tCdWZmZXJTaXplO1xuICAgIH1cblxuICAgIHB1YmxpYyBfbWFza1JlbmRlclRleHR1cmU6IFdlYkdMRnJhbWVidWZmZXI7IC8vIOODnuOCueOCr+eUqOODrOODs+ODgOODvOODhuOCr+OCueODgeODo+OBruOCouODieODrOOCuVxuICAgIHB1YmxpYyBfY29sb3JCdWZmZXI6IFdlYkdMVGV4dHVyZTsgLy8g44Oe44K544Kv55So44Kr44Op44O844OQ44OD44OV44Kh44O844Gu44Ki44OJ44Os44K5XG4gICAgcHVibGljIF9jdXJyZW50RnJhbWVObzogbnVtYmVyOyAvLyDjg57jgrnjgq/jg4bjgq/jgrnjg4Hjg6PjgavkuI7jgYjjgovjg5Xjg6zjg7zjg6Dnlarlj7dcblxuICAgIHB1YmxpYyBfY2hhbm5lbENvbG9yczogY3NtVmVjdG9yPEN1YmlzbVRleHR1cmVDb2xvcj47XG4gICAgcHVibGljIF9tYXNrVGV4dHVyZTogQ3ViaXNtUmVuZGVyVGV4dHVyZVJlc291cmNlOyAvLyDjg57jgrnjgq/nlKjjga7jg4bjgq/jgrnjg4Hjg6Pjg6rjgr3jg7zjgrnjga7jg6rjgrnjg4hcbiAgICBwdWJsaWMgX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrOiBjc21WZWN0b3I8Q3ViaXNtQ2xpcHBpbmdDb250ZXh0PjsgLy8g44Oe44K544Kv55So44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44Gu44Oq44K544OIXG4gICAgcHVibGljIF9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdzogY3NtVmVjdG9yPEN1YmlzbUNsaXBwaW5nQ29udGV4dD47IC8vIOaPj+eUu+eUqOOCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiOOBruODquOCueODiFxuICAgIHB1YmxpYyBfY2xpcHBpbmdNYXNrQnVmZmVyU2l6ZTogbnVtYmVyOyAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7jg5Djg4Pjg5XjgqHjgrXjgqTjgrrvvIjliJ3mnJ/lgKQ6MjU277yJXG5cbiAgICBwcml2YXRlIF90bXBNYXRyaXg6IEN1YmlzbU1hdHJpeDQ0OyAvLyDjg57jgrnjgq/oqIjnrpfnlKjjga7ooYzliJdcbiAgICBwcml2YXRlIF90bXBNYXRyaXhGb3JNYXNrOiBDdWJpc21NYXRyaXg0NDsgLy8g44Oe44K544Kv6KiI566X55So44Gu6KGM5YiXXG4gICAgcHJpdmF0ZSBfdG1wTWF0cml4Rm9yRHJhdzogQ3ViaXNtTWF0cml4NDQ7IC8vIOODnuOCueOCr+ioiOeul+eUqOOBruihjOWIl1xuICAgIHByaXZhdGUgX3RtcEJvdW5kc09uTW9kZWw6IGNzbVJlY3Q7IC8vIOODnuOCueOCr+mFjee9ruioiOeul+eUqOOBruefqeW9olxuXG4gICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDsgLy8gV2ViR0zjg6zjg7Pjg4Djg6rjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4hcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg7zjg4bjgq/jgrnjg4Hjg6Pjga7jg6rjgr3jg7zjgrnjgpLlrprnvqnjgZnjgovmp4vpgKDkvZNcbiAgICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gn5L2/55So44GZ44KLXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtUmVuZGVyVGV4dHVyZVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKiBAcGFyYW0gZnJhbWVObyDjg6zjg7Pjg4Djg6njg7zjga7jg5Xjg6zjg7zjg6Dnlarlj7dcbiAgICAgKiBAcGFyYW0gdGV4dHVyZSDjg4bjgq/jgrnjg4Hjg6Pjga7jgqLjg4njg6zjgrlcbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoZnJhbWVObzogbnVtYmVyLCB0ZXh0dXJlOiBXZWJHTEZyYW1lYnVmZmVyKSB7XG4gICAgICB0aGlzLmZyYW1lTm8gPSBmcmFtZU5vO1xuICAgICAgdGhpcy50ZXh0dXJlID0gdGV4dHVyZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZnJhbWVObzogbnVtYmVyOyAvLyDjg6zjg7Pjg4Djg6njga7jg5Xjg6zjg7zjg6Dnlarlj7dcbiAgICBwdWJsaWMgdGV4dHVyZTogV2ViR0xGcmFtZWJ1ZmZlcjsgLy8g44OG44Kv44K544OB44Oj44Gu44Ki44OJ44Os44K5XG4gIH1cblxuICAvKipcbiAgICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu44Kz44Oz44OG44Kt44K544OIXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtQ2xpcHBpbmdDb250ZXh0IHtcbiAgICAvKipcbiAgICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgICBtYW5hZ2VyOiBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0wsXG4gICAgICBjbGlwcGluZ0RyYXdhYmxlSW5kaWNlczogSW50MzJBcnJheSxcbiAgICAgIGNsaXBDb3VudDogbnVtYmVyXG4gICAgKSB7XG4gICAgICB0aGlzLl9vd25lciA9IG1hbmFnZXI7XG5cbiAgICAgIC8vIOOCr+ODquODg+ODl+OBl+OBpuOBhOOCi++8iO+8neODnuOCueOCr+eUqOOBru+8iURyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K544Oq44K544OIXG4gICAgICB0aGlzLl9jbGlwcGluZ0lkTGlzdCA9IGNsaXBwaW5nRHJhd2FibGVJbmRpY2VzO1xuXG4gICAgICAvLyDjg57jgrnjgq/jga7mlbBcbiAgICAgIHRoaXMuX2NsaXBwaW5nSWRDb3VudCA9IGNsaXBDb3VudDtcblxuICAgICAgdGhpcy5fYWxsQ2xpcHBlZERyYXdSZWN0ID0gbmV3IGNzbVJlY3QoKTtcbiAgICAgIHRoaXMuX2xheW91dEJvdW5kcyA9IG5ldyBjc21SZWN0KCk7XG5cbiAgICAgIHRoaXMuX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdCA9IFtdO1xuXG4gICAgICB0aGlzLl9tYXRyaXhGb3JNYXNrID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XG4gICAgICB0aGlzLl9tYXRyaXhGb3JEcmF3ID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAgICovXG4gICAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgICBpZiAodGhpcy5fbGF5b3V0Qm91bmRzICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5fbGF5b3V0Qm91bmRzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2FsbENsaXBwZWREcmF3UmVjdCAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuX2FsbENsaXBwZWREcmF3UmVjdCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jbGlwcGVkRHJhd2FibGVJbmRleExpc3QgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9jbGlwcGVkRHJhd2FibGVJbmRleExpc3QgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOBk+OBruODnuOCueOCr+OBq+OCr+ODquODg+ODl+OBleOCjOOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOOCkui/veWKoOOBmeOCi1xuICAgICAqXG4gICAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXgg44Kv44Oq44OD44OU44Oz44Kw5a++6LGh44Gr6L+95Yqg44GZ44KL5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICovXG4gICAgcHVibGljIGFkZENsaXBwZWREcmF3YWJsZShkcmF3YWJsZUluZGV4OiBudW1iZXIpIHtcbiAgICAgIHRoaXMuX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdC5wdXNoKGRyYXdhYmxlSW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOBk+OBruODnuOCueOCr+OCkueuoeeQhuOBmeOCi+ODnuODjeODvOOCuOODo+OBruOCpOODs+OCueOCv+ODs+OCueOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g44Kv44Oq44OD44OU44Oz44Kw44Oe44ON44O844K444Oj44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAgICovXG4gICAgcHVibGljIGdldENsaXBwaW5nTWFuYWdlcigpOiBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0wge1xuICAgICAgcmV0dXJuIHRoaXMuX293bmVyO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRHbChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XG4gICAgICB0aGlzLl9vd25lci5zZXRHTChnbCk7XG4gICAgfVxuXG4gICAgcHVibGljIF9pc1VzaW5nOiBib29sZWFuOyAvLyDnj77lnKjjga7mj4/nlLvnirbmhYvjgafjg57jgrnjgq/jga7mupblgpnjgYzlv4XopoHjgarjgol0cnVlXG4gICAgcHVibGljIHJlYWRvbmx5IF9jbGlwcGluZ0lkTGlzdDogSW50MzJBcnJheTsgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44GuSUTjg6rjgrnjg4hcbiAgICBwdWJsaWMgX2NsaXBwaW5nSWRDb3VudDogbnVtYmVyOyAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7mlbBcbiAgICBwdWJsaWMgX2xheW91dENoYW5uZWxObzogbnVtYmVyOyAvLyBSR0JB44Gu44GE44Ga44KM44Gu44OB44Oj44Oz44ON44Or44Gr44GT44Gu44Kv44Oq44OD44OX44KS6YWN572u44GZ44KL44GL77yIMDpSLCAxOkcsIDI6QiwgMzpB77yJXG4gICAgcHVibGljIF9sYXlvdXRCb3VuZHM6IGNzbVJlY3Q7IC8vIOODnuOCueOCr+eUqOODgeODo+ODs+ODjeODq+OBruOBqeOBrumgmOWfn+OBq+ODnuOCueOCr+OCkuWFpeOCjOOCi+OBi++8iFZpZXfluqfmqJktMX4xLCBVVuOBrzB+MeOBq+ebtOOBme+8iVxuICAgIHB1YmxpYyBfYWxsQ2xpcHBlZERyYXdSZWN0OiBjc21SZWN0OyAvLyDjgZPjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjgafjgIHjgq/jg6rjg4Pjg5Tjg7PjgrDjgZXjgozjgovjgZnjgbnjgabjga7mj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7lm7Ljgb/nn6nlvaLvvIjmr47lm57mm7TmlrDvvIlcbiAgICBwdWJsaWMgX21hdHJpeEZvck1hc2s6IEN1YmlzbU1hdHJpeDQ0OyAvLyDjg57jgrnjgq/jga7kvY3nva7oqIjnrpfntZDmnpzjgpLkv53mjIHjgZnjgovooYzliJdcbiAgICBwdWJsaWMgX21hdHJpeEZvckRyYXc6IEN1YmlzbU1hdHJpeDQ0OyAvLyDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7kvY3nva7oqIjnrpfntZDmnpzjgpLkv53mjIHjgZnjgovooYzliJdcbiAgICBwdWJsaWMgX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdDogbnVtYmVyW107IC8vIOOBk+OBruODnuOCueOCr+OBq+OCr+ODquODg+ODl+OBleOCjOOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruODquOCueODiFxuXG4gICAgcHJpdmF0ZSBfb3duZXI6IEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTDsgLy8g44GT44Gu44Oe44K544Kv44KS566h55CG44GX44Gm44GE44KL44Oe44ON44O844K444Oj44Gu44Kk44Oz44K544K/44Oz44K5XG4gIH1cblxuICAvKipcbiAgICogV2ViR0znlKjjga7jgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLnlJ/miJDjg7vnoLTmo4TjgZnjgovjgq/jg6njgrlcbiAgICog44K344Oz44Kw44Or44OI44Oz44Gq44Kv44Op44K544Gn44GC44KK44CBQ3ViaXNtU2hhZGVyX1dlYkdMLmdldEluc3RhbmNl44GL44KJ44Ki44Kv44K744K544GZ44KL44CCXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtU2hhZGVyX1dlYkdMIHtcbiAgICAvKipcbiAgICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLlj5blvpfjgZnjgovvvIjjgrfjg7PjgrDjg6vjg4jjg7PvvIlcbiAgICAgKiBAcmV0dXJuIOOCpOODs+OCueOCv+ODs+OCuVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogQ3ViaXNtU2hhZGVyX1dlYkdMIHtcbiAgICAgIGlmIChzX2luc3RhbmNlID09IG51bGwpIHtcbiAgICAgICAgc19pbnN0YW5jZSA9IG5ldyBDdWJpc21TaGFkZXJfV2ViR0woKTtcblxuICAgICAgICByZXR1cm4gc19pbnN0YW5jZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzX2luc3RhbmNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCpOODs+OCueOCv+ODs+OCueOCkumWi+aUvuOBmeOCi++8iOOCt+ODs+OCsOODq+ODiOODs++8iVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZGVsZXRlSW5zdGFuY2UoKTogdm9pZCB7XG4gICAgICBpZiAoc19pbnN0YW5jZSkge1xuICAgICAgICBzX2luc3RhbmNlLnJlbGVhc2UoKTtcbiAgICAgICAgc19pbnN0YW5jZSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcHJpdmF0ZeOBquOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21TaGFkZXJTZXQ+KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAgICovXG4gICAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgICB0aGlzLnJlbGVhc2VTaGFkZXJQcm9ncmFtKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gu5LiA6YCj44Gu44K744OD44OI44Ki44OD44OX44KS5a6f6KGM44GZ44KLXG4gICAgICogQHBhcmFtIHJlbmRlcmVyIOODrOODs+ODgOODqeOBruOCpOODs+OCueOCv+ODs+OCuVxuICAgICAqIEBwYXJhbSB0ZXh0dXJlSWQgR1BV44Gu44OG44Kv44K544OB44OjSURcbiAgICAgKiBAcGFyYW0gdmVydGV4Q291bnQg44Od44Oq44K044Oz44Oh44OD44K344Ol44Gu6aCC54K55pWwXG4gICAgICogQHBhcmFtIHZlcnRleEFycmF5IOODneODquOCtOODs+ODoeODg+OCt+ODpeOBrumggueCuemFjeWIl1xuICAgICAqIEBwYXJhbSBpbmRleEFycmF5IOOCpOODs+ODh+ODg+OCr+OCueODkOODg+ODleOCoeOBrumggueCuemFjeWIl1xuICAgICAqIEBwYXJhbSB1dkFycmF5IHV26YWN5YiXXG4gICAgICogQHBhcmFtIG9wYWNpdHkg5LiN6YCP5piO5bqmXG4gICAgICogQHBhcmFtIGNvbG9yQmxlbmRNb2RlIOOCq+ODqeODvOODluODrOODs+ODh+OCo+ODs+OCsOOBruOCv+OCpOODl1xuICAgICAqIEBwYXJhbSBiYXNlQ29sb3Ig44OZ44O844K544Kr44Op44O8XG4gICAgICogQHBhcmFtIGlzUHJlbXVsdGlwbGllZEFscGhhIOS5l+eul+a4iOOBv+OCouODq+ODleOCoeOBi+OBqeOBhuOBi1xuICAgICAqIEBwYXJhbSBtYXRyaXg0eDQgTW9kZWwtVmlldy1Qcm9qZWN0aW9u6KGM5YiXXG4gICAgICogQHBhcmFtIGludmVydGVkTWFzayDjg57jgrnjgq/jgpLlj43ou6LjgZfjgabkvb/nlKjjgZnjgovjg5Xjg6njgrBcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0dXBTaGFkZXJQcm9ncmFtKFxuICAgICAgcmVuZGVyZXI6IEN1YmlzbVJlbmRlcmVyX1dlYkdMLFxuICAgICAgdGV4dHVyZUlkOiBXZWJHTFRleHR1cmUsXG4gICAgICB2ZXJ0ZXhDb3VudDogbnVtYmVyLFxuICAgICAgdmVydGV4QXJyYXk6IEZsb2F0MzJBcnJheSxcbiAgICAgIGluZGV4QXJyYXk6IFVpbnQxNkFycmF5LFxuICAgICAgdXZBcnJheTogRmxvYXQzMkFycmF5LFxuICAgICAgYnVmZmVyRGF0YToge1xuICAgICAgICB2ZXJ0ZXg6IFdlYkdMQnVmZmVyO1xuICAgICAgICB1djogV2ViR0xCdWZmZXI7XG4gICAgICAgIGluZGV4OiBXZWJHTEJ1ZmZlcjtcbiAgICAgIH0sXG4gICAgICBvcGFjaXR5OiBudW1iZXIsXG4gICAgICBjb2xvckJsZW5kTW9kZTogQ3ViaXNtQmxlbmRNb2RlLFxuICAgICAgYmFzZUNvbG9yOiBDdWJpc21UZXh0dXJlQ29sb3IsXG4gICAgICBpc1ByZW11bHRpcGxpZWRBbHBoYTogYm9vbGVhbixcbiAgICAgIG1hdHJpeDR4NDogQ3ViaXNtTWF0cml4NDQsXG4gICAgICBpbnZlcnRlZE1hc2s6IGJvb2xlYW5cbiAgICApOiB2b2lkIHtcbiAgICAgIGlmICghaXNQcmVtdWx0aXBsaWVkQWxwaGEpIHtcbiAgICAgICAgQ3ViaXNtTG9nRXJyb3IoJ05vUHJlbXVsdGlwbGllZEFscGhhIGlzIG5vdCBhbGxvd2VkJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9zaGFkZXJTZXRzLmdldFNpemUoKSA9PSAwKSB7XG4gICAgICAgIHRoaXMuZ2VuZXJhdGVTaGFkZXJzKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEJsZW5kaW5nXG4gICAgICBsZXQgU1JDX0NPTE9SOiBudW1iZXI7XG4gICAgICBsZXQgRFNUX0NPTE9SOiBudW1iZXI7XG4gICAgICBsZXQgU1JDX0FMUEhBOiBudW1iZXI7XG4gICAgICBsZXQgRFNUX0FMUEhBOiBudW1iZXI7XG5cbiAgICAgIGlmIChyZW5kZXJlci5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKCkgIT0gbnVsbCkge1xuICAgICAgICAvLyDjg57jgrnjgq/nlJ/miJDmmYJcbiAgICAgICAgY29uc3Qgc2hhZGVyU2V0OiBDdWJpc21TaGFkZXJTZXQgPSB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAgIFNoYWRlck5hbWVzLlNoYWRlck5hbWVzX1NldHVwTWFza1xuICAgICAgICApO1xuICAgICAgICB0aGlzLmdsLnVzZVByb2dyYW0oc2hhZGVyU2V0LnNoYWRlclByb2dyYW0pO1xuXG4gICAgICAgIC8vIOODhuOCr+OCueODgeODo+ioreWumlxuICAgICAgICB0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMCk7XG4gICAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0ZXh0dXJlSWQpO1xuICAgICAgICB0aGlzLmdsLnVuaWZvcm0xaShzaGFkZXJTZXQuc2FtcGxlclRleHR1cmUwTG9jYXRpb24sIDApO1xuXG4gICAgICAgIC8vIOmggueCuemFjeWIl+OBruioreWumihWQk8pXG4gICAgICAgIGlmIChidWZmZXJEYXRhLnZlcnRleCA9PSBudWxsKSB7XG4gICAgICAgICAgYnVmZmVyRGF0YS52ZXJ0ZXggPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyRGF0YS52ZXJ0ZXgpO1xuICAgICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEoXG4gICAgICAgICAgdGhpcy5nbC5BUlJBWV9CVUZGRVIsXG4gICAgICAgICAgdmVydGV4QXJyYXksXG4gICAgICAgICAgdGhpcy5nbC5EWU5BTUlDX0RSQVdcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzaGFkZXJTZXQuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbik7XG4gICAgICAgIHRoaXMuZ2wudmVydGV4QXR0cmliUG9pbnRlcihcbiAgICAgICAgICBzaGFkZXJTZXQuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbixcbiAgICAgICAgICAyLFxuICAgICAgICAgIHRoaXMuZ2wuRkxPQVQsXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgMCxcbiAgICAgICAgICAwXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8g44OG44Kv44K544OB44Oj6aCC54K544Gu6Kit5a6aXG4gICAgICAgIGlmIChidWZmZXJEYXRhLnV2ID09IG51bGwpIHtcbiAgICAgICAgICBidWZmZXJEYXRhLnV2ID0gdGhpcy5nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlckRhdGEudXYpO1xuICAgICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEodGhpcy5nbC5BUlJBWV9CVUZGRVIsIHV2QXJyYXksIHRoaXMuZ2wuRFlOQU1JQ19EUkFXKTtcbiAgICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzaGFkZXJTZXQuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbik7XG4gICAgICAgIHRoaXMuZ2wudmVydGV4QXR0cmliUG9pbnRlcihcbiAgICAgICAgICBzaGFkZXJTZXQuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbixcbiAgICAgICAgICAyLFxuICAgICAgICAgIHRoaXMuZ2wuRkxPQVQsXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgMCxcbiAgICAgICAgICAwXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8g44OB44Oj44Oz44ON44OrXG4gICAgICAgIGNvbnN0IGNoYW5uZWxObzogbnVtYmVyID0gcmVuZGVyZXIuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpXG4gICAgICAgICAgLl9sYXlvdXRDaGFubmVsTm87XG4gICAgICAgIGNvbnN0IGNvbG9yQ2hhbm5lbDogQ3ViaXNtVGV4dHVyZUNvbG9yID0gcmVuZGVyZXJcbiAgICAgICAgICAuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpXG4gICAgICAgICAgLmdldENsaXBwaW5nTWFuYWdlcigpXG4gICAgICAgICAgLmdldENoYW5uZWxGbGFnQXNDb2xvcihjaGFubmVsTm8pO1xuICAgICAgICB0aGlzLmdsLnVuaWZvcm00ZihcbiAgICAgICAgICBzaGFkZXJTZXQudW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb24sXG4gICAgICAgICAgY29sb3JDaGFubmVsLlIsXG4gICAgICAgICAgY29sb3JDaGFubmVsLkcsXG4gICAgICAgICAgY29sb3JDaGFubmVsLkIsXG4gICAgICAgICAgY29sb3JDaGFubmVsLkFcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmdsLnVuaWZvcm1NYXRyaXg0ZnYoXG4gICAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24sXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgcmVuZGVyZXIuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpLl9tYXRyaXhGb3JNYXNrLmdldEFycmF5KClcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCByZWN0OiBjc21SZWN0ID0gcmVuZGVyZXIuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpXG4gICAgICAgICAgLl9sYXlvdXRCb3VuZHM7XG5cbiAgICAgICAgdGhpcy5nbC51bmlmb3JtNGYoXG4gICAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbixcbiAgICAgICAgICByZWN0LnggKiAyLjAgLSAxLjAsXG4gICAgICAgICAgcmVjdC55ICogMi4wIC0gMS4wLFxuICAgICAgICAgIHJlY3QuZ2V0UmlnaHQoKSAqIDIuMCAtIDEuMCxcbiAgICAgICAgICByZWN0LmdldEJvdHRvbSgpICogMi4wIC0gMS4wXG4gICAgICAgICk7XG5cbiAgICAgICAgU1JDX0NPTE9SID0gdGhpcy5nbC5aRVJPO1xuICAgICAgICBEU1RfQ09MT1IgPSB0aGlzLmdsLk9ORV9NSU5VU19TUkNfQ09MT1I7XG4gICAgICAgIFNSQ19BTFBIQSA9IHRoaXMuZ2wuWkVSTztcbiAgICAgICAgRFNUX0FMUEhBID0gdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBO1xuICAgICAgfSAvLyDjg57jgrnjgq/nlJ/miJDku6XlpJbjga7loLTlkIhcbiAgICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBtYXNrZWQ6IGJvb2xlYW4gPVxuICAgICAgICAgIHJlbmRlcmVyLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcoKSAhPSBudWxsOyAvLyDjgZPjga7mj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga/jg57jgrnjgq/lr77osaHjgYtcbiAgICAgICAgY29uc3Qgb2Zmc2V0OiBudW1iZXIgPSBtYXNrZWQgPyAoaW52ZXJ0ZWRNYXNrID8gMiA6IDEpIDogMDtcblxuICAgICAgICBsZXQgc2hhZGVyU2V0OiBDdWJpc21TaGFkZXJTZXQgPSBuZXcgQ3ViaXNtU2hhZGVyU2V0KCk7XG5cbiAgICAgICAgc3dpdGNoIChjb2xvckJsZW5kTW9kZSkge1xuICAgICAgICAgIGNhc2UgQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9Ob3JtYWw6XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHNoYWRlclNldCA9IHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgICAgICAgIFNoYWRlck5hbWVzLlNoYWRlck5hbWVzX05vcm1hbFByZW11bHRpcGxpZWRBbHBoYSArIG9mZnNldFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIFNSQ19DT0xPUiA9IHRoaXMuZ2wuT05FO1xuICAgICAgICAgICAgRFNUX0NPTE9SID0gdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBO1xuICAgICAgICAgICAgU1JDX0FMUEhBID0gdGhpcy5nbC5PTkU7XG4gICAgICAgICAgICBEU1RfQUxQSEEgPSB0aGlzLmdsLk9ORV9NSU5VU19TUkNfQUxQSEE7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9BZGRpdGl2ZTpcbiAgICAgICAgICAgIHNoYWRlclNldCA9IHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgICAgICAgIFNoYWRlck5hbWVzLlNoYWRlck5hbWVzX0FkZFByZW11bHRpcGxpZWRBbHBoYSArIG9mZnNldFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIFNSQ19DT0xPUiA9IHRoaXMuZ2wuT05FO1xuICAgICAgICAgICAgRFNUX0NPTE9SID0gdGhpcy5nbC5PTkU7XG4gICAgICAgICAgICBTUkNfQUxQSEEgPSB0aGlzLmdsLlpFUk87XG4gICAgICAgICAgICBEU1RfQUxQSEEgPSB0aGlzLmdsLk9ORTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBDdWJpc21CbGVuZE1vZGUuQ3ViaXNtQmxlbmRNb2RlX011bHRpcGxpY2F0aXZlOlxuICAgICAgICAgICAgc2hhZGVyU2V0ID0gdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgICAgICAgU2hhZGVyTmFtZXMuU2hhZGVyTmFtZXNfTXVsdFByZW11bHRpcGxpZWRBbHBoYSArIG9mZnNldFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIFNSQ19DT0xPUiA9IHRoaXMuZ2wuRFNUX0NPTE9SO1xuICAgICAgICAgICAgRFNUX0NPTE9SID0gdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBO1xuICAgICAgICAgICAgU1JDX0FMUEhBID0gdGhpcy5nbC5aRVJPO1xuICAgICAgICAgICAgRFNUX0FMUEhBID0gdGhpcy5nbC5PTkU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZ2wudXNlUHJvZ3JhbShzaGFkZXJTZXQuc2hhZGVyUHJvZ3JhbSk7XG5cbiAgICAgICAgLy8g6aCC54K56YWN5YiX44Gu6Kit5a6aXG4gICAgICAgIGlmIChidWZmZXJEYXRhLnZlcnRleCA9PSBudWxsKSB7XG4gICAgICAgICAgYnVmZmVyRGF0YS52ZXJ0ZXggPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyRGF0YS52ZXJ0ZXgpO1xuICAgICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEoXG4gICAgICAgICAgdGhpcy5nbC5BUlJBWV9CVUZGRVIsXG4gICAgICAgICAgdmVydGV4QXJyYXksXG4gICAgICAgICAgdGhpcy5nbC5EWU5BTUlDX0RSQVdcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzaGFkZXJTZXQuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbik7XG4gICAgICAgIHRoaXMuZ2wudmVydGV4QXR0cmliUG9pbnRlcihcbiAgICAgICAgICBzaGFkZXJTZXQuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbixcbiAgICAgICAgICAyLFxuICAgICAgICAgIHRoaXMuZ2wuRkxPQVQsXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgMCxcbiAgICAgICAgICAwXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8g44OG44Kv44K544OB44Oj6aCC54K544Gu6Kit5a6aXG4gICAgICAgIGlmIChidWZmZXJEYXRhLnV2ID09IG51bGwpIHtcbiAgICAgICAgICBidWZmZXJEYXRhLnV2ID0gdGhpcy5nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlckRhdGEudXYpO1xuICAgICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEodGhpcy5nbC5BUlJBWV9CVUZGRVIsIHV2QXJyYXksIHRoaXMuZ2wuRFlOQU1JQ19EUkFXKTtcbiAgICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzaGFkZXJTZXQuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbik7XG4gICAgICAgIHRoaXMuZ2wudmVydGV4QXR0cmliUG9pbnRlcihcbiAgICAgICAgICBzaGFkZXJTZXQuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbixcbiAgICAgICAgICAyLFxuICAgICAgICAgIHRoaXMuZ2wuRkxPQVQsXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgMCxcbiAgICAgICAgICAwXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKG1hc2tlZCkge1xuICAgICAgICAgIHRoaXMuZ2wuYWN0aXZlVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkUxKTtcbiAgICAgICAgICBjb25zdCB0ZXg6IFdlYkdMVGV4dHVyZSA9IHJlbmRlcmVyXG4gICAgICAgICAgICAuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdygpXG4gICAgICAgICAgICAuZ2V0Q2xpcHBpbmdNYW5hZ2VyKClcbiAgICAgICAgICAgIC5nZXRDb2xvckJ1ZmZlcigpO1xuICAgICAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0ZXgpO1xuICAgICAgICAgIHRoaXMuZ2wudW5pZm9ybTFpKHNoYWRlclNldC5zYW1wbGVyVGV4dHVyZTFMb2NhdGlvbiwgMSk7XG5cbiAgICAgICAgICAvLyB2aWV35bqn5qiZ44KSQ2xpcHBpbmdDb250ZXh044Gu5bqn5qiZ44Gr5aSJ5o+b44GZ44KL44Gf44KB44Gu6KGM5YiX44KS6Kit5a6aXG4gICAgICAgICAgdGhpcy5nbC51bmlmb3JtTWF0cml4NGZ2KFxuICAgICAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24sXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHJlbmRlcmVyLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcoKS5fbWF0cml4Rm9yRHJhdy5nZXRBcnJheSgpXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIC8vIOS9v+eUqOOBmeOCi+OCq+ODqeODvOODgeODo+ODs+ODjeODq+OCkuioreWumlxuICAgICAgICAgIGNvbnN0IGNoYW5uZWxObzogbnVtYmVyID0gcmVuZGVyZXIuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdygpXG4gICAgICAgICAgICAuX2xheW91dENoYW5uZWxObztcbiAgICAgICAgICBjb25zdCBjb2xvckNoYW5uZWw6IEN1YmlzbVRleHR1cmVDb2xvciA9IHJlbmRlcmVyXG4gICAgICAgICAgICAuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdygpXG4gICAgICAgICAgICAuZ2V0Q2xpcHBpbmdNYW5hZ2VyKClcbiAgICAgICAgICAgIC5nZXRDaGFubmVsRmxhZ0FzQ29sb3IoY2hhbm5lbE5vKTtcbiAgICAgICAgICB0aGlzLmdsLnVuaWZvcm00ZihcbiAgICAgICAgICAgIHNoYWRlclNldC51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbixcbiAgICAgICAgICAgIGNvbG9yQ2hhbm5lbC5SLFxuICAgICAgICAgICAgY29sb3JDaGFubmVsLkcsXG4gICAgICAgICAgICBjb2xvckNoYW5uZWwuQixcbiAgICAgICAgICAgIGNvbG9yQ2hhbm5lbC5BXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOODhuOCr+OCueODgeODo+ioreWumlxuICAgICAgICB0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMCk7XG4gICAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0ZXh0dXJlSWQpO1xuICAgICAgICB0aGlzLmdsLnVuaWZvcm0xaShzaGFkZXJTZXQuc2FtcGxlclRleHR1cmUwTG9jYXRpb24sIDApO1xuXG4gICAgICAgIC8vIOW6p+aomeWkieaPm1xuICAgICAgICB0aGlzLmdsLnVuaWZvcm1NYXRyaXg0ZnYoXG4gICAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1NYXRyaXhMb2NhdGlvbixcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBtYXRyaXg0eDQuZ2V0QXJyYXkoKVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuZ2wudW5pZm9ybTRmKFxuICAgICAgICAgIHNoYWRlclNldC51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24sXG4gICAgICAgICAgYmFzZUNvbG9yLlIsXG4gICAgICAgICAgYmFzZUNvbG9yLkcsXG4gICAgICAgICAgYmFzZUNvbG9yLkIsXG4gICAgICAgICAgYmFzZUNvbG9yLkFcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gSUJP44KS5L2c5oiQ44GX44CB44OH44O844K/44KS6Lui6YCBXG4gICAgICBpZiAoYnVmZmVyRGF0YS5pbmRleCA9PSBudWxsKSB7XG4gICAgICAgIGJ1ZmZlckRhdGEuaW5kZXggPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgfVxuICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGJ1ZmZlckRhdGEuaW5kZXgpO1xuICAgICAgdGhpcy5nbC5idWZmZXJEYXRhKFxuICAgICAgICB0aGlzLmdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLFxuICAgICAgICBpbmRleEFycmF5LFxuICAgICAgICB0aGlzLmdsLkRZTkFNSUNfRFJBV1xuICAgICAgKTtcbiAgICAgIHRoaXMuZ2wuYmxlbmRGdW5jU2VwYXJhdGUoU1JDX0NPTE9SLCBEU1RfQ09MT1IsIFNSQ19BTFBIQSwgRFNUX0FMUEhBKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLop6PmlL7jgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsZWFzZVNoYWRlclByb2dyYW0oKTogdm9pZCB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3NoYWRlclNldHMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgICAgdGhpcy5nbC5kZWxldGVQcm9ncmFtKHRoaXMuX3NoYWRlclNldHMuYXQoaSkuc2hhZGVyUHJvZ3JhbSk7XG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoaSkuc2hhZGVyUHJvZ3JhbSA9IDA7XG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuc2V0KGksIHZvaWQgMCk7XG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuc2V0KGksIG51bGwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOCkuWIneacn+WMluOBmeOCi1xuICAgICAqIEBwYXJhbSB2ZXJ0U2hhZGVyU3JjIOmggueCueOCt+OCp+ODvOODgOOBruOCveODvOOCuVxuICAgICAqIEBwYXJhbSBmcmFnU2hhZGVyU3JjIOODleODqeOCsOODoeODs+ODiOOCt+OCp+ODvOODgOOBruOCveODvOOCuVxuICAgICAqL1xuICAgIHB1YmxpYyBnZW5lcmF0ZVNoYWRlcnMoKTogdm9pZCB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoYWRlckNvdW50OyBpKyspIHtcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5wdXNoQmFjayhuZXcgQ3ViaXNtU2hhZGVyU2V0KCkpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0gPSB0aGlzLmxvYWRTaGFkZXJQcm9ncmFtKFxuICAgICAgICB2ZXJ0ZXhTaGFkZXJTcmNTZXR1cE1hc2ssXG4gICAgICAgIGZyYWdtZW50U2hhZGVyU3Jjc2V0dXBNYXNrXG4gICAgICApO1xuXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0gPSB0aGlzLmxvYWRTaGFkZXJQcm9ncmFtKFxuICAgICAgICB2ZXJ0ZXhTaGFkZXJTcmMsXG4gICAgICAgIGZyYWdtZW50U2hhZGVyU3JjUHJlbXVsdGlwbGllZEFscGhhXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtID0gdGhpcy5sb2FkU2hhZGVyUHJvZ3JhbShcbiAgICAgICAgdmVydGV4U2hhZGVyU3JjTWFza2VkLFxuICAgICAgICBmcmFnbWVudFNoYWRlclNyY01hc2tQcmVtdWx0aXBsaWVkQWxwaGFcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNoYWRlclByb2dyYW0gPSB0aGlzLmxvYWRTaGFkZXJQcm9ncmFtKFxuICAgICAgICB2ZXJ0ZXhTaGFkZXJTcmNNYXNrZWQsXG4gICAgICAgIGZyYWdtZW50U2hhZGVyU3JjTWFza0ludmVydGVkUHJlbXVsdGlwbGllZEFscGhhXG4gICAgICApO1xuXG4gICAgICAvLyDliqDnrpfjgoLpgJrluLjjgajlkIzjgZjjgrfjgqfjg7zjg4Djg7zjgpLliKnnlKjjgZnjgotcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSA9IHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDFcbiAgICAgICkuc2hhZGVyUHJvZ3JhbTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSA9IHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDJcbiAgICAgICkuc2hhZGVyUHJvZ3JhbTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikuc2hhZGVyUHJvZ3JhbSA9IHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDNcbiAgICAgICkuc2hhZGVyUHJvZ3JhbTtcblxuICAgICAgLy8g5LmX566X44KC6YCa5bi444Go5ZCM44GY44K344Kn44O844OA44O844KS5Yip55So44GZ44KLXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNoYWRlclByb2dyYW0gPSB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAxXG4gICAgICApLnNoYWRlclByb2dyYW07XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNoYWRlclByb2dyYW0gPSB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAyXG4gICAgICApLnNoYWRlclByb2dyYW07XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0gPSB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAzXG4gICAgICApLnNoYWRlclByb2dyYW07XG5cbiAgICAgIC8vIFNldHVwTWFza1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgMFxuICAgICAgKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV9wb3NpdGlvbidcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAwXG4gICAgICApLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3RleENvb3JkJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDBcbiAgICAgICkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnc190ZXh0dXJlMCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAwXG4gICAgICApLnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jbGlwTWF0cml4J1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDBcbiAgICAgICkudW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jaGFubmVsRmxhZydcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAwXG4gICAgICApLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2Jhc2VDb2xvcidcbiAgICAgICk7XG5cbiAgICAgIC8vIOmAmuW4uO+8iFByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgMVxuICAgICAgKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV9wb3NpdGlvbidcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAxXG4gICAgICApLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3RleENvb3JkJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDFcbiAgICAgICkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnc190ZXh0dXJlMCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnVuaWZvcm1NYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X21hdHJpeCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAxXG4gICAgICApLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2Jhc2VDb2xvcidcbiAgICAgICk7XG5cbiAgICAgIC8vIOmAmuW4uO+8iOOCr+ODquODg+ODlOODs+OCsOOAgVByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgMlxuICAgICAgKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV9wb3NpdGlvbidcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAyXG4gICAgICApLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3RleENvb3JkJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDJcbiAgICAgICkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnc190ZXh0dXJlMCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAyXG4gICAgICApLnNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3NfdGV4dHVyZTEnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9tYXRyaXgnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgMlxuICAgICAgKS51bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2xpcE1hdHJpeCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAyXG4gICAgICApLnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2hhbm5lbEZsYWcnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgMlxuICAgICAgKS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9iYXNlQ29sb3InXG4gICAgICApO1xuXG4gICAgICAvLyDpgJrluLjvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjg7vlj43ou6IsIFByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgM1xuICAgICAgKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV9wb3NpdGlvbidcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAzXG4gICAgICApLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3RleENvb3JkJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDNcbiAgICAgICkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnc190ZXh0dXJlMCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAzXG4gICAgICApLnNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3NfdGV4dHVyZTEnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9tYXRyaXgnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgM1xuICAgICAgKS51bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2xpcE1hdHJpeCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAzXG4gICAgICApLnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2hhbm5lbEZsYWcnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgM1xuICAgICAgKS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9iYXNlQ29sb3InXG4gICAgICApO1xuXG4gICAgICAvLyDliqDnrpfvvIhQcmVtdWx0aXBsaWVkQWxwaGHvvIlcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDRcbiAgICAgICkuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfcG9zaXRpb24nXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgNFxuICAgICAgKS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV90ZXhDb29yZCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICA0XG4gICAgICApLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3NfdGV4dHVyZTAnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9tYXRyaXgnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgNFxuICAgICAgKS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9iYXNlQ29sb3InXG4gICAgICApO1xuXG4gICAgICAvLyDliqDnrpfvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjgIFQcmVtdWx0aXBsaWVkQWxwaGHvvIlcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDVcbiAgICAgICkuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfcG9zaXRpb24nXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgNVxuICAgICAgKS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV90ZXhDb29yZCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICA1XG4gICAgICApLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3NfdGV4dHVyZTAnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgNVxuICAgICAgKS5zYW1wbGVyVGV4dHVyZTFMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdzX3RleHR1cmUxJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfbWF0cml4J1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDVcbiAgICAgICkudW5pZm9ybUNsaXBNYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2NsaXBNYXRyaXgnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgNVxuICAgICAgKS51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2NoYW5uZWxGbGFnJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDVcbiAgICAgICkudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfYmFzZUNvbG9yJ1xuICAgICAgKTtcblxuICAgICAgLy8g5Yqg566X77yI44Kv44Oq44OD44OU44Oz44Kw44O75Y+N6Lui44CBUHJlbXVsdGlwbGllZEFscGhh77yJXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICA2XG4gICAgICApLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3Bvc2l0aW9uJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDZcbiAgICAgICkuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfdGV4Q29vcmQnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgNlxuICAgICAgKS5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdzX3RleHR1cmUwJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDZcbiAgICAgICkuc2FtcGxlclRleHR1cmUxTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnc190ZXh0dXJlMSdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnVuaWZvcm1NYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X21hdHJpeCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICA2XG4gICAgICApLnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jbGlwTWF0cml4J1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDZcbiAgICAgICkudW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jaGFubmVsRmxhZydcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICA2XG4gICAgICApLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2Jhc2VDb2xvcidcbiAgICAgICk7XG5cbiAgICAgIC8vIOS5l+eul++8iFByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgN1xuICAgICAgKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg3KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV9wb3NpdGlvbidcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICA3XG4gICAgICApLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3RleENvb3JkJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDdcbiAgICAgICkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg3KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnc190ZXh0dXJlMCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnVuaWZvcm1NYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X21hdHJpeCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICA3XG4gICAgICApLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2Jhc2VDb2xvcidcbiAgICAgICk7XG5cbiAgICAgIC8vIOS5l+eul++8iOOCr+ODquODg+ODlOODs+OCsOOAgVByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgOFxuICAgICAgKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV9wb3NpdGlvbidcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICA4XG4gICAgICApLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3RleENvb3JkJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDhcbiAgICAgICkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnc190ZXh0dXJlMCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICA4XG4gICAgICApLnNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3NfdGV4dHVyZTEnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9tYXRyaXgnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgOFxuICAgICAgKS51bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2xpcE1hdHJpeCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICA4XG4gICAgICApLnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2hhbm5lbEZsYWcnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgOFxuICAgICAgKS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9iYXNlQ29sb3InXG4gICAgICApO1xuXG4gICAgICAvLyDkuZfnrpfvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjg7vlj43ou6LjgIFQcmVtdWx0aXBsaWVkQWxwaGHvvIlcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDlcbiAgICAgICkuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfcG9zaXRpb24nXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgOVxuICAgICAgKS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV90ZXhDb29yZCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICA5XG4gICAgICApLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3NfdGV4dHVyZTAnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgOVxuICAgICAgKS5zYW1wbGVyVGV4dHVyZTFMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdzX3RleHR1cmUxJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfbWF0cml4J1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDlcbiAgICAgICkudW5pZm9ybUNsaXBNYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2NsaXBNYXRyaXgnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgOVxuICAgICAgKS51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2NoYW5uZWxGbGFnJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDlcbiAgICAgICkudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfYmFzZUNvbG9yJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrfjgqfjg7zjg4Djg5fjg63jgrDjg6njg6DjgpLjg63jg7zjg4njgZfjgabjgqLjg4njg6zjgrnjgpLov5TjgZlcbiAgICAgKiBAcGFyYW0gdmVydGV4U2hhZGVyU291cmNlICAgIOmggueCueOCt+OCp+ODvOODgOOBruOCveODvOOCuVxuICAgICAqIEBwYXJhbSBmcmFnbWVudFNoYWRlclNvdXJjZSAg44OV44Op44Kw44Oh44Oz44OI44K344Kn44O844OA44Gu44K944O844K5XG4gICAgICogQHJldHVybiDjgrfjgqfjg7zjg4Djg5fjg63jgrDjg6njg6Djga7jgqLjg4njg6zjgrlcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9hZFNoYWRlclByb2dyYW0oXG4gICAgICB2ZXJ0ZXhTaGFkZXJTb3VyY2U6IHN0cmluZyxcbiAgICAgIGZyYWdtZW50U2hhZGVyU291cmNlOiBzdHJpbmdcbiAgICApOiBXZWJHTFByb2dyYW0ge1xuICAgICAgLy8gQ3JlYXRlIFNoYWRlciBQcm9ncmFtXG4gICAgICBsZXQgc2hhZGVyUHJvZ3JhbTogV2ViR0xQcm9ncmFtID0gdGhpcy5nbC5jcmVhdGVQcm9ncmFtKCk7XG5cbiAgICAgIGxldCB2ZXJ0U2hhZGVyID0gdGhpcy5jb21waWxlU2hhZGVyU291cmNlKFxuICAgICAgICB0aGlzLmdsLlZFUlRFWF9TSEFERVIsXG4gICAgICAgIHZlcnRleFNoYWRlclNvdXJjZVxuICAgICAgKTtcblxuICAgICAgaWYgKCF2ZXJ0U2hhZGVyKSB7XG4gICAgICAgIEN1YmlzbUxvZ0Vycm9yKCdWZXJ0ZXggc2hhZGVyIGNvbXBpbGUgZXJyb3IhJyk7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICBsZXQgZnJhZ1NoYWRlciA9IHRoaXMuY29tcGlsZVNoYWRlclNvdXJjZShcbiAgICAgICAgdGhpcy5nbC5GUkFHTUVOVF9TSEFERVIsXG4gICAgICAgIGZyYWdtZW50U2hhZGVyU291cmNlXG4gICAgICApO1xuICAgICAgaWYgKCFmcmFnU2hhZGVyKSB7XG4gICAgICAgIEN1YmlzbUxvZ0Vycm9yKCdWZXJ0ZXggc2hhZGVyIGNvbXBpbGUgZXJyb3IhJyk7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICAvLyBBdHRhY2ggdmVydGV4IHNoYWRlciB0byBwcm9ncmFtXG4gICAgICB0aGlzLmdsLmF0dGFjaFNoYWRlcihzaGFkZXJQcm9ncmFtLCB2ZXJ0U2hhZGVyKTtcblxuICAgICAgLy8gQXR0YWNoIGZyYWdtZW50IHNoYWRlciB0byBwcm9ncmFtXG4gICAgICB0aGlzLmdsLmF0dGFjaFNoYWRlcihzaGFkZXJQcm9ncmFtLCBmcmFnU2hhZGVyKTtcblxuICAgICAgLy8gbGluayBwcm9ncmFtXG4gICAgICB0aGlzLmdsLmxpbmtQcm9ncmFtKHNoYWRlclByb2dyYW0pO1xuICAgICAgY29uc3QgbGlua1N0YXR1cyA9IHRoaXMuZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihcbiAgICAgICAgc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgdGhpcy5nbC5MSU5LX1NUQVRVU1xuICAgICAgKTtcblxuICAgICAgLy8g44Oq44Oz44Kv44Gr5aSx5pWX44GX44Gf44KJ44K344Kn44O844OA44O844KS5YmK6ZmkXG4gICAgICBpZiAoIWxpbmtTdGF0dXMpIHtcbiAgICAgICAgQ3ViaXNtTG9nRXJyb3IoJ0ZhaWxlZCB0byBsaW5rIHByb2dyYW06IHswfScsIHNoYWRlclByb2dyYW0pO1xuXG4gICAgICAgIHRoaXMuZ2wuZGVsZXRlU2hhZGVyKHZlcnRTaGFkZXIpO1xuICAgICAgICB2ZXJ0U2hhZGVyID0gMDtcblxuICAgICAgICB0aGlzLmdsLmRlbGV0ZVNoYWRlcihmcmFnU2hhZGVyKTtcbiAgICAgICAgZnJhZ1NoYWRlciA9IDA7XG5cbiAgICAgICAgaWYgKHNoYWRlclByb2dyYW0pIHtcbiAgICAgICAgICB0aGlzLmdsLmRlbGV0ZVByb2dyYW0oc2hhZGVyUHJvZ3JhbSk7XG4gICAgICAgICAgc2hhZGVyUHJvZ3JhbSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgLy8gUmVsZWFzZSB2ZXJ0ZXggYW5kIGZyYWdtZW50IHNoYWRlcnMuXG4gICAgICB0aGlzLmdsLmRlbGV0ZVNoYWRlcih2ZXJ0U2hhZGVyKTtcbiAgICAgIHRoaXMuZ2wuZGVsZXRlU2hhZGVyKGZyYWdTaGFkZXIpO1xuXG4gICAgICByZXR1cm4gc2hhZGVyUHJvZ3JhbTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLjgrPjg7Pjg5HjgqTjg6vjgZnjgotcbiAgICAgKiBAcGFyYW0gc2hhZGVyVHlwZSDjgrfjgqfjg7zjg4Djgr/jgqTjg5coVmVydGV4L0ZyYWdtZW50KVxuICAgICAqIEBwYXJhbSBzaGFkZXJTb3VyY2Ug44K344Kn44O844OA44K944O844K544Kz44O844OJXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIOOCs+ODs+ODkeOCpOODq+OBleOCjOOBn+OCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoFxuICAgICAqL1xuICAgIHB1YmxpYyBjb21waWxlU2hhZGVyU291cmNlKFxuICAgICAgc2hhZGVyVHlwZTogR0xlbnVtLFxuICAgICAgc2hhZGVyU291cmNlOiBzdHJpbmdcbiAgICApOiBXZWJHTFByb2dyYW0ge1xuICAgICAgY29uc3Qgc291cmNlOiBzdHJpbmcgPSBzaGFkZXJTb3VyY2U7XG5cbiAgICAgIGNvbnN0IHNoYWRlcjogV2ViR0xQcm9ncmFtID0gdGhpcy5nbC5jcmVhdGVTaGFkZXIoc2hhZGVyVHlwZSk7XG4gICAgICB0aGlzLmdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNvdXJjZSk7XG4gICAgICB0aGlzLmdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcblxuICAgICAgaWYgKCFzaGFkZXIpIHtcbiAgICAgICAgY29uc3QgbG9nOiBzdHJpbmcgPSB0aGlzLmdsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKTtcbiAgICAgICAgQ3ViaXNtTG9nRXJyb3IoJ1NoYWRlciBjb21waWxlIGxvZzogezB9ICcsIGxvZyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHN0YXR1czogYW55ID0gdGhpcy5nbC5nZXRTaGFkZXJQYXJhbWV0ZXIoXG4gICAgICAgIHNoYWRlcixcbiAgICAgICAgdGhpcy5nbC5DT01QSUxFX1NUQVRVU1xuICAgICAgKTtcbiAgICAgIGlmICghc3RhdHVzKSB7XG4gICAgICAgIHRoaXMuZ2wuZGVsZXRlU2hhZGVyKHNoYWRlcik7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2hhZGVyO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRHbChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XG4gICAgICB0aGlzLmdsID0gZ2w7XG4gICAgfVxuXG4gICAgX3NoYWRlclNldHM6IGNzbVZlY3RvcjxDdWJpc21TaGFkZXJTZXQ+OyAvLyDjg63jg7zjg4njgZfjgZ/jgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLkv53mjIHjgZnjgovlpInmlbBcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0OyAvLyB3ZWJnbOOCs+ODs+ODhuOCreOCueODiFxuICB9XG5cbiAgLyoqXG4gICAqIEN1YmlzbVNoYWRlcl9XZWJHTOOBruOCpOODs+ODiuODvOOCr+ODqeOCuVxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbVNoYWRlclNldCB7XG4gICAgc2hhZGVyUHJvZ3JhbTogV2ViR0xQcm9ncmFtOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6Djga7jgqLjg4njg6zjgrlcbiAgICBhdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uOiBHTHVpbnQ7IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iFBvc2l0aW9u77yJXG4gICAgYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbjogR0x1aW50OyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhUZXhDb29yZO+8iVxuICAgIHVuaWZvcm1NYXRyaXhMb2NhdGlvbjogV2ViR0xVbmlmb3JtTG9jYXRpb247IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iE1hdHJpeO+8iVxuICAgIHVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhDbGlwTWF0cml477yJXG4gICAgc2FtcGxlclRleHR1cmUwTG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhUZXh0dXJlMO+8iVxuICAgIHNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjsgLy8g44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gr5rih44GZ5aSJ5pWw44Gu44Ki44OJ44Os44K577yIVGV4dHVyZTHvvIlcbiAgICB1bmlmb3JtQmFzZUNvbG9yTG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhCYXNlQ29sb3LvvIlcbiAgICB1bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbjogV2ViR0xVbmlmb3JtTG9jYXRpb247IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iENoYW5uZWxGbGFn77yJXG4gIH1cblxuICBleHBvcnQgZW51bSBTaGFkZXJOYW1lcyB7XG4gICAgLy8gU2V0dXBNYXNrXG4gICAgU2hhZGVyTmFtZXNfU2V0dXBNYXNrLFxuXG4gICAgLy8gTm9ybWFsXG4gICAgU2hhZGVyTmFtZXNfTm9ybWFsUHJlbXVsdGlwbGllZEFscGhhLFxuICAgIFNoYWRlck5hbWVzX05vcm1hbE1hc2tlZFByZW11bHRpcGxpZWRBbHBoYSxcbiAgICBTaGFkZXJOYW1lc19Ob21yYWxNYXNrZWRJbnZlcnRlZFByZW11bHRpcGxpZWRBbHBoYSxcblxuICAgIC8vIEFkZFxuICAgIFNoYWRlck5hbWVzX0FkZFByZW11bHRpcGxpZWRBbHBoYSxcbiAgICBTaGFkZXJOYW1lc19BZGRNYXNrZWRQcmVtdWx0aXBsaWVkQWxwaGEsXG4gICAgU2hhZGVyTmFtZXNfQWRkTWFza2VkUHJlbXVsdGlwbGllZEFscGhhSW52ZXJ0ZWQsXG5cbiAgICAvLyBNdWx0XG4gICAgU2hhZGVyTmFtZXNfTXVsdFByZW11bHRpcGxpZWRBbHBoYSxcbiAgICBTaGFkZXJOYW1lc19NdWx0TWFza2VkUHJlbXVsdGlwbGllZEFscGhhLFxuICAgIFNoYWRlck5hbWVzX011bHRNYXNrZWRQcmVtdWx0aXBsaWVkQWxwaGFJbnZlcnRlZFxuICB9XG5cbiAgZXhwb3J0IGNvbnN0IHZlcnRleFNoYWRlclNyY1NldHVwTWFzayA9XG4gICAgJ2F0dHJpYnV0ZSB2ZWM0ICAgICBhX3Bvc2l0aW9uOycgK1xuICAgICdhdHRyaWJ1dGUgdmVjMiAgICAgYV90ZXhDb29yZDsnICtcbiAgICAndmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7JyArXG4gICAgJ3ZhcnlpbmcgdmVjNCAgICAgICB2X215UG9zOycgK1xuICAgICd1bmlmb3JtIG1hdDQgICAgICAgdV9jbGlwTWF0cml4OycgK1xuICAgICd2b2lkIG1haW4oKScgK1xuICAgICd7JyArXG4gICAgJyAgIGdsX1Bvc2l0aW9uID0gdV9jbGlwTWF0cml4ICogYV9wb3NpdGlvbjsnICtcbiAgICAnICAgdl9teVBvcyA9IHVfY2xpcE1hdHJpeCAqIGFfcG9zaXRpb247JyArXG4gICAgJyAgIHZfdGV4Q29vcmQgPSBhX3RleENvb3JkOycgK1xuICAgICcgICB2X3RleENvb3JkLnkgPSAxLjAgLSB2X3RleENvb3JkLnk7JyArXG4gICAgJ30nO1xuICBleHBvcnQgY29uc3QgZnJhZ21lbnRTaGFkZXJTcmNzZXR1cE1hc2sgPVxuICAgICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcbiAgICAndmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7JyArXG4gICAgJ3ZhcnlpbmcgdmVjNCAgICAgICB2X215UG9zOycgK1xuICAgICd1bmlmb3JtIHZlYzQgICAgICAgdV9iYXNlQ29sb3I7JyArXG4gICAgJ3VuaWZvcm0gdmVjNCAgICAgICB1X2NoYW5uZWxGbGFnOycgK1xuICAgICd1bmlmb3JtIHNhbXBsZXIyRCAgc190ZXh0dXJlMDsnICtcbiAgICAndm9pZCBtYWluKCknICtcbiAgICAneycgK1xuICAgICcgICBmbG9hdCBpc0luc2lkZSA9ICcgK1xuICAgICcgICAgICAgc3RlcCh1X2Jhc2VDb2xvci54LCB2X215UG9zLngvdl9teVBvcy53KScgK1xuICAgICcgICAgICAgKiBzdGVwKHVfYmFzZUNvbG9yLnksIHZfbXlQb3MueS92X215UG9zLncpJyArXG4gICAgJyAgICAgICAqIHN0ZXAodl9teVBvcy54L3ZfbXlQb3MudywgdV9iYXNlQ29sb3IueiknICtcbiAgICAnICAgICAgICogc3RlcCh2X215UG9zLnkvdl9teVBvcy53LCB1X2Jhc2VDb2xvci53KTsnICtcbiAgICAnICAgZ2xfRnJhZ0NvbG9yID0gdV9jaGFubmVsRmxhZyAqIHRleHR1cmUyRChzX3RleHR1cmUwLCB2X3RleENvb3JkKS5hICogaXNJbnNpZGU7JyArXG4gICAgJ30nO1xuXG4gIC8vLS0tLS0g44OQ44O844OG44OD44Kv44K544K344Kn44O844OA44OX44Ot44Kw44Op44OgIC0tLS0tXG4gIC8vIE5vcm1hbCAmIEFkZCAmIE11bHQg5YWx6YCaXG4gIGV4cG9ydCBjb25zdCB2ZXJ0ZXhTaGFkZXJTcmMgPVxuICAgICdhdHRyaWJ1dGUgdmVjNCAgICAgYV9wb3NpdGlvbjsnICsgLy92LnZlcnRleFxuICAgICdhdHRyaWJ1dGUgdmVjMiAgICAgYV90ZXhDb29yZDsnICsgLy92LnRleGNvb3JkXG4gICAgJ3ZhcnlpbmcgdmVjMiAgICAgICB2X3RleENvb3JkOycgKyAvL3YyZi50ZXhjb29yZFxuICAgICd1bmlmb3JtIG1hdDQgICAgICAgdV9tYXRyaXg7JyArXG4gICAgJ3ZvaWQgbWFpbigpJyArXG4gICAgJ3snICtcbiAgICAnICAgZ2xfUG9zaXRpb24gPSB1X21hdHJpeCAqIGFfcG9zaXRpb247JyArXG4gICAgJyAgIHZfdGV4Q29vcmQgPSBhX3RleENvb3JkOycgK1xuICAgICcgICB2X3RleENvb3JkLnkgPSAxLjAgLSB2X3RleENvb3JkLnk7JyArXG4gICAgJ30nO1xuXG4gIC8vIE5vcm1hbCAmIEFkZCAmIE11bHQg5YWx6YCa77yI44Kv44Oq44OD44OU44Oz44Kw44GV44KM44Gf44KC44Gu44Gu5o+P55S755So77yJXG4gIGV4cG9ydCBjb25zdCB2ZXJ0ZXhTaGFkZXJTcmNNYXNrZWQgPVxuICAgICdhdHRyaWJ1dGUgdmVjNCAgICAgYV9wb3NpdGlvbjsnICtcbiAgICAnYXR0cmlidXRlIHZlYzIgICAgIGFfdGV4Q29vcmQ7JyArXG4gICAgJ3ZhcnlpbmcgdmVjMiAgICAgICB2X3RleENvb3JkOycgK1xuICAgICd2YXJ5aW5nIHZlYzQgICAgICAgdl9jbGlwUG9zOycgK1xuICAgICd1bmlmb3JtIG1hdDQgICAgICAgdV9tYXRyaXg7JyArXG4gICAgJ3VuaWZvcm0gbWF0NCAgICAgICB1X2NsaXBNYXRyaXg7JyArXG4gICAgJ3ZvaWQgbWFpbigpJyArXG4gICAgJ3snICtcbiAgICAnICAgZ2xfUG9zaXRpb24gPSB1X21hdHJpeCAqIGFfcG9zaXRpb247JyArXG4gICAgJyAgIHZfY2xpcFBvcyA9IHVfY2xpcE1hdHJpeCAqIGFfcG9zaXRpb247JyArXG4gICAgJyAgIHZfdGV4Q29vcmQgPSBhX3RleENvb3JkOycgK1xuICAgICcgICB2X3RleENvb3JkLnkgPSAxLjAgLSB2X3RleENvb3JkLnk7JyArXG4gICAgJ30nO1xuXG4gIC8vLS0tLS0g44OV44Op44Kw44Oh44Oz44OI44K344Kn44O844OA44OX44Ot44Kw44Op44OgIC0tLS0tXG4gIC8vIE5vcm1hbCAmIEFkZCAmIE11bHQg5YWx6YCaIO+8iFByZW11bHRpcGxpZWRBbHBoYe+8iVxuICBleHBvcnQgY29uc3QgZnJhZ21lbnRTaGFkZXJTcmNQcmVtdWx0aXBsaWVkQWxwaGEgPVxuICAgICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcbiAgICAndmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7JyArIC8vdjJmLnRleGNvb3JkXG4gICAgJ3VuaWZvcm0gdmVjNCAgICAgICB1X2Jhc2VDb2xvcjsnICtcbiAgICAndW5pZm9ybSBzYW1wbGVyMkQgIHNfdGV4dHVyZTA7JyArIC8vX01haW5UZXhcbiAgICAndm9pZCBtYWluKCknICtcbiAgICAneycgK1xuICAgICcgICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQoc190ZXh0dXJlMCAsIHZfdGV4Q29vcmQpICogdV9iYXNlQ29sb3I7JyArXG4gICAgJ30nO1xuXG4gIC8vIE5vcm1hbCDvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjgZXjgozjgZ/jgoLjga7jga7mj4/nlLvnlKjjgIFQcmVtdWx0aXBsaWVkQWxwaGHlhbznlKjvvIlcbiAgZXhwb3J0IGNvbnN0IGZyYWdtZW50U2hhZGVyU3JjTWFza1ByZW11bHRpcGxpZWRBbHBoYSA9XG4gICAgJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycgK1xuICAgICd2YXJ5aW5nIHZlYzIgICAgICAgdl90ZXhDb29yZDsnICtcbiAgICAndmFyeWluZyB2ZWM0ICAgICAgIHZfY2xpcFBvczsnICtcbiAgICAndW5pZm9ybSB2ZWM0ICAgICAgIHVfYmFzZUNvbG9yOycgK1xuICAgICd1bmlmb3JtIHZlYzQgICAgICAgdV9jaGFubmVsRmxhZzsnICtcbiAgICAndW5pZm9ybSBzYW1wbGVyMkQgIHNfdGV4dHVyZTA7JyArXG4gICAgJ3VuaWZvcm0gc2FtcGxlcjJEICBzX3RleHR1cmUxOycgK1xuICAgICd2b2lkIG1haW4oKScgK1xuICAgICd7JyArXG4gICAgJyAgIHZlYzQgY29sX2Zvcm1hc2sgPSB0ZXh0dXJlMkQoc190ZXh0dXJlMCAsIHZfdGV4Q29vcmQpICogdV9iYXNlQ29sb3I7JyArXG4gICAgJyAgIHZlYzQgY2xpcE1hc2sgPSAoMS4wIC0gdGV4dHVyZTJEKHNfdGV4dHVyZTEsIHZfY2xpcFBvcy54eSAvIHZfY2xpcFBvcy53KSkgKiB1X2NoYW5uZWxGbGFnOycgK1xuICAgICcgICBmbG9hdCBtYXNrVmFsID0gY2xpcE1hc2suciArIGNsaXBNYXNrLmcgKyBjbGlwTWFzay5iICsgY2xpcE1hc2suYTsnICtcbiAgICAnICAgY29sX2Zvcm1hc2sgPSBjb2xfZm9ybWFzayAqIG1hc2tWYWw7JyArXG4gICAgJyAgIGdsX0ZyYWdDb2xvciA9IGNvbF9mb3JtYXNrOycgK1xuICAgICd9JztcblxuICAvLyBOb3JtYWwgJiBBZGQgJiBNdWx0IOWFsemAmu+8iOOCr+ODquODg+ODlOODs+OCsOOBleOCjOOBpuWPjei7ouS9v+eUqOOBruaPj+eUu+eUqOOAgVByZW11bHRpcGxpZWRBbHBoYeOBruWgtOWQiO+8iVxuICBleHBvcnQgY29uc3QgZnJhZ21lbnRTaGFkZXJTcmNNYXNrSW52ZXJ0ZWRQcmVtdWx0aXBsaWVkQWxwaGEgPVxuICAgICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcbiAgICAndmFyeWluZyB2ZWMyIHZfdGV4Q29vcmQ7JyArXG4gICAgJ3ZhcnlpbmcgdmVjNCB2X2NsaXBQb3M7JyArXG4gICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHNfdGV4dHVyZTA7JyArXG4gICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHNfdGV4dHVyZTE7JyArXG4gICAgJ3VuaWZvcm0gdmVjNCB1X2NoYW5uZWxGbGFnOycgK1xuICAgICd1bmlmb3JtIHZlYzQgdV9iYXNlQ29sb3I7JyArXG4gICAgJ3ZvaWQgbWFpbigpJyArXG4gICAgJ3snICtcbiAgICAndmVjNCBjb2xfZm9ybWFzayA9IHRleHR1cmUyRChzX3RleHR1cmUwLCB2X3RleENvb3JkKSAqIHVfYmFzZUNvbG9yOycgK1xuICAgICd2ZWM0IGNsaXBNYXNrID0gKDEuMCAtIHRleHR1cmUyRChzX3RleHR1cmUxLCB2X2NsaXBQb3MueHkgLyB2X2NsaXBQb3MudykpICogdV9jaGFubmVsRmxhZzsnICtcbiAgICAnZmxvYXQgbWFza1ZhbCA9IGNsaXBNYXNrLnIgKyBjbGlwTWFzay5nICsgY2xpcE1hc2suYiArIGNsaXBNYXNrLmE7JyArXG4gICAgJ2NvbF9mb3JtYXNrID0gY29sX2Zvcm1hc2sgKiAoMS4wIC0gbWFza1ZhbCk7JyArXG4gICAgJ2dsX0ZyYWdDb2xvciA9IGNvbF9mb3JtYXNrOycgK1xuICAgICd9JztcblxuICAvKipcbiAgICogV2ViR0znlKjjga7mj4/nlLvlkb3ku6TjgpLlrp/oo4XjgZfjgZ/jgq/jg6njgrlcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21SZW5kZXJlcl9XZWJHTCBleHRlbmRzIEN1YmlzbVJlbmRlcmVyIHtcbiAgICAvKipcbiAgICAgKiDjg6zjg7Pjg4Djg6njga7liJ3mnJ/ljJblh6bnkIbjgpLlrp/ooYzjgZnjgotcbiAgICAgKiDlvJXmlbDjgavmuKHjgZfjgZ/jg6Ljg4fjg6vjgYvjgonjg6zjg7Pjg4Djg6njga7liJ3mnJ/ljJblh6bnkIbjgavlv4XopoHjgarmg4XloLHjgpLlj5bjgorlh7rjgZnjgZPjgajjgYzjgafjgY3jgotcbiAgICAgKlxuICAgICAqIEBwYXJhbSBtb2RlbCDjg6Ljg4fjg6vjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICAgKi9cbiAgICBwdWJsaWMgaW5pdGlhbGl6ZShtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkIHtcbiAgICAgIGlmIChtb2RlbC5pc1VzaW5nTWFza2luZygpKSB7XG4gICAgICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciA9IG5ldyBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0woKTsgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44O744OQ44OD44OV44Kh5YmN5Yem55CG5pa55byP44KS5Yid5pyf5YyWXG4gICAgICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlci5pbml0aWFsaXplKFxuICAgICAgICAgIG1vZGVsLFxuICAgICAgICAgIG1vZGVsLmdldERyYXdhYmxlQ291bnQoKSxcbiAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZU1hc2tzKCksXG4gICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVNYXNrQ291bnRzKClcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc29ydGVkRHJhd2FibGVJbmRleExpc3QucmVzaXplKG1vZGVsLmdldERyYXdhYmxlQ291bnQoKSwgMCk7XG5cbiAgICAgIHN1cGVyLmluaXRpYWxpemUobW9kZWwpOyAvLyDopqrjgq/jg6njgrnjga7lh6bnkIbjgpLlkbzjgbZcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXZWJHTOODhuOCr+OCueODgeODo+OBruODkOOCpOODs+ODieWHpueQhlxuICAgICAqIEN1YmlzbVJlbmRlcmVy44Gr44OG44Kv44K544OB44Oj44KS6Kit5a6a44GX44CBQ3ViaXNtUmVuZGVyZXLlhoXjgafjgZ3jga7nlLvlg4/jgpLlj4LnhafjgZnjgovjgZ/jgoHjga5JbmRleOWApOOCkuaIu+OCiuWApOOBqOOBmeOCi1xuICAgICAqIEBwYXJhbSBtb2RlbFRleHR1cmVObyDjgrvjg4Pjg4jjgZnjgovjg6Ljg4fjg6vjg4bjgq/jgrnjg4Hjg6Pjga7nlarlj7dcbiAgICAgKiBAcGFyYW0gZ2xUZXh0dXJlTm8gV2ViR0zjg4bjgq/jgrnjg4Hjg6Pjga7nlarlj7dcbiAgICAgKi9cbiAgICBwdWJsaWMgYmluZFRleHR1cmUobW9kZWxUZXh0dXJlTm86IG51bWJlciwgZ2xUZXh0dXJlOiBXZWJHTFRleHR1cmUpOiB2b2lkIHtcbiAgICAgIHRoaXMuX3RleHR1cmVzLnNldFZhbHVlKG1vZGVsVGV4dHVyZU5vLCBnbFRleHR1cmUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdlYkdM44Gr44OQ44Kk44Oz44OJ44GV44KM44Gf44OG44Kv44K544OB44Oj44Gu44Oq44K544OI44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHJldHVybiDjg4bjgq/jgrnjg4Hjg6Pjga7jg6rjgrnjg4hcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0QmluZGVkVGV4dHVyZXMoKTogY3NtTWFwPG51bWJlciwgV2ViR0xUZXh0dXJlPiB7XG4gICAgICByZXR1cm4gdGhpcy5fdGV4dHVyZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44OQ44OD44OV44Kh44Gu44K144Kk44K644KS6Kit5a6a44GZ44KLXG4gICAgICog44Oe44K544Kv55So44GuRnJhbWVCdWZmZXLjgpLnoLTmo4TjgIHlho3kvZzmiJDjgZnjgovngrrlh6bnkIbjgrPjgrnjg4jjga/pq5jjgYRcbiAgICAgKiBAcGFyYW0gc2l6ZSDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZShzaXplOiBudW1iZXIpIHtcbiAgICAgIC8vIEZyYW1lQnVmZmVy44Gu44K144Kk44K644KS5aSJ5pu044GZ44KL44Gf44KB44Gr44Kk44Oz44K544K/44Oz44K544KS56C05qOE44O75YaN5L2c5oiQ44GZ44KLXG4gICAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIucmVsZWFzZSgpO1xuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gdm9pZCAwO1xuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gbnVsbDtcblxuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gbmV3IEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTCgpO1xuXG4gICAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIuc2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZShzaXplKTtcblxuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLmluaXRpYWxpemUoXG4gICAgICAgIHRoaXMuZ2V0TW9kZWwoKSxcbiAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlQ291bnQoKSxcbiAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlTWFza3MoKSxcbiAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlTWFza0NvdW50cygpXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCuuOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAgICovXG4gICAgcHVibGljIGdldENsaXBwaW5nTWFza0J1ZmZlclNpemUoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9jbGlwcGluZ01hbmFnZXIuZ2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrID0gbnVsbDtcbiAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcgPSBudWxsO1xuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gbmV3IEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTCgpO1xuICAgICAgdGhpcy5maXJzdERyYXcgPSB0cnVlO1xuICAgICAgdGhpcy5fdGV4dHVyZXMgPSBuZXcgY3NtTWFwPG51bWJlciwgbnVtYmVyPigpO1xuICAgICAgdGhpcy5fc29ydGVkRHJhd2FibGVJbmRleExpc3QgPSBuZXcgY3NtVmVjdG9yPG51bWJlcj4oKTtcbiAgICAgIHRoaXMuX2J1ZmZlckRhdGEgPSB7XG4gICAgICAgIHZlcnRleDogV2ViR0xCdWZmZXIgPSBudWxsLFxuICAgICAgICB1djogV2ViR0xCdWZmZXIgPSBudWxsLFxuICAgICAgICBpbmRleDogV2ViR0xCdWZmZXIgPSBudWxsXG4gICAgICB9O1xuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6Plr77lv5zjg57jg4Pjg5fjga7lrrnph4/jgpLnorrkv53jgZfjgabjgYrjgY9cbiAgICAgIHRoaXMuX3RleHR1cmVzLnByZXBhcmVDYXBhY2l0eSgzMiwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAgICovXG4gICAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIucmVsZWFzZSgpO1xuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gdm9pZCAwO1xuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gbnVsbDtcblxuICAgICAgdGhpcy5nbC5kZWxldGVCdWZmZXIodGhpcy5fYnVmZmVyRGF0YS52ZXJ0ZXgpO1xuICAgICAgdGhpcy5fYnVmZmVyRGF0YS52ZXJ0ZXggPSBudWxsO1xuICAgICAgdGhpcy5nbC5kZWxldGVCdWZmZXIodGhpcy5fYnVmZmVyRGF0YS51dik7XG4gICAgICB0aGlzLl9idWZmZXJEYXRhLnV2ID0gbnVsbDtcbiAgICAgIHRoaXMuZ2wuZGVsZXRlQnVmZmVyKHRoaXMuX2J1ZmZlckRhdGEuaW5kZXgpO1xuICAgICAgdGhpcy5fYnVmZmVyRGF0YS5pbmRleCA9IG51bGw7XG4gICAgICB0aGlzLl9idWZmZXJEYXRhID0gbnVsbDtcblxuICAgICAgdGhpcy5fdGV4dHVyZXMgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODh+ODq+OCkuaPj+eUu+OBmeOCi+Wun+mam+OBruWHpueQhlxuICAgICAqL1xuICAgIHB1YmxpYyBkb0RyYXdNb2RlbCgpOiB2b2lkIHtcbiAgICAgIC8vLS0tLS0tLS0tLS0tIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODu+ODkOODg+ODleOCoeWJjeWHpueQhuaWueW8j+OBruWgtOWQiCAtLS0tLS0tLS0tLS1cbiAgICAgIGlmICh0aGlzLl9jbGlwcGluZ01hbmFnZXIgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnByZURyYXcoKTtcbiAgICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLnNldHVwQ2xpcHBpbmdDb250ZXh0KHRoaXMuZ2V0TW9kZWwoKSwgdGhpcyk7XG4gICAgICB9XG5cbiAgICAgIC8vIOS4iuiomOOCr+ODquODg+ODlOODs+OCsOWHpueQhuWGheOBp+OCguS4gOW6plByZURyYXfjgpLlkbzjgbbjga7jgafms6jmhI8hIVxuICAgICAgdGhpcy5wcmVEcmF3KCk7XG5cbiAgICAgIGNvbnN0IGRyYXdhYmxlQ291bnQ6IG51bWJlciA9IHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZUNvdW50KCk7XG4gICAgICBjb25zdCByZW5kZXJPcmRlcjogSW50MzJBcnJheSA9IHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZVJlbmRlck9yZGVycygpO1xuXG4gICAgICAvLyDjgqTjg7Pjg4fjg4Pjgq/jgrnjgpLmj4/nlLvpoIbjgafjgr3jg7zjg4hcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHJhd2FibGVDb3VudDsgKytpKSB7XG4gICAgICAgIGNvbnN0IG9yZGVyOiBudW1iZXIgPSByZW5kZXJPcmRlcltpXTtcbiAgICAgICAgdGhpcy5fc29ydGVkRHJhd2FibGVJbmRleExpc3Quc2V0KG9yZGVyLCBpKTtcbiAgICAgIH1cblxuICAgICAgLy8g5o+P55S7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRyYXdhYmxlQ291bnQ7ICsraSkge1xuICAgICAgICBjb25zdCBkcmF3YWJsZUluZGV4OiBudW1iZXIgPSB0aGlzLl9zb3J0ZWREcmF3YWJsZUluZGV4TGlzdC5hdChpKTtcblxuICAgICAgICAvLyBEcmF3YWJsZeOBjOihqOekuueKtuaFi+OBp+OBquOBkeOCjOOBsOWHpueQhuOCkuODkeOCueOBmeOCi1xuICAgICAgICBpZiAoIXRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZUR5bmFtaWNGbGFnSXNWaXNpYmxlKGRyYXdhYmxlSW5kZXgpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgpLjgrvjg4Pjg4jjgZnjgotcbiAgICAgICAgdGhpcy5zZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KFxuICAgICAgICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciAhPSBudWxsXG4gICAgICAgICAgICA/IHRoaXMuX2NsaXBwaW5nTWFuYWdlclxuICAgICAgICAgICAgICAgIC5nZXRDbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdygpXG4gICAgICAgICAgICAgICAgLmF0KGRyYXdhYmxlSW5kZXgpXG4gICAgICAgICAgICA6IG51bGxcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnNldElzQ3VsbGluZyh0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVDdWxsaW5nKGRyYXdhYmxlSW5kZXgpKTtcblxuICAgICAgICB0aGlzLmRyYXdNZXNoKFxuICAgICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZVRleHR1cmVJbmRpY2VzKGRyYXdhYmxlSW5kZXgpLFxuICAgICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZVZlcnRleEluZGV4Q291bnQoZHJhd2FibGVJbmRleCksXG4gICAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlVmVydGV4Q291bnQoZHJhd2FibGVJbmRleCksXG4gICAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlVmVydGV4SW5kaWNlcyhkcmF3YWJsZUluZGV4KSxcbiAgICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVWZXJ0aWNlcyhkcmF3YWJsZUluZGV4KSxcbiAgICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVWZXJ0ZXhVdnMoZHJhd2FibGVJbmRleCksXG4gICAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlT3BhY2l0eShkcmF3YWJsZUluZGV4KSxcbiAgICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVCbGVuZE1vZGUoZHJhd2FibGVJbmRleCksXG4gICAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlSW52ZXJ0ZWRNYXNrQml0KGRyYXdhYmxlSW5kZXgpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogW+OCquODvOODkOODvOODqeOCpOODiV1cbiAgICAgKiDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jvvIjjgqLjg7zjg4jjg6Hjg4Pjgrfjg6XvvInjgpLmj4/nlLvjgZnjgovjgIJcbiAgICAgKiDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjgajjg4bjgq/jgrnjg4Hjg6Pnlarlj7fjgpLjgrvjg4Pjg4jjgafmuKHjgZnjgIJcbiAgICAgKiBAcGFyYW0gdGV4dHVyZU5vIOaPj+eUu+OBmeOCi+ODhuOCr+OCueODgeODo+eVquWPt1xuICAgICAqIEBwYXJhbSBpbmRleENvdW50IOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgICAqIEBwYXJhbSB2ZXJ0ZXhDb3VudCDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7poILngrnmlbBcbiAgICAgKiBAcGFyYW0gaW5kZXhBcnJheSDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7jgqTjg7Pjg4fjg4Pjgq/jgrnphY3liJdcbiAgICAgKiBAcGFyYW0gdmVydGV4QXJyYXkg44Od44Oq44K044Oz44Oh44OD44K344Ol44Gu6aCC54K56YWN5YiXXG4gICAgICogQHBhcmFtIHV2QXJyYXkgdXbphY3liJdcbiAgICAgKiBAcGFyYW0gb3BhY2l0eSDkuI3pgI/mmI7luqZcbiAgICAgKiBAcGFyYW0gY29sb3JCbGVuZE1vZGUg44Kr44Op44O85ZCI5oiQ44K/44Kk44OXXG4gICAgICogQHBhcmFtIGludmVydGVkTWFzayDjg57jgrnjgq/kvb/nlKjmmYLjga7jg57jgrnjgq/jga7lj43ou6Lkvb/nlKhcbiAgICAgKi9cbiAgICBwdWJsaWMgZHJhd01lc2goXG4gICAgICB0ZXh0dXJlTm86IG51bWJlcixcbiAgICAgIGluZGV4Q291bnQ6IG51bWJlcixcbiAgICAgIHZlcnRleENvdW50OiBudW1iZXIsXG4gICAgICBpbmRleEFycmF5OiBVaW50MTZBcnJheSxcbiAgICAgIHZlcnRleEFycmF5OiBGbG9hdDMyQXJyYXksXG4gICAgICB1dkFycmF5OiBGbG9hdDMyQXJyYXksXG4gICAgICBvcGFjaXR5OiBudW1iZXIsXG4gICAgICBjb2xvckJsZW5kTW9kZTogQ3ViaXNtQmxlbmRNb2RlLFxuICAgICAgaW52ZXJ0ZWRNYXNrOiBib29sZWFuXG4gICAgKTogdm9pZCB7XG4gICAgICAvLyDoo4/pnaLmj4/nlLvjga7mnInlirnjg7vnhKHlirlcbiAgICAgIGlmICh0aGlzLmlzQ3VsbGluZygpKSB7XG4gICAgICAgIHRoaXMuZ2wuZW5hYmxlKHRoaXMuZ2wuQ1VMTF9GQUNFKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZ2wuZGlzYWJsZSh0aGlzLmdsLkNVTExfRkFDRSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZ2wuZnJvbnRGYWNlKHRoaXMuZ2wuQ0NXKTsgLy8gQ3ViaXNtIFNESyBPcGVuR0zjga/jg57jgrnjgq/jg7vjgqLjg7zjg4jjg6Hjg4Pjgrfjg6XlhbHjgatDQ1fjgYzooajpnaJcblxuICAgICAgY29uc3QgbW9kZWxDb2xvclJHQkE6IEN1YmlzbVRleHR1cmVDb2xvciA9IHRoaXMuZ2V0TW9kZWxDb2xvcigpO1xuXG4gICAgICBpZiAodGhpcy5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKCkgPT0gbnVsbCkge1xuICAgICAgICAvLyDjg57jgrnjgq/nlJ/miJDmmYLku6XlpJZcbiAgICAgICAgbW9kZWxDb2xvclJHQkEuQSAqPSBvcGFjaXR5O1xuICAgICAgICBpZiAodGhpcy5pc1ByZW11bHRpcGxpZWRBbHBoYSgpKSB7XG4gICAgICAgICAgbW9kZWxDb2xvclJHQkEuUiAqPSBtb2RlbENvbG9yUkdCQS5BO1xuICAgICAgICAgIG1vZGVsQ29sb3JSR0JBLkcgKj0gbW9kZWxDb2xvclJHQkEuQTtcbiAgICAgICAgICBtb2RlbENvbG9yUkdCQS5CICo9IG1vZGVsQ29sb3JSR0JBLkE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGV0IGRyYXd0ZXh0dXJlOiBXZWJHTFRleHR1cmU7IC8vIOOCt+OCp+ODvOODgOOBq+a4oeOBmeODhuOCr+OCueODgeODo1xuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6Pjg57jg4Pjg5fjgYvjgonjg5DjgqTjg7Pjg4nmuIjjgb/jg4bjgq/jgrnjg4Hjg6PvvKnvvKTjgpLlj5blvpdcbiAgICAgIC8vIOODkOOCpOODs+ODieOBleOCjOOBpuOBhOOBquOBkeOCjOOBsOODgOODn+ODvOOBruODhuOCr+OCueODgeODo0lE44KS44K744OD44OI44GZ44KLXG4gICAgICBpZiAodGhpcy5fdGV4dHVyZXMuZ2V0VmFsdWUodGV4dHVyZU5vKSAhPSBudWxsKSB7XG4gICAgICAgIGRyYXd0ZXh0dXJlID0gdGhpcy5fdGV4dHVyZXMuZ2V0VmFsdWUodGV4dHVyZU5vKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRyYXd0ZXh0dXJlID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgQ3ViaXNtU2hhZGVyX1dlYkdMLmdldEluc3RhbmNlKCkuc2V0dXBTaGFkZXJQcm9ncmFtKFxuICAgICAgICB0aGlzLFxuICAgICAgICBkcmF3dGV4dHVyZSxcbiAgICAgICAgdmVydGV4Q291bnQsXG4gICAgICAgIHZlcnRleEFycmF5LFxuICAgICAgICBpbmRleEFycmF5LFxuICAgICAgICB1dkFycmF5LFxuICAgICAgICB0aGlzLl9idWZmZXJEYXRhLFxuICAgICAgICBvcGFjaXR5LFxuICAgICAgICBjb2xvckJsZW5kTW9kZSxcbiAgICAgICAgbW9kZWxDb2xvclJHQkEsXG4gICAgICAgIHRoaXMuaXNQcmVtdWx0aXBsaWVkQWxwaGEoKSxcbiAgICAgICAgdGhpcy5nZXRNdnBNYXRyaXgoKSxcbiAgICAgICAgaW52ZXJ0ZWRNYXNrXG4gICAgICApO1xuXG4gICAgICAvLyDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6XjgpLmj4/nlLvjgZnjgotcbiAgICAgIHRoaXMuZ2wuZHJhd0VsZW1lbnRzKFxuICAgICAgICB0aGlzLmdsLlRSSUFOR0xFUyxcbiAgICAgICAgaW5kZXhDb3VudCxcbiAgICAgICAgdGhpcy5nbC5VTlNJR05FRF9TSE9SVCxcbiAgICAgICAgMFxuICAgICAgKTtcblxuICAgICAgLy8g5b6M5Yem55CGXG4gICAgICB0aGlzLmdsLnVzZVByb2dyYW0obnVsbCk7XG4gICAgICB0aGlzLnNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcobnVsbCk7XG4gICAgICB0aGlzLnNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2sobnVsbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Os44Oz44OA44Op44GM5L+d5oyB44GZ44KL6Z2Z55qE44Gq44Oq44K944O844K544KS6Kej5pS+44GZ44KLXG4gICAgICogV2ViR0zjga7pnZnnmoTjgarjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLop6PmlL7jgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGRvU3RhdGljUmVsZWFzZSgpOiB2b2lkIHtcbiAgICAgIEN1YmlzbVNoYWRlcl9XZWJHTC5kZWxldGVJbnN0YW5jZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODrOODs+ODgOODvOOCueODhuODvOODiOOCkuioreWumuOBmeOCi1xuICAgICAqIEBwYXJhbSBmYm8g44Ki44OX44Oq44Kx44O844K344On44Oz5YG044Gn5oyH5a6a44GX44Gm44GE44KL44OV44Os44O844Og44OQ44OD44OV44KhXG4gICAgICogQHBhcmFtIHZpZXdwb3J0IOODk+ODpeODvOODneODvOODiFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRSZW5kZXJTdGF0ZShmYm86IFdlYkdMRnJhbWVidWZmZXIsIHZpZXdwb3J0OiBudW1iZXJbXSk6IHZvaWQge1xuICAgICAgc19mYm8gPSBmYm87XG4gICAgICBzX3ZpZXdwb3J0ID0gdmlld3BvcnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5o+P55S76ZaL5aeL5pmC44Gu6L+95Yqg5Yem55CGXG4gICAgICog44Oi44OH44Or44KS5o+P55S744GZ44KL5YmN44Gr44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gr5b+F6KaB44Gq5Yem55CG44KS5a6f6KOF44GX44Gm44GE44KLXG4gICAgICovXG4gICAgcHVibGljIHByZURyYXcoKTogdm9pZCB7XG4gICAgICBpZiAodGhpcy5maXJzdERyYXcpIHtcbiAgICAgICAgdGhpcy5maXJzdERyYXcgPSBmYWxzZTtcblxuICAgICAgICAvLyDmi6HlvLXmqZ/og73jgpLmnInlirnjgavjgZnjgotcbiAgICAgICAgdGhpcy5fYW5pc29ydG9weSA9XG4gICAgICAgICAgdGhpcy5nbC5nZXRFeHRlbnNpb24oJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpIHx8XG4gICAgICAgICAgdGhpcy5nbC5nZXRFeHRlbnNpb24oJ1dFQktJVF9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKSB8fFxuICAgICAgICAgIHRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKCdNT1pfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZ2wuZGlzYWJsZSh0aGlzLmdsLlNDSVNTT1JfVEVTVCk7XG4gICAgICB0aGlzLmdsLmRpc2FibGUodGhpcy5nbC5TVEVOQ0lMX1RFU1QpO1xuICAgICAgdGhpcy5nbC5kaXNhYmxlKHRoaXMuZ2wuREVQVEhfVEVTVCk7XG5cbiAgICAgIC8vIOOCq+ODquODs+OCsO+8iDEuMGJldGEz77yJXG4gICAgICB0aGlzLmdsLmZyb250RmFjZSh0aGlzLmdsLkNXKTtcblxuICAgICAgdGhpcy5nbC5lbmFibGUodGhpcy5nbC5CTEVORCk7XG4gICAgICB0aGlzLmdsLmNvbG9yTWFzayh0cnVlLCB0cnVlLCB0cnVlLCB0cnVlKTtcblxuICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCBudWxsKTsgLy8g5YmN44Gr44OQ44OD44OV44Kh44GM44OQ44Kk44Oz44OJ44GV44KM44Gm44GE44Gf44KJ56C05qOE44GZ44KL5b+F6KaB44GM44GC44KLXG4gICAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbnVsbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oe44K544Kv44OG44Kv44K544OB44Oj44Gr5o+P55S744GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44KS44K744OD44OI44GZ44KLXG4gICAgICovXG4gICAgcHVibGljIHNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2soY2xpcDogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0KSB7XG4gICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrID0gY2xpcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg57jgrnjgq/jg4bjgq/jgrnjg4Hjg6Pjgavmj4/nlLvjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcmV0dXJuIOODnuOCueOCr+ODhuOCr+OCueODgeODo+OBq+aPj+eUu+OBmeOCi+OCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKCk6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCB7XG4gICAgICByZXR1cm4gdGhpcy5fY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDnlLvpnaLkuIrjgavmj4/nlLvjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdyhjbGlwOiBDdWJpc21DbGlwcGluZ0NvbnRleHQpOiB2b2lkIHtcbiAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcgPSBjbGlwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOeUu+mdouS4iuOBq+aPj+eUu+OBmeOCi+OCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiOOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g55S76Z2i5LiK44Gr5o+P55S744GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OIXG4gICAgICovXG4gICAgcHVibGljIGdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcoKTogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0IHtcbiAgICAgIHJldHVybiB0aGlzLl9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGds44Gu6Kit5a6aXG4gICAgICovXG4gICAgcHVibGljIHN0YXJ0VXAoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCk6IHZvaWQge1xuICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLnNldEdMKGdsKTtcbiAgICAgIEN1YmlzbVNoYWRlcl9XZWJHTC5nZXRJbnN0YW5jZSgpLnNldEdsKGdsKTtcbiAgICB9XG5cbiAgICBfdGV4dHVyZXM6IGNzbU1hcDxudW1iZXIsIFdlYkdMVGV4dHVyZT47IC8vIOODouODh+ODq+OBjOWPgueFp+OBmeOCi+ODhuOCr+OCueODgeODo+OBqOODrOODs+ODgOODqeOBp+ODkOOCpOODs+ODieOBl+OBpuOBhOOCi+ODhuOCr+OCueODgeODo+OBqOOBruODnuODg+ODl1xuICAgIF9zb3J0ZWREcmF3YWJsZUluZGV4TGlzdDogY3NtVmVjdG9yPG51bWJlcj47IC8vIOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruOCpOODs+ODh+ODg+OCr+OCueOCkuaPj+eUu+mghuOBq+S4puOBueOBn+ODquOCueODiFxuICAgIF9jbGlwcGluZ01hbmFnZXI6IEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTDsgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv566h55CG44Kq44OW44K444Kn44Kv44OIXG4gICAgX2NsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2s6IEN1YmlzbUNsaXBwaW5nQ29udGV4dDsgLy8g44Oe44K544Kv44OG44Kv44K544OB44Oj44Gr5o+P55S744GZ44KL44Gf44KB44Gu44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OIXG4gICAgX2NsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXc6IEN1YmlzbUNsaXBwaW5nQ29udGV4dDsgLy8g55S76Z2i5LiK5o+P55S744GZ44KL44Gf44KB44Gu44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OIXG4gICAgZmlyc3REcmF3OiBib29sZWFuO1xuICAgIF9idWZmZXJEYXRhOiB7XG4gICAgICB2ZXJ0ZXg6IFdlYkdMQnVmZmVyO1xuICAgICAgdXY6IFdlYkdMQnVmZmVyO1xuICAgICAgaW5kZXg6IFdlYkdMQnVmZmVyO1xuICAgIH07IC8vIOmggueCueODkOODg+ODleOCoeODh+ODvOOCv1xuICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7IC8vIHdlYmds44Kz44Oz44OG44Kt44K544OIXG4gIH1cblxuICAvKipcbiAgICog44Os44Oz44OA44Op44GM5L+d5oyB44GZ44KL6Z2Z55qE44Gq44Oq44K944O844K544KS6ZaL5pS+44GZ44KLXG4gICAqL1xuICBDdWJpc21SZW5kZXJlci5zdGF0aWNSZWxlYXNlID0gKCk6IHZvaWQgPT4ge1xuICAgIEN1YmlzbVJlbmRlcmVyX1dlYkdMLmRvU3RhdGljUmVsZWFzZSgpO1xuICB9O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICog55+p5b2i5b2i54q277yI5bqn5qiZ44O76ZW344GV44GvZmxvYXTlgKTvvInjgpLlrprnvqnjgZnjgovjgq/jg6njgrlcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBjc21SZWN0IHtcbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKiBAcGFyYW0geCDlt6bnq69Y5bqn5qiZXG4gICAgICogQHBhcmFtIHkg5LiK56uvWeW6p+aomVxuICAgICAqIEBwYXJhbSB3IOW5hVxuICAgICAqIEBwYXJhbSBoIOmrmOOBlVxuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih4PzogbnVtYmVyLCB5PzogbnVtYmVyLCB3PzogbnVtYmVyLCBoPzogbnVtYmVyKSB7XG4gICAgICB0aGlzLnggPSB4O1xuICAgICAgdGhpcy55ID0geTtcbiAgICAgIHRoaXMud2lkdGggPSB3O1xuICAgICAgdGhpcy5oZWlnaHQgPSBoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOefqeW9ouS4reWkruOBrljluqfmqJnjgpLlj5blvpfjgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0Q2VudGVyWCgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMueCArIDAuNSAqIHRoaXMud2lkdGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog55+p5b2i5Lit5aSu44GuWeW6p+aomeOCkuWPluW+l+OBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRDZW50ZXJZKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy55ICsgMC41ICogdGhpcy5oZWlnaHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5Y+z5YG044GuWOW6p+aomeOCkuWPluW+l+OBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRSaWdodCgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMueCArIHRoaXMud2lkdGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5LiL56uv44GuWeW6p+aomeOCkuWPluW+l+OBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRCb3R0b20oKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLnkgKyB0aGlzLmhlaWdodDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDnn6nlvaLjgavlgKTjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICAgKiBAcGFyYW0gciDnn6nlvaLjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0UmVjdChyOiBjc21SZWN0KTogdm9pZCB7XG4gICAgICB0aGlzLnggPSByLng7XG4gICAgICB0aGlzLnkgPSByLnk7XG4gICAgICB0aGlzLndpZHRoID0gci53aWR0aDtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gci5oZWlnaHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog55+p5b2i5Lit5aSu44KS6Lu444Gr44GX44Gm57im5qiq44KS5ouh57iu44GZ44KLXG4gICAgICogQHBhcmFtIHcg5bmF5pa55ZCR44Gr5ouh57iu44GZ44KL6YePXG4gICAgICogQHBhcmFtIGgg6auY44GV5pa55ZCR44Gr5ouh57iu44GZ44KL6YePXG4gICAgICovXG4gICAgcHVibGljIGV4cGFuZCh3OiBudW1iZXIsIGg6IG51bWJlcikge1xuICAgICAgdGhpcy54IC09IHc7XG4gICAgICB0aGlzLnkgLT0gaDtcbiAgICAgIHRoaXMud2lkdGggKz0gdyAqIDIuMDtcbiAgICAgIHRoaXMuaGVpZ2h0ICs9IGggKiAyLjA7XG4gICAgfVxuXG4gICAgcHVibGljIHg6IG51bWJlcjsgLy8g5bem56uvWOW6p+aomVxuICAgIHB1YmxpYyB5OiBudW1iZXI7IC8vIOS4iuerr1nluqfmqJlcbiAgICBwdWJsaWMgd2lkdGg6IG51bWJlcjsgLy8g5bmFXG4gICAgcHVibGljIGhlaWdodDogbnVtYmVyOyAvLyDpq5jjgZVcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWZyYW1ld29yayB9IGZyb20gJy4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBpY3ViaXNtbW9kZWxzZXR0aW5nIH0gZnJvbSAnLi9pY3ViaXNtbW9kZWxzZXR0aW5nJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21pZCB9IGZyb20gJy4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWpzb24gfSBmcm9tICcuL3V0aWxzL2N1YmlzbWpzb24nO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbW1hcCB9IGZyb20gJy4vdHlwZS9jc21tYXAnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXZlY3RvciB9IGZyb20gJy4vdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XG5pbXBvcnQgY3NtTWFwID0gY3NtbWFwLmNzbU1hcDtcbmltcG9ydCBpdGVyYXRvciA9IGNzbW1hcC5pdGVyYXRvcjtcbmltcG9ydCBDdWJpc21GcmFtZXdvcmsgPSBjdWJpc21mcmFtZXdvcmsuQ3ViaXNtRnJhbWV3b3JrO1xuaW1wb3J0IEN1YmlzbUlkSGFuZGxlID0gY3ViaXNtaWQuQ3ViaXNtSWRIYW5kbGU7XG5pbXBvcnQgQ3ViaXNtSnNvbiA9IGN1YmlzbWpzb24uQ3ViaXNtSnNvbjtcbmltcG9ydCBWYWx1ZSA9IGN1YmlzbWpzb24uVmFsdWU7XG5pbXBvcnQgSUN1YmlzbU1vZGVsU2V0dGluZyA9IGljdWJpc21tb2RlbHNldHRpbmcuSUN1YmlzbU1vZGVsU2V0dGluZztcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICogTW9kZWwzSnNvbuOBruOCreODvOaWh+Wtl+WIl1xuICAgKi9cblxuICAvLyBKU09OIEtleXNcbiAgY29uc3QgVmVyc2lvbiA9ICdWZXJzaW9uJztcbiAgY29uc3QgRmlsZVJlZmVyZW5jZXMgPSAnRmlsZVJlZmVyZW5jZXMnO1xuICBjb25zdCBHcm91cHMgPSAnR3JvdXBzJztcbiAgY29uc3QgTGF5b3V0ID0gJ0xheW91dCc7XG4gIGNvbnN0IEhpdEFyZWFzID0gJ0hpdEFyZWFzJztcblxuICBjb25zdCBNb2MgPSAnTW9jJztcbiAgY29uc3QgVGV4dHVyZXMgPSAnVGV4dHVyZXMnO1xuICBjb25zdCBQaHlzaWNzID0gJ1BoeXNpY3MnO1xuICBjb25zdCBQb3NlID0gJ1Bvc2UnO1xuICBjb25zdCBFeHByZXNzaW9ucyA9ICdFeHByZXNzaW9ucyc7XG4gIGNvbnN0IE1vdGlvbnMgPSAnTW90aW9ucyc7XG5cbiAgY29uc3QgVXNlckRhdGEgPSAnVXNlckRhdGEnO1xuICBjb25zdCBOYW1lID0gJ05hbWUnO1xuICBjb25zdCBGaWxlUGF0aCA9ICdGaWxlJztcbiAgY29uc3QgSWQgPSAnSWQnO1xuICBjb25zdCBJZHMgPSAnSWRzJztcbiAgY29uc3QgVGFyZ2V0ID0gJ1RhcmdldCc7XG5cbiAgLy8gTW90aW9uc1xuICBjb25zdCBJZGxlID0gJ0lkbGUnO1xuICBjb25zdCBUYXBCb2R5ID0gJ1RhcEJvZHknO1xuICBjb25zdCBQaW5jaEluID0gJ1BpbmNoSW4nO1xuICBjb25zdCBQaW5jaE91dCA9ICdQaW5jaE91dCc7XG4gIGNvbnN0IFNoYWtlID0gJ1NoYWtlJztcbiAgY29uc3QgRmxpY2tIZWFkID0gJ0ZsaWNrSGVhZCc7XG4gIGNvbnN0IFBhcmFtZXRlciA9ICdQYXJhbWV0ZXInO1xuXG4gIGNvbnN0IFNvdW5kUGF0aCA9ICdTb3VuZCc7XG4gIGNvbnN0IEZhZGVJblRpbWUgPSAnRmFkZUluVGltZSc7XG4gIGNvbnN0IEZhZGVPdXRUaW1lID0gJ0ZhZGVPdXRUaW1lJztcblxuICAvLyBMYXlvdXRcbiAgY29uc3QgQ2VudGVyWCA9ICdDZW50ZXJYJztcbiAgY29uc3QgQ2VudGVyWSA9ICdDZW50ZXJZJztcbiAgY29uc3QgWCA9ICdYJztcbiAgY29uc3QgWSA9ICdZJztcbiAgY29uc3QgV2lkdGggPSAnV2lkdGgnO1xuICBjb25zdCBIZWlnaHQgPSAnSGVpZ2h0JztcblxuICBjb25zdCBMaXBTeW5jID0gJ0xpcFN5bmMnO1xuICBjb25zdCBFeWVCbGluayA9ICdFeWVCbGluayc7XG5cbiAgY29uc3QgSW5pdFBhcmFtZXRlciA9ICdpbml0X3BhcmFtJztcbiAgY29uc3QgSW5pdFBhcnRzVmlzaWJsZSA9ICdpbml0X3BhcnRzX3Zpc2libGUnO1xuICBjb25zdCBWYWwgPSAndmFsJztcblxuICBlbnVtIEZyZXF1ZXN0Tm9kZSB7XG4gICAgRnJlcXVlc3ROb2RlX0dyb3VwcywgLy8gZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoR3JvdXBzKVxuICAgIEZyZXF1ZXN0Tm9kZV9Nb2MsIC8vIGdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKS5nZXRWYWx1ZUJ5U3RyaW5nKE1vYylcbiAgICBGcmVxdWVzdE5vZGVfTW90aW9ucywgLy8gZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpLmdldFZhbHVlQnlTdHJpbmcoTW90aW9ucylcbiAgICBGcmVxdWVzdE5vZGVfRXhwcmVzc2lvbnMsIC8vIGdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKS5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25zKVxuICAgIEZyZXF1ZXN0Tm9kZV9UZXh0dXJlcywgLy8gZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpLmdldFZhbHVlQnlTdHJpbmcoVGV4dHVyZXMpXG4gICAgRnJlcXVlc3ROb2RlX1BoeXNpY3MsIC8vIGdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKS5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3MpXG4gICAgRnJlcXVlc3ROb2RlX1Bvc2UsIC8vIGdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKS5nZXRWYWx1ZUJ5U3RyaW5nKFBvc2UpXG4gICAgRnJlcXVlc3ROb2RlX0hpdEFyZWFzIC8vIGdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEhpdEFyZWFzKVxuICB9XG5cbiAgLyoqXG4gICAqIE1vZGVsM0pzb27jg5Hjg7zjgrXjg7xcbiAgICpcbiAgICogbW9kZWwzLmpzb27jg5XjgqHjgqTjg6vjgpLjg5Hjg7zjgrnjgZfjgablgKTjgpLlj5blvpfjgZnjgotcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21Nb2RlbFNldHRpbmdKc29uIGV4dGVuZHMgSUN1YmlzbU1vZGVsU2V0dGluZyB7XG4gICAgLyoqXG4gICAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICpcbiAgICAgKiBAcGFyYW0gYnVmZmVyICAgIE1vZGVsM0pzb27jgpLjg5DjgqTjg4jphY3liJfjgajjgZfjgaboqq3jgb/ovrzjgpPjgaDjg4fjg7zjgr/jg5Djg4Pjg5XjgqFcbiAgICAgKiBAcGFyYW0gc2l6ZSAgICAgIE1vZGVsM0pzb27jga7jg4fjg7zjgr/jgrXjgqTjgrpcbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKSB7XG4gICAgICBzdXBlcigpO1xuICAgICAgdGhpcy5fanNvbiA9IEN1YmlzbUpzb24uY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XG5cbiAgICAgIGlmICh0aGlzLl9qc29uKSB7XG4gICAgICAgIHRoaXMuX2pzb25WYWx1ZSA9IG5ldyBjc21WZWN0b3I8VmFsdWU+KCk7XG5cbiAgICAgICAgLy8g6aCG55Wq44GvZW51bSBGcmVxdWVzdE5vZGXjgajkuIDoh7TjgZXjgZvjgotcbiAgICAgICAgdGhpcy5fanNvblZhbHVlLnB1c2hCYWNrKHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoR3JvdXBzKSk7XG4gICAgICAgIHRoaXMuX2pzb25WYWx1ZS5wdXNoQmFjayhcbiAgICAgICAgICB0aGlzLl9qc29uXG4gICAgICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcylcbiAgICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1vYylcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fanNvblZhbHVlLnB1c2hCYWNrKFxuICAgICAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgICAgIC5nZXRSb290KClcbiAgICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKVxuICAgICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTW90aW9ucylcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fanNvblZhbHVlLnB1c2hCYWNrKFxuICAgICAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgICAgIC5nZXRSb290KClcbiAgICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKVxuICAgICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbnMpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX2pzb25WYWx1ZS5wdXNoQmFjayhcbiAgICAgICAgICB0aGlzLl9qc29uXG4gICAgICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcylcbiAgICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRleHR1cmVzKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLl9qc29uVmFsdWUucHVzaEJhY2soXG4gICAgICAgICAgdGhpcy5fanNvblxuICAgICAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpXG4gICAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLl9qc29uVmFsdWUucHVzaEJhY2soXG4gICAgICAgICAgdGhpcy5fanNvblxuICAgICAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpXG4gICAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQb3NlKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLl9qc29uVmFsdWUucHVzaEJhY2soXG4gICAgICAgICAgdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhIaXRBcmVhcylcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICAgIEN1YmlzbUpzb24uZGVsZXRlKHRoaXMuX2pzb24pO1xuXG4gICAgICB0aGlzLl9qc29uVmFsdWUgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEN1YmlzbUpzb27jgqrjg5bjgrjjgqfjgq/jg4jjgpLlj5blvpfjgZnjgotcbiAgICAgKlxuICAgICAqIEByZXR1cm4gQ3ViaXNtSnNvblxuICAgICAqL1xuICAgIHB1YmxpYyBHZXRKc29uKCk6IEN1YmlzbUpzb24ge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTW9j44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHJldHVybiBNb2Pjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TW9kZWxGaWxlTmFtZSgpOiBzdHJpbmcge1xuICAgICAgaWYgKCF0aGlzLmlzRXhpc3RNb2RlbEZpbGUoKSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW9jKS5nZXRSYXdTdHJpbmcoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg4fjg6vjgYzkvb/nlKjjgZnjgovjg4bjgq/jgrnjg4Hjg6Pjga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICAgKiDjg4bjgq/jgrnjg4Hjg6Pjga7mlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VGV4dHVyZUNvdW50KCk6IG51bWJlciB7XG4gICAgICBpZiAoIXRoaXMuaXNFeGlzdFRleHR1cmVGaWxlcygpKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfVGV4dHVyZXMpLmdldFNpemUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4bjgq/jgrnjg4Hjg6PjgYzphY3nva7jgZXjgozjgZ/jg4fjgqPjg6zjgq/jg4jjg6rjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcmV0dXJuIOODhuOCr+OCueODgeODo+OBjOmFjee9ruOBleOCjOOBn+ODh+OCo+ODrOOCr+ODiOODquOBruWQjeWJjVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRUZXh0dXJlRGlyZWN0b3J5KCk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXG4gICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX1RleHR1cmVzKVxuICAgICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44OH44Or44GM5L2/55So44GZ44KL44OG44Kv44K544OB44Oj44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgICAqIEByZXR1cm4g44OG44Kv44K544OB44Oj44Gu5ZCN5YmNXG4gICAgICovXG4gICAgcHVibGljIGdldFRleHR1cmVGaWxlTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfVGV4dHVyZXMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAgIC5nZXRSYXdTdHJpbmcoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgZ/lvZPjgZ/jgorliKTlrprjga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcmV0dXJuIOODouODh+ODq+OBq+ioreWumuOBleOCjOOBn+W9k+OBn+OCiuWIpOWumuOBruaVsFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRIaXRBcmVhc0NvdW50KCk6IG51bWJlciB7XG4gICAgICBpZiAoIXRoaXMuaXNFeGlzdEhpdEFyZWFzKCkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9IaXRBcmVhcykuZ2V0U2l6ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOW9k+OBn+OCiuWIpOWumuOBq+ioreWumuOBleOCjOOBn0lE44KS5Y+W5b6X44GZ44KLXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44GuaW5kZXhcbiAgICAgKiBAcmV0dXJuIOW9k+OBn+OCiuWIpOWumuOBq+ioreWumuOBleOCjOOBn0lEXG4gICAgICovXG4gICAgcHVibGljIGdldEhpdEFyZWFJZChpbmRleDogbnVtYmVyKTogQ3ViaXNtSWRIYW5kbGUge1xuICAgICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgICAgdGhpcy5fanNvblZhbHVlXG4gICAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfSGl0QXJlYXMpXG4gICAgICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJZClcbiAgICAgICAgICAuZ2V0UmF3U3RyaW5nKClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44Gf5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgICAqIEByZXR1cm4g5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44Gf5ZCN5YmNXG4gICAgICovXG4gICAgcHVibGljIGdldEhpdEFyZWFOYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9IaXRBcmVhcylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTmFtZSlcbiAgICAgICAgLmdldFJhd1N0cmluZygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOeJqeeQhua8lOeul+ioreWumuODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g54mp55CG5ryU566X6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmNXG4gICAgICovXG4gICAgcHVibGljIGdldFBoeXNpY3NGaWxlTmFtZSgpOiBzdHJpbmcge1xuICAgICAgaWYgKCF0aGlzLmlzRXhpc3RQaHlzaWNzRmlsZSgpKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9QaHlzaWNzKVxuICAgICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OR44O844OE5YiH44KK5pu/44GI6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHJldHVybiDjg5Hjg7zjg4TliIfjgormm7/jgYjoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UG9zZUZpbGVOYW1lKCk6IHN0cmluZyB7XG4gICAgICBpZiAoIXRoaXMuaXNFeGlzdFBvc2VGaWxlKCkpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfUG9zZSkuZ2V0UmF3U3RyaW5nKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHJldHVybiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7mlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RXhwcmVzc2lvbkNvdW50KCk6IG51bWJlciB7XG4gICAgICBpZiAoIXRoaXMuaXNFeGlzdEV4cHJlc3Npb25GaWxlKCkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfRXhwcmVzc2lvbnMpXG4gICAgICAgIC5nZXRTaXplKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44KS6K2Y5Yil44GZ44KL5ZCN5YmN77yI5Yil5ZCN77yJ44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgICAqIEByZXR1cm4g6KGo5oOF44Gu5ZCN5YmNXG4gICAgICovXG4gICAgcHVibGljIGdldEV4cHJlc3Npb25OYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9FeHByZXNzaW9ucylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTmFtZSlcbiAgICAgICAgLmdldFJhd1N0cmluZygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOihqOaDheioreWumuODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICAgKiBAcmV0dXJuIOihqOaDheioreWumuODleOCoeOCpOODq+OBruWQjeWJjVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRFeHByZXNzaW9uRmlsZU5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXG4gICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0V4cHJlc3Npb25zKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUGF0aClcbiAgICAgICAgLmdldFJhd1N0cmluZygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5pWwXG4gICAgICovXG4gICAgcHVibGljIGdldE1vdGlvbkdyb3VwQ291bnQoKTogbnVtYmVyIHtcbiAgICAgIGlmICghdGhpcy5pc0V4aXN0TW90aW9uR3JvdXBzKCkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcbiAgICAgICAgLmdldEtleXMoKVxuICAgICAgICAuZ2V0U2l6ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNb3Rpb25Hcm91cE5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgICBpZiAoIXRoaXMuaXNFeGlzdE1vdGlvbkdyb3VwcygpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXG4gICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXG4gICAgICAgIC5nZXRLZXlzKClcbiAgICAgICAgLmF0KGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjgavlkKvjgb7jgozjgovjg6Ljg7zjgrfjg6fjg7Pjga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5pWwXG4gICAgICovXG4gICAgcHVibGljIGdldE1vdGlvbkNvdW50KGdyb3VwTmFtZTogc3RyaW5nKTogbnVtYmVyIHtcbiAgICAgIGlmICghdGhpcy5pc0V4aXN0TW90aW9uR3JvdXBOYW1lKGdyb3VwTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoZ3JvdXBOYW1lKVxuICAgICAgICAuZ2V0U2l6ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCsOODq+ODvOODl+WQjeOBqOOCpOODs+ODh+ODg+OCr+OCueWApOOBi+OCieODouODvOOCt+ODp+ODs+ODleOCoeOCpOODq+WQjeOCkuWPluW+l+OBmeOCi1xuICAgICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAgICogQHBhcmFtIGluZGV4ICAgICDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+ODleOCoeOCpOODq+OBruWQjeWJjVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNb3Rpb25GaWxlTmFtZShncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgICBpZiAoIXRoaXMuaXNFeGlzdE1vdGlvbkdyb3VwTmFtZShncm91cE5hbWUpKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVQYXRoKVxuICAgICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gr5a++5b+c44GZ44KL44K144Km44Oz44OJ44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cbiAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAgICogQHJldHVybiDjgrXjgqbjg7Pjg4njg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TW90aW9uU291bmRGaWxlTmFtZShncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgICBpZiAoIXRoaXMuaXNFeGlzdE1vdGlvblNvdW5kRmlsZShncm91cE5hbWUsIGluZGV4KSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoZ3JvdXBOYW1lKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhTb3VuZFBhdGgpXG4gICAgICAgIC5nZXRSYXdTdHJpbmcoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pplovlp4vmmYLjga7jg5Xjgqfjg7zjg4njgqTjg7Plh6bnkIbmmYLplpPjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCpOODs+WHpueQhuaZgumWk1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIGdldE1vdGlvbkZhZGVJblRpbWVWYWx1ZShncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICBpZiAoIXRoaXMuaXNFeGlzdE1vdGlvbkZhZGVJbihncm91cE5hbWUsIGluZGV4KSkge1xuICAgICAgICByZXR1cm4gLTEuMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVJblRpbWUpXG4gICAgICAgIC50b0Zsb2F0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz57WC5LqG5pmC44Gu44OV44Kn44O844OJ44Ki44Km44OI5Yem55CG5pmC6ZaT44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cbiAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqLjgqbjg4jlh6bnkIbmmYLplpNb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNb3Rpb25GYWRlT3V0VGltZVZhbHVlKGdyb3VwTmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgIGlmICghdGhpcy5pc0V4aXN0TW90aW9uRmFkZU91dChncm91cE5hbWUsIGluZGV4KSkge1xuICAgICAgICByZXR1cm4gLTEuMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVPdXRUaW1lKVxuICAgICAgICAudG9GbG9hdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODpuODvOOCtuODvOODh+ODvOOCv+OBruODleOCoeOCpOODq+WQjeOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44Gu44OV44Kh44Kk44Or5ZCNXG4gICAgICovXG4gICAgcHVibGljIGdldFVzZXJEYXRhRmlsZSgpOiBzdHJpbmcge1xuICAgICAgaWYgKCF0aGlzLmlzRXhpc3RVc2VyRGF0YUZpbGUoKSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKVxuICAgICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Os44Kk44Ki44Km44OI5oOF5aCx44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIG91dExheW91dE1hcCBjc21NYXDjgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICAgKiBAcmV0dXJuIHRydWUg44Os44Kk44Ki44Km44OI5oOF5aCx44GM5a2Y5Zyo44GZ44KLXG4gICAgICogQHJldHVybiBmYWxzZSDjg6zjgqTjgqLjgqbjg4jmg4XloLHjgYzlrZjlnKjjgZfjgarjgYRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TGF5b3V0TWFwKG91dExheW91dE1hcDogY3NtTWFwPHN0cmluZywgbnVtYmVyPik6IGJvb2xlYW4ge1xuICAgICAgLy8g5a2Y5Zyo44GX44Gq44GE6KaB57Sg44Gr44Ki44Kv44K744K544GZ44KL44Go44Ko44Op44O844Gr44Gq44KL44Gf44KBVmFsdWXjgYxudWxs44Gu5aC05ZCI44GvbnVsbOOCkuS7o+WFpeOBmeOCi1xuICAgICAgY29uc3QgbWFwOiBjc21NYXA8c3RyaW5nLCBWYWx1ZT4gPSB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTGF5b3V0KVxuICAgICAgICAuZ2V0TWFwKCk7XG5cbiAgICAgIGlmIChtYXAgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGxldCByZXQgPSBmYWxzZTtcblxuICAgICAgZm9yIChcbiAgICAgICAgY29uc3QgaXRlOiBpdGVyYXRvcjxzdHJpbmcsIFZhbHVlPiA9IG1hcC5iZWdpbigpO1xuICAgICAgICBpdGUubm90RXF1YWwobWFwLmVuZCgpKTtcbiAgICAgICAgaXRlLnByZUluY3JlbWVudCgpXG4gICAgICApIHtcbiAgICAgICAgb3V0TGF5b3V0TWFwLnNldFZhbHVlKGl0ZS5wdHIoKS5maXJzdCwgaXRlLnB0cigpLnNlY29uZC50b0Zsb2F0KCkpO1xuICAgICAgICByZXQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOebruODkeODgeOBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g55uu44OR44OB44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWwXG4gICAgICovXG4gICAgcHVibGljIGdldEV5ZUJsaW5rUGFyYW1ldGVyQ291bnQoKTogbnVtYmVyIHtcbiAgICAgIGlmICghdGhpcy5pc0V4aXN0RXllQmxpbmtQYXJhbWV0ZXJzKCkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIGxldCBudW0gPSAwO1xuICAgICAgZm9yIChcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBpIDwgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5nZXRTaXplKCk7XG4gICAgICAgIGkrK1xuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IHJlZkk6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlXG4gICAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSk7XG4gICAgICAgIGlmIChyZWZJLmlzTnVsbCgpIHx8IHJlZkkuaXNFcnJvcigpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVmSS5nZXRWYWx1ZUJ5U3RyaW5nKE5hbWUpLmdldFJhd1N0cmluZygpID09IEV5ZUJsaW5rKSB7XG4gICAgICAgICAgbnVtID0gcmVmSVxuICAgICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSWRzKVxuICAgICAgICAgICAgLmdldFZlY3RvcigpXG4gICAgICAgICAgICAuZ2V0U2l6ZSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudW07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog55uu44OR44OB44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44GuSUTjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRFeWVCbGlua1BhcmFtZXRlcklkKGluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZSB7XG4gICAgICBpZiAoIXRoaXMuaXNFeGlzdEV5ZUJsaW5rUGFyYW1ldGVycygpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGkgPCB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpLmdldFNpemUoKTtcbiAgICAgICAgaSsrXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgcmVmSTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWVcbiAgICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpXG4gICAgICAgICAgLmdldFZhbHVlQnlJbmRleChpKTtcbiAgICAgICAgaWYgKHJlZkkuaXNOdWxsKCkgfHwgcmVmSS5pc0Vycm9yKCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZWZJLmdldFZhbHVlQnlTdHJpbmcoTmFtZSkuZ2V0UmF3U3RyaW5nKCkgPT0gRXllQmxpbmspIHtcbiAgICAgICAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgICAgICAgcmVmSVxuICAgICAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJZHMpXG4gICAgICAgICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAgICAgICAgIC5nZXRSYXdTdHJpbmcoKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODquODg+ODl+OCt+ODs+OCr+OBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g44Oq44OD44OX44K344Oz44Kv44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWwXG4gICAgICovXG4gICAgcHVibGljIGdldExpcFN5bmNQYXJhbWV0ZXJDb3VudCgpOiBudW1iZXIge1xuICAgICAgaWYgKCF0aGlzLmlzRXhpc3RMaXBTeW5jUGFyYW1ldGVycygpKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICBsZXQgbnVtID0gMDtcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgaSA8IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuZ2V0U2l6ZSgpO1xuICAgICAgICBpKytcbiAgICAgICkge1xuICAgICAgICBjb25zdCByZWZJOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcylcbiAgICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpO1xuICAgICAgICBpZiAocmVmSS5pc051bGwoKSB8fCByZWZJLmlzRXJyb3IoKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlZkkuZ2V0VmFsdWVCeVN0cmluZyhOYW1lKS5nZXRSYXdTdHJpbmcoKSA9PSBMaXBTeW5jKSB7XG4gICAgICAgICAgbnVtID0gcmVmSVxuICAgICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSWRzKVxuICAgICAgICAgICAgLmdldFZlY3RvcigpXG4gICAgICAgICAgICAuZ2V0U2l6ZSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudW07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oq44OD44OX44K344Oz44Kv44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgICAqIEByZXR1cm4g44OR44Op44Oh44O844K/SURcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TGlwU3luY1BhcmFtZXRlcklkKGluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZSB7XG4gICAgICBpZiAoIXRoaXMuaXNFeGlzdExpcFN5bmNQYXJhbWV0ZXJzKCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgaSA8IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuZ2V0U2l6ZSgpO1xuICAgICAgICBpKytcbiAgICAgICkge1xuICAgICAgICBjb25zdCByZWZJOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcylcbiAgICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpO1xuICAgICAgICBpZiAocmVmSS5pc051bGwoKSB8fCByZWZJLmlzRXJyb3IoKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlZkkuZ2V0VmFsdWVCeVN0cmluZyhOYW1lKS5nZXRSYXdTdHJpbmcoKSA9PSBMaXBTeW5jKSB7XG4gICAgICAgICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgICAgICAgIHJlZklcbiAgICAgICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSWRzKVxuICAgICAgICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgICAgICAgICAuZ2V0UmF3U3RyaW5nKClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg4fjg6vjg5XjgqHjgqTjg6vjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzRXhpc3RNb2RlbEZpbGUoKTogYm9vbGVhbiB7XG4gICAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vYyk7XG4gICAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODhuOCr+OCueODgeODo+ODleOCoeOCpOODq+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgICAqL1xuICAgIHByaXZhdGUgaXNFeGlzdFRleHR1cmVGaWxlcygpOiBib29sZWFuIHtcbiAgICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlLmF0KFxuICAgICAgICBGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX1RleHR1cmVzXG4gICAgICApO1xuICAgICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlvZPjgZ/jgorliKTlrprjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzRXhpc3RIaXRBcmVhcygpOiBib29sZWFuIHtcbiAgICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlLmF0KFxuICAgICAgICBGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0hpdEFyZWFzXG4gICAgICApO1xuICAgICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDniannkIbmvJTnrpfjg5XjgqHjgqTjg6vjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzRXhpc3RQaHlzaWNzRmlsZSgpOiBib29sZWFuIHtcbiAgICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfUGh5c2ljcyk7XG4gICAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODneODvOOCuuioreWumuODleOCoeOCpOODq+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgICAqL1xuICAgIHByaXZhdGUgaXNFeGlzdFBvc2VGaWxlKCk6IGJvb2xlYW4ge1xuICAgICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Qb3NlKTtcbiAgICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc0V4aXN0RXhwcmVzc2lvbkZpbGUoKTogYm9vbGVhbiB7XG4gICAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZS5hdChcbiAgICAgICAgRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9FeHByZXNzaW9uc1xuICAgICAgKTtcbiAgICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc0V4aXN0TW90aW9uR3JvdXBzKCk6IGJvb2xlYW4ge1xuICAgICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKTtcbiAgICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5byV5pWw44Gn5oyH5a6a44GX44Gf44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAgICogQHBhcmFtIGdyb3VwTmFtZSAg44Kw44Or44O844OX5ZCNXG4gICAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc0V4aXN0TW90aW9uR3JvdXBOYW1lKGdyb3VwTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpO1xuICAgICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlvJXmlbDjgafmjIflrprjgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjgavlr77lv5zjgZnjgovjgrXjgqbjg7Pjg4njg5XjgqHjgqTjg6vjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICAgKiBAcGFyYW0gZ3JvdXBOYW1lICDjgrDjg6vjg7zjg5flkI1cbiAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc0V4aXN0TW90aW9uU291bmRGaWxlKGdyb3VwTmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFNvdW5kUGF0aCk7XG4gICAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOW8leaVsOOBp+aMh+WumuOBl+OBn+ODouODvOOCt+ODp+ODs+OBq+WvvuW/nOOBmeOCi+ODleOCp+ODvOODieOCpOODs+aZgumWk+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgICAqIEBwYXJhbSBncm91cE5hbWUgIOOCsOODq+ODvOODl+WQjVxuICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzRXhpc3RNb3Rpb25GYWRlSW4oZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlXG4gICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKGdyb3VwTmFtZSlcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZUluVGltZSk7XG4gICAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOW8leaVsOOBp+aMh+WumuOBl+OBn+ODouODvOOCt+ODp+ODs+OBq+WvvuW/nOOBmeOCi+ODleOCp+ODvOODieOCouOCpuODiOaZgumWk+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgICAqIEBwYXJhbSBncm91cE5hbWUgIOOCsOODq+ODvOODl+WQjVxuICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzRXhpc3RNb3Rpb25GYWRlT3V0KGdyb3VwTmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVPdXRUaW1lKTtcbiAgICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlckRhdGHjga7jg5XjgqHjgqTjg6vlkI3jgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzRXhpc3RVc2VyRGF0YUZpbGUoKTogYm9vbGVhbiB7XG4gICAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcylcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVXNlckRhdGEpO1xuICAgICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDnm67jgbHjgaHjgavlr77lv5zku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzRXhpc3RFeWVCbGlua1BhcmFtZXRlcnMoKTogYm9vbGVhbiB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuaXNOdWxsKCkgfHxcbiAgICAgICAgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5pc0Vycm9yKClcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgaSA8IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuZ2V0U2l6ZSgpO1xuICAgICAgICArK2lcbiAgICAgICkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy5fanNvblZhbHVlXG4gICAgICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpXG4gICAgICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpXG4gICAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOYW1lKVxuICAgICAgICAgICAgLmdldFJhd1N0cmluZygpID09IEV5ZUJsaW5rXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavlr77lv5zku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzRXhpc3RMaXBTeW5jUGFyYW1ldGVycygpOiBib29sZWFuIHtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5pc051bGwoKSB8fFxuICAgICAgICB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpLmlzRXJyb3IoKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgaSA8IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuZ2V0U2l6ZSgpO1xuICAgICAgICArK2lcbiAgICAgICkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy5fanNvblZhbHVlXG4gICAgICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpXG4gICAgICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpXG4gICAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOYW1lKVxuICAgICAgICAgICAgLmdldFJhd1N0cmluZygpID09IExpcFN5bmNcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9qc29uOiBDdWJpc21Kc29uO1xuICAgIHByaXZhdGUgX2pzb25WYWx1ZTogY3NtVmVjdG9yPFZhbHVlPjtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkIH0gZnJvbSAnLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtbWFwIH0gZnJvbSAnLi90eXBlL2NzbW1hcCc7XG5pbXBvcnQgY3NtTWFwID0gY3NtbWFwLmNzbU1hcDtcbmltcG9ydCBDdWJpc21JZEhhbmRsZSA9IGN1YmlzbWlkLkN1YmlzbUlkSGFuZGxlO1xuXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIC8qKlxuICAgKiDjg6Ljg4fjg6voqK3lrprmg4XloLHjgpLlj5bjgormibHjgYbplqLmlbDjgpLlrqPoqIDjgZfjgZ/ntJTnsovku67mg7Pjgq/jg6njgrnjgIJcbiAgICpcbiAgICog44GT44Gu44Kv44Op44K544KS57aZ5om/44GZ44KL44GT44Go44Gn44CB44Oi44OH44Or6Kit5a6a5oOF5aCx44KS5Y+W44KK5omx44GG44Kv44Op44K544Gr44Gq44KL44CCXG4gICAqL1xuICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgSUN1YmlzbU1vZGVsU2V0dGluZyB7XG4gICAgLyoqXG4gICAgICogTW9j44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHJldHVybiBNb2Pjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICAgKi9cbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW9kZWxGaWxlTmFtZSgpOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg4fjg6vjgYzkvb/nlKjjgZnjgovjg4bjgq/jgrnjg4Hjg6Pjga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICAgKiDjg4bjgq/jgrnjg4Hjg6Pjga7mlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0VGV4dHVyZUNvdW50KCk6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIOODhuOCr+OCueODgeODo+OBjOmFjee9ruOBleOCjOOBn+ODh+OCo+ODrOOCr+ODiOODquOBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g44OG44Kv44K544OB44Oj44GM6YWN572u44GV44KM44Gf44OH44Kj44Os44Kv44OI44Oq44Gu5ZCN5YmNXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IGdldFRleHR1cmVEaXJlY3RvcnkoKTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICog44Oi44OH44Or44GM5L2/55So44GZ44KL44OG44Kv44K544OB44Oj44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgICAqIEByZXR1cm4g44OG44Kv44K544OB44Oj44Gu5ZCN5YmNXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IGdldFRleHR1cmVGaWxlTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICog44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gf5b2T44Gf44KK5Yik5a6a44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHJldHVybiDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgZ/lvZPjgZ/jgorliKTlrprjga7mlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0SGl0QXJlYXNDb3VudCgpOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiDlvZPjgZ/jgorliKTlrprjgavoqK3lrprjgZXjgozjgZ9JROOCkuWPluW+l+OBmeOCi1xuICAgICAqXG4gICAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBrmluZGV4XG4gICAgICogQHJldHVybiDlvZPjgZ/jgorliKTlrprjgavoqK3lrprjgZXjgozjgZ9JRFxuICAgICAqL1xuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRIaXRBcmVhSWQoaW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlO1xuXG4gICAgLyoqXG4gICAgICog5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44Gf5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgICAqIEByZXR1cm4g5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44Gf5ZCN5YmNXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IGdldEhpdEFyZWFOYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiDniannkIbmvJTnrpfoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcmV0dXJuIOeJqeeQhua8lOeul+ioreWumuODleOCoeOCpOODq+OBruWQjeWJjVxuICAgICAqL1xuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRQaHlzaWNzRmlsZU5hbWUoKTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICog44OR44O844OE5YiH44KK5pu/44GI6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHJldHVybiDjg5Hjg7zjg4TliIfjgormm7/jgYjoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICAgKi9cbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0UG9zZUZpbGVOYW1lKCk6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIOihqOaDheioreWumuODleOCoeOCpOODq+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu5pWwXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IGdldEV4cHJlc3Npb25Db3VudCgpOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjgpLorZjliKXjgZnjgovlkI3liY3vvIjliKXlkI3vvInjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAgICogQHJldHVybiDooajmg4Xjga7lkI3liY1cbiAgICAgKi9cbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0RXhwcmVzc2lvbk5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIOihqOaDheioreWumuODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICAgKiBAcmV0dXJuIOihqOaDheioreWumuODleOCoeOCpOODq+OBruWQjeWJjVxuICAgICAqL1xuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRFeHByZXNzaW9uRmlsZU5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5pWwXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IGdldE1vdGlvbkdyb3VwQ291bnQoKTogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IGdldE1vdGlvbkdyb3VwTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Kw44Or44O844OX44Gr5ZCr44G+44KM44KL44Oi44O844K344On44Oz44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cbiAgICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruaVsFxuICAgICAqL1xuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRNb3Rpb25Db3VudChncm91cE5hbWU6IHN0cmluZyk6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIOOCsOODq+ODvOODl+WQjeOBqOOCpOODs+ODh+ODg+OCr+OCueWApOOBi+OCieODouODvOOCt+ODp+ODs+ODleOCoeOCpOODq+WQjeOCkuWPluW+l+OBmeOCi1xuICAgICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAgICogQHBhcmFtIGluZGV4ICAgICDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+ODleOCoeOCpOODq+OBruWQjeWJjVxuICAgICAqL1xuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRNb3Rpb25GaWxlTmFtZShncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OBq+WvvuW/nOOBmeOCi+OCteOCpuODs+ODieODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgICAqIEByZXR1cm4g44K144Km44Oz44OJ44OV44Kh44Kk44Or44Gu5ZCN5YmNXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IGdldE1vdGlvblNvdW5kRmlsZU5hbWUoXG4gICAgICBncm91cE5hbWU6IHN0cmluZyxcbiAgICAgIGluZGV4OiBudW1iZXJcbiAgICApOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pplovlp4vmmYLjga7jg5Xjgqfjg7zjg4njgqTjg7Plh6bnkIbmmYLplpPjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCpOODs+WHpueQhuaZgumWk1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IGdldE1vdGlvbkZhZGVJblRpbWVWYWx1ZShcbiAgICAgIGdyb3VwTmFtZTogc3RyaW5nLFxuICAgICAgaW5kZXg6IG51bWJlclxuICAgICk6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+e1guS6huaZguOBruODleOCp+ODvOODieOCouOCpuODiOWHpueQhuaZgumWk+OCkuWPluW+l+OBmeOCi1xuICAgICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgICAqIEByZXR1cm4g44OV44Kn44O844OJ44Ki44Km44OI5Yem55CG5pmC6ZaTW+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW90aW9uRmFkZU91dFRpbWVWYWx1ZShcbiAgICAgIGdyb3VwTmFtZTogc3RyaW5nLFxuICAgICAgaW5kZXg6IG51bWJlclxuICAgICk6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIOODpuODvOOCtuODvOODh+ODvOOCv+OBruODleOCoeOCpOODq+WQjeOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44Gu44OV44Kh44Kk44Or5ZCNXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IGdldFVzZXJEYXRhRmlsZSgpOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiDjg6zjgqTjgqLjgqbjg4jmg4XloLHjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcGFyYW0gb3V0TGF5b3V0TWFwIGNzbU1hcOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCuVxuICAgICAqIEByZXR1cm4gdHJ1ZSDjg6zjgqTjgqLjgqbjg4jmg4XloLHjgYzlrZjlnKjjgZnjgotcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOODrOOCpOOCouOCpuODiOaDheWgseOBjOWtmOWcqOOBl+OBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRMYXlvdXRNYXAob3V0TGF5b3V0TWFwOiBjc21NYXA8c3RyaW5nLCBudW1iZXI+KTogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIOebruODkeODgeOBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g55uu44OR44OB44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWwXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IGdldEV5ZUJsaW5rUGFyYW1ldGVyQ291bnQoKTogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICog55uu44OR44OB44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44GuSUTjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgICAqL1xuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRFeWVCbGlua1BhcmFtZXRlcklkKGluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZTtcblxuICAgIC8qKlxuICAgICAqIOODquODg+ODl+OCt+ODs+OCr+OBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g44Oq44OD44OX44K344Oz44Kv44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWwXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IGdldExpcFN5bmNQYXJhbWV0ZXJDb3VudCgpOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgICAqL1xuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRMaXBTeW5jUGFyYW1ldGVySWQoaW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG4vKipcbiAqIEBicmllZiDjg5Hjg6njg6Hjg7zjgr9JROOBruODh+ODleOCqeODq+ODiOWApOOCkuS/neaMgeOBmeOCi+WumuaVsDxicj5cbiAqICAgICAgICAg44OH44OV44Kp44Or44OI5YCk44Gu5LuV5qeY44Gv5Lul5LiL44Gu44Oe44OL44Ol44Ki44Or44Gr5Z+644Gl44GPPGJyPlxuICogICAgICAgICBodHRwczovL2RvY3MubGl2ZTJkLmNvbS9jdWJpc20tZWRpdG9yLW1hbnVhbC9zdGFuZGFyZC1wYXJhbWV0b3ItbGlzdC9cbiAqL1xuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvLyDjg5Hjg7zjg4RJRFxuICBleHBvcnQgY29uc3QgSGl0QXJlYVByZWZpeCA9ICdIaXRBcmVhJztcbiAgZXhwb3J0IGNvbnN0IEhpdEFyZWFIZWFkID0gJ0hlYWQnO1xuICBleHBvcnQgY29uc3QgSGl0QXJlYUJvZHkgPSAnQm9keSc7XG4gIGV4cG9ydCBjb25zdCBQYXJ0c0lkQ29yZSA9ICdQYXJ0czAxQ29yZSc7XG4gIGV4cG9ydCBjb25zdCBQYXJ0c0FybVByZWZpeCA9ICdQYXJ0czAxQXJtXyc7XG4gIGV4cG9ydCBjb25zdCBQYXJ0c0FybUxQcmVmaXggPSAnUGFydHMwMUFybUxfJztcbiAgZXhwb3J0IGNvbnN0IFBhcnRzQXJtUlByZWZpeCA9ICdQYXJ0czAxQXJtUl8nO1xuXG4gIC8vIOODkeODqeODoeODvOOCv0lEXG4gIGV4cG9ydCBjb25zdCBQYXJhbUFuZ2xlWCA9ICdQYXJhbUFuZ2xlWCc7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUFuZ2xlWSA9ICdQYXJhbUFuZ2xlWSc7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUFuZ2xlWiA9ICdQYXJhbUFuZ2xlWic7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUV5ZUxPcGVuID0gJ1BhcmFtRXllTE9wZW4nO1xuICBleHBvcnQgY29uc3QgUGFyYW1FeWVMU21pbGUgPSAnUGFyYW1FeWVMU21pbGUnO1xuICBleHBvcnQgY29uc3QgUGFyYW1FeWVST3BlbiA9ICdQYXJhbUV5ZVJPcGVuJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtRXllUlNtaWxlID0gJ1BhcmFtRXllUlNtaWxlJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtRXllQmFsbFggPSAnUGFyYW1FeWVCYWxsWCc7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUV5ZUJhbGxZID0gJ1BhcmFtRXllQmFsbFknO1xuICBleHBvcnQgY29uc3QgUGFyYW1FeWVCYWxsRm9ybSA9ICdQYXJhbUV5ZUJhbGxGb3JtJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd0xZID0gJ1BhcmFtQnJvd0xZJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd1JZID0gJ1BhcmFtQnJvd1JZJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd0xYID0gJ1BhcmFtQnJvd0xYJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd1JYID0gJ1BhcmFtQnJvd1JYJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd0xBbmdsZSA9ICdQYXJhbUJyb3dMQW5nbGUnO1xuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93UkFuZ2xlID0gJ1BhcmFtQnJvd1JBbmdsZSc7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyb3dMRm9ybSA9ICdQYXJhbUJyb3dMRm9ybSc7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyb3dSRm9ybSA9ICdQYXJhbUJyb3dSRm9ybSc7XG4gIGV4cG9ydCBjb25zdCBQYXJhbU1vdXRoRm9ybSA9ICdQYXJhbU1vdXRoRm9ybSc7XG4gIGV4cG9ydCBjb25zdCBQYXJhbU1vdXRoT3BlblkgPSAnUGFyYW1Nb3V0aE9wZW5ZJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQ2hlZWsgPSAnUGFyYW1DaGVlayc7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJvZHlBbmdsZVggPSAnUGFyYW1Cb2R5QW5nbGVYJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQm9keUFuZ2xlWSA9ICdQYXJhbUJvZHlBbmdsZVknO1xuICBleHBvcnQgY29uc3QgUGFyYW1Cb2R5QW5nbGVaID0gJ1BhcmFtQm9keUFuZ2xlWic7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyZWF0aCA9ICdQYXJhbUJyZWF0aCc7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUFybUxBID0gJ1BhcmFtQXJtTEEnO1xuICBleHBvcnQgY29uc3QgUGFyYW1Bcm1SQSA9ICdQYXJhbUFybVJBJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQXJtTEIgPSAnUGFyYW1Bcm1MQic7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUFybVJCID0gJ1BhcmFtQXJtUkInO1xuICBleHBvcnQgY29uc3QgUGFyYW1IYW5kTCA9ICdQYXJhbUhhbmRMJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtSGFuZFIgPSAnUGFyYW1IYW5kUic7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUhhaXJGcm9udCA9ICdQYXJhbUhhaXJGcm9udCc7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUhhaXJTaWRlID0gJ1BhcmFtSGFpclNpZGUnO1xuICBleHBvcnQgY29uc3QgUGFyYW1IYWlyQmFjayA9ICdQYXJhbUhhaXJCYWNrJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtSGFpckZsdWZmeSA9ICdQYXJhbUhhaXJGbHVmZnknO1xuICBleHBvcnQgY29uc3QgUGFyYW1TaG91bGRlclkgPSAnUGFyYW1TaG91bGRlclknO1xuICBleHBvcnQgY29uc3QgUGFyYW1CdXN0WCA9ICdQYXJhbUJ1c3RYJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnVzdFkgPSAnUGFyYW1CdXN0WSc7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJhc2VYID0gJ1BhcmFtQmFzZVgnO1xuICBleHBvcnQgY29uc3QgUGFyYW1CYXNlWSA9ICdQYXJhbUJhc2VZJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtTk9ORSA9ICdOT05FOic7XG59XG4iLCJ2YXIgc3VwcG9ydCA9IHtcbiAgc2VhcmNoUGFyYW1zOiAnVVJMU2VhcmNoUGFyYW1zJyBpbiBzZWxmLFxuICBpdGVyYWJsZTogJ1N5bWJvbCcgaW4gc2VsZiAmJiAnaXRlcmF0b3InIGluIFN5bWJvbCxcbiAgYmxvYjpcbiAgICAnRmlsZVJlYWRlcicgaW4gc2VsZiAmJlxuICAgICdCbG9iJyBpbiBzZWxmICYmXG4gICAgKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEJsb2IoKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KSgpLFxuICBmb3JtRGF0YTogJ0Zvcm1EYXRhJyBpbiBzZWxmLFxuICBhcnJheUJ1ZmZlcjogJ0FycmF5QnVmZmVyJyBpbiBzZWxmXG59XG5cbmZ1bmN0aW9uIGlzRGF0YVZpZXcob2JqKSB7XG4gIHJldHVybiBvYmogJiYgRGF0YVZpZXcucHJvdG90eXBlLmlzUHJvdG90eXBlT2Yob2JqKVxufVxuXG5pZiAoc3VwcG9ydC5hcnJheUJ1ZmZlcikge1xuICB2YXIgdmlld0NsYXNzZXMgPSBbXG4gICAgJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSdcbiAgXVxuXG4gIHZhciBpc0FycmF5QnVmZmVyVmlldyA9XG4gICAgQXJyYXlCdWZmZXIuaXNWaWV3IHx8XG4gICAgZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHZpZXdDbGFzc2VzLmluZGV4T2YoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikpID4gLTFcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWUobmFtZSkge1xuICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgbmFtZSA9IFN0cmluZyhuYW1lKVxuICB9XG4gIGlmICgvW15hLXowLTlcXC0jJCUmJyorLl5fYHx+XS9pLnRlc3QobmFtZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgZmllbGQgbmFtZScpXG4gIH1cbiAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vLyBCdWlsZCBhIGRlc3RydWN0aXZlIGl0ZXJhdG9yIGZvciB0aGUgdmFsdWUgbGlzdFxuZnVuY3Rpb24gaXRlcmF0b3JGb3IoaXRlbXMpIHtcbiAgdmFyIGl0ZXJhdG9yID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlID0gaXRlbXMuc2hpZnQoKVxuICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaXRlcmF0b3Jcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICB0aGlzLm1hcCA9IHt9XG5cbiAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICB0aGlzLmFwcGVuZChoZWFkZXJbMF0sIGhlYWRlclsxXSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKGhlYWRlcnMpIHtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pXG4gICAgfSwgdGhpcylcbiAgfVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxuICB2YXIgb2xkVmFsdWUgPSB0aGlzLm1hcFtuYW1lXVxuICB0aGlzLm1hcFtuYW1lXSA9IG9sZFZhbHVlID8gb2xkVmFsdWUgKyAnLCAnICsgdmFsdWUgOiB2YWx1ZVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gIHJldHVybiB0aGlzLmhhcyhuYW1lKSA/IHRoaXMubWFwW25hbWVdIDogbnVsbFxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShub3JtYWxpemVOYW1lKG5hbWUpKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLm1hcCkge1xuICAgIGlmICh0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcFtuYW1lXSwgbmFtZSwgdGhpcylcbiAgICB9XG4gIH1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICBpdGVtcy5wdXNoKG5hbWUpXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIGl0ZW1zLnB1c2godmFsdWUpXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICBpdGVtcy5wdXNoKFtuYW1lLCB2YWx1ZV0pXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXNcbn1cblxuZnVuY3Rpb24gY29uc3VtZWQoYm9keSkge1xuICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgfVxuICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpXG4gICAgfVxuICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QocmVhZGVyLmVycm9yKVxuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpXG4gIHJldHVybiBwcm9taXNlXG59XG5cbmZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpXG4gIHZhciBjaGFycyA9IG5ldyBBcnJheSh2aWV3Lmxlbmd0aClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICBjaGFyc1tpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUodmlld1tpXSlcbiAgfVxuICByZXR1cm4gY2hhcnMuam9pbignJylcbn1cblxuZnVuY3Rpb24gYnVmZmVyQ2xvbmUoYnVmKSB7XG4gIGlmIChidWYuc2xpY2UpIHtcbiAgICByZXR1cm4gYnVmLnNsaWNlKDApXG4gIH0gZWxzZSB7XG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aClcbiAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShidWYpKVxuICAgIHJldHVybiB2aWV3LmJ1ZmZlclxuICB9XG59XG5cbmZ1bmN0aW9uIEJvZHkoKSB7XG4gIHRoaXMuYm9keVVzZWQgPSBmYWxzZVxuXG4gIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xuICAgIHRoaXMuX2JvZHlJbml0ID0gYm9keVxuICAgIGlmICghYm9keSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5QmxvYiA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKClcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgc3VwcG9ydC5ibG9iICYmIGlzRGF0YVZpZXcoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkuYnVmZmVyKVxuICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgIHRoaXMuX2JvZHlJbml0ID0gbmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pXG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIChBcnJheUJ1ZmZlci5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSB8fCBpc0FycmF5QnVmZmVyVmlldyhib2R5KSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChib2R5KVxuICAgIH1cblxuICAgIGlmICghdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHtcbiAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gY29uc3VtZWQodGhpcykgfHwgUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJsb2IoKS50aGVuKHJlYWRCbG9iQXNBcnJheUJ1ZmZlcilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVhZEFycmF5QnVmZmVyQXNUZXh0KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcbiAgICB9XG4gIH1cblxuICB0aGlzLmpzb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG52YXIgbWV0aG9kcyA9IFsnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUE9TVCcsICdQVVQnXVxuXG5mdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgcmV0dXJuIG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xID8gdXBjYXNlZCA6IG1ldGhvZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keVxuXG4gIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpXG4gICAgfVxuICAgIHRoaXMudXJsID0gaW5wdXQudXJsXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzXG4gICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpXG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kXG4gICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZVxuICAgIHRoaXMuc2lnbmFsID0gaW5wdXQuc2lnbmFsXG4gICAgaWYgKCFib2R5ICYmIGlucHV0Ll9ib2R5SW5pdCAhPSBudWxsKSB7XG4gICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0XG4gICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpXG4gIH1cblxuICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdzYW1lLW9yaWdpbidcbiAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICB9XG4gIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKVxuICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGxcbiAgdGhpcy5zaWduYWwgPSBvcHRpb25zLnNpZ25hbCB8fCB0aGlzLnNpZ25hbFxuICB0aGlzLnJlZmVycmVyID0gbnVsbFxuXG4gIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXG4gIH1cbiAgdGhpcy5faW5pdEJvZHkoYm9keSlcbn1cblxuUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMsIHtib2R5OiB0aGlzLl9ib2R5SW5pdH0pXG59XG5cbmZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKClcbiAgYm9keVxuICAgIC50cmltKClcbiAgICAuc3BsaXQoJyYnKVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICBpZiAoYnl0ZXMpIHtcbiAgICAgICAgdmFyIHNwbGl0ID0gYnl0ZXMuc3BsaXQoJz0nKVxuICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignPScpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIGZvcm0uYXBwZW5kKGRlY29kZVVSSUNvbXBvbmVudChuYW1lKSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSlcbiAgICAgIH1cbiAgICB9KVxuICByZXR1cm4gZm9ybVxufVxuXG5mdW5jdGlvbiBwYXJzZUhlYWRlcnMocmF3SGVhZGVycykge1xuICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKClcbiAgLy8gUmVwbGFjZSBpbnN0YW5jZXMgb2YgXFxyXFxuIGFuZCBcXG4gZm9sbG93ZWQgYnkgYXQgbGVhc3Qgb25lIHNwYWNlIG9yIGhvcml6b250YWwgdGFiIHdpdGggYSBzcGFjZVxuICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzIzMCNzZWN0aW9uLTMuMlxuICB2YXIgcHJlUHJvY2Vzc2VkSGVhZGVycyA9IHJhd0hlYWRlcnMucmVwbGFjZSgvXFxyP1xcbltcXHQgXSsvZywgJyAnKVxuICBwcmVQcm9jZXNzZWRIZWFkZXJzLnNwbGl0KC9cXHI/XFxuLykuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgdmFyIHBhcnRzID0gbGluZS5zcGxpdCgnOicpXG4gICAgdmFyIGtleSA9IHBhcnRzLnNoaWZ0KCkudHJpbSgpXG4gICAgaWYgKGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gcGFydHMuam9pbignOicpLnRyaW0oKVxuICAgICAgaGVhZGVycy5hcHBlbmQoa2V5LCB2YWx1ZSlcbiAgICB9XG4gIH0pXG4gIHJldHVybiBoZWFkZXJzXG59XG5cbkJvZHkuY2FsbChSZXF1ZXN0LnByb3RvdHlwZSlcblxuZXhwb3J0IGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fVxuICB9XG5cbiAgdGhpcy50eXBlID0gJ2RlZmF1bHQnXG4gIHRoaXMuc3RhdHVzID0gb3B0aW9ucy5zdGF0dXMgPT09IHVuZGVmaW5lZCA/IDIwMCA6IG9wdGlvbnMuc3RhdHVzXG4gIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDBcbiAgdGhpcy5zdGF0dXNUZXh0ID0gJ3N0YXR1c1RleHQnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXR1c1RleHQgOiAnT0snXG4gIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJ1xuICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcbn1cblxuQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSlcblxuUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgUmVzcG9uc2UodGhpcy5fYm9keUluaXQsIHtcbiAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcbiAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh0aGlzLmhlYWRlcnMpLFxuICAgIHVybDogdGhpcy51cmxcbiAgfSlcbn1cblxuUmVzcG9uc2UuZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSlcbiAgcmVzcG9uc2UudHlwZSA9ICdlcnJvcidcbiAgcmV0dXJuIHJlc3BvbnNlXG59XG5cbnZhciByZWRpcmVjdFN0YXR1c2VzID0gWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XVxuXG5SZXNwb25zZS5yZWRpcmVjdCA9IGZ1bmN0aW9uKHVybCwgc3RhdHVzKSB7XG4gIGlmIChyZWRpcmVjdFN0YXR1c2VzLmluZGV4T2Yoc3RhdHVzKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBzdGF0dXMgY29kZScpXG4gIH1cblxuICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IHN0YXR1cywgaGVhZGVyczoge2xvY2F0aW9uOiB1cmx9fSlcbn1cblxuZXhwb3J0IHZhciBET01FeGNlcHRpb24gPSBzZWxmLkRPTUV4Y2VwdGlvblxudHJ5IHtcbiAgbmV3IERPTUV4Y2VwdGlvbigpXG59IGNhdGNoIChlcnIpIHtcbiAgRE9NRXhjZXB0aW9uID0gZnVuY3Rpb24obWVzc2FnZSwgbmFtZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2VcbiAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgdmFyIGVycm9yID0gRXJyb3IobWVzc2FnZSlcbiAgICB0aGlzLnN0YWNrID0gZXJyb3Iuc3RhY2tcbiAgfVxuICBET01FeGNlcHRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpXG4gIERPTUV4Y2VwdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBET01FeGNlcHRpb25cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZldGNoKGlucHV0LCBpbml0KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGlucHV0LCBpbml0KVxuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsICYmIHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybiByZWplY3QobmV3IERPTUV4Y2VwdGlvbignQWJvcnRlZCcsICdBYm9ydEVycm9yJykpXG4gICAgfVxuXG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG5cbiAgICBmdW5jdGlvbiBhYm9ydFhocigpIHtcbiAgICAgIHhoci5hYm9ydCgpXG4gICAgfVxuXG4gICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIHN0YXR1czogeGhyLnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHBhcnNlSGVhZGVycyh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgfHwgJycpXG4gICAgICB9XG4gICAgICBvcHRpb25zLnVybCA9ICdyZXNwb25zZVVSTCcgaW4geGhyID8geGhyLnJlc3BvbnNlVVJMIDogb3B0aW9ucy5oZWFkZXJzLmdldCgnWC1SZXF1ZXN0LVVSTCcpXG4gICAgICB2YXIgYm9keSA9ICdyZXNwb25zZScgaW4geGhyID8geGhyLnJlc3BvbnNlIDogeGhyLnJlc3BvbnNlVGV4dFxuICAgICAgcmVzb2x2ZShuZXcgUmVzcG9uc2UoYm9keSwgb3B0aW9ucykpXG4gICAgfVxuXG4gICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgfVxuXG4gICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICB9XG5cbiAgICB4aHIub25hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgIH1cblxuICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgdHJ1ZSlcblxuICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXG4gICAgfSBlbHNlIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnb21pdCcpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZVxuICAgIH1cblxuICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIgJiYgc3VwcG9ydC5ibG9iKSB7XG4gICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2Jsb2InXG4gICAgfVxuXG4gICAgcmVxdWVzdC5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKVxuICAgIH0pXG5cbiAgICBpZiAocmVxdWVzdC5zaWduYWwpIHtcbiAgICAgIHJlcXVlc3Quc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRYaHIpXG5cbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gRE9ORSAoc3VjY2VzcyBvciBmYWlsdXJlKVxuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICByZXF1ZXN0LnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgeGhyLnNlbmQodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXF1ZXN0Ll9ib2R5SW5pdClcbiAgfSlcbn1cblxuZmV0Y2gucG9seWZpbGwgPSB0cnVlXG5cbmlmICghc2VsZi5mZXRjaCkge1xuICBzZWxmLmZldGNoID0gZmV0Y2hcbiAgc2VsZi5IZWFkZXJzID0gSGVhZGVyc1xuICBzZWxmLlJlcXVlc3QgPSBSZXF1ZXN0XG4gIHNlbGYuUmVzcG9uc2UgPSBSZXNwb25zZVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXZlY3RvciB9IGZyb20gJy4uL0ZyYW1ld29yay9zcmMvdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IENzbV9jc21WZWN0b3IgPSBjc212ZWN0b3IuY3NtVmVjdG9yO1xuaW1wb3J0IGNzbVZlY3Rvcl9pdGVyYXRvciA9IGNzbXZlY3Rvci5pdGVyYXRvcjtcbmltcG9ydCB7IGdsIH0gZnJvbSAnLi9sYXBwZGVsZWdhdGUnO1xuXG4vKipcbiAqIOODhuOCr+OCueODgeODo+euoeeQhuOCr+ODqeOCuVxuICog55S75YOP6Kqt44G/6L6844G/44CB566h55CG44KS6KGM44GG44Kv44Op44K544CCXG4gKi9cbmV4cG9ydCBjbGFzcyBMQXBwVGV4dHVyZU1hbmFnZXIge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl90ZXh0dXJlcyA9IG5ldyBDc21fY3NtVmVjdG9yPFRleHR1cmVJbmZvPigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOino+aUvuOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgZm9yIChcbiAgICAgIGxldCBpdGU6IGNzbVZlY3Rvcl9pdGVyYXRvcjxUZXh0dXJlSW5mbz4gPSB0aGlzLl90ZXh0dXJlcy5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX3RleHR1cmVzLmVuZCgpKTtcbiAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgZ2wuZGVsZXRlVGV4dHVyZShpdGUucHRyKCkuaWQpO1xuICAgIH1cbiAgICB0aGlzLl90ZXh0dXJlcyA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog55S75YOP6Kqt44G/6L6844G/XG4gICAqXG4gICAqIEBwYXJhbSBmaWxlTmFtZSDoqq3jgb/ovrzjgoDnlLvlg4/jg5XjgqHjgqTjg6vjg5HjgrnlkI1cbiAgICogQHBhcmFtIHVzZVByZW11bHRpcGx5IFByZW11bHTlh6bnkIbjgpLmnInlirnjgavjgZnjgovjgYtcbiAgICogQHJldHVybiDnlLvlg4/mg4XloLHjgIHoqq3jgb/ovrzjgb/lpLHmlZfmmYLjga9udWxs44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgY3JlYXRlVGV4dHVyZUZyb21QbmdGaWxlKFxuICAgIGZpbGVOYW1lOiBzdHJpbmcsXG4gICAgdXNlUHJlbXVsdGlwbHk6IGJvb2xlYW4sXG4gICAgY2FsbGJhY2s6ICh0ZXh0dXJlSW5mbzogVGV4dHVyZUluZm8pID0+IHZvaWRcbiAgKTogdm9pZCB7XG4gICAgLy8gc2VhcmNoIGxvYWRlZCB0ZXh0dXJlIGFscmVhZHlcbiAgICBmb3IgKFxuICAgICAgbGV0IGl0ZTogY3NtVmVjdG9yX2l0ZXJhdG9yPFRleHR1cmVJbmZvPiA9IHRoaXMuX3RleHR1cmVzLmJlZ2luKCk7XG4gICAgICBpdGUubm90RXF1YWwodGhpcy5fdGV4dHVyZXMuZW5kKCkpO1xuICAgICAgaXRlLnByZUluY3JlbWVudCgpXG4gICAgKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGl0ZS5wdHIoKS5maWxlTmFtZSA9PSBmaWxlTmFtZSAmJlxuICAgICAgICBpdGUucHRyKCkudXNlUHJlbXVsdHBseSA9PSB1c2VQcmVtdWx0aXBseVxuICAgICAgKSB7XG4gICAgICAgIC8vIDLlm57nm67ku6XpmY3jga/jgq3jg6Pjg4Pjgrfjg6XjgYzkvb/nlKjjgZXjgozjgoso5b6F44Gh5pmC6ZaT44Gq44GXKVxuICAgICAgICAvLyBXZWJLaXTjgafjga/lkIzjgZhJbWFnZeOBrm9ubG9hZOOCkuWGjeW6puWRvOOBtuOBq+OBr+WGjeOCpOODs+OCueOCv+ODs+OCueOBjOW/heimgVxuICAgICAgICAvLyDoqbPntLDvvJpodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTAyNDE4MVxuICAgICAgICBpdGUucHRyKCkuaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgIGl0ZS5wdHIoKS5pbWcub25sb2FkID0gKCk6IHZvaWQgPT4gY2FsbGJhY2soaXRlLnB0cigpKTtcbiAgICAgICAgaXRlLnB0cigpLmltZy5zcmMgPSBmaWxlTmFtZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIOODh+ODvOOCv+OBruOCquODs+ODreODvOODieOCkuODiOODquOCrOODvOOBq+OBmeOCi1xuICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgIGltZy5vbmxvYWQgPSAoKTogdm9pZCA9PiB7XG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6Pjgqrjg5bjgrjjgqfjgq/jg4jjga7kvZzmiJBcbiAgICAgIGNvbnN0IHRleDogV2ViR0xUZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6PjgpLpgbjmip5cbiAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleCk7XG5cbiAgICAgIC8vIOODhuOCr+OCueODgeODo+OBq+ODlOOCr+OCu+ODq+OCkuabuOOBjei+vOOCgFxuICAgICAgZ2wudGV4UGFyYW1ldGVyaShcbiAgICAgICAgZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLFxuICAgICAgICBnbC5MSU5FQVJfTUlQTUFQX0xJTkVBUlxuICAgICAgKTtcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5MSU5FQVIpO1xuXG4gICAgICAvLyBQcmVtdWx05Yem55CG44KS6KGM44KP44Gb44KLXG4gICAgICBpZiAodXNlUHJlbXVsdGlwbHkpIHtcbiAgICAgICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCAxKTtcbiAgICAgIH1cblxuICAgICAgLy8g44OG44Kv44K544OB44Oj44Gr44OU44Kv44K744Or44KS5pu444GN6L6844KAXG4gICAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLlJHQkEsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIGltZyk7XG5cbiAgICAgIC8vIOODn+ODg+ODl+ODnuODg+ODl+OCkueUn+aIkFxuICAgICAgZ2wuZ2VuZXJhdGVNaXBtYXAoZ2wuVEVYVFVSRV8yRCk7XG5cbiAgICAgIC8vIOODhuOCr+OCueODgeODo+OCkuODkOOCpOODs+ODiVxuICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgbnVsbCk7XG5cbiAgICAgIGNvbnN0IHRleHR1cmVJbmZvOiBUZXh0dXJlSW5mbyA9IG5ldyBUZXh0dXJlSW5mbygpO1xuICAgICAgaWYgKHRleHR1cmVJbmZvICE9IG51bGwpIHtcbiAgICAgICAgdGV4dHVyZUluZm8uZmlsZU5hbWUgPSBmaWxlTmFtZTtcbiAgICAgICAgdGV4dHVyZUluZm8ud2lkdGggPSBpbWcud2lkdGg7XG4gICAgICAgIHRleHR1cmVJbmZvLmhlaWdodCA9IGltZy5oZWlnaHQ7XG4gICAgICAgIHRleHR1cmVJbmZvLmlkID0gdGV4O1xuICAgICAgICB0ZXh0dXJlSW5mby5pbWcgPSBpbWc7XG4gICAgICAgIHRleHR1cmVJbmZvLnVzZVByZW11bHRwbHkgPSB1c2VQcmVtdWx0aXBseTtcbiAgICAgICAgdGhpcy5fdGV4dHVyZXMucHVzaEJhY2sodGV4dHVyZUluZm8pO1xuICAgICAgfVxuXG4gICAgICBjYWxsYmFjayh0ZXh0dXJlSW5mbyk7XG4gICAgfTtcbiAgICBpbWcuc3JjID0gZmlsZU5hbWU7XG4gIH1cblxuICAvKipcbiAgICog55S75YOP44Gu6Kej5pS+XG4gICAqXG4gICAqIOmFjeWIl+OBq+WtmOWcqOOBmeOCi+eUu+WDj+WFqOOBpuOCkuino+aUvuOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIHJlbGVhc2VUZXh0dXJlcygpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3RleHR1cmVzLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICB0aGlzLl90ZXh0dXJlcy5zZXQoaSwgbnVsbCk7XG4gICAgfVxuXG4gICAgdGhpcy5fdGV4dHVyZXMuY2xlYXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnlLvlg4/jga7op6PmlL5cbiAgICpcbiAgICog5oyH5a6a44GX44Gf44OG44Kv44K544OB44Oj44Gu55S75YOP44KS6Kej5pS+44GZ44KL44CCXG4gICAqIEBwYXJhbSB0ZXh0dXJlIOino+aUvuOBmeOCi+ODhuOCr+OCueODgeODo1xuICAgKi9cbiAgcHVibGljIHJlbGVhc2VUZXh0dXJlQnlUZXh0dXJlKHRleHR1cmU6IFdlYkdMVGV4dHVyZSk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdGV4dHVyZXMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLl90ZXh0dXJlcy5hdChpKS5pZCAhPSB0ZXh0dXJlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl90ZXh0dXJlcy5zZXQoaSwgbnVsbCk7XG4gICAgICB0aGlzLl90ZXh0dXJlcy5yZW1vdmUoaSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog55S75YOP44Gu6Kej5pS+XG4gICAqXG4gICAqIOaMh+WumuOBl+OBn+WQjeWJjeOBrueUu+WDj+OCkuino+aUvuOBmeOCi+OAglxuICAgKiBAcGFyYW0gZmlsZU5hbWUg6Kej5pS+44GZ44KL55S75YOP44OV44Kh44Kk44Or44OR44K55ZCNXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZVRleHR1cmVCeUZpbGVQYXRoKGZpbGVOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3RleHR1cmVzLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5fdGV4dHVyZXMuYXQoaSkuZmlsZU5hbWUgPT0gZmlsZU5hbWUpIHtcbiAgICAgICAgdGhpcy5fdGV4dHVyZXMuc2V0KGksIG51bGwpO1xuICAgICAgICB0aGlzLl90ZXh0dXJlcy5yZW1vdmUoaSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF90ZXh0dXJlczogQ3NtX2NzbVZlY3RvcjxUZXh0dXJlSW5mbz47XG59XG5cbi8qKlxuICog55S75YOP5oOF5aCx5qeL6YCg5L2TXG4gKi9cbmV4cG9ydCBjbGFzcyBUZXh0dXJlSW5mbyB7XG4gIGltZzogSFRNTEltYWdlRWxlbWVudDsgLy8g55S75YOPXG4gIGlkOiBXZWJHTFRleHR1cmUgPSBudWxsOyAvLyDjg4bjgq/jgrnjg4Hjg6NcbiAgd2lkdGggPSAwOyAvLyDmqKrluYVcbiAgaGVpZ2h0ID0gMDsgLy8g6auY44GVXG4gIHVzZVByZW11bHRwbHk6IGJvb2xlYW47IC8vIFByZW11bHTlh6bnkIbjgpLmnInlirnjgavjgZnjgovjgYtcbiAgZmlsZU5hbWU6IHN0cmluZzsgLy8g44OV44Kh44Kk44Or5ZCNXG59XG4iXSwic291cmNlUm9vdCI6IiJ9